
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080039a4  080039a4  000049a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a1c  08003a1c  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a1c  08003a1c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a1c  08003a1c  00004a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a20  08003a20  00004a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003a24  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000068  08003a8c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003a8c  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000902b  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a73  00000000  00000000  0000e0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000559  00000000  00000000  00010230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b9e  00000000  00000000  00010789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2e0  00000000  00000000  00022327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068e8d  00000000  00000000  0002c607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c18  00000000  00000000  000954d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000970f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800398c 	.word	0x0800398c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800398c 	.word	0x0800398c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
void send_coordinates();
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a10      	ldr	r2, [pc, #64]	@ (8000294 <HAL_UART_RxCpltCallback+0x50>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d119      	bne.n	800028a <HAL_UART_RxCpltCallback+0x46>
        // Виводимо отримані дані тільки при зміні напряму
        if (rxdata == 'W' || rxdata == 'S' || rxdata == 'A' || rxdata == 'D') {
 8000256:	4b10      	ldr	r3, [pc, #64]	@ (8000298 <HAL_UART_RxCpltCallback+0x54>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b57      	cmp	r3, #87	@ 0x57
 800025c:	d00b      	beq.n	8000276 <HAL_UART_RxCpltCallback+0x32>
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <HAL_UART_RxCpltCallback+0x54>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b53      	cmp	r3, #83	@ 0x53
 8000264:	d007      	beq.n	8000276 <HAL_UART_RxCpltCallback+0x32>
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <HAL_UART_RxCpltCallback+0x54>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b41      	cmp	r3, #65	@ 0x41
 800026c:	d003      	beq.n	8000276 <HAL_UART_RxCpltCallback+0x32>
 800026e:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <HAL_UART_RxCpltCallback+0x54>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b44      	cmp	r3, #68	@ 0x44
 8000274:	d103      	bne.n	800027e <HAL_UART_RxCpltCallback+0x3a>
            direction = rxdata;
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <HAL_UART_RxCpltCallback+0x54>)
 8000278:	781a      	ldrb	r2, [r3, #0]
 800027a:	4b08      	ldr	r3, [pc, #32]	@ (800029c <HAL_UART_RxCpltCallback+0x58>)
 800027c:	701a      	strb	r2, [r3, #0]

        }

        HAL_UART_Receive_IT(&huart1, &rxdata, 1); // Продовжуємо прийом
 800027e:	4906      	ldr	r1, [pc, #24]	@ (8000298 <HAL_UART_RxCpltCallback+0x54>)
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <HAL_UART_RxCpltCallback+0x5c>)
 8000282:	2201      	movs	r2, #1
 8000284:	0018      	movs	r0, r3
 8000286:	f001 fd6a 	bl	8001d5e <HAL_UART_Receive_IT>
    }
}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	b002      	add	sp, #8
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	40013800 	.word	0x40013800
 8000298:	20000150 	.word	0x20000150
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000084 	.word	0x20000084

080002a4 <send_coordinates>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_coordinates() {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
    char buffer[20];
    sprintf(buffer, "%d, %d\r\n", x, y);
 80002aa:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <send_coordinates+0x38>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b0c      	ldr	r3, [pc, #48]	@ (80002e0 <send_coordinates+0x3c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	490c      	ldr	r1, [pc, #48]	@ (80002e4 <send_coordinates+0x40>)
 80002b4:	1d38      	adds	r0, r7, #4
 80002b6:	f002 fecd 	bl	8003054 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	0018      	movs	r0, r3
 80002be:	f7ff ff23 	bl	8000108 <strlen>
 80002c2:	0003      	movs	r3, r0
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	2301      	movs	r3, #1
 80002c8:	425b      	negs	r3, r3
 80002ca:	1d39      	adds	r1, r7, #4
 80002cc:	4806      	ldr	r0, [pc, #24]	@ (80002e8 <send_coordinates+0x44>)
 80002ce:	f001 fca7 	bl	8001c20 <HAL_UART_Transmit>
}
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b006      	add	sp, #24
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	20000000 	.word	0x20000000
 80002e0:	20000004 	.word	0x20000004
 80002e4:	080039a4 	.word	0x080039a4
 80002e8:	20000084 	.word	0x20000084

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f0:	f000 fa8e 	bl	8000810 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 f844 	bl	8000380 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f8:	f000 f8f0 	bl	80004dc <MX_GPIO_Init>
  MX_DMA_Init();
 80002fc:	f000 f8d0 	bl	80004a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000300:	f000 f89e 	bl	8000440 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxdata, 1);
 8000304:	4919      	ldr	r1, [pc, #100]	@ (800036c <main+0x80>)
 8000306:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <main+0x84>)
 8000308:	2201      	movs	r2, #1
 800030a:	0018      	movs	r0, r3
 800030c:	f001 fd27 	bl	8001d5e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
         switch (direction) {
 8000310:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <main+0x88>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b57      	cmp	r3, #87	@ 0x57
 8000316:	d008      	beq.n	800032a <main+0x3e>
 8000318:	dc1f      	bgt.n	800035a <main+0x6e>
 800031a:	2b53      	cmp	r3, #83	@ 0x53
 800031c:	d00b      	beq.n	8000336 <main+0x4a>
 800031e:	dc1c      	bgt.n	800035a <main+0x6e>
 8000320:	2b41      	cmp	r3, #65	@ 0x41
 8000322:	d00e      	beq.n	8000342 <main+0x56>
 8000324:	2b44      	cmp	r3, #68	@ 0x44
 8000326:	d012      	beq.n	800034e <main+0x62>
 8000328:	e017      	b.n	800035a <main+0x6e>
             case 'W': y++; break;  // Вгору
 800032a:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <main+0x8c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	1c5a      	adds	r2, r3, #1
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <main+0x8c>)
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	e011      	b.n	800035a <main+0x6e>
             case 'S': y--; break;  // Вниз
 8000336:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <main+0x8c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1e5a      	subs	r2, r3, #1
 800033c:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <main+0x8c>)
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	e00b      	b.n	800035a <main+0x6e>
             case 'A': x++; break;  // Вліво
 8000342:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <main+0x90>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	1c5a      	adds	r2, r3, #1
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <main+0x90>)
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	e005      	b.n	800035a <main+0x6e>
             case 'D': x--; break;  // Вправо
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <main+0x90>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <main+0x90>)
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	46c0      	nop			@ (mov r8, r8)
         }

         send_coordinates(); // Надсилаємо координати через UART
 800035a:	f7ff ffa3 	bl	80002a4 <send_coordinates>
         HAL_Delay(500); // Регулює швидкість руху
 800035e:	23fa      	movs	r3, #250	@ 0xfa
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fab8 	bl	80008d8 <HAL_Delay>
         switch (direction) {
 8000368:	e7d2      	b.n	8000310 <main+0x24>
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	20000150 	.word	0x20000150
 8000370:	20000084 	.word	0x20000084
 8000374:	20000008 	.word	0x20000008
 8000378:	20000004 	.word	0x20000004
 800037c:	20000000 	.word	0x20000000

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b097      	sub	sp, #92	@ 0x5c
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	2428      	movs	r4, #40	@ 0x28
 8000388:	193b      	adds	r3, r7, r4
 800038a:	0018      	movs	r0, r3
 800038c:	2330      	movs	r3, #48	@ 0x30
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f002 fe81 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000396:	2318      	movs	r3, #24
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	0018      	movs	r0, r3
 800039c:	2310      	movs	r3, #16
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f002 fe79 	bl	8003098 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	0018      	movs	r0, r3
 80003aa:	2314      	movs	r3, #20
 80003ac:	001a      	movs	r2, r3
 80003ae:	2100      	movs	r1, #0
 80003b0:	f002 fe72 	bl	8003098 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b4:	0021      	movs	r1, r4
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2201      	movs	r2, #1
 80003c0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2202      	movs	r2, #2
 80003c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2280      	movs	r2, #128	@ 0x80
 80003cc:	0252      	lsls	r2, r2, #9
 80003ce:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2280      	movs	r2, #128	@ 0x80
 80003d4:	0352      	lsls	r2, r2, #13
 80003d6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2200      	movs	r2, #0
 80003dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 fe8d 	bl	8001100 <HAL_RCC_OscConfig>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ea:	f000 f8cf 	bl	800058c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ee:	2118      	movs	r1, #24
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2207      	movs	r2, #7
 80003f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2202      	movs	r2, #2
 80003fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2101      	movs	r1, #1
 800040c:	0018      	movs	r0, r3
 800040e:	f001 f991 	bl	8001734 <HAL_RCC_ClockConfig>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000416:	f000 f8b9 	bl	800058c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2201      	movs	r2, #1
 800041e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fac7 	bl	80019bc <HAL_RCCEx_PeriphCLKConfig>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000432:	f000 f8ab 	bl	800058c <Error_Handler>
  }
}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b017      	add	sp, #92	@ 0x5c
 800043c:	bd90      	pop	{r4, r7, pc}
	...

08000440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000444:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000446:	4a15      	ldr	r2, [pc, #84]	@ (800049c <MX_USART1_UART_Init+0x5c>)
 8000448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 800044c:	2296      	movs	r2, #150	@ 0x96
 800044e:	0192      	lsls	r2, r2, #6
 8000450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000482:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <MX_USART1_UART_Init+0x58>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fb77 	bl	8001b78 <HAL_UART_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800048e:	f000 f87d 	bl	800058c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000084 	.word	0x20000084
 800049c:	40013800 	.word	0x40013800

080004a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a6:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_DMA_Init+0x38>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <MX_DMA_Init+0x38>)
 80004ac:	2101      	movs	r1, #1
 80004ae:	430a      	orrs	r2, r1
 80004b0:	615a      	str	r2, [r3, #20]
 80004b2:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <MX_DMA_Init+0x38>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	2201      	movs	r2, #1
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	200a      	movs	r0, #10
 80004c4:	f000 fad8 	bl	8000a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004c8:	200a      	movs	r0, #10
 80004ca:	f000 faea 	bl	8000aa2 <HAL_NVIC_EnableIRQ>

}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b002      	add	sp, #8
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000

080004dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b089      	sub	sp, #36	@ 0x24
 80004e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	240c      	movs	r4, #12
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0018      	movs	r0, r3
 80004e8:	2314      	movs	r3, #20
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f002 fdd3 	bl	8003098 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	4b24      	ldr	r3, [pc, #144]	@ (8000584 <MX_GPIO_Init+0xa8>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <MX_GPIO_Init+0xa8>)
 80004f8:	2180      	movs	r1, #128	@ 0x80
 80004fa:	03c9      	lsls	r1, r1, #15
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <MX_GPIO_Init+0xa8>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	2380      	movs	r3, #128	@ 0x80
 8000506:	03db      	lsls	r3, r3, #15
 8000508:	4013      	ands	r3, r2
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <MX_GPIO_Init+0xa8>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <MX_GPIO_Init+0xa8>)
 8000514:	2180      	movs	r1, #128	@ 0x80
 8000516:	0309      	lsls	r1, r1, #12
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <MX_GPIO_Init+0xa8>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	031b      	lsls	r3, r3, #12
 8000524:	4013      	ands	r3, r2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <MX_GPIO_Init+0xa8>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <MX_GPIO_Init+0xa8>)
 8000530:	2180      	movs	r1, #128	@ 0x80
 8000532:	0289      	lsls	r1, r1, #10
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <MX_GPIO_Init+0xa8>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	029b      	lsls	r3, r3, #10
 8000540:	4013      	ands	r3, r2
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000546:	23c0      	movs	r3, #192	@ 0xc0
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	480f      	ldr	r0, [pc, #60]	@ (8000588 <MX_GPIO_Init+0xac>)
 800054c:	2200      	movs	r2, #0
 800054e:	0019      	movs	r1, r3
 8000550:	f000 fdb8 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	22c0      	movs	r2, #192	@ 0xc0
 8000558:	0092      	lsls	r2, r2, #2
 800055a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2201      	movs	r2, #1
 8000560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056e:	193b      	adds	r3, r7, r4
 8000570:	4a05      	ldr	r2, [pc, #20]	@ (8000588 <MX_GPIO_Init+0xac>)
 8000572:	0019      	movs	r1, r3
 8000574:	0010      	movs	r0, r2
 8000576:	f000 fc35 	bl	8000de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b009      	add	sp, #36	@ 0x24
 8000580:	bd90      	pop	{r4, r7, pc}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	40021000 	.word	0x40021000
 8000588:	48000800 	.word	0x48000800

0800058c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <HAL_MspInit+0x44>)
 80005a0:	699a      	ldr	r2, [r3, #24]
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <HAL_MspInit+0x44>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	430a      	orrs	r2, r1
 80005a8:	619a      	str	r2, [r3, #24]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <HAL_MspInit+0x44>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <HAL_MspInit+0x44>)
 80005b8:	69da      	ldr	r2, [r3, #28]
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <HAL_MspInit+0x44>)
 80005bc:	2180      	movs	r1, #128	@ 0x80
 80005be:	0549      	lsls	r1, r1, #21
 80005c0:	430a      	orrs	r2, r1
 80005c2:	61da      	str	r2, [r3, #28]
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <HAL_MspInit+0x44>)
 80005c6:	69da      	ldr	r2, [r3, #28]
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	055b      	lsls	r3, r3, #21
 80005cc:	4013      	ands	r3, r2
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b08b      	sub	sp, #44	@ 0x2c
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	2414      	movs	r4, #20
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	0018      	movs	r0, r3
 80005ee:	2314      	movs	r3, #20
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f002 fd50 	bl	8003098 <memset>
  if(huart->Instance==USART1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a34      	ldr	r2, [pc, #208]	@ (80006d0 <HAL_UART_MspInit+0xf0>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d161      	bne.n	80006c6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000602:	4b34      	ldr	r3, [pc, #208]	@ (80006d4 <HAL_UART_MspInit+0xf4>)
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	4b33      	ldr	r3, [pc, #204]	@ (80006d4 <HAL_UART_MspInit+0xf4>)
 8000608:	2180      	movs	r1, #128	@ 0x80
 800060a:	01c9      	lsls	r1, r1, #7
 800060c:	430a      	orrs	r2, r1
 800060e:	619a      	str	r2, [r3, #24]
 8000610:	4b30      	ldr	r3, [pc, #192]	@ (80006d4 <HAL_UART_MspInit+0xf4>)
 8000612:	699a      	ldr	r2, [r3, #24]
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	01db      	lsls	r3, r3, #7
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <HAL_UART_MspInit+0xf4>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <HAL_UART_MspInit+0xf4>)
 8000624:	2180      	movs	r1, #128	@ 0x80
 8000626:	0289      	lsls	r1, r1, #10
 8000628:	430a      	orrs	r2, r1
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <HAL_UART_MspInit+0xf4>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	@ 0x80
 8000632:	029b      	lsls	r3, r3, #10
 8000634:	4013      	ands	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	22c0      	movs	r2, #192	@ 0xc0
 800063e:	00d2      	lsls	r2, r2, #3
 8000640:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2202      	movs	r2, #2
 8000648:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2203      	movs	r2, #3
 8000654:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2201      	movs	r2, #1
 800065a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	187a      	adds	r2, r7, r1
 800065e:	2390      	movs	r3, #144	@ 0x90
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fbbd 	bl	8000de4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 800066c:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <HAL_UART_MspInit+0xfc>)
 800066e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 800067e:	2280      	movs	r2, #128	@ 0x80
 8000680:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 8000690:	2220      	movs	r2, #32
 8000692:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000694:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fa1d 	bl	8000adc <HAL_DMA_Init>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80006a6:	f7ff ff71 	bl	800058c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 80006ae:	675a      	str	r2, [r3, #116]	@ 0x74
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <HAL_UART_MspInit+0xf8>)
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	201b      	movs	r0, #27
 80006bc:	f000 f9dc 	bl	8000a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006c0:	201b      	movs	r0, #27
 80006c2:	f000 f9ee 	bl	8000aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b00b      	add	sp, #44	@ 0x2c
 80006cc:	bd90      	pop	{r4, r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	40013800 	.word	0x40013800
 80006d4:	40021000 	.word	0x40021000
 80006d8:	2000010c 	.word	0x2000010c
 80006dc:	40020030 	.word	0x40020030

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f4:	46c0      	nop			@ (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f8ca 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	46c0      	nop			@ (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000718:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <DMA1_Channel2_3_IRQHandler+0x14>)
 800071a:	0018      	movs	r0, r3
 800071c:	f000 faa3 	bl	8000c66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	2000010c 	.word	0x2000010c

0800072c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000730:	4b03      	ldr	r3, [pc, #12]	@ (8000740 <USART1_IRQHandler+0x14>)
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fb6a 	bl	8001e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	20000084 	.word	0x20000084

08000744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074c:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <_sbrk+0x5c>)
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <_sbrk+0x60>)
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <_sbrk+0x64>)
 8000762:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <_sbrk+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	18d3      	adds	r3, r2, r3
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000774:	f002 fc98 	bl	80030a8 <__errno>
 8000778:	0003      	movs	r3, r0
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077e:	2301      	movs	r3, #1
 8000780:	425b      	negs	r3, r3
 8000782:	e009      	b.n	8000798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078a:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	18d2      	adds	r2, r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <_sbrk+0x64>)
 8000794:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b006      	add	sp, #24
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20002000 	.word	0x20002000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	20000154 	.word	0x20000154
 80007ac:	200002a8 	.word	0x200002a8

080007b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007bc:	480d      	ldr	r0, [pc, #52]	@ (80007f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007be:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80007c0:	f7ff fff6 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c6:	490d      	ldr	r1, [pc, #52]	@ (80007fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000800 <LoopForever+0xe>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000808 <LoopForever+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ea:	f002 fc63 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ee:	f7ff fd7d 	bl	80002ec <main>

080007f2 <LoopForever>:

LoopForever:
    b LoopForever
 80007f2:	e7fe      	b.n	80007f2 <LoopForever>
  ldr   r0, =_estack
 80007f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000800:	08003a24 	.word	0x08003a24
  ldr r2, =_sbss
 8000804:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000808:	200002a4 	.word	0x200002a4

0800080c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_COMP_IRQHandler>
	...

08000810 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000814:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <HAL_Init+0x24>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_Init+0x24>)
 800081a:	2110      	movs	r1, #16
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f809 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000826:	f7ff feb7 	bl	8000598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <HAL_InitTick+0x5c>)
 8000842:	681c      	ldr	r4, [r3, #0]
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <HAL_InitTick+0x60>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	0019      	movs	r1, r3
 800084a:	23fa      	movs	r3, #250	@ 0xfa
 800084c:	0098      	lsls	r0, r3, #2
 800084e:	f7ff fc6d 	bl	800012c <__udivsi3>
 8000852:	0003      	movs	r3, r0
 8000854:	0019      	movs	r1, r3
 8000856:	0020      	movs	r0, r4
 8000858:	f7ff fc68 	bl	800012c <__udivsi3>
 800085c:	0003      	movs	r3, r0
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f92f 	bl	8000ac2 <HAL_SYSTICK_Config>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e00f      	b.n	800088c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d80b      	bhi.n	800088a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	2301      	movs	r3, #1
 8000876:	425b      	negs	r3, r3
 8000878:	2200      	movs	r2, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f000 f8fc 	bl	8000a78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_InitTick+0x64>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b003      	add	sp, #12
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	2000000c 	.word	0x2000000c
 8000898:	20000014 	.word	0x20000014
 800089c:	20000010 	.word	0x20000010

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	001a      	movs	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	18d2      	adds	r2, r2, r3
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <HAL_IncTick+0x20>)
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	20000014 	.word	0x20000014
 80008c0:	20000158 	.word	0x20000158

080008c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	@ (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	20000158 	.word	0x20000158

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff fff0 	bl	80008c4 <HAL_GetTick>
 80008e4:	0003      	movs	r3, r0
 80008e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	001a      	movs	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	f7ff ffe0 	bl	80008c4 <HAL_GetTick>
 8000904:	0002      	movs	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	20000014 	.word	0x20000014

08000920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	0002      	movs	r2, r0
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b7f      	cmp	r3, #127	@ 0x7f
 8000932:	d809      	bhi.n	8000948 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	001a      	movs	r2, r3
 800093a:	231f      	movs	r3, #31
 800093c:	401a      	ands	r2, r3
 800093e:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <__NVIC_EnableIRQ+0x30>)
 8000940:	2101      	movs	r1, #1
 8000942:	4091      	lsls	r1, r2
 8000944:	000a      	movs	r2, r1
 8000946:	601a      	str	r2, [r3, #0]
  }
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	0002      	movs	r2, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b7f      	cmp	r3, #127	@ 0x7f
 8000968:	d828      	bhi.n	80009bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a28 <__NVIC_SetPriority+0xd4>)
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b25b      	sxtb	r3, r3
 8000972:	089b      	lsrs	r3, r3, #2
 8000974:	33c0      	adds	r3, #192	@ 0xc0
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	589b      	ldr	r3, [r3, r2]
 800097a:	1dfa      	adds	r2, r7, #7
 800097c:	7812      	ldrb	r2, [r2, #0]
 800097e:	0011      	movs	r1, r2
 8000980:	2203      	movs	r2, #3
 8000982:	400a      	ands	r2, r1
 8000984:	00d2      	lsls	r2, r2, #3
 8000986:	21ff      	movs	r1, #255	@ 0xff
 8000988:	4091      	lsls	r1, r2
 800098a:	000a      	movs	r2, r1
 800098c:	43d2      	mvns	r2, r2
 800098e:	401a      	ands	r2, r3
 8000990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	22ff      	movs	r2, #255	@ 0xff
 8000998:	401a      	ands	r2, r3
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	0018      	movs	r0, r3
 80009a0:	2303      	movs	r3, #3
 80009a2:	4003      	ands	r3, r0
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a8:	481f      	ldr	r0, [pc, #124]	@ (8000a28 <__NVIC_SetPriority+0xd4>)
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	430a      	orrs	r2, r1
 80009b4:	33c0      	adds	r3, #192	@ 0xc0
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ba:	e031      	b.n	8000a20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <__NVIC_SetPriority+0xd8>)
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0019      	movs	r1, r3
 80009c4:	230f      	movs	r3, #15
 80009c6:	400b      	ands	r3, r1
 80009c8:	3b08      	subs	r3, #8
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3306      	adds	r3, #6
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	18d3      	adds	r3, r2, r3
 80009d2:	3304      	adds	r3, #4
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	1dfa      	adds	r2, r7, #7
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	0011      	movs	r1, r2
 80009dc:	2203      	movs	r2, #3
 80009de:	400a      	ands	r2, r1
 80009e0:	00d2      	lsls	r2, r2, #3
 80009e2:	21ff      	movs	r1, #255	@ 0xff
 80009e4:	4091      	lsls	r1, r2
 80009e6:	000a      	movs	r2, r1
 80009e8:	43d2      	mvns	r2, r2
 80009ea:	401a      	ands	r2, r3
 80009ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	019b      	lsls	r3, r3, #6
 80009f2:	22ff      	movs	r2, #255	@ 0xff
 80009f4:	401a      	ands	r2, r3
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	0018      	movs	r0, r3
 80009fc:	2303      	movs	r3, #3
 80009fe:	4003      	ands	r3, r0
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a04:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <__NVIC_SetPriority+0xd8>)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	001c      	movs	r4, r3
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	4023      	ands	r3, r4
 8000a10:	3b08      	subs	r3, #8
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	430a      	orrs	r2, r1
 8000a16:	3306      	adds	r3, #6
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	18c3      	adds	r3, r0, r3
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b003      	add	sp, #12
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	2380      	movs	r3, #128	@ 0x80
 8000a3e:	045b      	lsls	r3, r3, #17
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d301      	bcc.n	8000a48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a44:	2301      	movs	r3, #1
 8000a46:	e010      	b.n	8000a6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <SysTick_Config+0x44>)
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a50:	2301      	movs	r3, #1
 8000a52:	425b      	negs	r3, r3
 8000a54:	2103      	movs	r1, #3
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff ff7c 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <SysTick_Config+0x44>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a62:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <SysTick_Config+0x44>)
 8000a64:	2207      	movs	r2, #7
 8000a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	e000e010 	.word	0xe000e010

08000a78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	210f      	movs	r1, #15
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	1c02      	adds	r2, r0, #0
 8000a88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff5d 	bl	8000954 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff ff33 	bl	8000920 <__NVIC_EnableIRQ>
}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ffaf 	bl	8000a30 <SysTick_Config>
 8000ad2:	0003      	movs	r3, r0
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e036      	b.n	8000b60 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2221      	movs	r2, #33	@ 0x21
 8000af6:	2102      	movs	r1, #2
 8000af8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <HAL_DMA_Init+0x8c>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 f932 	bl	8000dac <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2221      	movs	r2, #33	@ 0x21
 8000b52:	2101      	movs	r1, #1
 8000b54:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2220      	movs	r2, #32
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b004      	add	sp, #16
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	ffffc00f 	.word	0xffffc00f

08000b6c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2221      	movs	r2, #33	@ 0x21
 8000b78:	5c9b      	ldrb	r3, [r3, r2]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d008      	beq.n	8000b92 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2204      	movs	r2, #4
 8000b84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2220      	movs	r2, #32
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e020      	b.n	8000bd4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	210e      	movs	r1, #14
 8000b9e:	438a      	bics	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	438a      	bics	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2221      	movs	r2, #33	@ 0x21
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2220      	movs	r2, #32
 8000bce:	2100      	movs	r1, #0
 8000bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be4:	210f      	movs	r1, #15
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2221      	movs	r2, #33	@ 0x21
 8000bf0:	5c9b      	ldrb	r3, [r3, r2]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d006      	beq.n	8000c06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	e028      	b.n	8000c58 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	210e      	movs	r1, #14
 8000c12:	438a      	bics	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	438a      	bics	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4091      	lsls	r1, r2
 8000c32:	000a      	movs	r2, r1
 8000c34:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2221      	movs	r2, #33	@ 0x21
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2220      	movs	r2, #32
 8000c42:	2100      	movs	r1, #0
 8000c44:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d004      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	0010      	movs	r0, r2
 8000c56:	4798      	blx	r3
    }
  }
  return status;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b084      	sub	sp, #16
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	2204      	movs	r2, #4
 8000c84:	409a      	lsls	r2, r3
 8000c86:	0013      	movs	r3, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	d024      	beq.n	8000cd8 <HAL_DMA_IRQHandler+0x72>
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2204      	movs	r2, #4
 8000c92:	4013      	ands	r3, r2
 8000c94:	d020      	beq.n	8000cd8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d107      	bne.n	8000cb2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2104      	movs	r1, #4
 8000cae:	438a      	bics	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cba:	2104      	movs	r1, #4
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d100      	bne.n	8000ccc <HAL_DMA_IRQHandler+0x66>
 8000cca:	e06a      	b.n	8000da2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	0010      	movs	r0, r2
 8000cd4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000cd6:	e064      	b.n	8000da2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	2202      	movs	r2, #2
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d02b      	beq.n	8000d40 <HAL_DMA_IRQHandler+0xda>
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2202      	movs	r2, #2
 8000cec:	4013      	ands	r3, r2
 8000cee:	d027      	beq.n	8000d40 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2220      	movs	r2, #32
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d10b      	bne.n	8000d14 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	210a      	movs	r1, #10
 8000d08:	438a      	bics	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2221      	movs	r2, #33	@ 0x21
 8000d10:	2101      	movs	r1, #1
 8000d12:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4091      	lsls	r1, r2
 8000d20:	000a      	movs	r2, r1
 8000d22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2220      	movs	r2, #32
 8000d28:	2100      	movs	r1, #0
 8000d2a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d036      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	0010      	movs	r0, r2
 8000d3c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000d3e:	e030      	b.n	8000da2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	2208      	movs	r2, #8
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d028      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x13c>
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2208      	movs	r2, #8
 8000d54:	4013      	ands	r3, r2
 8000d56:	d024      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	210e      	movs	r1, #14
 8000d64:	438a      	bics	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d70:	2101      	movs	r1, #1
 8000d72:	4091      	lsls	r1, r2
 8000d74:	000a      	movs	r2, r1
 8000d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2221      	movs	r2, #33	@ 0x21
 8000d82:	2101      	movs	r1, #1
 8000d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2220      	movs	r2, #32
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	0010      	movs	r0, r2
 8000d9e:	4798      	blx	r3
    }
  }
}
 8000da0:	e7ff      	b.n	8000da2 <HAL_DMA_IRQHandler+0x13c>
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <DMA_CalcBaseAndBitshift+0x30>)
 8000dba:	4694      	mov	ip, r2
 8000dbc:	4463      	add	r3, ip
 8000dbe:	2114      	movs	r1, #20
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff f9b3 	bl	800012c <__udivsi3>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	009a      	lsls	r2, r3, #2
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a03      	ldr	r2, [pc, #12]	@ (8000de0 <DMA_CalcBaseAndBitshift+0x34>)
 8000dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	bffdfff8 	.word	0xbffdfff8
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e14f      	b.n	8001094 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d100      	bne.n	8000e0c <HAL_GPIO_Init+0x28>
 8000e0a:	e140      	b.n	800108e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2203      	movs	r2, #3
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	409a      	lsls	r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	43da      	mvns	r2, r3
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	409a      	lsls	r2, r3
 8000e46:	0013      	movs	r3, r2
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	2201      	movs	r2, #1
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d017      	beq.n	8000ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d123      	bne.n	8000f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	58d3      	ldr	r3, [r2, r3]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2207      	movs	r2, #7
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	43da      	mvns	r2, r3
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2107      	movs	r1, #7
 8000efa:	400b      	ands	r3, r1
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	6939      	ldr	r1, [r7, #16]
 8000f14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	401a      	ands	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	23c0      	movs	r3, #192	@ 0xc0
 8000f50:	029b      	lsls	r3, r3, #10
 8000f52:	4013      	ands	r3, r2
 8000f54:	d100      	bne.n	8000f58 <HAL_GPIO_Init+0x174>
 8000f56:	e09a      	b.n	800108e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b54      	ldr	r3, [pc, #336]	@ (80010ac <HAL_GPIO_Init+0x2c8>)
 8000f5a:	699a      	ldr	r2, [r3, #24]
 8000f5c:	4b53      	ldr	r3, [pc, #332]	@ (80010ac <HAL_GPIO_Init+0x2c8>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	430a      	orrs	r2, r1
 8000f62:	619a      	str	r2, [r3, #24]
 8000f64:	4b51      	ldr	r3, [pc, #324]	@ (80010ac <HAL_GPIO_Init+0x2c8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f70:	4a4f      	ldr	r2, [pc, #316]	@ (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	589b      	ldr	r3, [r3, r2]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	2203      	movs	r2, #3
 8000f82:	4013      	ands	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	2390      	movs	r3, #144	@ 0x90
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x1e2>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a44      	ldr	r2, [pc, #272]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x1de>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a43      	ldr	r2, [pc, #268]	@ (80010b8 <HAL_GPIO_Init+0x2d4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x1da>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a42      	ldr	r2, [pc, #264]	@ (80010bc <HAL_GPIO_Init+0x2d8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x1d6>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x1e4>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x1e4>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x1e4>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x1e4>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	2103      	movs	r1, #3
 8000fcc:	400a      	ands	r2, r1
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	@ (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <HAL_GPIO_Init+0x2dc>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	2380      	movs	r3, #128	@ 0x80
 8000ffc:	035b      	lsls	r3, r3, #13
 8000ffe:	4013      	ands	r3, r2
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800100a:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <HAL_GPIO_Init+0x2dc>)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <HAL_GPIO_Init+0x2dc>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43da      	mvns	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	2380      	movs	r3, #128	@ 0x80
 8001026:	039b      	lsls	r3, r3, #14
 8001028:	4013      	ands	r3, r2
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <HAL_GPIO_Init+0x2dc>)
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <HAL_GPIO_Init+0x2dc>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	2380      	movs	r3, #128	@ 0x80
 8001050:	029b      	lsls	r3, r3, #10
 8001052:	4013      	ands	r3, r2
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_GPIO_Init+0x2dc>)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_GPIO_Init+0x2dc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43da      	mvns	r2, r3
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	4013      	ands	r3, r2
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <HAL_GPIO_Init+0x2dc>)
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	40da      	lsrs	r2, r3
 800109c:	1e13      	subs	r3, r2, #0
 800109e:	d000      	beq.n	80010a2 <HAL_GPIO_Init+0x2be>
 80010a0:	e6a8      	b.n	8000df4 <HAL_GPIO_Init+0x10>
  } 
}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b006      	add	sp, #24
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000
 80010b4:	48000400 	.word	0x48000400
 80010b8:	48000800 	.word	0x48000800
 80010bc:	48000c00 	.word	0x48000c00
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	0008      	movs	r0, r1
 80010ce:	0011      	movs	r1, r2
 80010d0:	1cbb      	adds	r3, r7, #2
 80010d2:	1c02      	adds	r2, r0, #0
 80010d4:	801a      	strh	r2, [r3, #0]
 80010d6:	1c7b      	adds	r3, r7, #1
 80010d8:	1c0a      	adds	r2, r1, #0
 80010da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010dc:	1c7b      	adds	r3, r7, #1
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d004      	beq.n	80010ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e4:	1cbb      	adds	r3, r7, #2
 80010e6:	881a      	ldrh	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ec:	e003      	b.n	80010f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ee:	1cbb      	adds	r3, r7, #2
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e301      	b.n	8001716 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2201      	movs	r2, #1
 8001118:	4013      	ands	r3, r2
 800111a:	d100      	bne.n	800111e <HAL_RCC_OscConfig+0x1e>
 800111c:	e08d      	b.n	800123a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800111e:	4bc3      	ldr	r3, [pc, #780]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	220c      	movs	r2, #12
 8001124:	4013      	ands	r3, r2
 8001126:	2b04      	cmp	r3, #4
 8001128:	d00e      	beq.n	8001148 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800112a:	4bc0      	ldr	r3, [pc, #768]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	220c      	movs	r2, #12
 8001130:	4013      	ands	r3, r2
 8001132:	2b08      	cmp	r3, #8
 8001134:	d116      	bne.n	8001164 <HAL_RCC_OscConfig+0x64>
 8001136:	4bbd      	ldr	r3, [pc, #756]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	401a      	ands	r2, r3
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	429a      	cmp	r2, r3
 8001146:	d10d      	bne.n	8001164 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	4bb8      	ldr	r3, [pc, #736]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_RCC_OscConfig+0x56>
 8001154:	e070      	b.n	8001238 <HAL_RCC_OscConfig+0x138>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d000      	beq.n	8001160 <HAL_RCC_OscConfig+0x60>
 800115e:	e06b      	b.n	8001238 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e2d8      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d107      	bne.n	800117c <HAL_RCC_OscConfig+0x7c>
 800116c:	4baf      	ldr	r3, [pc, #700]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4bae      	ldr	r3, [pc, #696]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001172:	2180      	movs	r1, #128	@ 0x80
 8001174:	0249      	lsls	r1, r1, #9
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e02f      	b.n	80011dc <HAL_RCC_OscConfig+0xdc>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10c      	bne.n	800119e <HAL_RCC_OscConfig+0x9e>
 8001184:	4ba9      	ldr	r3, [pc, #676]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4ba8      	ldr	r3, [pc, #672]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800118a:	49a9      	ldr	r1, [pc, #676]	@ (8001430 <HAL_RCC_OscConfig+0x330>)
 800118c:	400a      	ands	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	4ba6      	ldr	r3, [pc, #664]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4ba5      	ldr	r3, [pc, #660]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001196:	49a7      	ldr	r1, [pc, #668]	@ (8001434 <HAL_RCC_OscConfig+0x334>)
 8001198:	400a      	ands	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e01e      	b.n	80011dc <HAL_RCC_OscConfig+0xdc>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d10e      	bne.n	80011c4 <HAL_RCC_OscConfig+0xc4>
 80011a6:	4ba1      	ldr	r3, [pc, #644]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4ba0      	ldr	r3, [pc, #640]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	02c9      	lsls	r1, r1, #11
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	4b9d      	ldr	r3, [pc, #628]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b9c      	ldr	r3, [pc, #624]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	0249      	lsls	r1, r1, #9
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0xdc>
 80011c4:	4b99      	ldr	r3, [pc, #612]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b98      	ldr	r3, [pc, #608]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80011ca:	4999      	ldr	r1, [pc, #612]	@ (8001430 <HAL_RCC_OscConfig+0x330>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	4b96      	ldr	r3, [pc, #600]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b95      	ldr	r3, [pc, #596]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80011d6:	4997      	ldr	r1, [pc, #604]	@ (8001434 <HAL_RCC_OscConfig+0x334>)
 80011d8:	400a      	ands	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d014      	beq.n	800120e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fb6e 	bl	80008c4 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ee:	f7ff fb69 	bl	80008c4 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	@ 0x64
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e28a      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001200:	4b8a      	ldr	r3, [pc, #552]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	029b      	lsls	r3, r3, #10
 8001208:	4013      	ands	r3, r2
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0xee>
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fb59 	bl	80008c4 <HAL_GetTick>
 8001212:	0003      	movs	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fb54 	bl	80008c4 <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e275      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	4b80      	ldr	r3, [pc, #512]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x118>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d100      	bne.n	8001246 <HAL_RCC_OscConfig+0x146>
 8001244:	e069      	b.n	800131a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001246:	4b79      	ldr	r3, [pc, #484]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	220c      	movs	r2, #12
 800124c:	4013      	ands	r3, r2
 800124e:	d00b      	beq.n	8001268 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001250:	4b76      	ldr	r3, [pc, #472]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	220c      	movs	r2, #12
 8001256:	4013      	ands	r3, r2
 8001258:	2b08      	cmp	r3, #8
 800125a:	d11c      	bne.n	8001296 <HAL_RCC_OscConfig+0x196>
 800125c:	4b73      	ldr	r3, [pc, #460]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	025b      	lsls	r3, r3, #9
 8001264:	4013      	ands	r3, r2
 8001266:	d116      	bne.n	8001296 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001268:	4b70      	ldr	r3, [pc, #448]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d005      	beq.n	800127e <HAL_RCC_OscConfig+0x17e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d001      	beq.n	800127e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e24b      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127e:	4b6b      	ldr	r3, [pc, #428]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	22f8      	movs	r2, #248	@ 0xf8
 8001284:	4393      	bics	r3, r2
 8001286:	0019      	movs	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	00da      	lsls	r2, r3, #3
 800128e:	4b67      	ldr	r3, [pc, #412]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001294:	e041      	b.n	800131a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d024      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800129e:	4b63      	ldr	r3, [pc, #396]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b62      	ldr	r3, [pc, #392]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb0b 	bl	80008c4 <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fb06 	bl	80008c4 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e227      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	4b59      	ldr	r3, [pc, #356]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	d0f1      	beq.n	80012b4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b56      	ldr	r3, [pc, #344]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	22f8      	movs	r2, #248	@ 0xf8
 80012d6:	4393      	bics	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00da      	lsls	r2, r3, #3
 80012e0:	4b52      	ldr	r3, [pc, #328]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e018      	b.n	800131a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e8:	4b50      	ldr	r3, [pc, #320]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b4f      	ldr	r3, [pc, #316]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	438a      	bics	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fae6 	bl	80008c4 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fae1 	bl	80008c4 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e202      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001310:	4b46      	ldr	r3, [pc, #280]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d1f1      	bne.n	80012fe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2208      	movs	r2, #8
 8001320:	4013      	ands	r3, r2
 8001322:	d036      	beq.n	8001392 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d019      	beq.n	8001360 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132c:	4b3f      	ldr	r3, [pc, #252]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800132e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001330:	4b3e      	ldr	r3, [pc, #248]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fac4 	bl	80008c4 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fabf 	bl	80008c4 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e1e0      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001354:	4b35      	ldr	r3, [pc, #212]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	2202      	movs	r2, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d0f1      	beq.n	8001342 <HAL_RCC_OscConfig+0x242>
 800135e:	e018      	b.n	8001392 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001360:	4b32      	ldr	r3, [pc, #200]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001364:	4b31      	ldr	r3, [pc, #196]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136c:	f7ff faaa 	bl	80008c4 <HAL_GetTick>
 8001370:	0003      	movs	r3, r0
 8001372:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff faa5 	bl	80008c4 <HAL_GetTick>
 800137a:	0002      	movs	r2, r0
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e1c6      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001388:	4b28      	ldr	r3, [pc, #160]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d1f1      	bne.n	8001376 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
 800139a:	d100      	bne.n	800139e <HAL_RCC_OscConfig+0x29e>
 800139c:	e0b4      	b.n	8001508 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139e:	201f      	movs	r0, #31
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80013a8:	69da      	ldr	r2, [r3, #28]
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	055b      	lsls	r3, r3, #21
 80013ae:	4013      	ands	r3, r2
 80013b0:	d110      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80013b4:	69da      	ldr	r2, [r3, #28]
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80013b8:	2180      	movs	r1, #128	@ 0x80
 80013ba:	0549      	lsls	r1, r1, #21
 80013bc:	430a      	orrs	r2, r1
 80013be:	61da      	str	r2, [r3, #28]
 80013c0:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 80013c2:	69da      	ldr	r2, [r3, #28]
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	055b      	lsls	r3, r3, #21
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013ce:	183b      	adds	r3, r7, r0
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <HAL_RCC_OscConfig+0x338>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4013      	ands	r3, r2
 80013de:	d11a      	bne.n	8001416 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_RCC_OscConfig+0x338>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <HAL_RCC_OscConfig+0x338>)
 80013e6:	2180      	movs	r1, #128	@ 0x80
 80013e8:	0049      	lsls	r1, r1, #1
 80013ea:	430a      	orrs	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fa69 	bl	80008c4 <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f8:	f7ff fa64 	bl	80008c4 <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e185      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <HAL_RCC_OscConfig+0x338>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4013      	ands	r3, r2
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10e      	bne.n	800143c <HAL_RCC_OscConfig+0x33c>
 800141e:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	4b02      	ldr	r3, [pc, #8]	@ (800142c <HAL_RCC_OscConfig+0x32c>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	621a      	str	r2, [r3, #32]
 800142a:	e035      	b.n	8001498 <HAL_RCC_OscConfig+0x398>
 800142c:	40021000 	.word	0x40021000
 8001430:	fffeffff 	.word	0xfffeffff
 8001434:	fffbffff 	.word	0xfffbffff
 8001438:	40007000 	.word	0x40007000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x35e>
 8001444:	4bb6      	ldr	r3, [pc, #728]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	4bb5      	ldr	r3, [pc, #724]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800144a:	2101      	movs	r1, #1
 800144c:	438a      	bics	r2, r1
 800144e:	621a      	str	r2, [r3, #32]
 8001450:	4bb3      	ldr	r3, [pc, #716]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	4bb2      	ldr	r3, [pc, #712]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001456:	2104      	movs	r1, #4
 8001458:	438a      	bics	r2, r1
 800145a:	621a      	str	r2, [r3, #32]
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x398>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b05      	cmp	r3, #5
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x380>
 8001466:	4bae      	ldr	r3, [pc, #696]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001468:	6a1a      	ldr	r2, [r3, #32]
 800146a:	4bad      	ldr	r3, [pc, #692]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800146c:	2104      	movs	r1, #4
 800146e:	430a      	orrs	r2, r1
 8001470:	621a      	str	r2, [r3, #32]
 8001472:	4bab      	ldr	r3, [pc, #684]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	4baa      	ldr	r3, [pc, #680]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001478:	2101      	movs	r1, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	621a      	str	r2, [r3, #32]
 800147e:	e00b      	b.n	8001498 <HAL_RCC_OscConfig+0x398>
 8001480:	4ba7      	ldr	r3, [pc, #668]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	4ba6      	ldr	r3, [pc, #664]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001486:	2101      	movs	r1, #1
 8001488:	438a      	bics	r2, r1
 800148a:	621a      	str	r2, [r3, #32]
 800148c:	4ba4      	ldr	r3, [pc, #656]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800148e:	6a1a      	ldr	r2, [r3, #32]
 8001490:	4ba3      	ldr	r3, [pc, #652]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001492:	2104      	movs	r1, #4
 8001494:	438a      	bics	r2, r1
 8001496:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d014      	beq.n	80014ca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fa10 	bl	80008c4 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e009      	b.n	80014be <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fa0b 	bl	80008c4 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	4a9b      	ldr	r2, [pc, #620]	@ (8001724 <HAL_RCC_OscConfig+0x624>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e12b      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	4b98      	ldr	r3, [pc, #608]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x3aa>
 80014c8:	e013      	b.n	80014f2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff f9fb 	bl	80008c4 <HAL_GetTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d2:	e009      	b.n	80014e8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f7ff f9f6 	bl	80008c4 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	4a91      	ldr	r2, [pc, #580]	@ (8001724 <HAL_RCC_OscConfig+0x624>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e116      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	4b8d      	ldr	r3, [pc, #564]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	2202      	movs	r2, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014f2:	231f      	movs	r3, #31
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fc:	4b88      	ldr	r3, [pc, #544]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80014fe:	69da      	ldr	r2, [r3, #28]
 8001500:	4b87      	ldr	r3, [pc, #540]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001502:	4989      	ldr	r1, [pc, #548]	@ (8001728 <HAL_RCC_OscConfig+0x628>)
 8001504:	400a      	ands	r2, r1
 8001506:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2210      	movs	r2, #16
 800150e:	4013      	ands	r3, r2
 8001510:	d063      	beq.n	80015da <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d12a      	bne.n	8001570 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800151a:	4b81      	ldr	r3, [pc, #516]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800151c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800151e:	4b80      	ldr	r3, [pc, #512]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001520:	2104      	movs	r1, #4
 8001522:	430a      	orrs	r2, r1
 8001524:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001526:	4b7e      	ldr	r3, [pc, #504]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800152a:	4b7d      	ldr	r3, [pc, #500]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800152c:	2101      	movs	r1, #1
 800152e:	430a      	orrs	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff f9c7 	bl	80008c4 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800153c:	f7ff f9c2 	bl	80008c4 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0e3      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800154e:	4b74      	ldr	r3, [pc, #464]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	d0f1      	beq.n	800153c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001558:	4b71      	ldr	r3, [pc, #452]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800155a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800155c:	22f8      	movs	r2, #248	@ 0xf8
 800155e:	4393      	bics	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	00da      	lsls	r2, r3, #3
 8001568:	4b6d      	ldr	r3, [pc, #436]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
 800156e:	e034      	b.n	80015da <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	3305      	adds	r3, #5
 8001576:	d111      	bne.n	800159c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001578:	4b69      	ldr	r3, [pc, #420]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800157a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800157c:	4b68      	ldr	r3, [pc, #416]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800157e:	2104      	movs	r1, #4
 8001580:	438a      	bics	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001584:	4b66      	ldr	r3, [pc, #408]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001588:	22f8      	movs	r2, #248	@ 0xf8
 800158a:	4393      	bics	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	00da      	lsls	r2, r3, #3
 8001594:	4b62      	ldr	r3, [pc, #392]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001596:	430a      	orrs	r2, r1
 8001598:	635a      	str	r2, [r3, #52]	@ 0x34
 800159a:	e01e      	b.n	80015da <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800159c:	4b60      	ldr	r3, [pc, #384]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80015a2:	2104      	movs	r1, #4
 80015a4:	430a      	orrs	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80015aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	438a      	bics	r2, r1
 80015b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff f986 	bl	80008c4 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015be:	f7ff f981 	bl	80008c4 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0a2      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80015d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d1f1      	bne.n	80015be <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d100      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4e4>
 80015e2:	e097      	b.n	8001714 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	220c      	movs	r2, #12
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x4f2>
 80015f0:	e06b      	b.n	80016ca <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d14c      	bne.n	8001694 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b48      	ldr	r3, [pc, #288]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001600:	494a      	ldr	r1, [pc, #296]	@ (800172c <HAL_RCC_OscConfig+0x62c>)
 8001602:	400a      	ands	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff f95d 	bl	80008c4 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff f958 	bl	80008c4 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e079      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	049b      	lsls	r3, r3, #18
 800162a:	4013      	ands	r3, r2
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162e:	4b3c      	ldr	r3, [pc, #240]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	220f      	movs	r2, #15
 8001634:	4393      	bics	r3, r2
 8001636:	0019      	movs	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800163c:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800163e:	430a      	orrs	r2, r1
 8001640:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001642:	4b37      	ldr	r3, [pc, #220]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a3a      	ldr	r2, [pc, #232]	@ (8001730 <HAL_RCC_OscConfig+0x630>)
 8001648:	4013      	ands	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	431a      	orrs	r2, r3
 8001656:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001662:	2180      	movs	r1, #128	@ 0x80
 8001664:	0449      	lsls	r1, r1, #17
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff f92b 	bl	80008c4 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f926 	bl	80008c4 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e047      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001686:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	049b      	lsls	r3, r3, #18
 800168e:	4013      	ands	r3, r2
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x574>
 8001692:	e03f      	b.n	8001714 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 800169a:	4924      	ldr	r1, [pc, #144]	@ (800172c <HAL_RCC_OscConfig+0x62c>)
 800169c:	400a      	ands	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff f910 	bl	80008c4 <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff f90b 	bl	80008c4 <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e02c      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	049b      	lsls	r3, r3, #18
 80016c4:	4013      	ands	r3, r2
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x5aa>
 80016c8:	e024      	b.n	8001714 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e01f      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016dc:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_RCC_OscConfig+0x620>)
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	025b      	lsls	r3, r3, #9
 80016e8:	401a      	ands	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d10e      	bne.n	8001710 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	220f      	movs	r2, #15
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	23f0      	movs	r3, #240	@ 0xf0
 8001704:	039b      	lsls	r3, r3, #14
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b008      	add	sp, #32
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	40021000 	.word	0x40021000
 8001724:	00001388 	.word	0x00001388
 8001728:	efffffff 	.word	0xefffffff
 800172c:	feffffff 	.word	0xfeffffff
 8001730:	ffc2ffff 	.word	0xffc2ffff

08001734 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0b3      	b.n	80018b0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b5b      	ldr	r3, [pc, #364]	@ (80018b8 <HAL_RCC_ClockConfig+0x184>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	4013      	ands	r3, r2
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d911      	bls.n	800177a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b58      	ldr	r3, [pc, #352]	@ (80018b8 <HAL_RCC_ClockConfig+0x184>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2201      	movs	r2, #1
 800175c:	4393      	bics	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	4b55      	ldr	r3, [pc, #340]	@ (80018b8 <HAL_RCC_ClockConfig+0x184>)
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001768:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_RCC_ClockConfig+0x184>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2201      	movs	r2, #1
 800176e:	4013      	ands	r3, r2
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e09a      	b.n	80018b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d015      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2204      	movs	r2, #4
 800178a:	4013      	ands	r3, r2
 800178c:	d006      	beq.n	800179c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800178e:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 8001794:	21e0      	movs	r1, #224	@ 0xe0
 8001796:	00c9      	lsls	r1, r1, #3
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b47      	ldr	r3, [pc, #284]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	22f0      	movs	r2, #240	@ 0xf0
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	4b44      	ldr	r3, [pc, #272]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	d040      	beq.n	800183c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b3e      	ldr	r3, [pc, #248]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	@ 0x80
 80017c8:	029b      	lsls	r3, r3, #10
 80017ca:	4013      	ands	r3, r2
 80017cc:	d114      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e06e      	b.n	80018b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	@ 0x80
 80017e0:	049b      	lsls	r3, r3, #18
 80017e2:	4013      	ands	r3, r2
 80017e4:	d108      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e062      	b.n	80018b0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e05b      	b.n	80018b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f8:	4b30      	ldr	r3, [pc, #192]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2203      	movs	r2, #3
 80017fe:	4393      	bics	r3, r2
 8001800:	0019      	movs	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff f85a 	bl	80008c4 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001814:	e009      	b.n	800182a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001816:	f7ff f855 	bl	80008c4 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4a27      	ldr	r2, [pc, #156]	@ (80018c0 <HAL_RCC_ClockConfig+0x18c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e042      	b.n	80018b0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	220c      	movs	r2, #12
 8001830:	401a      	ands	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1ec      	bne.n	8001816 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <HAL_RCC_ClockConfig+0x184>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d211      	bcs.n	800186e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b1b      	ldr	r3, [pc, #108]	@ (80018b8 <HAL_RCC_ClockConfig+0x184>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	4393      	bics	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_RCC_ClockConfig+0x184>)
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <HAL_RCC_ClockConfig+0x184>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d001      	beq.n	800186e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e020      	b.n	80018b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2204      	movs	r2, #4
 8001874:	4013      	ands	r3, r2
 8001876:	d009      	beq.n	800188c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a11      	ldr	r2, [pc, #68]	@ (80018c4 <HAL_RCC_ClockConfig+0x190>)
 800187e:	4013      	ands	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800188c:	f000 f820 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 8001890:	0001      	movs	r1, r0
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <HAL_RCC_ClockConfig+0x188>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	220f      	movs	r2, #15
 800189a:	4013      	ands	r3, r2
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_RCC_ClockConfig+0x194>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	000a      	movs	r2, r1
 80018a2:	40da      	lsrs	r2, r3
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_RCC_ClockConfig+0x198>)
 80018a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f7fe ffc5 	bl	8000838 <HAL_InitTick>
  
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b004      	add	sp, #16
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	00001388 	.word	0x00001388
 80018c4:	fffff8ff 	.word	0xfffff8ff
 80018c8:	080039b0 	.word	0x080039b0
 80018cc:	2000000c 	.word	0x2000000c

080018d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80018ea:	4b20      	ldr	r3, [pc, #128]	@ (800196c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	220c      	movs	r2, #12
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d002      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x30>
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x36>
 80018fe:	e02c      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001902:	613b      	str	r3, [r7, #16]
      break;
 8001904:	e02c      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	220f      	movs	r2, #15
 800190c:	4013      	ands	r3, r2
 800190e:	4a19      	ldr	r2, [pc, #100]	@ (8001974 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001918:	220f      	movs	r2, #15
 800191a:	4013      	ands	r3, r2
 800191c:	4a16      	ldr	r2, [pc, #88]	@ (8001978 <HAL_RCC_GetSysClockFreq+0xa8>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	4013      	ands	r3, r2
 800192a:	d009      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4810      	ldr	r0, [pc, #64]	@ (8001970 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001930:	f7fe fbfc 	bl	800012c <__udivsi3>
 8001934:	0003      	movs	r3, r0
 8001936:	001a      	movs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4353      	muls	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e009      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	000a      	movs	r2, r1
 8001944:	0152      	lsls	r2, r2, #5
 8001946:	1a52      	subs	r2, r2, r1
 8001948:	0193      	lsls	r3, r2, #6
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	185b      	adds	r3, r3, r1
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
      break;
 8001958:	e002      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_GetSysClockFreq+0xa0>)
 800195c:	613b      	str	r3, [r7, #16]
      break;
 800195e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001960:	693b      	ldr	r3, [r7, #16]
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b006      	add	sp, #24
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	40021000 	.word	0x40021000
 8001970:	007a1200 	.word	0x007a1200
 8001974:	080039c8 	.word	0x080039c8
 8001978:	080039d8 	.word	0x080039d8

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b02      	ldr	r3, [pc, #8]	@ (800198c <HAL_RCC_GetHCLKFreq+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	2000000c 	.word	0x2000000c

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001994:	f7ff fff2 	bl	800197c <HAL_RCC_GetHCLKFreq>
 8001998:	0001      	movs	r1, r0
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	2207      	movs	r2, #7
 80019a2:	4013      	ands	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	40d9      	lsrs	r1, r3
 80019aa:	000b      	movs	r3, r1
}    
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	40021000 	.word	0x40021000
 80019b8:	080039c0 	.word	0x080039c0

080019bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019d8:	e08e      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019da:	2017      	movs	r0, #23
 80019dc:	183b      	adds	r3, r7, r0
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	055b      	lsls	r3, r3, #21
 80019ea:	4013      	ands	r3, r2
 80019ec:	d110      	bne.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019f4:	2180      	movs	r1, #128	@ 0x80
 80019f6:	0549      	lsls	r1, r1, #21
 80019f8:	430a      	orrs	r2, r1
 80019fa:	61da      	str	r2, [r3, #28]
 80019fc:	4b58      	ldr	r3, [pc, #352]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	055b      	lsls	r3, r3, #21
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0a:	183b      	adds	r3, r7, r0
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a10:	4b54      	ldr	r3, [pc, #336]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d11a      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1c:	4b51      	ldr	r3, [pc, #324]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b50      	ldr	r3, [pc, #320]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a22:	2180      	movs	r1, #128	@ 0x80
 8001a24:	0049      	lsls	r1, r1, #1
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7fe ff4b 	bl	80008c4 <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	e008      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a34:	f7fe ff46 	bl	80008c4 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	@ 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e087      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a46:	4b47      	ldr	r3, [pc, #284]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a52:	4b43      	ldr	r3, [pc, #268]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	23c0      	movs	r3, #192	@ 0xc0
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d034      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	23c0      	movs	r3, #192	@ 0xc0
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d02c      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a74:	4b3a      	ldr	r3, [pc, #232]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4a3b      	ldr	r2, [pc, #236]	@ (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a7e:	4b38      	ldr	r3, [pc, #224]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a80:	6a1a      	ldr	r2, [r3, #32]
 8001a82:	4b37      	ldr	r3, [pc, #220]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a84:	2180      	movs	r1, #128	@ 0x80
 8001a86:	0249      	lsls	r1, r1, #9
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a8c:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a8e:	6a1a      	ldr	r2, [r3, #32]
 8001a90:	4b33      	ldr	r3, [pc, #204]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a92:	4936      	ldr	r1, [pc, #216]	@ (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a98:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7fe ff0d 	bl	80008c4 <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	e009      	b.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7fe ff08 	bl	80008c4 <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	4a2d      	ldr	r2, [pc, #180]	@ (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e048      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ace:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a25      	ldr	r2, [pc, #148]	@ (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae2:	2317      	movs	r3, #23
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001aee:	69da      	ldr	r2, [r3, #28]
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001af2:	4920      	ldr	r1, [pc, #128]	@ (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b02:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	2203      	movs	r2, #3
 8001b08:	4393      	bics	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b12:	430a      	orrs	r2, r1
 8001b14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d009      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	2210      	movs	r2, #16
 8001b26:	4393      	bics	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d009      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b44:	2240      	movs	r2, #64	@ 0x40
 8001b46:	4393      	bics	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b006      	add	sp, #24
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40007000 	.word	0x40007000
 8001b68:	fffffcff 	.word	0xfffffcff
 8001b6c:	fffeffff 	.word	0xfffeffff
 8001b70:	00001388 	.word	0x00001388
 8001b74:	efffffff 	.word	0xefffffff

08001b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e044      	b.n	8001c14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d107      	bne.n	8001ba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2278      	movs	r2, #120	@ 0x78
 8001b96:	2100      	movs	r1, #0
 8001b98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7fe fd1f 	bl	80005e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2224      	movs	r2, #36	@ 0x24
 8001ba6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fd5e 	bl	8002684 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f000 fc1a 	bl	8002404 <UART_SetConfig>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e01c      	b.n	8001c14 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	490d      	ldr	r1, [pc, #52]	@ (8001c1c <HAL_UART_Init+0xa4>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	212a      	movs	r1, #42	@ 0x2a
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 fded 	bl	80027ec <UART_CheckIdleState>
 8001c12:	0003      	movs	r3, r0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	ffffb7ff 	.word	0xffffb7ff

08001c20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	1dbb      	adds	r3, r7, #6
 8001c2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c34:	2b20      	cmp	r3, #32
 8001c36:	d000      	beq.n	8001c3a <HAL_UART_Transmit+0x1a>
 8001c38:	e08c      	b.n	8001d54 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_UART_Transmit+0x28>
 8001c40:	1dbb      	adds	r3, r7, #6
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e084      	b.n	8001d56 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	015b      	lsls	r3, r3, #5
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d109      	bne.n	8001c6c <HAL_UART_Transmit+0x4c>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e074      	b.n	8001d56 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2284      	movs	r2, #132	@ 0x84
 8001c70:	2100      	movs	r1, #0
 8001c72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2221      	movs	r2, #33	@ 0x21
 8001c78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c7a:	f7fe fe23 	bl	80008c4 <HAL_GetTick>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1dba      	adds	r2, r7, #6
 8001c86:	2150      	movs	r1, #80	@ 0x50
 8001c88:	8812      	ldrh	r2, [r2, #0]
 8001c8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1dba      	adds	r2, r7, #6
 8001c90:	2152      	movs	r1, #82	@ 0x52
 8001c92:	8812      	ldrh	r2, [r2, #0]
 8001c94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	015b      	lsls	r3, r3, #5
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d108      	bne.n	8001cb4 <HAL_UART_Transmit+0x94>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d104      	bne.n	8001cb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	e003      	b.n	8001cbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cbc:	e02f      	b.n	8001d1e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2180      	movs	r1, #128	@ 0x80
 8001ccc:	f000 fe36 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8001cd0:	1e03      	subs	r3, r0, #0
 8001cd2:	d004      	beq.n	8001cde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e03b      	b.n	8001d56 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10b      	bne.n	8001cfc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	881a      	ldrh	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	05d2      	lsls	r2, r2, #23
 8001cee:	0dd2      	lsrs	r2, r2, #23
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	e007      	b.n	8001d0c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2252      	movs	r2, #82	@ 0x52
 8001d10:	5a9b      	ldrh	r3, [r3, r2]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b299      	uxth	r1, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2252      	movs	r2, #82	@ 0x52
 8001d1c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2252      	movs	r2, #82	@ 0x52
 8001d22:	5a9b      	ldrh	r3, [r3, r2]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1c9      	bne.n	8001cbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	0013      	movs	r3, r2
 8001d34:	2200      	movs	r2, #0
 8001d36:	2140      	movs	r1, #64	@ 0x40
 8001d38:	f000 fe00 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e005      	b.n	8001d56 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e000      	b.n	8001d56 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001d54:	2302      	movs	r3, #2
  }
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b008      	add	sp, #32
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b088      	sub	sp, #32
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	1dbb      	adds	r3, r7, #6
 8001d6a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2280      	movs	r2, #128	@ 0x80
 8001d70:	589b      	ldr	r3, [r3, r2]
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d145      	bne.n	8001e02 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_UART_Receive_IT+0x26>
 8001d7c:	1dbb      	adds	r3, r7, #6
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e03d      	b.n	8001e04 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d109      	bne.n	8001da8 <HAL_UART_Receive_IT+0x4a>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e02d      	b.n	8001e04 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2380      	movs	r3, #128	@ 0x80
 8001db6:	041b      	lsls	r3, r3, #16
 8001db8:	4013      	ands	r3, r2
 8001dba:	d019      	beq.n	8001df0 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8001dc0:	613b      	str	r3, [r7, #16]
  return(result);
 8001dc2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f383 8810 	msr	PRIMASK, r3
}
 8001dd0:	46c0      	nop			@ (mov r8, r8)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	04c9      	lsls	r1, r1, #19
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f383 8810 	msr	PRIMASK, r3
}
 8001dee:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001df0:	1dbb      	adds	r3, r7, #6
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 fe0f 	bl	8002a1c <UART_Start_Receive_IT>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	e000      	b.n	8001e04 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
  }
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b008      	add	sp, #32
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b0ab      	sub	sp, #172	@ 0xac
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	22a4      	movs	r2, #164	@ 0xa4
 8001e1c:	18b9      	adds	r1, r7, r2
 8001e1e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	20a0      	movs	r0, #160	@ 0xa0
 8001e28:	1839      	adds	r1, r7, r0
 8001e2a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	219c      	movs	r1, #156	@ 0x9c
 8001e34:	1879      	adds	r1, r7, r1
 8001e36:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e38:	0011      	movs	r1, r2
 8001e3a:	18bb      	adds	r3, r7, r2
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a99      	ldr	r2, [pc, #612]	@ (80020a4 <HAL_UART_IRQHandler+0x298>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	2298      	movs	r2, #152	@ 0x98
 8001e44:	18bc      	adds	r4, r7, r2
 8001e46:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001e48:	18bb      	adds	r3, r7, r2
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d114      	bne.n	8001e7a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2220      	movs	r2, #32
 8001e56:	4013      	ands	r3, r2
 8001e58:	d00f      	beq.n	8001e7a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	4013      	ands	r3, r2
 8001e62:	d00a      	beq.n	8001e7a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d100      	bne.n	8001e6e <HAL_UART_IRQHandler+0x62>
 8001e6c:	e29e      	b.n	80023ac <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	0010      	movs	r0, r2
 8001e76:	4798      	blx	r3
      }
      return;
 8001e78:	e298      	b.n	80023ac <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e7a:	2398      	movs	r3, #152	@ 0x98
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d100      	bne.n	8001e86 <HAL_UART_IRQHandler+0x7a>
 8001e84:	e114      	b.n	80020b0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001e86:	239c      	movs	r3, #156	@ 0x9c
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d106      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001e92:	23a0      	movs	r3, #160	@ 0xa0
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a83      	ldr	r2, [pc, #524]	@ (80020a8 <HAL_UART_IRQHandler+0x29c>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d100      	bne.n	8001ea0 <HAL_UART_IRQHandler+0x94>
 8001e9e:	e107      	b.n	80020b0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ea0:	23a4      	movs	r3, #164	@ 0xa4
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d012      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xc6>
 8001eac:	23a0      	movs	r3, #160	@ 0xa0
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2284      	movs	r2, #132	@ 0x84
 8001ec6:	589b      	ldr	r3, [r3, r2]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2184      	movs	r1, #132	@ 0x84
 8001ed0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ed2:	23a4      	movs	r3, #164	@ 0xa4
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	4013      	ands	r3, r2
 8001edc:	d011      	beq.n	8001f02 <HAL_UART_IRQHandler+0xf6>
 8001ede:	239c      	movs	r3, #156	@ 0x9c
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2284      	movs	r2, #132	@ 0x84
 8001ef6:	589b      	ldr	r3, [r3, r2]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2184      	movs	r1, #132	@ 0x84
 8001f00:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f02:	23a4      	movs	r3, #164	@ 0xa4
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d011      	beq.n	8001f32 <HAL_UART_IRQHandler+0x126>
 8001f0e:	239c      	movs	r3, #156	@ 0x9c
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	d00b      	beq.n	8001f32 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2284      	movs	r2, #132	@ 0x84
 8001f26:	589b      	ldr	r3, [r3, r2]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2184      	movs	r1, #132	@ 0x84
 8001f30:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f32:	23a4      	movs	r3, #164	@ 0xa4
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d017      	beq.n	8001f6e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f3e:	23a0      	movs	r3, #160	@ 0xa0
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2220      	movs	r2, #32
 8001f46:	4013      	ands	r3, r2
 8001f48:	d105      	bne.n	8001f56 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001f4a:	239c      	movs	r3, #156	@ 0x9c
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f54:	d00b      	beq.n	8001f6e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2284      	movs	r2, #132	@ 0x84
 8001f62:	589b      	ldr	r3, [r3, r2]
 8001f64:	2208      	movs	r2, #8
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2184      	movs	r1, #132	@ 0x84
 8001f6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001f6e:	23a4      	movs	r3, #164	@ 0xa4
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_UART_IRQHandler+0x198>
 8001f7c:	23a0      	movs	r3, #160	@ 0xa0
 8001f7e:	18fb      	adds	r3, r7, r3
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	04db      	lsls	r3, r3, #19
 8001f86:	4013      	ands	r3, r2
 8001f88:	d00c      	beq.n	8001fa4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2284      	movs	r2, #132	@ 0x84
 8001f98:	589b      	ldr	r3, [r3, r2]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2184      	movs	r1, #132	@ 0x84
 8001fa2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2284      	movs	r2, #132	@ 0x84
 8001fa8:	589b      	ldr	r3, [r3, r2]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d100      	bne.n	8001fb0 <HAL_UART_IRQHandler+0x1a4>
 8001fae:	e1ff      	b.n	80023b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fb0:	23a4      	movs	r3, #164	@ 0xa4
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d00e      	beq.n	8001fda <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001fbc:	23a0      	movs	r3, #160	@ 0xa0
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d008      	beq.n	8001fda <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2284      	movs	r2, #132	@ 0x84
 8001fde:	589b      	ldr	r3, [r3, r2]
 8001fe0:	2194      	movs	r1, #148	@ 0x94
 8001fe2:	187a      	adds	r2, r7, r1
 8001fe4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b40      	cmp	r3, #64	@ 0x40
 8001ff2:	d004      	beq.n	8001ffe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2228      	movs	r2, #40	@ 0x28
 8001ffa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001ffc:	d047      	beq.n	800208e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 fdc1 	bl	8002b88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2240      	movs	r2, #64	@ 0x40
 800200e:	4013      	ands	r3, r2
 8002010:	2b40      	cmp	r3, #64	@ 0x40
 8002012:	d137      	bne.n	8002084 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002014:	f3ef 8310 	mrs	r3, PRIMASK
 8002018:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800201a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800201c:	2090      	movs	r0, #144	@ 0x90
 800201e:	183a      	adds	r2, r7, r0
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	2301      	movs	r3, #1
 8002024:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002028:	f383 8810 	msr	PRIMASK, r3
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2140      	movs	r1, #64	@ 0x40
 800203a:	438a      	bics	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	183b      	adds	r3, r7, r0
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002046:	f383 8810 	msr	PRIMASK, r3
}
 800204a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002050:	2b00      	cmp	r3, #0
 8002052:	d012      	beq.n	800207a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002058:	4a14      	ldr	r2, [pc, #80]	@ (80020ac <HAL_UART_IRQHandler+0x2a0>)
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002060:	0018      	movs	r0, r3
 8002062:	f7fe fdbb 	bl	8000bdc <HAL_DMA_Abort_IT>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d01a      	beq.n	80020a0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002074:	0018      	movs	r0, r3
 8002076:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002078:	e012      	b.n	80020a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f9ad 	bl	80023dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002082:	e00d      	b.n	80020a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f9a8 	bl	80023dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208c:	e008      	b.n	80020a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	0018      	movs	r0, r3
 8002092:	f000 f9a3 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2284      	movs	r2, #132	@ 0x84
 800209a:	2100      	movs	r1, #0
 800209c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800209e:	e187      	b.n	80023b0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a0:	46c0      	nop			@ (mov r8, r8)
    return;
 80020a2:	e185      	b.n	80023b0 <HAL_UART_IRQHandler+0x5a4>
 80020a4:	0000080f 	.word	0x0000080f
 80020a8:	04000120 	.word	0x04000120
 80020ac:	08002c51 	.word	0x08002c51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d000      	beq.n	80020ba <HAL_UART_IRQHandler+0x2ae>
 80020b8:	e139      	b.n	800232e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80020ba:	23a4      	movs	r3, #164	@ 0xa4
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2210      	movs	r2, #16
 80020c2:	4013      	ands	r3, r2
 80020c4:	d100      	bne.n	80020c8 <HAL_UART_IRQHandler+0x2bc>
 80020c6:	e132      	b.n	800232e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80020c8:	23a0      	movs	r3, #160	@ 0xa0
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2210      	movs	r2, #16
 80020d0:	4013      	ands	r3, r2
 80020d2:	d100      	bne.n	80020d6 <HAL_UART_IRQHandler+0x2ca>
 80020d4:	e12b      	b.n	800232e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2210      	movs	r2, #16
 80020dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2240      	movs	r2, #64	@ 0x40
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b40      	cmp	r3, #64	@ 0x40
 80020ea:	d000      	beq.n	80020ee <HAL_UART_IRQHandler+0x2e2>
 80020ec:	e09f      	b.n	800222e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	217e      	movs	r1, #126	@ 0x7e
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d100      	bne.n	8002106 <HAL_UART_IRQHandler+0x2fa>
 8002104:	e156      	b.n	80023b4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2258      	movs	r2, #88	@ 0x58
 800210a:	5a9b      	ldrh	r3, [r3, r2]
 800210c:	187a      	adds	r2, r7, r1
 800210e:	8812      	ldrh	r2, [r2, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d300      	bcc.n	8002116 <HAL_UART_IRQHandler+0x30a>
 8002114:	e14e      	b.n	80023b4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	187a      	adds	r2, r7, r1
 800211a:	215a      	movs	r1, #90	@ 0x5a
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b20      	cmp	r3, #32
 8002128:	d06f      	beq.n	800220a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800212a:	f3ef 8310 	mrs	r3, PRIMASK
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002132:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002134:	2301      	movs	r3, #1
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213a:	f383 8810 	msr	PRIMASK, r3
}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	499e      	ldr	r1, [pc, #632]	@ (80023c4 <HAL_UART_IRQHandler+0x5b8>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002152:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002156:	f383 8810 	msr	PRIMASK, r3
}
 800215a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800215c:	f3ef 8310 	mrs	r3, PRIMASK
 8002160:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002164:	677b      	str	r3, [r7, #116]	@ 0x74
 8002166:	2301      	movs	r3, #1
 8002168:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800216a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800216c:	f383 8810 	msr	PRIMASK, r3
}
 8002170:	46c0      	nop			@ (mov r8, r8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	438a      	bics	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002184:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002188:	f383 8810 	msr	PRIMASK, r3
}
 800218c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218e:	f3ef 8310 	mrs	r3, PRIMASK
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002196:	673b      	str	r3, [r7, #112]	@ 0x70
 8002198:	2301      	movs	r3, #1
 800219a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800219e:	f383 8810 	msr	PRIMASK, r3
}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2140      	movs	r1, #64	@ 0x40
 80021b0:	438a      	bics	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021b6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ba:	f383 8810 	msr	PRIMASK, r3
}
 80021be:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2280      	movs	r2, #128	@ 0x80
 80021c4:	2120      	movs	r1, #32
 80021c6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ce:	f3ef 8310 	mrs	r3, PRIMASK
 80021d2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80021d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021d8:	2301      	movs	r3, #1
 80021da:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021de:	f383 8810 	msr	PRIMASK, r3
}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2110      	movs	r1, #16
 80021f0:	438a      	bics	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021fa:	f383 8810 	msr	PRIMASK, r3
}
 80021fe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002204:	0018      	movs	r0, r3
 8002206:	f7fe fcb1 	bl	8000b6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2258      	movs	r2, #88	@ 0x58
 8002214:	5a9a      	ldrh	r2, [r3, r2]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	215a      	movs	r1, #90	@ 0x5a
 800221a:	5a5b      	ldrh	r3, [r3, r1]
 800221c:	b29b      	uxth	r3, r3
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	b29a      	uxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0011      	movs	r1, r2
 8002226:	0018      	movs	r0, r3
 8002228:	f000 f8e0 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800222c:	e0c2      	b.n	80023b4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2258      	movs	r2, #88	@ 0x58
 8002232:	5a99      	ldrh	r1, [r3, r2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	225a      	movs	r2, #90	@ 0x5a
 8002238:	5a9b      	ldrh	r3, [r3, r2]
 800223a:	b29a      	uxth	r2, r3
 800223c:	208e      	movs	r0, #142	@ 0x8e
 800223e:	183b      	adds	r3, r7, r0
 8002240:	1a8a      	subs	r2, r1, r2
 8002242:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	225a      	movs	r2, #90	@ 0x5a
 8002248:	5a9b      	ldrh	r3, [r3, r2]
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d100      	bne.n	8002252 <HAL_UART_IRQHandler+0x446>
 8002250:	e0b2      	b.n	80023b8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002252:	183b      	adds	r3, r7, r0
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d100      	bne.n	800225c <HAL_UART_IRQHandler+0x450>
 800225a:	e0ad      	b.n	80023b8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800225c:	f3ef 8310 	mrs	r3, PRIMASK
 8002260:	60fb      	str	r3, [r7, #12]
  return(result);
 8002262:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002264:	2488      	movs	r4, #136	@ 0x88
 8002266:	193a      	adds	r2, r7, r4
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	2301      	movs	r3, #1
 800226c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f383 8810 	msr	PRIMASK, r3
}
 8002274:	46c0      	nop			@ (mov r8, r8)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4951      	ldr	r1, [pc, #324]	@ (80023c8 <HAL_UART_IRQHandler+0x5bc>)
 8002282:	400a      	ands	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	193b      	adds	r3, r7, r4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f383 8810 	msr	PRIMASK, r3
}
 8002292:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002294:	f3ef 8310 	mrs	r3, PRIMASK
 8002298:	61bb      	str	r3, [r7, #24]
  return(result);
 800229a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229c:	2484      	movs	r4, #132	@ 0x84
 800229e:	193a      	adds	r2, r7, r4
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	2301      	movs	r3, #1
 80022a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f383 8810 	msr	PRIMASK, r3
}
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	438a      	bics	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	193b      	adds	r3, r7, r4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	f383 8810 	msr	PRIMASK, r3
}
 80022ca:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	2120      	movs	r1, #32
 80022d2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e0:	f3ef 8310 	mrs	r3, PRIMASK
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	193a      	adds	r2, r7, r4
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	2301      	movs	r3, #1
 80022f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f4:	f383 8810 	msr	PRIMASK, r3
}
 80022f8:	46c0      	nop			@ (mov r8, r8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2110      	movs	r1, #16
 8002306:	438a      	bics	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	193b      	adds	r3, r7, r4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002312:	f383 8810 	msr	PRIMASK, r3
}
 8002316:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800231e:	183b      	adds	r3, r7, r0
 8002320:	881a      	ldrh	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0011      	movs	r1, r2
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f860 	bl	80023ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800232c:	e044      	b.n	80023b8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800232e:	23a4      	movs	r3, #164	@ 0xa4
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	035b      	lsls	r3, r3, #13
 8002338:	4013      	ands	r3, r2
 800233a:	d010      	beq.n	800235e <HAL_UART_IRQHandler+0x552>
 800233c:	239c      	movs	r3, #156	@ 0x9c
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	03db      	lsls	r3, r3, #15
 8002346:	4013      	ands	r3, r2
 8002348:	d009      	beq.n	800235e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2280      	movs	r2, #128	@ 0x80
 8002350:	0352      	lsls	r2, r2, #13
 8002352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fe74 	bl	8003044 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800235c:	e02f      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800235e:	23a4      	movs	r3, #164	@ 0xa4
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2280      	movs	r2, #128	@ 0x80
 8002366:	4013      	ands	r3, r2
 8002368:	d00f      	beq.n	800238a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800236a:	23a0      	movs	r3, #160	@ 0xa0
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2280      	movs	r2, #128	@ 0x80
 8002372:	4013      	ands	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01e      	beq.n	80023bc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	0010      	movs	r0, r2
 8002386:	4798      	blx	r3
    }
    return;
 8002388:	e018      	b.n	80023bc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800238a:	23a4      	movs	r3, #164	@ 0xa4
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2240      	movs	r2, #64	@ 0x40
 8002392:	4013      	ands	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_UART_IRQHandler+0x5b2>
 8002396:	23a0      	movs	r3, #160	@ 0xa0
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2240      	movs	r2, #64	@ 0x40
 800239e:	4013      	ands	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fc6a 	bl	8002c7e <UART_EndTransmit_IT>
    return;
 80023aa:	e008      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
      return;
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	e006      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
    return;
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	e004      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
      return;
 80023b4:	46c0      	nop			@ (mov r8, r8)
 80023b6:	e002      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
      return;
 80023b8:	46c0      	nop			@ (mov r8, r8)
 80023ba:	e000      	b.n	80023be <HAL_UART_IRQHandler+0x5b2>
    return;
 80023bc:	46c0      	nop			@ (mov r8, r8)
  }

}
 80023be:	46bd      	mov	sp, r7
 80023c0:	b02b      	add	sp, #172	@ 0xac
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	fffffeff 	.word	0xfffffeff
 80023c8:	fffffedf 	.word	0xfffffedf

080023cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80023d4:	46c0      	nop			@ (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023e4:	46c0      	nop			@ (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	000a      	movs	r2, r1
 80023f6:	1cbb      	adds	r3, r7, #2
 80023f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800240c:	231e      	movs	r3, #30
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a8d      	ldr	r2, [pc, #564]	@ (8002668 <UART_SetConfig+0x264>)
 8002434:	4013      	ands	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	430a      	orrs	r2, r1
 8002440:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a88      	ldr	r2, [pc, #544]	@ (800266c <UART_SetConfig+0x268>)
 800244a:	4013      	ands	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a7f      	ldr	r2, [pc, #508]	@ (8002670 <UART_SetConfig+0x26c>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a7b      	ldr	r2, [pc, #492]	@ (8002674 <UART_SetConfig+0x270>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d127      	bne.n	80024da <UART_SetConfig+0xd6>
 800248a:	4b7b      	ldr	r3, [pc, #492]	@ (8002678 <UART_SetConfig+0x274>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	2203      	movs	r2, #3
 8002490:	4013      	ands	r3, r2
 8002492:	2b03      	cmp	r3, #3
 8002494:	d00d      	beq.n	80024b2 <UART_SetConfig+0xae>
 8002496:	d81b      	bhi.n	80024d0 <UART_SetConfig+0xcc>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d014      	beq.n	80024c6 <UART_SetConfig+0xc2>
 800249c:	d818      	bhi.n	80024d0 <UART_SetConfig+0xcc>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <UART_SetConfig+0xa4>
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d00a      	beq.n	80024bc <UART_SetConfig+0xb8>
 80024a6:	e013      	b.n	80024d0 <UART_SetConfig+0xcc>
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e021      	b.n	80024f6 <UART_SetConfig+0xf2>
 80024b2:	231f      	movs	r3, #31
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2202      	movs	r2, #2
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e01c      	b.n	80024f6 <UART_SetConfig+0xf2>
 80024bc:	231f      	movs	r3, #31
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2204      	movs	r2, #4
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e017      	b.n	80024f6 <UART_SetConfig+0xf2>
 80024c6:	231f      	movs	r3, #31
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2208      	movs	r2, #8
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e012      	b.n	80024f6 <UART_SetConfig+0xf2>
 80024d0:	231f      	movs	r3, #31
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2210      	movs	r2, #16
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e00d      	b.n	80024f6 <UART_SetConfig+0xf2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a67      	ldr	r2, [pc, #412]	@ (800267c <UART_SetConfig+0x278>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d104      	bne.n	80024ee <UART_SetConfig+0xea>
 80024e4:	231f      	movs	r3, #31
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e003      	b.n	80024f6 <UART_SetConfig+0xf2>
 80024ee:	231f      	movs	r3, #31
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	2210      	movs	r2, #16
 80024f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	429a      	cmp	r2, r3
 8002500:	d15c      	bne.n	80025bc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002502:	231f      	movs	r3, #31
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d015      	beq.n	8002538 <UART_SetConfig+0x134>
 800250c:	dc18      	bgt.n	8002540 <UART_SetConfig+0x13c>
 800250e:	2b04      	cmp	r3, #4
 8002510:	d00d      	beq.n	800252e <UART_SetConfig+0x12a>
 8002512:	dc15      	bgt.n	8002540 <UART_SetConfig+0x13c>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <UART_SetConfig+0x11a>
 8002518:	2b02      	cmp	r3, #2
 800251a:	d005      	beq.n	8002528 <UART_SetConfig+0x124>
 800251c:	e010      	b.n	8002540 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800251e:	f7ff fa37 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8002522:	0003      	movs	r3, r0
 8002524:	61bb      	str	r3, [r7, #24]
        break;
 8002526:	e012      	b.n	800254e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002528:	4b55      	ldr	r3, [pc, #340]	@ (8002680 <UART_SetConfig+0x27c>)
 800252a:	61bb      	str	r3, [r7, #24]
        break;
 800252c:	e00f      	b.n	800254e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800252e:	f7ff f9cf 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 8002532:	0003      	movs	r3, r0
 8002534:	61bb      	str	r3, [r7, #24]
        break;
 8002536:	e00a      	b.n	800254e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	61bb      	str	r3, [r7, #24]
        break;
 800253e:	e006      	b.n	800254e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002544:	231e      	movs	r3, #30
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
        break;
 800254c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d100      	bne.n	8002556 <UART_SetConfig+0x152>
 8002554:	e07a      	b.n	800264c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	005a      	lsls	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	18d2      	adds	r2, r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0019      	movs	r1, r3
 8002568:	0010      	movs	r0, r2
 800256a:	f7fd fddf 	bl	800012c <__udivsi3>
 800256e:	0003      	movs	r3, r0
 8002570:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d91c      	bls.n	80025b2 <UART_SetConfig+0x1ae>
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	025b      	lsls	r3, r3, #9
 800257e:	429a      	cmp	r2, r3
 8002580:	d217      	bcs.n	80025b2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	b29a      	uxth	r2, r3
 8002586:	200e      	movs	r0, #14
 8002588:	183b      	adds	r3, r7, r0
 800258a:	210f      	movs	r1, #15
 800258c:	438a      	bics	r2, r1
 800258e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	b29b      	uxth	r3, r3
 8002596:	2207      	movs	r2, #7
 8002598:	4013      	ands	r3, r2
 800259a:	b299      	uxth	r1, r3
 800259c:	183b      	adds	r3, r7, r0
 800259e:	183a      	adds	r2, r7, r0
 80025a0:	8812      	ldrh	r2, [r2, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	183a      	adds	r2, r7, r0
 80025ac:	8812      	ldrh	r2, [r2, #0]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	e04c      	b.n	800264c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80025b2:	231e      	movs	r3, #30
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e047      	b.n	800264c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025bc:	231f      	movs	r3, #31
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d015      	beq.n	80025f2 <UART_SetConfig+0x1ee>
 80025c6:	dc18      	bgt.n	80025fa <UART_SetConfig+0x1f6>
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d00d      	beq.n	80025e8 <UART_SetConfig+0x1e4>
 80025cc:	dc15      	bgt.n	80025fa <UART_SetConfig+0x1f6>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <UART_SetConfig+0x1d4>
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d005      	beq.n	80025e2 <UART_SetConfig+0x1de>
 80025d6:	e010      	b.n	80025fa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025d8:	f7ff f9da 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 80025dc:	0003      	movs	r3, r0
 80025de:	61bb      	str	r3, [r7, #24]
        break;
 80025e0:	e012      	b.n	8002608 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025e2:	4b27      	ldr	r3, [pc, #156]	@ (8002680 <UART_SetConfig+0x27c>)
 80025e4:	61bb      	str	r3, [r7, #24]
        break;
 80025e6:	e00f      	b.n	8002608 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025e8:	f7ff f972 	bl	80018d0 <HAL_RCC_GetSysClockFreq>
 80025ec:	0003      	movs	r3, r0
 80025ee:	61bb      	str	r3, [r7, #24]
        break;
 80025f0:	e00a      	b.n	8002608 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	61bb      	str	r3, [r7, #24]
        break;
 80025f8:	e006      	b.n	8002608 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025fe:	231e      	movs	r3, #30
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
        break;
 8002606:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01e      	beq.n	800264c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	085a      	lsrs	r2, r3, #1
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	18d2      	adds	r2, r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0019      	movs	r1, r3
 800261e:	0010      	movs	r0, r2
 8002620:	f7fd fd84 	bl	800012c <__udivsi3>
 8002624:	0003      	movs	r3, r0
 8002626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	d90a      	bls.n	8002644 <UART_SetConfig+0x240>
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	025b      	lsls	r3, r3, #9
 8002634:	429a      	cmp	r2, r3
 8002636:	d205      	bcs.n	8002644 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	e003      	b.n	800264c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002644:	231e      	movs	r3, #30
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002658:	231e      	movs	r3, #30
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b008      	add	sp, #32
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	ffff69f3 	.word	0xffff69f3
 800266c:	ffffcfff 	.word	0xffffcfff
 8002670:	fffff4ff 	.word	0xfffff4ff
 8002674:	40013800 	.word	0x40013800
 8002678:	40021000 	.word	0x40021000
 800267c:	40004400 	.word	0x40004400
 8002680:	007a1200 	.word	0x007a1200

08002684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	2208      	movs	r2, #8
 8002692:	4013      	ands	r3, r2
 8002694:	d00b      	beq.n	80026ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a4a      	ldr	r2, [pc, #296]	@ (80027c8 <UART_AdvFeatureConfig+0x144>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	2201      	movs	r2, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d00b      	beq.n	80026d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a43      	ldr	r2, [pc, #268]	@ (80027cc <UART_AdvFeatureConfig+0x148>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d00b      	beq.n	80026f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a3b      	ldr	r2, [pc, #236]	@ (80027d0 <UART_AdvFeatureConfig+0x14c>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	2204      	movs	r2, #4
 80026f8:	4013      	ands	r3, r2
 80026fa:	d00b      	beq.n	8002714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4a34      	ldr	r2, [pc, #208]	@ (80027d4 <UART_AdvFeatureConfig+0x150>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	2210      	movs	r2, #16
 800271a:	4013      	ands	r3, r2
 800271c:	d00b      	beq.n	8002736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a2c      	ldr	r2, [pc, #176]	@ (80027d8 <UART_AdvFeatureConfig+0x154>)
 8002726:	4013      	ands	r3, r2
 8002728:	0019      	movs	r1, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	2220      	movs	r2, #32
 800273c:	4013      	ands	r3, r2
 800273e:	d00b      	beq.n	8002758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4a25      	ldr	r2, [pc, #148]	@ (80027dc <UART_AdvFeatureConfig+0x158>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	2240      	movs	r2, #64	@ 0x40
 800275e:	4013      	ands	r3, r2
 8002760:	d01d      	beq.n	800279e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a1d      	ldr	r2, [pc, #116]	@ (80027e0 <UART_AdvFeatureConfig+0x15c>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	035b      	lsls	r3, r3, #13
 8002782:	429a      	cmp	r2, r3
 8002784:	d10b      	bne.n	800279e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a15      	ldr	r2, [pc, #84]	@ (80027e4 <UART_AdvFeatureConfig+0x160>)
 800278e:	4013      	ands	r3, r2
 8002790:	0019      	movs	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	2280      	movs	r2, #128	@ 0x80
 80027a4:	4013      	ands	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a0e      	ldr	r2, [pc, #56]	@ (80027e8 <UART_AdvFeatureConfig+0x164>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
  }
}
 80027c0:	46c0      	nop			@ (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	ffff7fff 	.word	0xffff7fff
 80027cc:	fffdffff 	.word	0xfffdffff
 80027d0:	fffeffff 	.word	0xfffeffff
 80027d4:	fffbffff 	.word	0xfffbffff
 80027d8:	ffffefff 	.word	0xffffefff
 80027dc:	ffffdfff 	.word	0xffffdfff
 80027e0:	ffefffff 	.word	0xffefffff
 80027e4:	ff9fffff 	.word	0xff9fffff
 80027e8:	fff7ffff 	.word	0xfff7ffff

080027ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b092      	sub	sp, #72	@ 0x48
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2284      	movs	r2, #132	@ 0x84
 80027f8:	2100      	movs	r1, #0
 80027fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027fc:	f7fe f862 	bl	80008c4 <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2208      	movs	r2, #8
 800280c:	4013      	ands	r3, r2
 800280e:	2b08      	cmp	r3, #8
 8002810:	d12c      	bne.n	800286c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002814:	2280      	movs	r2, #128	@ 0x80
 8002816:	0391      	lsls	r1, r2, #14
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4a46      	ldr	r2, [pc, #280]	@ (8002934 <UART_CheckIdleState+0x148>)
 800281c:	9200      	str	r2, [sp, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	f000 f88c 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d021      	beq.n	800286c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002828:	f3ef 8310 	mrs	r3, PRIMASK
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002830:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002832:	2301      	movs	r3, #1
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002838:	f383 8810 	msr	PRIMASK, r3
}
 800283c:	46c0      	nop			@ (mov r8, r8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2180      	movs	r1, #128	@ 0x80
 800284a:	438a      	bics	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002854:	f383 8810 	msr	PRIMASK, r3
}
 8002858:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2278      	movs	r2, #120	@ 0x78
 8002864:	2100      	movs	r1, #0
 8002866:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e05f      	b.n	800292c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2204      	movs	r2, #4
 8002874:	4013      	ands	r3, r2
 8002876:	2b04      	cmp	r3, #4
 8002878:	d146      	bne.n	8002908 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800287a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287c:	2280      	movs	r2, #128	@ 0x80
 800287e:	03d1      	lsls	r1, r2, #15
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4a2c      	ldr	r2, [pc, #176]	@ (8002934 <UART_CheckIdleState+0x148>)
 8002884:	9200      	str	r2, [sp, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	f000 f858 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d03b      	beq.n	8002908 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002890:	f3ef 8310 	mrs	r3, PRIMASK
 8002894:	60fb      	str	r3, [r7, #12]
  return(result);
 8002896:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
 800289a:	2301      	movs	r3, #1
 800289c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f383 8810 	msr	PRIMASK, r3
}
 80028a4:	46c0      	nop			@ (mov r8, r8)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4921      	ldr	r1, [pc, #132]	@ (8002938 <UART_CheckIdleState+0x14c>)
 80028b2:	400a      	ands	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f383 8810 	msr	PRIMASK, r3
}
 80028c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c2:	f3ef 8310 	mrs	r3, PRIMASK
 80028c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80028c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80028cc:	2301      	movs	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f383 8810 	msr	PRIMASK, r3
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2101      	movs	r1, #1
 80028e4:	438a      	bics	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f383 8810 	msr	PRIMASK, r3
}
 80028f2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2280      	movs	r2, #128	@ 0x80
 80028f8:	2120      	movs	r1, #32
 80028fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2278      	movs	r2, #120	@ 0x78
 8002900:	2100      	movs	r1, #0
 8002902:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e011      	b.n	800292c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	2120      	movs	r1, #32
 8002914:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2278      	movs	r2, #120	@ 0x78
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b010      	add	sp, #64	@ 0x40
 8002932:	bd80      	pop	{r7, pc}
 8002934:	01ffffff 	.word	0x01ffffff
 8002938:	fffffedf 	.word	0xfffffedf

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e051      	b.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	3301      	adds	r3, #1
 8002952:	d04e      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002954:	f7fd ffb6 	bl	80008c4 <HAL_GetTick>
 8002958:	0002      	movs	r2, r0
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	429a      	cmp	r2, r3
 8002962:	d302      	bcc.n	800296a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e051      	b.n	8002a12 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2204      	movs	r2, #4
 8002976:	4013      	ands	r3, r2
 8002978:	d03b      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b80      	cmp	r3, #128	@ 0x80
 800297e:	d038      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b40      	cmp	r3, #64	@ 0x40
 8002984:	d035      	beq.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2208      	movs	r2, #8
 800298e:	4013      	ands	r3, r2
 8002990:	2b08      	cmp	r3, #8
 8002992:	d111      	bne.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2208      	movs	r2, #8
 800299a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f8f2 	bl	8002b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2284      	movs	r2, #132	@ 0x84
 80029a8:	2108      	movs	r1, #8
 80029aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2278      	movs	r2, #120	@ 0x78
 80029b0:	2100      	movs	r1, #0
 80029b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e02c      	b.n	8002a12 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	401a      	ands	r2, r3
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d112      	bne.n	80029f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 f8d5 	bl	8002b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2284      	movs	r2, #132	@ 0x84
 80029e2:	2120      	movs	r1, #32
 80029e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2278      	movs	r2, #120	@ 0x78
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e00f      	b.n	8002a12 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	425a      	negs	r2, r3
 8002a02:	4153      	adcs	r3, r2
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	001a      	movs	r2, r3
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d09e      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b004      	add	sp, #16
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b090      	sub	sp, #64	@ 0x40
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	1dbb      	adds	r3, r7, #6
 8002a28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1dba      	adds	r2, r7, #6
 8002a34:	2158      	movs	r1, #88	@ 0x58
 8002a36:	8812      	ldrh	r2, [r2, #0]
 8002a38:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1dba      	adds	r2, r7, #6
 8002a3e:	215a      	movs	r1, #90	@ 0x5a
 8002a40:	8812      	ldrh	r2, [r2, #0]
 8002a42:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	2380      	movs	r3, #128	@ 0x80
 8002a50:	015b      	lsls	r3, r3, #5
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10d      	bne.n	8002a72 <UART_Start_Receive_IT+0x56>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d104      	bne.n	8002a68 <UART_Start_Receive_IT+0x4c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	225c      	movs	r2, #92	@ 0x5c
 8002a62:	4946      	ldr	r1, [pc, #280]	@ (8002b7c <UART_Start_Receive_IT+0x160>)
 8002a64:	5299      	strh	r1, [r3, r2]
 8002a66:	e01a      	b.n	8002a9e <UART_Start_Receive_IT+0x82>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	225c      	movs	r2, #92	@ 0x5c
 8002a6c:	21ff      	movs	r1, #255	@ 0xff
 8002a6e:	5299      	strh	r1, [r3, r2]
 8002a70:	e015      	b.n	8002a9e <UART_Start_Receive_IT+0x82>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <UART_Start_Receive_IT+0x7a>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <UART_Start_Receive_IT+0x70>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	225c      	movs	r2, #92	@ 0x5c
 8002a86:	21ff      	movs	r1, #255	@ 0xff
 8002a88:	5299      	strh	r1, [r3, r2]
 8002a8a:	e008      	b.n	8002a9e <UART_Start_Receive_IT+0x82>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	225c      	movs	r2, #92	@ 0x5c
 8002a90:	217f      	movs	r1, #127	@ 0x7f
 8002a92:	5299      	strh	r1, [r3, r2]
 8002a94:	e003      	b.n	8002a9e <UART_Start_Receive_IT+0x82>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	225c      	movs	r2, #92	@ 0x5c
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2284      	movs	r2, #132	@ 0x84
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2280      	movs	r2, #128	@ 0x80
 8002aaa:	2122      	movs	r1, #34	@ 0x22
 8002aac:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aae:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002abe:	f383 8810 	msr	PRIMASK, r3
}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2101      	movs	r1, #1
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	f383 8810 	msr	PRIMASK, r3
}
 8002ade:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	015b      	lsls	r3, r3, #5
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <UART_Start_Receive_IT+0xe0>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <UART_Start_Receive_IT+0x164>)
 8002af8:	669a      	str	r2, [r3, #104]	@ 0x68
 8002afa:	e002      	b.n	8002b02 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <UART_Start_Receive_IT+0x168>)
 8002b00:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d019      	beq.n	8002b3e <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b10:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b14:	2301      	movs	r3, #1
 8002b16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f383 8810 	msr	PRIMASK, r3
}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2190      	movs	r1, #144	@ 0x90
 8002b2c:	0049      	lsls	r1, r1, #1
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	f383 8810 	msr	PRIMASK, r3
}
 8002b3c:	e018      	b.n	8002b70 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b42:	613b      	str	r3, [r7, #16]
  return(result);
 8002b44:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b48:	2301      	movs	r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f383 8810 	msr	PRIMASK, r3
}
 8002b52:	46c0      	nop			@ (mov r8, r8)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2120      	movs	r1, #32
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f383 8810 	msr	PRIMASK, r3
}
 8002b6e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b010      	add	sp, #64	@ 0x40
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	000001ff 	.word	0x000001ff
 8002b80:	08002e8d 	.word	0x08002e8d
 8002b84:	08002cd5 	.word	0x08002cd5

08002b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	@ 0x38
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b90:	f3ef 8310 	mrs	r3, PRIMASK
 8002b94:	617b      	str	r3, [r7, #20]
  return(result);
 8002b96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f383 8810 	msr	PRIMASK, r3
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4926      	ldr	r1, [pc, #152]	@ (8002c4c <UART_EndRxTransfer+0xc4>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f383 8810 	msr	PRIMASK, r3
}
 8002bc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc6:	623b      	str	r3, [r7, #32]
  return(result);
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bcc:	2301      	movs	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	f383 8810 	msr	PRIMASK, r3
}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	438a      	bics	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	f383 8810 	msr	PRIMASK, r3
}
 8002bf2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d118      	bne.n	8002c2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8002c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c06:	2301      	movs	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2110      	movs	r1, #16
 8002c1e:	438a      	bics	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f383 8810 	msr	PRIMASK, r3
}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2280      	movs	r2, #128	@ 0x80
 8002c32:	2120      	movs	r1, #32
 8002c34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b00e      	add	sp, #56	@ 0x38
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	fffffedf 	.word	0xfffffedf

08002c50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	225a      	movs	r2, #90	@ 0x5a
 8002c62:	2100      	movs	r1, #0
 8002c64:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2252      	movs	r2, #82	@ 0x52
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff fbb3 	bl	80023dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b004      	add	sp, #16
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c86:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	2301      	movs	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f383 8810 	msr	PRIMASK, r3
}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2140      	movs	r1, #64	@ 0x40
 8002ca8:	438a      	bics	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff fb80 	bl	80023cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b006      	add	sp, #24
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b094      	sub	sp, #80	@ 0x50
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002cdc:	204e      	movs	r0, #78	@ 0x4e
 8002cde:	183b      	adds	r3, r7, r0
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	215c      	movs	r1, #92	@ 0x5c
 8002ce4:	5a52      	ldrh	r2, [r2, r1]
 8002ce6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	589b      	ldr	r3, [r3, r2]
 8002cee:	2b22      	cmp	r3, #34	@ 0x22
 8002cf0:	d000      	beq.n	8002cf4 <UART_RxISR_8BIT+0x20>
 8002cf2:	e0ba      	b.n	8002e6a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	214c      	movs	r1, #76	@ 0x4c
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8002cfe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	183b      	adds	r3, r7, r0
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b2d9      	uxtb	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d10:	400a      	ands	r2, r1
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	225a      	movs	r2, #90	@ 0x5a
 8002d24:	5a9b      	ldrh	r3, [r3, r2]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b299      	uxth	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	225a      	movs	r2, #90	@ 0x5a
 8002d30:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	225a      	movs	r2, #90	@ 0x5a
 8002d36:	5a9b      	ldrh	r3, [r3, r2]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d000      	beq.n	8002d40 <UART_RxISR_8BIT+0x6c>
 8002d3e:	e09c      	b.n	8002e7a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d40:	f3ef 8310 	mrs	r3, PRIMASK
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	f383 8810 	msr	PRIMASK, r3
}
 8002d54:	46c0      	nop			@ (mov r8, r8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4948      	ldr	r1, [pc, #288]	@ (8002e84 <UART_RxISR_8BIT+0x1b0>)
 8002d62:	400a      	ands	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6c:	f383 8810 	msr	PRIMASK, r3
}
 8002d70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d72:	f3ef 8310 	mrs	r3, PRIMASK
 8002d76:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	f383 8810 	msr	PRIMASK, r3
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2101      	movs	r1, #1
 8002d94:	438a      	bics	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9e:	f383 8810 	msr	PRIMASK, r3
}
 8002da2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2280      	movs	r2, #128	@ 0x80
 8002da8:	2120      	movs	r1, #32
 8002daa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	2380      	movs	r3, #128	@ 0x80
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d018      	beq.n	8002df8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dca:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dcc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dce:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f383 8810 	msr	PRIMASK, r3
}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4928      	ldr	r1, [pc, #160]	@ (8002e88 <UART_RxISR_8BIT+0x1b4>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f383 8810 	msr	PRIMASK, r3
}
 8002df6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d12f      	bne.n	8002e60 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e06:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e0c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e10:	2301      	movs	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f383 8810 	msr	PRIMASK, r3
}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2110      	movs	r1, #16
 8002e28:	438a      	bics	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f383 8810 	msr	PRIMASK, r3
}
 8002e36:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2210      	movs	r2, #16
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d103      	bne.n	8002e4e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2258      	movs	r2, #88	@ 0x58
 8002e52:	5a9a      	ldrh	r2, [r3, r2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	0011      	movs	r1, r2
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff fac7 	bl	80023ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e5e:	e00c      	b.n	8002e7a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7fd f9ee 	bl	8000244 <HAL_UART_RxCpltCallback>
}
 8002e68:	e007      	b.n	8002e7a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2108      	movs	r1, #8
 8002e76:	430a      	orrs	r2, r1
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b014      	add	sp, #80	@ 0x50
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	fffffedf 	.word	0xfffffedf
 8002e88:	fbffffff 	.word	0xfbffffff

08002e8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b094      	sub	sp, #80	@ 0x50
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002e94:	204e      	movs	r0, #78	@ 0x4e
 8002e96:	183b      	adds	r3, r7, r0
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	215c      	movs	r1, #92	@ 0x5c
 8002e9c:	5a52      	ldrh	r2, [r2, r1]
 8002e9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	589b      	ldr	r3, [r3, r2]
 8002ea6:	2b22      	cmp	r3, #34	@ 0x22
 8002ea8:	d000      	beq.n	8002eac <UART_RxISR_16BIT+0x20>
 8002eaa:	e0ba      	b.n	8003022 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	214c      	movs	r1, #76	@ 0x4c
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8002eb6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002ebe:	187b      	adds	r3, r7, r1
 8002ec0:	183a      	adds	r2, r7, r0
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	8812      	ldrh	r2, [r2, #0]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ecc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	1c9a      	adds	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	225a      	movs	r2, #90	@ 0x5a
 8002edc:	5a9b      	ldrh	r3, [r3, r2]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b299      	uxth	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	225a      	movs	r2, #90	@ 0x5a
 8002ee8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	225a      	movs	r2, #90	@ 0x5a
 8002eee:	5a9b      	ldrh	r3, [r3, r2]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d000      	beq.n	8002ef8 <UART_RxISR_16BIT+0x6c>
 8002ef6:	e09c      	b.n	8003032 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8002efc:	623b      	str	r3, [r7, #32]
  return(result);
 8002efe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f02:	2301      	movs	r3, #1
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4948      	ldr	r1, [pc, #288]	@ (800303c <UART_RxISR_16BIT+0x1b0>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f24:	f383 8810 	msr	PRIMASK, r3
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8002f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f34:	2301      	movs	r3, #1
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f56:	f383 8810 	msr	PRIMASK, r3
}
 8002f5a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2280      	movs	r2, #128	@ 0x80
 8002f60:	2120      	movs	r1, #32
 8002f62:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f82:	617b      	str	r3, [r7, #20]
  return(result);
 8002f84:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f88:	2301      	movs	r3, #1
 8002f8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4928      	ldr	r1, [pc, #160]	@ (8003040 <UART_RxISR_16BIT+0x1b4>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f383 8810 	msr	PRIMASK, r3
}
 8002fae:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d12f      	bne.n	8003018 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fc4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fc8:	2301      	movs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f383 8810 	msr	PRIMASK, r3
}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2110      	movs	r1, #16
 8002fe0:	438a      	bics	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f383 8810 	msr	PRIMASK, r3
}
 8002fee:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d103      	bne.n	8003006 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2210      	movs	r2, #16
 8003004:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2258      	movs	r2, #88	@ 0x58
 800300a:	5a9a      	ldrh	r2, [r3, r2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	0011      	movs	r1, r2
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff f9eb 	bl	80023ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003016:	e00c      	b.n	8003032 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	0018      	movs	r0, r3
 800301c:	f7fd f912 	bl	8000244 <HAL_UART_RxCpltCallback>
}
 8003020:	e007      	b.n	8003032 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2108      	movs	r1, #8
 800302e:	430a      	orrs	r2, r1
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b014      	add	sp, #80	@ 0x50
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	fffffedf 	.word	0xfffffedf
 8003040:	fbffffff 	.word	0xfbffffff

08003044 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <siprintf>:
 8003054:	b40e      	push	{r1, r2, r3}
 8003056:	b510      	push	{r4, lr}
 8003058:	2400      	movs	r4, #0
 800305a:	490c      	ldr	r1, [pc, #48]	@ (800308c <siprintf+0x38>)
 800305c:	b09d      	sub	sp, #116	@ 0x74
 800305e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003060:	9002      	str	r0, [sp, #8]
 8003062:	9006      	str	r0, [sp, #24]
 8003064:	9107      	str	r1, [sp, #28]
 8003066:	9104      	str	r1, [sp, #16]
 8003068:	4809      	ldr	r0, [pc, #36]	@ (8003090 <siprintf+0x3c>)
 800306a:	490a      	ldr	r1, [pc, #40]	@ (8003094 <siprintf+0x40>)
 800306c:	cb04      	ldmia	r3!, {r2}
 800306e:	9105      	str	r1, [sp, #20]
 8003070:	6800      	ldr	r0, [r0, #0]
 8003072:	a902      	add	r1, sp, #8
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003078:	f000 f99e 	bl	80033b8 <_svfiprintf_r>
 800307c:	9b02      	ldr	r3, [sp, #8]
 800307e:	701c      	strb	r4, [r3, #0]
 8003080:	b01d      	add	sp, #116	@ 0x74
 8003082:	bc10      	pop	{r4}
 8003084:	bc08      	pop	{r3}
 8003086:	b003      	add	sp, #12
 8003088:	4718      	bx	r3
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	7fffffff 	.word	0x7fffffff
 8003090:	20000018 	.word	0x20000018
 8003094:	ffff0208 	.word	0xffff0208

08003098 <memset>:
 8003098:	0003      	movs	r3, r0
 800309a:	1882      	adds	r2, r0, r2
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	7019      	strb	r1, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <__errno>:
 80030a8:	4b01      	ldr	r3, [pc, #4]	@ (80030b0 <__errno+0x8>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	4770      	bx	lr
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	20000018 	.word	0x20000018

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	2600      	movs	r6, #0
 80030b8:	4c0c      	ldr	r4, [pc, #48]	@ (80030ec <__libc_init_array+0x38>)
 80030ba:	4d0d      	ldr	r5, [pc, #52]	@ (80030f0 <__libc_init_array+0x3c>)
 80030bc:	1b64      	subs	r4, r4, r5
 80030be:	10a4      	asrs	r4, r4, #2
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	2600      	movs	r6, #0
 80030c6:	f000 fc61 	bl	800398c <_init>
 80030ca:	4c0a      	ldr	r4, [pc, #40]	@ (80030f4 <__libc_init_array+0x40>)
 80030cc:	4d0a      	ldr	r5, [pc, #40]	@ (80030f8 <__libc_init_array+0x44>)
 80030ce:	1b64      	subs	r4, r4, r5
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	00b3      	lsls	r3, r6, #2
 80030da:	58eb      	ldr	r3, [r5, r3]
 80030dc:	4798      	blx	r3
 80030de:	3601      	adds	r6, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	00b3      	lsls	r3, r6, #2
 80030e4:	58eb      	ldr	r3, [r5, r3]
 80030e6:	4798      	blx	r3
 80030e8:	3601      	adds	r6, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	08003a1c 	.word	0x08003a1c
 80030f0:	08003a1c 	.word	0x08003a1c
 80030f4:	08003a20 	.word	0x08003a20
 80030f8:	08003a1c 	.word	0x08003a1c

080030fc <__retarget_lock_acquire_recursive>:
 80030fc:	4770      	bx	lr

080030fe <__retarget_lock_release_recursive>:
 80030fe:	4770      	bx	lr

08003100 <_free_r>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	0005      	movs	r5, r0
 8003104:	1e0c      	subs	r4, r1, #0
 8003106:	d010      	beq.n	800312a <_free_r+0x2a>
 8003108:	3c04      	subs	r4, #4
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	da00      	bge.n	8003112 <_free_r+0x12>
 8003110:	18e4      	adds	r4, r4, r3
 8003112:	0028      	movs	r0, r5
 8003114:	f000 f8e0 	bl	80032d8 <__malloc_lock>
 8003118:	4a1d      	ldr	r2, [pc, #116]	@ (8003190 <_free_r+0x90>)
 800311a:	6813      	ldr	r3, [r2, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <_free_r+0x2c>
 8003120:	6063      	str	r3, [r4, #4]
 8003122:	6014      	str	r4, [r2, #0]
 8003124:	0028      	movs	r0, r5
 8003126:	f000 f8df 	bl	80032e8 <__malloc_unlock>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	42a3      	cmp	r3, r4
 800312e:	d908      	bls.n	8003142 <_free_r+0x42>
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	1821      	adds	r1, r4, r0
 8003134:	428b      	cmp	r3, r1
 8003136:	d1f3      	bne.n	8003120 <_free_r+0x20>
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	1809      	adds	r1, r1, r0
 800313e:	6021      	str	r1, [r4, #0]
 8003140:	e7ee      	b.n	8003120 <_free_r+0x20>
 8003142:	001a      	movs	r2, r3
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <_free_r+0x4e>
 800314a:	42a3      	cmp	r3, r4
 800314c:	d9f9      	bls.n	8003142 <_free_r+0x42>
 800314e:	6811      	ldr	r1, [r2, #0]
 8003150:	1850      	adds	r0, r2, r1
 8003152:	42a0      	cmp	r0, r4
 8003154:	d10b      	bne.n	800316e <_free_r+0x6e>
 8003156:	6820      	ldr	r0, [r4, #0]
 8003158:	1809      	adds	r1, r1, r0
 800315a:	1850      	adds	r0, r2, r1
 800315c:	6011      	str	r1, [r2, #0]
 800315e:	4283      	cmp	r3, r0
 8003160:	d1e0      	bne.n	8003124 <_free_r+0x24>
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	1841      	adds	r1, r0, r1
 8003168:	6011      	str	r1, [r2, #0]
 800316a:	6053      	str	r3, [r2, #4]
 800316c:	e7da      	b.n	8003124 <_free_r+0x24>
 800316e:	42a0      	cmp	r0, r4
 8003170:	d902      	bls.n	8003178 <_free_r+0x78>
 8003172:	230c      	movs	r3, #12
 8003174:	602b      	str	r3, [r5, #0]
 8003176:	e7d5      	b.n	8003124 <_free_r+0x24>
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	1821      	adds	r1, r4, r0
 800317c:	428b      	cmp	r3, r1
 800317e:	d103      	bne.n	8003188 <_free_r+0x88>
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	1809      	adds	r1, r1, r0
 8003186:	6021      	str	r1, [r4, #0]
 8003188:	6063      	str	r3, [r4, #4]
 800318a:	6054      	str	r4, [r2, #4]
 800318c:	e7ca      	b.n	8003124 <_free_r+0x24>
 800318e:	46c0      	nop			@ (mov r8, r8)
 8003190:	200002a0 	.word	0x200002a0

08003194 <sbrk_aligned>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	4e0f      	ldr	r6, [pc, #60]	@ (80031d4 <sbrk_aligned+0x40>)
 8003198:	000d      	movs	r5, r1
 800319a:	6831      	ldr	r1, [r6, #0]
 800319c:	0004      	movs	r4, r0
 800319e:	2900      	cmp	r1, #0
 80031a0:	d102      	bne.n	80031a8 <sbrk_aligned+0x14>
 80031a2:	f000 fb95 	bl	80038d0 <_sbrk_r>
 80031a6:	6030      	str	r0, [r6, #0]
 80031a8:	0029      	movs	r1, r5
 80031aa:	0020      	movs	r0, r4
 80031ac:	f000 fb90 	bl	80038d0 <_sbrk_r>
 80031b0:	1c43      	adds	r3, r0, #1
 80031b2:	d103      	bne.n	80031bc <sbrk_aligned+0x28>
 80031b4:	2501      	movs	r5, #1
 80031b6:	426d      	negs	r5, r5
 80031b8:	0028      	movs	r0, r5
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	2303      	movs	r3, #3
 80031be:	1cc5      	adds	r5, r0, #3
 80031c0:	439d      	bics	r5, r3
 80031c2:	42a8      	cmp	r0, r5
 80031c4:	d0f8      	beq.n	80031b8 <sbrk_aligned+0x24>
 80031c6:	1a29      	subs	r1, r5, r0
 80031c8:	0020      	movs	r0, r4
 80031ca:	f000 fb81 	bl	80038d0 <_sbrk_r>
 80031ce:	3001      	adds	r0, #1
 80031d0:	d1f2      	bne.n	80031b8 <sbrk_aligned+0x24>
 80031d2:	e7ef      	b.n	80031b4 <sbrk_aligned+0x20>
 80031d4:	2000029c 	.word	0x2000029c

080031d8 <_malloc_r>:
 80031d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031da:	2203      	movs	r2, #3
 80031dc:	1ccb      	adds	r3, r1, #3
 80031de:	4393      	bics	r3, r2
 80031e0:	3308      	adds	r3, #8
 80031e2:	0005      	movs	r5, r0
 80031e4:	001f      	movs	r7, r3
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d234      	bcs.n	8003254 <_malloc_r+0x7c>
 80031ea:	270c      	movs	r7, #12
 80031ec:	42b9      	cmp	r1, r7
 80031ee:	d833      	bhi.n	8003258 <_malloc_r+0x80>
 80031f0:	0028      	movs	r0, r5
 80031f2:	f000 f871 	bl	80032d8 <__malloc_lock>
 80031f6:	4e37      	ldr	r6, [pc, #220]	@ (80032d4 <_malloc_r+0xfc>)
 80031f8:	6833      	ldr	r3, [r6, #0]
 80031fa:	001c      	movs	r4, r3
 80031fc:	2c00      	cmp	r4, #0
 80031fe:	d12f      	bne.n	8003260 <_malloc_r+0x88>
 8003200:	0039      	movs	r1, r7
 8003202:	0028      	movs	r0, r5
 8003204:	f7ff ffc6 	bl	8003194 <sbrk_aligned>
 8003208:	0004      	movs	r4, r0
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	d15f      	bne.n	80032ce <_malloc_r+0xf6>
 800320e:	6834      	ldr	r4, [r6, #0]
 8003210:	9400      	str	r4, [sp, #0]
 8003212:	9b00      	ldr	r3, [sp, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d14a      	bne.n	80032ae <_malloc_r+0xd6>
 8003218:	2c00      	cmp	r4, #0
 800321a:	d052      	beq.n	80032c2 <_malloc_r+0xea>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	0028      	movs	r0, r5
 8003220:	18e3      	adds	r3, r4, r3
 8003222:	9900      	ldr	r1, [sp, #0]
 8003224:	9301      	str	r3, [sp, #4]
 8003226:	f000 fb53 	bl	80038d0 <_sbrk_r>
 800322a:	9b01      	ldr	r3, [sp, #4]
 800322c:	4283      	cmp	r3, r0
 800322e:	d148      	bne.n	80032c2 <_malloc_r+0xea>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	0028      	movs	r0, r5
 8003234:	1aff      	subs	r7, r7, r3
 8003236:	0039      	movs	r1, r7
 8003238:	f7ff ffac 	bl	8003194 <sbrk_aligned>
 800323c:	3001      	adds	r0, #1
 800323e:	d040      	beq.n	80032c2 <_malloc_r+0xea>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	19db      	adds	r3, r3, r7
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	6833      	ldr	r3, [r6, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	2a00      	cmp	r2, #0
 800324c:	d133      	bne.n	80032b6 <_malloc_r+0xde>
 800324e:	9b00      	ldr	r3, [sp, #0]
 8003250:	6033      	str	r3, [r6, #0]
 8003252:	e019      	b.n	8003288 <_malloc_r+0xb0>
 8003254:	2b00      	cmp	r3, #0
 8003256:	dac9      	bge.n	80031ec <_malloc_r+0x14>
 8003258:	230c      	movs	r3, #12
 800325a:	602b      	str	r3, [r5, #0]
 800325c:	2000      	movs	r0, #0
 800325e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003260:	6821      	ldr	r1, [r4, #0]
 8003262:	1bc9      	subs	r1, r1, r7
 8003264:	d420      	bmi.n	80032a8 <_malloc_r+0xd0>
 8003266:	290b      	cmp	r1, #11
 8003268:	d90a      	bls.n	8003280 <_malloc_r+0xa8>
 800326a:	19e2      	adds	r2, r4, r7
 800326c:	6027      	str	r7, [r4, #0]
 800326e:	42a3      	cmp	r3, r4
 8003270:	d104      	bne.n	800327c <_malloc_r+0xa4>
 8003272:	6032      	str	r2, [r6, #0]
 8003274:	6863      	ldr	r3, [r4, #4]
 8003276:	6011      	str	r1, [r2, #0]
 8003278:	6053      	str	r3, [r2, #4]
 800327a:	e005      	b.n	8003288 <_malloc_r+0xb0>
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	e7f9      	b.n	8003274 <_malloc_r+0x9c>
 8003280:	6862      	ldr	r2, [r4, #4]
 8003282:	42a3      	cmp	r3, r4
 8003284:	d10e      	bne.n	80032a4 <_malloc_r+0xcc>
 8003286:	6032      	str	r2, [r6, #0]
 8003288:	0028      	movs	r0, r5
 800328a:	f000 f82d 	bl	80032e8 <__malloc_unlock>
 800328e:	0020      	movs	r0, r4
 8003290:	2207      	movs	r2, #7
 8003292:	300b      	adds	r0, #11
 8003294:	1d23      	adds	r3, r4, #4
 8003296:	4390      	bics	r0, r2
 8003298:	1ac2      	subs	r2, r0, r3
 800329a:	4298      	cmp	r0, r3
 800329c:	d0df      	beq.n	800325e <_malloc_r+0x86>
 800329e:	1a1b      	subs	r3, r3, r0
 80032a0:	50a3      	str	r3, [r4, r2]
 80032a2:	e7dc      	b.n	800325e <_malloc_r+0x86>
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	e7ef      	b.n	8003288 <_malloc_r+0xb0>
 80032a8:	0023      	movs	r3, r4
 80032aa:	6864      	ldr	r4, [r4, #4]
 80032ac:	e7a6      	b.n	80031fc <_malloc_r+0x24>
 80032ae:	9c00      	ldr	r4, [sp, #0]
 80032b0:	6863      	ldr	r3, [r4, #4]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	e7ad      	b.n	8003212 <_malloc_r+0x3a>
 80032b6:	001a      	movs	r2, r3
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	42a3      	cmp	r3, r4
 80032bc:	d1fb      	bne.n	80032b6 <_malloc_r+0xde>
 80032be:	2300      	movs	r3, #0
 80032c0:	e7da      	b.n	8003278 <_malloc_r+0xa0>
 80032c2:	230c      	movs	r3, #12
 80032c4:	0028      	movs	r0, r5
 80032c6:	602b      	str	r3, [r5, #0]
 80032c8:	f000 f80e 	bl	80032e8 <__malloc_unlock>
 80032cc:	e7c6      	b.n	800325c <_malloc_r+0x84>
 80032ce:	6007      	str	r7, [r0, #0]
 80032d0:	e7da      	b.n	8003288 <_malloc_r+0xb0>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	200002a0 	.word	0x200002a0

080032d8 <__malloc_lock>:
 80032d8:	b510      	push	{r4, lr}
 80032da:	4802      	ldr	r0, [pc, #8]	@ (80032e4 <__malloc_lock+0xc>)
 80032dc:	f7ff ff0e 	bl	80030fc <__retarget_lock_acquire_recursive>
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	20000298 	.word	0x20000298

080032e8 <__malloc_unlock>:
 80032e8:	b510      	push	{r4, lr}
 80032ea:	4802      	ldr	r0, [pc, #8]	@ (80032f4 <__malloc_unlock+0xc>)
 80032ec:	f7ff ff07 	bl	80030fe <__retarget_lock_release_recursive>
 80032f0:	bd10      	pop	{r4, pc}
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	20000298 	.word	0x20000298

080032f8 <__ssputs_r>:
 80032f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032fa:	688e      	ldr	r6, [r1, #8]
 80032fc:	b085      	sub	sp, #20
 80032fe:	001f      	movs	r7, r3
 8003300:	000c      	movs	r4, r1
 8003302:	680b      	ldr	r3, [r1, #0]
 8003304:	9002      	str	r0, [sp, #8]
 8003306:	9203      	str	r2, [sp, #12]
 8003308:	42be      	cmp	r6, r7
 800330a:	d830      	bhi.n	800336e <__ssputs_r+0x76>
 800330c:	210c      	movs	r1, #12
 800330e:	5e62      	ldrsh	r2, [r4, r1]
 8003310:	2190      	movs	r1, #144	@ 0x90
 8003312:	00c9      	lsls	r1, r1, #3
 8003314:	420a      	tst	r2, r1
 8003316:	d028      	beq.n	800336a <__ssputs_r+0x72>
 8003318:	2003      	movs	r0, #3
 800331a:	6921      	ldr	r1, [r4, #16]
 800331c:	1a5b      	subs	r3, r3, r1
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	6963      	ldr	r3, [r4, #20]
 8003322:	4343      	muls	r3, r0
 8003324:	9801      	ldr	r0, [sp, #4]
 8003326:	0fdd      	lsrs	r5, r3, #31
 8003328:	18ed      	adds	r5, r5, r3
 800332a:	1c7b      	adds	r3, r7, #1
 800332c:	181b      	adds	r3, r3, r0
 800332e:	106d      	asrs	r5, r5, #1
 8003330:	42ab      	cmp	r3, r5
 8003332:	d900      	bls.n	8003336 <__ssputs_r+0x3e>
 8003334:	001d      	movs	r5, r3
 8003336:	0552      	lsls	r2, r2, #21
 8003338:	d528      	bpl.n	800338c <__ssputs_r+0x94>
 800333a:	0029      	movs	r1, r5
 800333c:	9802      	ldr	r0, [sp, #8]
 800333e:	f7ff ff4b 	bl	80031d8 <_malloc_r>
 8003342:	1e06      	subs	r6, r0, #0
 8003344:	d02c      	beq.n	80033a0 <__ssputs_r+0xa8>
 8003346:	9a01      	ldr	r2, [sp, #4]
 8003348:	6921      	ldr	r1, [r4, #16]
 800334a:	f000 fade 	bl	800390a <memcpy>
 800334e:	89a2      	ldrh	r2, [r4, #12]
 8003350:	4b18      	ldr	r3, [pc, #96]	@ (80033b4 <__ssputs_r+0xbc>)
 8003352:	401a      	ands	r2, r3
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	4313      	orrs	r3, r2
 8003358:	81a3      	strh	r3, [r4, #12]
 800335a:	9b01      	ldr	r3, [sp, #4]
 800335c:	6126      	str	r6, [r4, #16]
 800335e:	18f6      	adds	r6, r6, r3
 8003360:	6026      	str	r6, [r4, #0]
 8003362:	003e      	movs	r6, r7
 8003364:	6165      	str	r5, [r4, #20]
 8003366:	1aed      	subs	r5, r5, r3
 8003368:	60a5      	str	r5, [r4, #8]
 800336a:	42be      	cmp	r6, r7
 800336c:	d900      	bls.n	8003370 <__ssputs_r+0x78>
 800336e:	003e      	movs	r6, r7
 8003370:	0032      	movs	r2, r6
 8003372:	9903      	ldr	r1, [sp, #12]
 8003374:	6820      	ldr	r0, [r4, #0]
 8003376:	f000 fa99 	bl	80038ac <memmove>
 800337a:	2000      	movs	r0, #0
 800337c:	68a3      	ldr	r3, [r4, #8]
 800337e:	1b9b      	subs	r3, r3, r6
 8003380:	60a3      	str	r3, [r4, #8]
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	199b      	adds	r3, r3, r6
 8003386:	6023      	str	r3, [r4, #0]
 8003388:	b005      	add	sp, #20
 800338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800338c:	002a      	movs	r2, r5
 800338e:	9802      	ldr	r0, [sp, #8]
 8003390:	f000 fac4 	bl	800391c <_realloc_r>
 8003394:	1e06      	subs	r6, r0, #0
 8003396:	d1e0      	bne.n	800335a <__ssputs_r+0x62>
 8003398:	6921      	ldr	r1, [r4, #16]
 800339a:	9802      	ldr	r0, [sp, #8]
 800339c:	f7ff feb0 	bl	8003100 <_free_r>
 80033a0:	230c      	movs	r3, #12
 80033a2:	2001      	movs	r0, #1
 80033a4:	9a02      	ldr	r2, [sp, #8]
 80033a6:	4240      	negs	r0, r0
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	89a2      	ldrh	r2, [r4, #12]
 80033ac:	3334      	adds	r3, #52	@ 0x34
 80033ae:	4313      	orrs	r3, r2
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	e7e9      	b.n	8003388 <__ssputs_r+0x90>
 80033b4:	fffffb7f 	.word	0xfffffb7f

080033b8 <_svfiprintf_r>:
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b0a1      	sub	sp, #132	@ 0x84
 80033bc:	9003      	str	r0, [sp, #12]
 80033be:	001d      	movs	r5, r3
 80033c0:	898b      	ldrh	r3, [r1, #12]
 80033c2:	000f      	movs	r7, r1
 80033c4:	0016      	movs	r6, r2
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	d511      	bpl.n	80033ee <_svfiprintf_r+0x36>
 80033ca:	690b      	ldr	r3, [r1, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10e      	bne.n	80033ee <_svfiprintf_r+0x36>
 80033d0:	2140      	movs	r1, #64	@ 0x40
 80033d2:	f7ff ff01 	bl	80031d8 <_malloc_r>
 80033d6:	6038      	str	r0, [r7, #0]
 80033d8:	6138      	str	r0, [r7, #16]
 80033da:	2800      	cmp	r0, #0
 80033dc:	d105      	bne.n	80033ea <_svfiprintf_r+0x32>
 80033de:	230c      	movs	r3, #12
 80033e0:	9a03      	ldr	r2, [sp, #12]
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	2001      	movs	r0, #1
 80033e6:	4240      	negs	r0, r0
 80033e8:	e0cf      	b.n	800358a <_svfiprintf_r+0x1d2>
 80033ea:	2340      	movs	r3, #64	@ 0x40
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	2300      	movs	r3, #0
 80033f0:	ac08      	add	r4, sp, #32
 80033f2:	6163      	str	r3, [r4, #20]
 80033f4:	3320      	adds	r3, #32
 80033f6:	7663      	strb	r3, [r4, #25]
 80033f8:	3310      	adds	r3, #16
 80033fa:	76a3      	strb	r3, [r4, #26]
 80033fc:	9507      	str	r5, [sp, #28]
 80033fe:	0035      	movs	r5, r6
 8003400:	782b      	ldrb	r3, [r5, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <_svfiprintf_r+0x52>
 8003406:	2b25      	cmp	r3, #37	@ 0x25
 8003408:	d148      	bne.n	800349c <_svfiprintf_r+0xe4>
 800340a:	1bab      	subs	r3, r5, r6
 800340c:	9305      	str	r3, [sp, #20]
 800340e:	42b5      	cmp	r5, r6
 8003410:	d00b      	beq.n	800342a <_svfiprintf_r+0x72>
 8003412:	0032      	movs	r2, r6
 8003414:	0039      	movs	r1, r7
 8003416:	9803      	ldr	r0, [sp, #12]
 8003418:	f7ff ff6e 	bl	80032f8 <__ssputs_r>
 800341c:	3001      	adds	r0, #1
 800341e:	d100      	bne.n	8003422 <_svfiprintf_r+0x6a>
 8003420:	e0ae      	b.n	8003580 <_svfiprintf_r+0x1c8>
 8003422:	6963      	ldr	r3, [r4, #20]
 8003424:	9a05      	ldr	r2, [sp, #20]
 8003426:	189b      	adds	r3, r3, r2
 8003428:	6163      	str	r3, [r4, #20]
 800342a:	782b      	ldrb	r3, [r5, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d100      	bne.n	8003432 <_svfiprintf_r+0x7a>
 8003430:	e0a6      	b.n	8003580 <_svfiprintf_r+0x1c8>
 8003432:	2201      	movs	r2, #1
 8003434:	2300      	movs	r3, #0
 8003436:	4252      	negs	r2, r2
 8003438:	6062      	str	r2, [r4, #4]
 800343a:	a904      	add	r1, sp, #16
 800343c:	3254      	adds	r2, #84	@ 0x54
 800343e:	1852      	adds	r2, r2, r1
 8003440:	1c6e      	adds	r6, r5, #1
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	60e3      	str	r3, [r4, #12]
 8003446:	60a3      	str	r3, [r4, #8]
 8003448:	7013      	strb	r3, [r2, #0]
 800344a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800344c:	4b54      	ldr	r3, [pc, #336]	@ (80035a0 <_svfiprintf_r+0x1e8>)
 800344e:	2205      	movs	r2, #5
 8003450:	0018      	movs	r0, r3
 8003452:	7831      	ldrb	r1, [r6, #0]
 8003454:	9305      	str	r3, [sp, #20]
 8003456:	f000 fa4d 	bl	80038f4 <memchr>
 800345a:	1c75      	adds	r5, r6, #1
 800345c:	2800      	cmp	r0, #0
 800345e:	d11f      	bne.n	80034a0 <_svfiprintf_r+0xe8>
 8003460:	6822      	ldr	r2, [r4, #0]
 8003462:	06d3      	lsls	r3, r2, #27
 8003464:	d504      	bpl.n	8003470 <_svfiprintf_r+0xb8>
 8003466:	2353      	movs	r3, #83	@ 0x53
 8003468:	a904      	add	r1, sp, #16
 800346a:	185b      	adds	r3, r3, r1
 800346c:	2120      	movs	r1, #32
 800346e:	7019      	strb	r1, [r3, #0]
 8003470:	0713      	lsls	r3, r2, #28
 8003472:	d504      	bpl.n	800347e <_svfiprintf_r+0xc6>
 8003474:	2353      	movs	r3, #83	@ 0x53
 8003476:	a904      	add	r1, sp, #16
 8003478:	185b      	adds	r3, r3, r1
 800347a:	212b      	movs	r1, #43	@ 0x2b
 800347c:	7019      	strb	r1, [r3, #0]
 800347e:	7833      	ldrb	r3, [r6, #0]
 8003480:	2b2a      	cmp	r3, #42	@ 0x2a
 8003482:	d016      	beq.n	80034b2 <_svfiprintf_r+0xfa>
 8003484:	0035      	movs	r5, r6
 8003486:	2100      	movs	r1, #0
 8003488:	200a      	movs	r0, #10
 800348a:	68e3      	ldr	r3, [r4, #12]
 800348c:	782a      	ldrb	r2, [r5, #0]
 800348e:	1c6e      	adds	r6, r5, #1
 8003490:	3a30      	subs	r2, #48	@ 0x30
 8003492:	2a09      	cmp	r2, #9
 8003494:	d950      	bls.n	8003538 <_svfiprintf_r+0x180>
 8003496:	2900      	cmp	r1, #0
 8003498:	d111      	bne.n	80034be <_svfiprintf_r+0x106>
 800349a:	e017      	b.n	80034cc <_svfiprintf_r+0x114>
 800349c:	3501      	adds	r5, #1
 800349e:	e7af      	b.n	8003400 <_svfiprintf_r+0x48>
 80034a0:	9b05      	ldr	r3, [sp, #20]
 80034a2:	6822      	ldr	r2, [r4, #0]
 80034a4:	1ac0      	subs	r0, r0, r3
 80034a6:	2301      	movs	r3, #1
 80034a8:	4083      	lsls	r3, r0
 80034aa:	4313      	orrs	r3, r2
 80034ac:	002e      	movs	r6, r5
 80034ae:	6023      	str	r3, [r4, #0]
 80034b0:	e7cc      	b.n	800344c <_svfiprintf_r+0x94>
 80034b2:	9b07      	ldr	r3, [sp, #28]
 80034b4:	1d19      	adds	r1, r3, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	9107      	str	r1, [sp, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	db01      	blt.n	80034c2 <_svfiprintf_r+0x10a>
 80034be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80034c0:	e004      	b.n	80034cc <_svfiprintf_r+0x114>
 80034c2:	425b      	negs	r3, r3
 80034c4:	60e3      	str	r3, [r4, #12]
 80034c6:	2302      	movs	r3, #2
 80034c8:	4313      	orrs	r3, r2
 80034ca:	6023      	str	r3, [r4, #0]
 80034cc:	782b      	ldrb	r3, [r5, #0]
 80034ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80034d0:	d10c      	bne.n	80034ec <_svfiprintf_r+0x134>
 80034d2:	786b      	ldrb	r3, [r5, #1]
 80034d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80034d6:	d134      	bne.n	8003542 <_svfiprintf_r+0x18a>
 80034d8:	9b07      	ldr	r3, [sp, #28]
 80034da:	3502      	adds	r5, #2
 80034dc:	1d1a      	adds	r2, r3, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	9207      	str	r2, [sp, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da01      	bge.n	80034ea <_svfiprintf_r+0x132>
 80034e6:	2301      	movs	r3, #1
 80034e8:	425b      	negs	r3, r3
 80034ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ec:	4e2d      	ldr	r6, [pc, #180]	@ (80035a4 <_svfiprintf_r+0x1ec>)
 80034ee:	2203      	movs	r2, #3
 80034f0:	0030      	movs	r0, r6
 80034f2:	7829      	ldrb	r1, [r5, #0]
 80034f4:	f000 f9fe 	bl	80038f4 <memchr>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d006      	beq.n	800350a <_svfiprintf_r+0x152>
 80034fc:	2340      	movs	r3, #64	@ 0x40
 80034fe:	1b80      	subs	r0, r0, r6
 8003500:	4083      	lsls	r3, r0
 8003502:	6822      	ldr	r2, [r4, #0]
 8003504:	3501      	adds	r5, #1
 8003506:	4313      	orrs	r3, r2
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	7829      	ldrb	r1, [r5, #0]
 800350c:	2206      	movs	r2, #6
 800350e:	4826      	ldr	r0, [pc, #152]	@ (80035a8 <_svfiprintf_r+0x1f0>)
 8003510:	1c6e      	adds	r6, r5, #1
 8003512:	7621      	strb	r1, [r4, #24]
 8003514:	f000 f9ee 	bl	80038f4 <memchr>
 8003518:	2800      	cmp	r0, #0
 800351a:	d038      	beq.n	800358e <_svfiprintf_r+0x1d6>
 800351c:	4b23      	ldr	r3, [pc, #140]	@ (80035ac <_svfiprintf_r+0x1f4>)
 800351e:	2b00      	cmp	r3, #0
 8003520:	d122      	bne.n	8003568 <_svfiprintf_r+0x1b0>
 8003522:	2207      	movs	r2, #7
 8003524:	9b07      	ldr	r3, [sp, #28]
 8003526:	3307      	adds	r3, #7
 8003528:	4393      	bics	r3, r2
 800352a:	3308      	adds	r3, #8
 800352c:	9307      	str	r3, [sp, #28]
 800352e:	6963      	ldr	r3, [r4, #20]
 8003530:	9a04      	ldr	r2, [sp, #16]
 8003532:	189b      	adds	r3, r3, r2
 8003534:	6163      	str	r3, [r4, #20]
 8003536:	e762      	b.n	80033fe <_svfiprintf_r+0x46>
 8003538:	4343      	muls	r3, r0
 800353a:	0035      	movs	r5, r6
 800353c:	2101      	movs	r1, #1
 800353e:	189b      	adds	r3, r3, r2
 8003540:	e7a4      	b.n	800348c <_svfiprintf_r+0xd4>
 8003542:	2300      	movs	r3, #0
 8003544:	200a      	movs	r0, #10
 8003546:	0019      	movs	r1, r3
 8003548:	3501      	adds	r5, #1
 800354a:	6063      	str	r3, [r4, #4]
 800354c:	782a      	ldrb	r2, [r5, #0]
 800354e:	1c6e      	adds	r6, r5, #1
 8003550:	3a30      	subs	r2, #48	@ 0x30
 8003552:	2a09      	cmp	r2, #9
 8003554:	d903      	bls.n	800355e <_svfiprintf_r+0x1a6>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0c8      	beq.n	80034ec <_svfiprintf_r+0x134>
 800355a:	9109      	str	r1, [sp, #36]	@ 0x24
 800355c:	e7c6      	b.n	80034ec <_svfiprintf_r+0x134>
 800355e:	4341      	muls	r1, r0
 8003560:	0035      	movs	r5, r6
 8003562:	2301      	movs	r3, #1
 8003564:	1889      	adds	r1, r1, r2
 8003566:	e7f1      	b.n	800354c <_svfiprintf_r+0x194>
 8003568:	aa07      	add	r2, sp, #28
 800356a:	9200      	str	r2, [sp, #0]
 800356c:	0021      	movs	r1, r4
 800356e:	003a      	movs	r2, r7
 8003570:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <_svfiprintf_r+0x1f8>)
 8003572:	9803      	ldr	r0, [sp, #12]
 8003574:	e000      	b.n	8003578 <_svfiprintf_r+0x1c0>
 8003576:	bf00      	nop
 8003578:	9004      	str	r0, [sp, #16]
 800357a:	9b04      	ldr	r3, [sp, #16]
 800357c:	3301      	adds	r3, #1
 800357e:	d1d6      	bne.n	800352e <_svfiprintf_r+0x176>
 8003580:	89bb      	ldrh	r3, [r7, #12]
 8003582:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003584:	065b      	lsls	r3, r3, #25
 8003586:	d500      	bpl.n	800358a <_svfiprintf_r+0x1d2>
 8003588:	e72c      	b.n	80033e4 <_svfiprintf_r+0x2c>
 800358a:	b021      	add	sp, #132	@ 0x84
 800358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358e:	aa07      	add	r2, sp, #28
 8003590:	9200      	str	r2, [sp, #0]
 8003592:	0021      	movs	r1, r4
 8003594:	003a      	movs	r2, r7
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <_svfiprintf_r+0x1f8>)
 8003598:	9803      	ldr	r0, [sp, #12]
 800359a:	f000 f87b 	bl	8003694 <_printf_i>
 800359e:	e7eb      	b.n	8003578 <_svfiprintf_r+0x1c0>
 80035a0:	080039e8 	.word	0x080039e8
 80035a4:	080039ee 	.word	0x080039ee
 80035a8:	080039f2 	.word	0x080039f2
 80035ac:	00000000 	.word	0x00000000
 80035b0:	080032f9 	.word	0x080032f9

080035b4 <_printf_common>:
 80035b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035b6:	0016      	movs	r6, r2
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	688a      	ldr	r2, [r1, #8]
 80035bc:	690b      	ldr	r3, [r1, #16]
 80035be:	000c      	movs	r4, r1
 80035c0:	9000      	str	r0, [sp, #0]
 80035c2:	4293      	cmp	r3, r2
 80035c4:	da00      	bge.n	80035c8 <_printf_common+0x14>
 80035c6:	0013      	movs	r3, r2
 80035c8:	0022      	movs	r2, r4
 80035ca:	6033      	str	r3, [r6, #0]
 80035cc:	3243      	adds	r2, #67	@ 0x43
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	2a00      	cmp	r2, #0
 80035d2:	d001      	beq.n	80035d8 <_printf_common+0x24>
 80035d4:	3301      	adds	r3, #1
 80035d6:	6033      	str	r3, [r6, #0]
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	069b      	lsls	r3, r3, #26
 80035dc:	d502      	bpl.n	80035e4 <_printf_common+0x30>
 80035de:	6833      	ldr	r3, [r6, #0]
 80035e0:	3302      	adds	r3, #2
 80035e2:	6033      	str	r3, [r6, #0]
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	2306      	movs	r3, #6
 80035e8:	0015      	movs	r5, r2
 80035ea:	401d      	ands	r5, r3
 80035ec:	421a      	tst	r2, r3
 80035ee:	d027      	beq.n	8003640 <_printf_common+0x8c>
 80035f0:	0023      	movs	r3, r4
 80035f2:	3343      	adds	r3, #67	@ 0x43
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	4193      	sbcs	r3, r2
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	0692      	lsls	r2, r2, #26
 80035fe:	d430      	bmi.n	8003662 <_printf_common+0xae>
 8003600:	0022      	movs	r2, r4
 8003602:	9901      	ldr	r1, [sp, #4]
 8003604:	9800      	ldr	r0, [sp, #0]
 8003606:	9d08      	ldr	r5, [sp, #32]
 8003608:	3243      	adds	r2, #67	@ 0x43
 800360a:	47a8      	blx	r5
 800360c:	3001      	adds	r0, #1
 800360e:	d025      	beq.n	800365c <_printf_common+0xa8>
 8003610:	2206      	movs	r2, #6
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	2500      	movs	r5, #0
 8003616:	4013      	ands	r3, r2
 8003618:	2b04      	cmp	r3, #4
 800361a:	d105      	bne.n	8003628 <_printf_common+0x74>
 800361c:	6833      	ldr	r3, [r6, #0]
 800361e:	68e5      	ldr	r5, [r4, #12]
 8003620:	1aed      	subs	r5, r5, r3
 8003622:	43eb      	mvns	r3, r5
 8003624:	17db      	asrs	r3, r3, #31
 8003626:	401d      	ands	r5, r3
 8003628:	68a3      	ldr	r3, [r4, #8]
 800362a:	6922      	ldr	r2, [r4, #16]
 800362c:	4293      	cmp	r3, r2
 800362e:	dd01      	ble.n	8003634 <_printf_common+0x80>
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	18ed      	adds	r5, r5, r3
 8003634:	2600      	movs	r6, #0
 8003636:	42b5      	cmp	r5, r6
 8003638:	d120      	bne.n	800367c <_printf_common+0xc8>
 800363a:	2000      	movs	r0, #0
 800363c:	e010      	b.n	8003660 <_printf_common+0xac>
 800363e:	3501      	adds	r5, #1
 8003640:	68e3      	ldr	r3, [r4, #12]
 8003642:	6832      	ldr	r2, [r6, #0]
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	42ab      	cmp	r3, r5
 8003648:	ddd2      	ble.n	80035f0 <_printf_common+0x3c>
 800364a:	0022      	movs	r2, r4
 800364c:	2301      	movs	r3, #1
 800364e:	9901      	ldr	r1, [sp, #4]
 8003650:	9800      	ldr	r0, [sp, #0]
 8003652:	9f08      	ldr	r7, [sp, #32]
 8003654:	3219      	adds	r2, #25
 8003656:	47b8      	blx	r7
 8003658:	3001      	adds	r0, #1
 800365a:	d1f0      	bne.n	800363e <_printf_common+0x8a>
 800365c:	2001      	movs	r0, #1
 800365e:	4240      	negs	r0, r0
 8003660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003662:	2030      	movs	r0, #48	@ 0x30
 8003664:	18e1      	adds	r1, r4, r3
 8003666:	3143      	adds	r1, #67	@ 0x43
 8003668:	7008      	strb	r0, [r1, #0]
 800366a:	0021      	movs	r1, r4
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	3145      	adds	r1, #69	@ 0x45
 8003670:	7809      	ldrb	r1, [r1, #0]
 8003672:	18a2      	adds	r2, r4, r2
 8003674:	3243      	adds	r2, #67	@ 0x43
 8003676:	3302      	adds	r3, #2
 8003678:	7011      	strb	r1, [r2, #0]
 800367a:	e7c1      	b.n	8003600 <_printf_common+0x4c>
 800367c:	0022      	movs	r2, r4
 800367e:	2301      	movs	r3, #1
 8003680:	9901      	ldr	r1, [sp, #4]
 8003682:	9800      	ldr	r0, [sp, #0]
 8003684:	9f08      	ldr	r7, [sp, #32]
 8003686:	321a      	adds	r2, #26
 8003688:	47b8      	blx	r7
 800368a:	3001      	adds	r0, #1
 800368c:	d0e6      	beq.n	800365c <_printf_common+0xa8>
 800368e:	3601      	adds	r6, #1
 8003690:	e7d1      	b.n	8003636 <_printf_common+0x82>
	...

08003694 <_printf_i>:
 8003694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003696:	b08b      	sub	sp, #44	@ 0x2c
 8003698:	9206      	str	r2, [sp, #24]
 800369a:	000a      	movs	r2, r1
 800369c:	3243      	adds	r2, #67	@ 0x43
 800369e:	9307      	str	r3, [sp, #28]
 80036a0:	9005      	str	r0, [sp, #20]
 80036a2:	9203      	str	r2, [sp, #12]
 80036a4:	7e0a      	ldrb	r2, [r1, #24]
 80036a6:	000c      	movs	r4, r1
 80036a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80036aa:	2a78      	cmp	r2, #120	@ 0x78
 80036ac:	d809      	bhi.n	80036c2 <_printf_i+0x2e>
 80036ae:	2a62      	cmp	r2, #98	@ 0x62
 80036b0:	d80b      	bhi.n	80036ca <_printf_i+0x36>
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	d100      	bne.n	80036b8 <_printf_i+0x24>
 80036b6:	e0ba      	b.n	800382e <_printf_i+0x19a>
 80036b8:	497a      	ldr	r1, [pc, #488]	@ (80038a4 <_printf_i+0x210>)
 80036ba:	9104      	str	r1, [sp, #16]
 80036bc:	2a58      	cmp	r2, #88	@ 0x58
 80036be:	d100      	bne.n	80036c2 <_printf_i+0x2e>
 80036c0:	e08e      	b.n	80037e0 <_printf_i+0x14c>
 80036c2:	0025      	movs	r5, r4
 80036c4:	3542      	adds	r5, #66	@ 0x42
 80036c6:	702a      	strb	r2, [r5, #0]
 80036c8:	e022      	b.n	8003710 <_printf_i+0x7c>
 80036ca:	0010      	movs	r0, r2
 80036cc:	3863      	subs	r0, #99	@ 0x63
 80036ce:	2815      	cmp	r0, #21
 80036d0:	d8f7      	bhi.n	80036c2 <_printf_i+0x2e>
 80036d2:	f7fc fd21 	bl	8000118 <__gnu_thumb1_case_shi>
 80036d6:	0016      	.short	0x0016
 80036d8:	fff6001f 	.word	0xfff6001f
 80036dc:	fff6fff6 	.word	0xfff6fff6
 80036e0:	001ffff6 	.word	0x001ffff6
 80036e4:	fff6fff6 	.word	0xfff6fff6
 80036e8:	fff6fff6 	.word	0xfff6fff6
 80036ec:	0036009f 	.word	0x0036009f
 80036f0:	fff6007e 	.word	0xfff6007e
 80036f4:	00b0fff6 	.word	0x00b0fff6
 80036f8:	0036fff6 	.word	0x0036fff6
 80036fc:	fff6fff6 	.word	0xfff6fff6
 8003700:	0082      	.short	0x0082
 8003702:	0025      	movs	r5, r4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	3542      	adds	r5, #66	@ 0x42
 8003708:	1d11      	adds	r1, r2, #4
 800370a:	6019      	str	r1, [r3, #0]
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	702b      	strb	r3, [r5, #0]
 8003710:	2301      	movs	r3, #1
 8003712:	e09e      	b.n	8003852 <_printf_i+0x1be>
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	6809      	ldr	r1, [r1, #0]
 8003718:	1d02      	adds	r2, r0, #4
 800371a:	060d      	lsls	r5, r1, #24
 800371c:	d50b      	bpl.n	8003736 <_printf_i+0xa2>
 800371e:	6806      	ldr	r6, [r0, #0]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	2e00      	cmp	r6, #0
 8003724:	da03      	bge.n	800372e <_printf_i+0x9a>
 8003726:	232d      	movs	r3, #45	@ 0x2d
 8003728:	9a03      	ldr	r2, [sp, #12]
 800372a:	4276      	negs	r6, r6
 800372c:	7013      	strb	r3, [r2, #0]
 800372e:	4b5d      	ldr	r3, [pc, #372]	@ (80038a4 <_printf_i+0x210>)
 8003730:	270a      	movs	r7, #10
 8003732:	9304      	str	r3, [sp, #16]
 8003734:	e018      	b.n	8003768 <_printf_i+0xd4>
 8003736:	6806      	ldr	r6, [r0, #0]
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	0649      	lsls	r1, r1, #25
 800373c:	d5f1      	bpl.n	8003722 <_printf_i+0x8e>
 800373e:	b236      	sxth	r6, r6
 8003740:	e7ef      	b.n	8003722 <_printf_i+0x8e>
 8003742:	6808      	ldr	r0, [r1, #0]
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	c940      	ldmia	r1!, {r6}
 8003748:	0605      	lsls	r5, r0, #24
 800374a:	d402      	bmi.n	8003752 <_printf_i+0xbe>
 800374c:	0640      	lsls	r0, r0, #25
 800374e:	d500      	bpl.n	8003752 <_printf_i+0xbe>
 8003750:	b2b6      	uxth	r6, r6
 8003752:	6019      	str	r1, [r3, #0]
 8003754:	4b53      	ldr	r3, [pc, #332]	@ (80038a4 <_printf_i+0x210>)
 8003756:	270a      	movs	r7, #10
 8003758:	9304      	str	r3, [sp, #16]
 800375a:	2a6f      	cmp	r2, #111	@ 0x6f
 800375c:	d100      	bne.n	8003760 <_printf_i+0xcc>
 800375e:	3f02      	subs	r7, #2
 8003760:	0023      	movs	r3, r4
 8003762:	2200      	movs	r2, #0
 8003764:	3343      	adds	r3, #67	@ 0x43
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	60a3      	str	r3, [r4, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	db06      	blt.n	800377e <_printf_i+0xea>
 8003770:	2104      	movs	r1, #4
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	9d03      	ldr	r5, [sp, #12]
 8003776:	438a      	bics	r2, r1
 8003778:	6022      	str	r2, [r4, #0]
 800377a:	4333      	orrs	r3, r6
 800377c:	d00c      	beq.n	8003798 <_printf_i+0x104>
 800377e:	9d03      	ldr	r5, [sp, #12]
 8003780:	0030      	movs	r0, r6
 8003782:	0039      	movs	r1, r7
 8003784:	f7fc fd58 	bl	8000238 <__aeabi_uidivmod>
 8003788:	9b04      	ldr	r3, [sp, #16]
 800378a:	3d01      	subs	r5, #1
 800378c:	5c5b      	ldrb	r3, [r3, r1]
 800378e:	702b      	strb	r3, [r5, #0]
 8003790:	0033      	movs	r3, r6
 8003792:	0006      	movs	r6, r0
 8003794:	429f      	cmp	r7, r3
 8003796:	d9f3      	bls.n	8003780 <_printf_i+0xec>
 8003798:	2f08      	cmp	r7, #8
 800379a:	d109      	bne.n	80037b0 <_printf_i+0x11c>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	07db      	lsls	r3, r3, #31
 80037a0:	d506      	bpl.n	80037b0 <_printf_i+0x11c>
 80037a2:	6862      	ldr	r2, [r4, #4]
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	dc02      	bgt.n	80037b0 <_printf_i+0x11c>
 80037aa:	2330      	movs	r3, #48	@ 0x30
 80037ac:	3d01      	subs	r5, #1
 80037ae:	702b      	strb	r3, [r5, #0]
 80037b0:	9b03      	ldr	r3, [sp, #12]
 80037b2:	1b5b      	subs	r3, r3, r5
 80037b4:	6123      	str	r3, [r4, #16]
 80037b6:	9b07      	ldr	r3, [sp, #28]
 80037b8:	0021      	movs	r1, r4
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	9805      	ldr	r0, [sp, #20]
 80037be:	9b06      	ldr	r3, [sp, #24]
 80037c0:	aa09      	add	r2, sp, #36	@ 0x24
 80037c2:	f7ff fef7 	bl	80035b4 <_printf_common>
 80037c6:	3001      	adds	r0, #1
 80037c8:	d148      	bne.n	800385c <_printf_i+0x1c8>
 80037ca:	2001      	movs	r0, #1
 80037cc:	4240      	negs	r0, r0
 80037ce:	b00b      	add	sp, #44	@ 0x2c
 80037d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d2:	2220      	movs	r2, #32
 80037d4:	6809      	ldr	r1, [r1, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	6022      	str	r2, [r4, #0]
 80037da:	2278      	movs	r2, #120	@ 0x78
 80037dc:	4932      	ldr	r1, [pc, #200]	@ (80038a8 <_printf_i+0x214>)
 80037de:	9104      	str	r1, [sp, #16]
 80037e0:	0021      	movs	r1, r4
 80037e2:	3145      	adds	r1, #69	@ 0x45
 80037e4:	700a      	strb	r2, [r1, #0]
 80037e6:	6819      	ldr	r1, [r3, #0]
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	c940      	ldmia	r1!, {r6}
 80037ec:	0610      	lsls	r0, r2, #24
 80037ee:	d402      	bmi.n	80037f6 <_printf_i+0x162>
 80037f0:	0650      	lsls	r0, r2, #25
 80037f2:	d500      	bpl.n	80037f6 <_printf_i+0x162>
 80037f4:	b2b6      	uxth	r6, r6
 80037f6:	6019      	str	r1, [r3, #0]
 80037f8:	07d3      	lsls	r3, r2, #31
 80037fa:	d502      	bpl.n	8003802 <_printf_i+0x16e>
 80037fc:	2320      	movs	r3, #32
 80037fe:	4313      	orrs	r3, r2
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	2e00      	cmp	r6, #0
 8003804:	d001      	beq.n	800380a <_printf_i+0x176>
 8003806:	2710      	movs	r7, #16
 8003808:	e7aa      	b.n	8003760 <_printf_i+0xcc>
 800380a:	2220      	movs	r2, #32
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	4393      	bics	r3, r2
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	e7f8      	b.n	8003806 <_printf_i+0x172>
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	680d      	ldr	r5, [r1, #0]
 8003818:	1d10      	adds	r0, r2, #4
 800381a:	6949      	ldr	r1, [r1, #20]
 800381c:	6018      	str	r0, [r3, #0]
 800381e:	6813      	ldr	r3, [r2, #0]
 8003820:	062e      	lsls	r6, r5, #24
 8003822:	d501      	bpl.n	8003828 <_printf_i+0x194>
 8003824:	6019      	str	r1, [r3, #0]
 8003826:	e002      	b.n	800382e <_printf_i+0x19a>
 8003828:	066d      	lsls	r5, r5, #25
 800382a:	d5fb      	bpl.n	8003824 <_printf_i+0x190>
 800382c:	8019      	strh	r1, [r3, #0]
 800382e:	2300      	movs	r3, #0
 8003830:	9d03      	ldr	r5, [sp, #12]
 8003832:	6123      	str	r3, [r4, #16]
 8003834:	e7bf      	b.n	80037b6 <_printf_i+0x122>
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	1d11      	adds	r1, r2, #4
 800383a:	6019      	str	r1, [r3, #0]
 800383c:	6815      	ldr	r5, [r2, #0]
 800383e:	2100      	movs	r1, #0
 8003840:	0028      	movs	r0, r5
 8003842:	6862      	ldr	r2, [r4, #4]
 8003844:	f000 f856 	bl	80038f4 <memchr>
 8003848:	2800      	cmp	r0, #0
 800384a:	d001      	beq.n	8003850 <_printf_i+0x1bc>
 800384c:	1b40      	subs	r0, r0, r5
 800384e:	6060      	str	r0, [r4, #4]
 8003850:	6863      	ldr	r3, [r4, #4]
 8003852:	6123      	str	r3, [r4, #16]
 8003854:	2300      	movs	r3, #0
 8003856:	9a03      	ldr	r2, [sp, #12]
 8003858:	7013      	strb	r3, [r2, #0]
 800385a:	e7ac      	b.n	80037b6 <_printf_i+0x122>
 800385c:	002a      	movs	r2, r5
 800385e:	6923      	ldr	r3, [r4, #16]
 8003860:	9906      	ldr	r1, [sp, #24]
 8003862:	9805      	ldr	r0, [sp, #20]
 8003864:	9d07      	ldr	r5, [sp, #28]
 8003866:	47a8      	blx	r5
 8003868:	3001      	adds	r0, #1
 800386a:	d0ae      	beq.n	80037ca <_printf_i+0x136>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	079b      	lsls	r3, r3, #30
 8003870:	d415      	bmi.n	800389e <_printf_i+0x20a>
 8003872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003874:	68e0      	ldr	r0, [r4, #12]
 8003876:	4298      	cmp	r0, r3
 8003878:	daa9      	bge.n	80037ce <_printf_i+0x13a>
 800387a:	0018      	movs	r0, r3
 800387c:	e7a7      	b.n	80037ce <_printf_i+0x13a>
 800387e:	0022      	movs	r2, r4
 8003880:	2301      	movs	r3, #1
 8003882:	9906      	ldr	r1, [sp, #24]
 8003884:	9805      	ldr	r0, [sp, #20]
 8003886:	9e07      	ldr	r6, [sp, #28]
 8003888:	3219      	adds	r2, #25
 800388a:	47b0      	blx	r6
 800388c:	3001      	adds	r0, #1
 800388e:	d09c      	beq.n	80037ca <_printf_i+0x136>
 8003890:	3501      	adds	r5, #1
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	42ab      	cmp	r3, r5
 800389a:	dcf0      	bgt.n	800387e <_printf_i+0x1ea>
 800389c:	e7e9      	b.n	8003872 <_printf_i+0x1de>
 800389e:	2500      	movs	r5, #0
 80038a0:	e7f7      	b.n	8003892 <_printf_i+0x1fe>
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	080039f9 	.word	0x080039f9
 80038a8:	08003a0a 	.word	0x08003a0a

080038ac <memmove>:
 80038ac:	b510      	push	{r4, lr}
 80038ae:	4288      	cmp	r0, r1
 80038b0:	d902      	bls.n	80038b8 <memmove+0xc>
 80038b2:	188b      	adds	r3, r1, r2
 80038b4:	4298      	cmp	r0, r3
 80038b6:	d308      	bcc.n	80038ca <memmove+0x1e>
 80038b8:	2300      	movs	r3, #0
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d007      	beq.n	80038ce <memmove+0x22>
 80038be:	5ccc      	ldrb	r4, [r1, r3]
 80038c0:	54c4      	strb	r4, [r0, r3]
 80038c2:	3301      	adds	r3, #1
 80038c4:	e7f9      	b.n	80038ba <memmove+0xe>
 80038c6:	5c8b      	ldrb	r3, [r1, r2]
 80038c8:	5483      	strb	r3, [r0, r2]
 80038ca:	3a01      	subs	r2, #1
 80038cc:	d2fb      	bcs.n	80038c6 <memmove+0x1a>
 80038ce:	bd10      	pop	{r4, pc}

080038d0 <_sbrk_r>:
 80038d0:	2300      	movs	r3, #0
 80038d2:	b570      	push	{r4, r5, r6, lr}
 80038d4:	4d06      	ldr	r5, [pc, #24]	@ (80038f0 <_sbrk_r+0x20>)
 80038d6:	0004      	movs	r4, r0
 80038d8:	0008      	movs	r0, r1
 80038da:	602b      	str	r3, [r5, #0]
 80038dc:	f7fc ff32 	bl	8000744 <_sbrk>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d103      	bne.n	80038ec <_sbrk_r+0x1c>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d000      	beq.n	80038ec <_sbrk_r+0x1c>
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	bd70      	pop	{r4, r5, r6, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	20000294 	.word	0x20000294

080038f4 <memchr>:
 80038f4:	b2c9      	uxtb	r1, r1
 80038f6:	1882      	adds	r2, r0, r2
 80038f8:	4290      	cmp	r0, r2
 80038fa:	d101      	bne.n	8003900 <memchr+0xc>
 80038fc:	2000      	movs	r0, #0
 80038fe:	4770      	bx	lr
 8003900:	7803      	ldrb	r3, [r0, #0]
 8003902:	428b      	cmp	r3, r1
 8003904:	d0fb      	beq.n	80038fe <memchr+0xa>
 8003906:	3001      	adds	r0, #1
 8003908:	e7f6      	b.n	80038f8 <memchr+0x4>

0800390a <memcpy>:
 800390a:	2300      	movs	r3, #0
 800390c:	b510      	push	{r4, lr}
 800390e:	429a      	cmp	r2, r3
 8003910:	d100      	bne.n	8003914 <memcpy+0xa>
 8003912:	bd10      	pop	{r4, pc}
 8003914:	5ccc      	ldrb	r4, [r1, r3]
 8003916:	54c4      	strb	r4, [r0, r3]
 8003918:	3301      	adds	r3, #1
 800391a:	e7f8      	b.n	800390e <memcpy+0x4>

0800391c <_realloc_r>:
 800391c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800391e:	0006      	movs	r6, r0
 8003920:	000c      	movs	r4, r1
 8003922:	0015      	movs	r5, r2
 8003924:	2900      	cmp	r1, #0
 8003926:	d105      	bne.n	8003934 <_realloc_r+0x18>
 8003928:	0011      	movs	r1, r2
 800392a:	f7ff fc55 	bl	80031d8 <_malloc_r>
 800392e:	0004      	movs	r4, r0
 8003930:	0020      	movs	r0, r4
 8003932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003934:	2a00      	cmp	r2, #0
 8003936:	d103      	bne.n	8003940 <_realloc_r+0x24>
 8003938:	f7ff fbe2 	bl	8003100 <_free_r>
 800393c:	002c      	movs	r4, r5
 800393e:	e7f7      	b.n	8003930 <_realloc_r+0x14>
 8003940:	f000 f81c 	bl	800397c <_malloc_usable_size_r>
 8003944:	0007      	movs	r7, r0
 8003946:	4285      	cmp	r5, r0
 8003948:	d802      	bhi.n	8003950 <_realloc_r+0x34>
 800394a:	0843      	lsrs	r3, r0, #1
 800394c:	42ab      	cmp	r3, r5
 800394e:	d3ef      	bcc.n	8003930 <_realloc_r+0x14>
 8003950:	0029      	movs	r1, r5
 8003952:	0030      	movs	r0, r6
 8003954:	f7ff fc40 	bl	80031d8 <_malloc_r>
 8003958:	9001      	str	r0, [sp, #4]
 800395a:	2800      	cmp	r0, #0
 800395c:	d101      	bne.n	8003962 <_realloc_r+0x46>
 800395e:	9c01      	ldr	r4, [sp, #4]
 8003960:	e7e6      	b.n	8003930 <_realloc_r+0x14>
 8003962:	002a      	movs	r2, r5
 8003964:	42bd      	cmp	r5, r7
 8003966:	d900      	bls.n	800396a <_realloc_r+0x4e>
 8003968:	003a      	movs	r2, r7
 800396a:	0021      	movs	r1, r4
 800396c:	9801      	ldr	r0, [sp, #4]
 800396e:	f7ff ffcc 	bl	800390a <memcpy>
 8003972:	0021      	movs	r1, r4
 8003974:	0030      	movs	r0, r6
 8003976:	f7ff fbc3 	bl	8003100 <_free_r>
 800397a:	e7f0      	b.n	800395e <_realloc_r+0x42>

0800397c <_malloc_usable_size_r>:
 800397c:	1f0b      	subs	r3, r1, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	1f18      	subs	r0, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	da01      	bge.n	800398a <_malloc_usable_size_r+0xe>
 8003986:	580b      	ldr	r3, [r1, r0]
 8003988:	18c0      	adds	r0, r0, r3
 800398a:	4770      	bx	lr

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
