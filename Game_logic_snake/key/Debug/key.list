
key.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080049c8  080049c8  000059c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b14  08004b14  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004b14  08004b14  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004b14  08004b14  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004b1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  2000006c  08004b88  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08004b88  000065e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009835  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8c  00000000  00000000  0000f8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00011558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e8  00000000  00000000  00011d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128f4  00000000  00000000  00012300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad7a  00000000  00000000  00024bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ab9e  00000000  00000000  0002f96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a50c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000251c  00000000  00000000  0009a550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0009ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049b0 	.word	0x080049b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080049b0 	.word	0x080049b0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_lmul>:
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46ce      	mov	lr, r9
 800041c:	4699      	mov	r9, r3
 800041e:	0c03      	lsrs	r3, r0, #16
 8000420:	469c      	mov	ip, r3
 8000422:	0413      	lsls	r3, r2, #16
 8000424:	4647      	mov	r7, r8
 8000426:	0c1b      	lsrs	r3, r3, #16
 8000428:	001d      	movs	r5, r3
 800042a:	000e      	movs	r6, r1
 800042c:	4661      	mov	r1, ip
 800042e:	0404      	lsls	r4, r0, #16
 8000430:	0c24      	lsrs	r4, r4, #16
 8000432:	b580      	push	{r7, lr}
 8000434:	0007      	movs	r7, r0
 8000436:	0c10      	lsrs	r0, r2, #16
 8000438:	434b      	muls	r3, r1
 800043a:	4365      	muls	r5, r4
 800043c:	4341      	muls	r1, r0
 800043e:	4360      	muls	r0, r4
 8000440:	0c2c      	lsrs	r4, r5, #16
 8000442:	18c0      	adds	r0, r0, r3
 8000444:	1824      	adds	r4, r4, r0
 8000446:	468c      	mov	ip, r1
 8000448:	42a3      	cmp	r3, r4
 800044a:	d903      	bls.n	8000454 <__aeabi_lmul+0x3c>
 800044c:	2380      	movs	r3, #128	@ 0x80
 800044e:	025b      	lsls	r3, r3, #9
 8000450:	4698      	mov	r8, r3
 8000452:	44c4      	add	ip, r8
 8000454:	4649      	mov	r1, r9
 8000456:	4379      	muls	r1, r7
 8000458:	4356      	muls	r6, r2
 800045a:	0c23      	lsrs	r3, r4, #16
 800045c:	042d      	lsls	r5, r5, #16
 800045e:	0c2d      	lsrs	r5, r5, #16
 8000460:	1989      	adds	r1, r1, r6
 8000462:	4463      	add	r3, ip
 8000464:	0424      	lsls	r4, r4, #16
 8000466:	1960      	adds	r0, r4, r5
 8000468:	18c9      	adds	r1, r1, r3
 800046a:	bcc0      	pop	{r6, r7}
 800046c:	46b9      	mov	r9, r7
 800046e:	46b0      	mov	r8, r6
 8000470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)

08000474 <HAL_UART_RxCpltCallback>:
static void MX_DMA_Init(void);
static void MX_USART1_UART_Init(void);
void send_coordinates();
void spawn_apple();
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART1) {
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a1d      	ldr	r2, [pc, #116]	@ (80004f8 <HAL_UART_RxCpltCallback+0x84>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d134      	bne.n	80004f0 <HAL_UART_RxCpltCallback+0x7c>
	        // Визначаємо напрямок руху для великих і малих літер
	        if (rxdata == 'W' || rxdata == 'w') {
 8000486:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b57      	cmp	r3, #87	@ 0x57
 800048c:	d003      	beq.n	8000496 <HAL_UART_RxCpltCallback+0x22>
 800048e:	4b1b      	ldr	r3, [pc, #108]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b77      	cmp	r3, #119	@ 0x77
 8000494:	d103      	bne.n	800049e <HAL_UART_RxCpltCallback+0x2a>
	            direction = 'W';
 8000496:	4b1a      	ldr	r3, [pc, #104]	@ (8000500 <HAL_UART_RxCpltCallback+0x8c>)
 8000498:	2257      	movs	r2, #87	@ 0x57
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	e022      	b.n	80004e4 <HAL_UART_RxCpltCallback+0x70>
	        } else if (rxdata == 'S' || rxdata == 's') {
 800049e:	4b17      	ldr	r3, [pc, #92]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b53      	cmp	r3, #83	@ 0x53
 80004a4:	d003      	beq.n	80004ae <HAL_UART_RxCpltCallback+0x3a>
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b73      	cmp	r3, #115	@ 0x73
 80004ac:	d103      	bne.n	80004b6 <HAL_UART_RxCpltCallback+0x42>
	            direction = 'S';
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <HAL_UART_RxCpltCallback+0x8c>)
 80004b0:	2253      	movs	r2, #83	@ 0x53
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e016      	b.n	80004e4 <HAL_UART_RxCpltCallback+0x70>
	        } else if (rxdata == 'A' || rxdata == 'a') {
 80004b6:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b41      	cmp	r3, #65	@ 0x41
 80004bc:	d003      	beq.n	80004c6 <HAL_UART_RxCpltCallback+0x52>
 80004be:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b61      	cmp	r3, #97	@ 0x61
 80004c4:	d103      	bne.n	80004ce <HAL_UART_RxCpltCallback+0x5a>
	            direction = 'A';
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <HAL_UART_RxCpltCallback+0x8c>)
 80004c8:	2241      	movs	r2, #65	@ 0x41
 80004ca:	701a      	strb	r2, [r3, #0]
 80004cc:	e00a      	b.n	80004e4 <HAL_UART_RxCpltCallback+0x70>
	        } else if (rxdata == 'D' || rxdata == 'd') {
 80004ce:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b44      	cmp	r3, #68	@ 0x44
 80004d4:	d003      	beq.n	80004de <HAL_UART_RxCpltCallback+0x6a>
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b64      	cmp	r3, #100	@ 0x64
 80004dc:	d102      	bne.n	80004e4 <HAL_UART_RxCpltCallback+0x70>
	            direction = 'D';
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <HAL_UART_RxCpltCallback+0x8c>)
 80004e0:	2244      	movs	r2, #68	@ 0x44
 80004e2:	701a      	strb	r2, [r3, #0]
	        }

	        HAL_UART_Receive_IT(&huart1, &rxdata, 1); // Продовжуємо прийом
 80004e4:	4905      	ldr	r1, [pc, #20]	@ (80004fc <HAL_UART_RxCpltCallback+0x88>)
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <HAL_UART_RxCpltCallback+0x90>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fefd 	bl	80022ea <HAL_UART_Receive_IT>
	    }
	}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40013800 	.word	0x40013800
 80004fc:	20000154 	.word	0x20000154
 8000500:	20000000 	.word	0x20000000
 8000504:	20000088 	.word	0x20000088

08000508 <send_coordinates>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_coordinates() {
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46c6      	mov	lr, r8
 800050c:	b500      	push	{lr}
 800050e:	b0ba      	sub	sp, #232	@ 0xe8
 8000510:	af06      	add	r7, sp, #24
    char buffer[200];
    sprintf(buffer, " %d, %d   %d, %d   %d   %d %d\r\n ", x, y, apple_x, apple_y, length , body_x[0] , body_y[0]);
 8000512:	4b34      	ldr	r3, [pc, #208]	@ (80005e4 <send_coordinates+0xdc>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	469c      	mov	ip, r3
 8000518:	4b33      	ldr	r3, [pc, #204]	@ (80005e8 <send_coordinates+0xe0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4698      	mov	r8, r3
 800051e:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <send_coordinates+0xe4>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	4b33      	ldr	r3, [pc, #204]	@ (80005f0 <send_coordinates+0xe8>)
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	4b33      	ldr	r3, [pc, #204]	@ (80005f4 <send_coordinates+0xec>)
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	4b33      	ldr	r3, [pc, #204]	@ (80005f8 <send_coordinates+0xf0>)
 800052c:	681c      	ldr	r4, [r3, #0]
 800052e:	4b33      	ldr	r3, [pc, #204]	@ (80005fc <send_coordinates+0xf4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4e33      	ldr	r6, [pc, #204]	@ (8000600 <send_coordinates+0xf8>)
 8000534:	1d3d      	adds	r5, r7, #4
 8000536:	9304      	str	r3, [sp, #16]
 8000538:	9403      	str	r4, [sp, #12]
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	9101      	str	r1, [sp, #4]
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	4643      	mov	r3, r8
 8000542:	4662      	mov	r2, ip
 8000544:	0031      	movs	r1, r6
 8000546:	0028      	movs	r0, r5
 8000548:	f003 f94c 	bl	80037e4 <siprintf>


    for (int i = 1; i < length; i++) {
 800054c:	2301      	movs	r3, #1
 800054e:	22cc      	movs	r2, #204	@ 0xcc
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	e01e      	b.n	8000594 <send_coordinates+0x8c>
          len += sprintf(buffer + len, "(%d,%d) ", body_x[i], body_y[i]);
 8000556:	4b2b      	ldr	r3, [pc, #172]	@ (8000604 <send_coordinates+0xfc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	001a      	movs	r2, r3
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	1898      	adds	r0, r3, r2
 8000560:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <send_coordinates+0xf0>)
 8000562:	25cc      	movs	r5, #204	@ 0xcc
 8000564:	197a      	adds	r2, r7, r5
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	58d4      	ldr	r4, [r2, r3]
 800056c:	4b23      	ldr	r3, [pc, #140]	@ (80005fc <send_coordinates+0xf4>)
 800056e:	197a      	adds	r2, r7, r5
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	58d3      	ldr	r3, [r2, r3]
 8000576:	4924      	ldr	r1, [pc, #144]	@ (8000608 <send_coordinates+0x100>)
 8000578:	0022      	movs	r2, r4
 800057a:	f003 f933 	bl	80037e4 <siprintf>
 800057e:	0002      	movs	r2, r0
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <send_coordinates+0xfc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	18d2      	adds	r2, r2, r3
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <send_coordinates+0xfc>)
 8000588:	601a      	str	r2, [r3, #0]
    for (int i = 1; i < length; i++) {
 800058a:	197b      	adds	r3, r7, r5
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	197a      	adds	r2, r7, r5
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b17      	ldr	r3, [pc, #92]	@ (80005f4 <send_coordinates+0xec>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	22cc      	movs	r2, #204	@ 0xcc
 800059a:	18ba      	adds	r2, r7, r2
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbd9      	blt.n	8000556 <send_coordinates+0x4e>
        }
    strcat(buffer, "\r\n");
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	f7ff fdaf 	bl	8000108 <strlen>
 80005aa:	0003      	movs	r3, r0
 80005ac:	001a      	movs	r2, r3
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	189a      	adds	r2, r3, r2
 80005b2:	4b16      	ldr	r3, [pc, #88]	@ (800060c <send_coordinates+0x104>)
 80005b4:	0010      	movs	r0, r2
 80005b6:	0019      	movs	r1, r3
 80005b8:	2303      	movs	r3, #3
 80005ba:	001a      	movs	r2, r3
 80005bc:	f003 fa03 	bl	80039c6 <memcpy>
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	0018      	movs	r0, r3
 80005c4:	f7ff fda0 	bl	8000108 <strlen>
 80005c8:	0003      	movs	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	2301      	movs	r3, #1
 80005ce:	425b      	negs	r3, r3
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	480f      	ldr	r0, [pc, #60]	@ (8000610 <send_coordinates+0x108>)
 80005d4:	f001 fdea 	bl	80021ac <HAL_UART_Transmit>
}
 80005d8:	46c0      	nop			@ (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b034      	add	sp, #208	@ 0xd0
 80005de:	bc80      	pop	{r7}
 80005e0:	46b8      	mov	r8, r7
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	20000158 	.word	0x20000158
 80005e8:	2000015c 	.word	0x2000015c
 80005ec:	20000164 	.word	0x20000164
 80005f0:	20000168 	.word	0x20000168
 80005f4:	20000160 	.word	0x20000160
 80005f8:	2000016c 	.word	0x2000016c
 80005fc:	200002fc 	.word	0x200002fc
 8000600:	080049c8 	.word	0x080049c8
 8000604:	2000048c 	.word	0x2000048c
 8000608:	080049ec 	.word	0x080049ec
 800060c:	080049f8 	.word	0x080049f8
 8000610:	20000088 	.word	0x20000088

08000614 <spawn_apple>:
        preload[i * 2 + 1] = body_y[i];  // Записуємо елементи з другого масиву
    }

}

void spawn_apple(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	apple_x = rand() % 10;
 8000618:	f002 ffe2 	bl	80035e0 <rand>
 800061c:	0003      	movs	r3, r0
 800061e:	210a      	movs	r1, #10
 8000620:	0018      	movs	r0, r3
 8000622:	f7ff fef3 	bl	800040c <__aeabi_idivmod>
 8000626:	000b      	movs	r3, r1
 8000628:	001a      	movs	r2, r3
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <spawn_apple+0x38>)
 800062c:	601a      	str	r2, [r3, #0]
	apple_y = rand() % 10;
 800062e:	f002 ffd7 	bl	80035e0 <rand>
 8000632:	0003      	movs	r3, r0
 8000634:	210a      	movs	r1, #10
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff fee8 	bl	800040c <__aeabi_idivmod>
 800063c:	000b      	movs	r3, r1
 800063e:	001a      	movs	r2, r3
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <spawn_apple+0x3c>)
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	20000164 	.word	0x20000164
 8000650:	20000168 	.word	0x20000168

08000654 <move_snake>:

void move_snake() {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
    // Зсуваємо тіло (кожен сегмент отримує координати попереднього)
	 if (body_x[0] == apple_x && body_y[0] == apple_y) {
 800065a:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <move_snake+0xb4>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b2b      	ldr	r3, [pc, #172]	@ (800070c <move_snake+0xb8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d10c      	bne.n	8000680 <move_snake+0x2c>
 8000666:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <move_snake+0xbc>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <move_snake+0xc0>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	429a      	cmp	r2, r3
 8000670:	d106      	bne.n	8000680 <move_snake+0x2c>
	        length++; // Додаємо сегмент тіла
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <move_snake+0xc4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <move_snake+0xc4>)
 800067a:	601a      	str	r2, [r3, #0]
	        spawn_apple(); // Генеруємо нове яблуко
 800067c:	f7ff ffca 	bl	8000614 <spawn_apple>
	    }

	    // Зсуваємо тіло: кожен сегмент отримує координати попереднього
	    for (int i = length; i > 0; i--) {
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <move_snake+0xc4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	e014      	b.n	80006b2 <move_snake+0x5e>
	        body_x[i] = body_x[i - 1];
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <move_snake+0xb4>)
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	58d1      	ldr	r1, [r2, r3]
 8000692:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <move_snake+0xb4>)
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	50d1      	str	r1, [r2, r3]
	        body_y[i] = body_y[i - 1];
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <move_snake+0xbc>)
 80006a0:	0092      	lsls	r2, r2, #2
 80006a2:	58d1      	ldr	r1, [r2, r3]
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <move_snake+0xbc>)
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	50d1      	str	r1, [r2, r3]
	    for (int i = length; i > 0; i--) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dce7      	bgt.n	8000688 <move_snake+0x34>
	    }

	    // Оновлюємо координати голови згідно з напрямком руху
	    if (direction == 'W') body_y[0]++;
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <move_snake+0xc8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b57      	cmp	r3, #87	@ 0x57
 80006be:	d104      	bne.n	80006ca <move_snake+0x76>
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <move_snake+0xbc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <move_snake+0xbc>)
 80006c8:	601a      	str	r2, [r3, #0]
	    if (direction == 'S') body_y[0]--;
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <move_snake+0xc8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b53      	cmp	r3, #83	@ 0x53
 80006d0:	d104      	bne.n	80006dc <move_snake+0x88>
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <move_snake+0xbc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <move_snake+0xbc>)
 80006da:	601a      	str	r2, [r3, #0]
	    if (direction == 'A') body_x[0]--;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <move_snake+0xc8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b41      	cmp	r3, #65	@ 0x41
 80006e2:	d104      	bne.n	80006ee <move_snake+0x9a>
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <move_snake+0xb4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1e5a      	subs	r2, r3, #1
 80006ea:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <move_snake+0xb4>)
 80006ec:	601a      	str	r2, [r3, #0]
	    if (direction == 'D') body_x[0]++;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <move_snake+0xc8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b44      	cmp	r3, #68	@ 0x44
 80006f4:	d104      	bne.n	8000700 <move_snake+0xac>
 80006f6:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <move_snake+0xb4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	4b02      	ldr	r3, [pc, #8]	@ (8000708 <move_snake+0xb4>)
 80006fe:	601a      	str	r2, [r3, #0]
	}
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000016c 	.word	0x2000016c
 800070c:	20000164 	.word	0x20000164
 8000710:	200002fc 	.word	0x200002fc
 8000714:	20000168 	.word	0x20000168
 8000718:	20000160 	.word	0x20000160
 800071c:	20000000 	.word	0x20000000

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	body_x[0] = 0; // Початкова позиція голови
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <main+0xb4>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
	body_y[0] = 0;
 800072a:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <main+0xb8>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 fb34 	bl	8000d9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f862 	bl	80007fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f000 f90e 	bl	8000958 <MX_GPIO_Init>
  MX_DMA_Init();
 800073c:	f000 f8ee 	bl	800091c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000740:	f000 f8bc 	bl	80008bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxdata, 1);
 8000744:	4925      	ldr	r1, [pc, #148]	@ (80007dc <main+0xbc>)
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <main+0xc0>)
 8000748:	2201      	movs	r2, #1
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fdcd 	bl	80022ea <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
         switch (direction) {
 8000750:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <main+0xc4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b57      	cmp	r3, #87	@ 0x57
 8000756:	d008      	beq.n	800076a <main+0x4a>
 8000758:	dc1f      	bgt.n	800079a <main+0x7a>
 800075a:	2b53      	cmp	r3, #83	@ 0x53
 800075c:	d00b      	beq.n	8000776 <main+0x56>
 800075e:	dc1c      	bgt.n	800079a <main+0x7a>
 8000760:	2b41      	cmp	r3, #65	@ 0x41
 8000762:	d00e      	beq.n	8000782 <main+0x62>
 8000764:	2b44      	cmp	r3, #68	@ 0x44
 8000766:	d012      	beq.n	800078e <main+0x6e>
 8000768:	e017      	b.n	800079a <main+0x7a>
             case 'W': y++; break;  // Вгору
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <main+0xc8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <main+0xc8>)
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	e011      	b.n	800079a <main+0x7a>

             case 'S': y--; break;  // Вниз
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <main+0xc8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <main+0xc8>)
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e00b      	b.n	800079a <main+0x7a>

             case 'A': x--; break;  // Вліво
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <main+0xcc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	1e5a      	subs	r2, r3, #1
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <main+0xcc>)
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e005      	b.n	800079a <main+0x7a>

             case 'D': x++; break;  // Вправо
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <main+0xcc>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <main+0xcc>)
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	46c0      	nop			@ (mov r8, r8)

         }

         if (x == apple_x && y == apple_y) {
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <main+0xcc>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <main+0xd0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d10c      	bne.n	80007c0 <main+0xa0>
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <main+0xc8>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <main+0xd4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d106      	bne.n	80007c0 <main+0xa0>
        	 length++;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <main+0xd8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <main+0xd8>)
 80007ba:	601a      	str	r2, [r3, #0]
                           spawn_apple();
 80007bc:	f7ff ff2a 	bl	8000614 <spawn_apple>
                       }

         move_snake();
 80007c0:	f7ff ff48 	bl	8000654 <move_snake>
         send_coordinates(); // Надсилаємо координати через UART
 80007c4:	f7ff fea0 	bl	8000508 <send_coordinates>
         HAL_Delay(500); // Регулює швидкість руху
 80007c8:	23fa      	movs	r3, #250	@ 0xfa
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fb49 	bl	8000e64 <HAL_Delay>
         switch (direction) {
 80007d2:	e7bd      	b.n	8000750 <main+0x30>
 80007d4:	2000016c 	.word	0x2000016c
 80007d8:	200002fc 	.word	0x200002fc
 80007dc:	20000154 	.word	0x20000154
 80007e0:	20000088 	.word	0x20000088
 80007e4:	20000000 	.word	0x20000000
 80007e8:	2000015c 	.word	0x2000015c
 80007ec:	20000158 	.word	0x20000158
 80007f0:	20000164 	.word	0x20000164
 80007f4:	20000168 	.word	0x20000168
 80007f8:	20000160 	.word	0x20000160

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b097      	sub	sp, #92	@ 0x5c
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	2428      	movs	r4, #40	@ 0x28
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2330      	movs	r3, #48	@ 0x30
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 f857 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000812:	2318      	movs	r3, #24
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	0018      	movs	r0, r3
 8000818:	2310      	movs	r3, #16
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f003 f84f 	bl	80038c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	0018      	movs	r0, r3
 8000826:	2314      	movs	r3, #20
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f003 f848 	bl	80038c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	0021      	movs	r1, r4
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2201      	movs	r2, #1
 8000836:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2201      	movs	r2, #1
 800083c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2202      	movs	r2, #2
 8000842:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	0252      	lsls	r2, r2, #9
 800084a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	0352      	lsls	r2, r2, #13
 8000852:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2200      	movs	r2, #0
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	187b      	adds	r3, r7, r1
 800085c:	0018      	movs	r0, r3
 800085e:	f000 ff15 	bl	800168c <HAL_RCC_OscConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000866:	f000 f8cf 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	2118      	movs	r1, #24
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2207      	movs	r2, #7
 8000870:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2202      	movs	r2, #2
 8000876:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2101      	movs	r1, #1
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fa19 	bl	8001cc0 <HAL_RCC_ClockConfig>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000892:	f000 f8b9 	bl	8000a08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fb4f 	bl	8001f48 <HAL_RCCEx_PeriphCLKConfig>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008ae:	f000 f8ab 	bl	8000a08 <Error_Handler>
  }
}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b017      	add	sp, #92	@ 0x5c
 80008b8:	bd90      	pop	{r4, r7, pc}
	...

080008bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <MX_USART1_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008c8:	2296      	movs	r2, #150	@ 0x96
 80008ca:	0192      	lsls	r2, r2, #6
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fe:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <MX_USART1_UART_Init+0x58>)
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fbff 	bl	8002104 <HAL_UART_Init>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f87d 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000088 	.word	0x20000088
 8000918:	40013800 	.word	0x40013800

0800091c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_DMA_Init+0x38>)
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_DMA_Init+0x38>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	615a      	str	r2, [r3, #20]
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_DMA_Init+0x38>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	200a      	movs	r0, #10
 8000940:	f000 fb60 	bl	8001004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000944:	200a      	movs	r0, #10
 8000946:	f000 fb72 	bl	800102e <HAL_NVIC_EnableIRQ>

}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	40021000 	.word	0x40021000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b089      	sub	sp, #36	@ 0x24
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	240c      	movs	r4, #12
 8000960:	193b      	adds	r3, r7, r4
 8000962:	0018      	movs	r0, r3
 8000964:	2314      	movs	r3, #20
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f002 ffa9 	bl	80038c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096e:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	4b23      	ldr	r3, [pc, #140]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	03c9      	lsls	r1, r1, #15
 8000978:	430a      	orrs	r2, r1
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	03db      	lsls	r3, r3, #15
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	0309      	lsls	r1, r1, #12
 8000994:	430a      	orrs	r2, r1
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 800099a:	695a      	ldr	r2, [r3, #20]
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	031b      	lsls	r3, r3, #12
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 80009ac:	2180      	movs	r1, #128	@ 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <MX_GPIO_Init+0xa8>)
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80009c2:	23c0      	movs	r3, #192	@ 0xc0
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	480f      	ldr	r0, [pc, #60]	@ (8000a04 <MX_GPIO_Init+0xac>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	0019      	movs	r1, r3
 80009cc:	f000 fe40 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	22c0      	movs	r2, #192	@ 0xc0
 80009d4:	0092      	lsls	r2, r2, #2
 80009d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2201      	movs	r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	4a05      	ldr	r2, [pc, #20]	@ (8000a04 <MX_GPIO_Init+0xac>)
 80009ee:	0019      	movs	r1, r3
 80009f0:	0010      	movs	r0, r2
 80009f2:	f000 fcbd 	bl	8001370 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b009      	add	sp, #36	@ 0x24
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000800 	.word	0x48000800

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	699a      	ldr	r2, [r3, #24]
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	619a      	str	r2, [r3, #24]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a34:	69da      	ldr	r2, [r3, #28]
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	0549      	lsls	r1, r1, #21
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	61da      	str	r2, [r3, #28]
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <HAL_MspInit+0x44>)
 8000a42:	69da      	ldr	r2, [r3, #28]
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	055b      	lsls	r3, r3, #21
 8000a48:	4013      	ands	r3, r2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	@ 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	2414      	movs	r4, #20
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f002 ff26 	bl	80038c0 <memset>
  if(huart->Instance==USART1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a34      	ldr	r2, [pc, #208]	@ (8000b4c <HAL_UART_MspInit+0xf0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d161      	bne.n	8000b42 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a7e:	4b34      	ldr	r3, [pc, #208]	@ (8000b50 <HAL_UART_MspInit+0xf4>)
 8000a80:	699a      	ldr	r2, [r3, #24]
 8000a82:	4b33      	ldr	r3, [pc, #204]	@ (8000b50 <HAL_UART_MspInit+0xf4>)
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	01c9      	lsls	r1, r1, #7
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	619a      	str	r2, [r3, #24]
 8000a8c:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <HAL_UART_MspInit+0xf4>)
 8000a8e:	699a      	ldr	r2, [r3, #24]
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	01db      	lsls	r3, r3, #7
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <HAL_UART_MspInit+0xf4>)
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <HAL_UART_MspInit+0xf4>)
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	0289      	lsls	r1, r1, #10
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	615a      	str	r2, [r3, #20]
 8000aa8:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <HAL_UART_MspInit+0xf4>)
 8000aaa:	695a      	ldr	r2, [r3, #20]
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	029b      	lsls	r3, r3, #10
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	22c0      	movs	r2, #192	@ 0xc0
 8000aba:	00d2      	lsls	r2, r2, #3
 8000abc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	0021      	movs	r1, r4
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2203      	movs	r2, #3
 8000ad0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	187a      	adds	r2, r7, r1
 8000ada:	2390      	movs	r3, #144	@ 0x90
 8000adc:	05db      	lsls	r3, r3, #23
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 fc45 	bl	8001370 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b58 <HAL_UART_MspInit+0xfc>)
 8000aea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 faa5 	bl	8001068 <HAL_DMA_Init>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000b22:	f7ff ff71 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000b2a:	675a      	str	r2, [r3, #116]	@ 0x74
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_UART_MspInit+0xf8>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	201b      	movs	r0, #27
 8000b38:	f000 fa64 	bl	8001004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b3c:	201b      	movs	r0, #27
 8000b3e:	f000 fa76 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b00b      	add	sp, #44	@ 0x2c
 8000b48:	bd90      	pop	{r4, r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	20000110 	.word	0x20000110
 8000b58:	40020030 	.word	0x40020030

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 f952 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fb2b 	bl	80011f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	20000110 	.word	0x20000110

08000ba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <USART1_IRQHandler+0x14>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 fbf2 	bl	8002398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	20000088 	.word	0x20000088

08000bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  return 1;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_kill>:

int _kill(int pid, int sig)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bd6:	f002 fec9 	bl	800396c <__errno>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	2216      	movs	r2, #22
 8000bde:	601a      	str	r2, [r3, #0]
  return -1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	425b      	negs	r3, r3
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_exit>:

void _exit (int status)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	425a      	negs	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ffe5 	bl	8000bcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	e7fd      	b.n	8000c02 <_exit+0x16>

08000c06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e00a      	b.n	8000c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c18:	e000      	b.n	8000c1c <_read+0x16>
 8000c1a:	bf00      	nop
 8000c1c:	0001      	movs	r1, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	60ba      	str	r2, [r7, #8]
 8000c24:	b2ca      	uxtb	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dbf0      	blt.n	8000c18 <_read+0x12>
  }

  return len;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b006      	add	sp, #24
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	e009      	b.n	8000c66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	60ba      	str	r2, [r7, #8]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	e000      	b.n	8000c60 <_write+0x20>
 8000c5e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbf1      	blt.n	8000c52 <_write+0x12>
  }
  return len;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b006      	add	sp, #24
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_close>:

int _close(int file)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	425b      	negs	r3, r3
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2280      	movs	r2, #128	@ 0x80
 8000c9a:	0192      	lsls	r2, r2, #6
 8000c9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_isatty>:

int _isatty(int file)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb0:	2301      	movs	r3, #1
}
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b004      	add	sp, #16
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	18d3      	adds	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f002 fe34 	bl	800396c <__errno>
 8000d04:	0003      	movs	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	425b      	negs	r3, r3
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	18d2      	adds	r2, r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b006      	add	sp, #24
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20002000 	.word	0x20002000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000490 	.word	0x20000490
 8000d38:	200005e8 	.word	0x200005e8

08000d3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	@ (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f7ff fff6 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	@ (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	@ (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d76:	f002 fdff 	bl	8003978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fcd1 	bl	8000720 <main>

08000d7e <LoopForever>:

LoopForever:
    b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d8c:	08004b1c 	.word	0x08004b1c
  ldr r2, =_sbss
 8000d90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d94:	200005e4 	.word	0x200005e4

08000d98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_COMP_IRQHandler>
	...

08000d9c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <HAL_Init+0x24>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_Init+0x24>)
 8000da6:	2110      	movs	r1, #16
 8000da8:	430a      	orrs	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f809 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db2:	f7ff fe2f 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <HAL_InitTick+0x5c>)
 8000dce:	681c      	ldr	r4, [r3, #0]
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <HAL_InitTick+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	23fa      	movs	r3, #250	@ 0xfa
 8000dd8:	0098      	lsls	r0, r3, #2
 8000dda:	f7ff f9a7 	bl	800012c <__udivsi3>
 8000dde:	0003      	movs	r3, r0
 8000de0:	0019      	movs	r1, r3
 8000de2:	0020      	movs	r0, r4
 8000de4:	f7ff f9a2 	bl	800012c <__udivsi3>
 8000de8:	0003      	movs	r3, r0
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f92f 	bl	800104e <HAL_SYSTICK_Config>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e00f      	b.n	8000e18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d80b      	bhi.n	8000e16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2301      	movs	r3, #1
 8000e02:	425b      	negs	r3, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f8fc 	bl	8001004 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_InitTick+0x64>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	20000004 	.word	0x20000004
 8000e24:	2000000c 	.word	0x2000000c
 8000e28:	20000008 	.word	0x20000008

08000e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_IncTick+0x1c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	001a      	movs	r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	18d2      	adds	r2, r2, r3
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <HAL_IncTick+0x20>)
 8000e3e:	601a      	str	r2, [r3, #0]
}
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000494 	.word	0x20000494

08000e50 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b02      	ldr	r3, [pc, #8]	@ (8000e60 <HAL_GetTick+0x10>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	20000494 	.word	0x20000494

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff fff0 	bl	8000e50 <HAL_GetTick>
 8000e70:	0003      	movs	r3, r0
 8000e72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	001a      	movs	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	189b      	adds	r3, r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	f7ff ffe0 	bl	8000e50 <HAL_GetTick>
 8000e90:	0002      	movs	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	2000000c 	.word	0x2000000c

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ebe:	d809      	bhi.n	8000ed4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	231f      	movs	r3, #31
 8000ec8:	401a      	ands	r2, r3
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <__NVIC_EnableIRQ+0x30>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4091      	lsls	r1, r2
 8000ed0:	000a      	movs	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
  }
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef4:	d828      	bhi.n	8000f48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb4 <__NVIC_SetPriority+0xd4>)
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	33c0      	adds	r3, #192	@ 0xc0
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	589b      	ldr	r3, [r3, r2]
 8000f06:	1dfa      	adds	r2, r7, #7
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	400a      	ands	r2, r1
 8000f10:	00d2      	lsls	r2, r2, #3
 8000f12:	21ff      	movs	r1, #255	@ 0xff
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	22ff      	movs	r2, #255	@ 0xff
 8000f24:	401a      	ands	r2, r3
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	4003      	ands	r3, r0
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	481f      	ldr	r0, [pc, #124]	@ (8000fb4 <__NVIC_SetPriority+0xd4>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	33c0      	adds	r3, #192	@ 0xc0
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f46:	e031      	b.n	8000fac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb8 <__NVIC_SetPriority+0xd8>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	0019      	movs	r1, r3
 8000f50:	230f      	movs	r3, #15
 8000f52:	400b      	ands	r3, r1
 8000f54:	3b08      	subs	r3, #8
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3306      	adds	r3, #6
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	18d3      	adds	r3, r2, r3
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1dfa      	adds	r2, r7, #7
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	0011      	movs	r1, r2
 8000f68:	2203      	movs	r2, #3
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	21ff      	movs	r1, #255	@ 0xff
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	401a      	ands	r2, r3
 8000f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	019b      	lsls	r3, r3, #6
 8000f7e:	22ff      	movs	r2, #255	@ 0xff
 8000f80:	401a      	ands	r2, r3
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	0018      	movs	r0, r3
 8000f88:	2303      	movs	r3, #3
 8000f8a:	4003      	ands	r3, r0
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <__NVIC_SetPriority+0xd8>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	001c      	movs	r4, r3
 8000f98:	230f      	movs	r3, #15
 8000f9a:	4023      	ands	r3, r4
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	3306      	adds	r3, #6
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	18c3      	adds	r3, r0, r3
 8000fa8:	3304      	adds	r3, #4
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	1e5a      	subs	r2, r3, #1
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	045b      	lsls	r3, r3, #17
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d301      	bcc.n	8000fd4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e010      	b.n	8000ff6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <SysTick_Config+0x44>)
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	3a01      	subs	r2, #1
 8000fda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fdc:	2301      	movs	r3, #1
 8000fde:	425b      	negs	r3, r3
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ff7c 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x44>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x44>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b002      	add	sp, #8
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	210f      	movs	r1, #15
 8001010:	187b      	adds	r3, r7, r1
 8001012:	1c02      	adds	r2, r0, #0
 8001014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	187b      	adds	r3, r7, r1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b25b      	sxtb	r3, r3
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b004      	add	sp, #16
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	0002      	movs	r2, r0
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff ff33 	bl	8000eac <__NVIC_EnableIRQ>
}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ffaf 	bl	8000fbc <SysTick_Config>
 800105e:	0003      	movs	r3, r0
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e036      	b.n	80010ec <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2221      	movs	r2, #33	@ 0x21
 8001082:	2102      	movs	r1, #2
 8001084:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <HAL_DMA_Init+0x8c>)
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800109e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 f932 	bl	8001338 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2221      	movs	r2, #33	@ 0x21
 80010de:	2101      	movs	r1, #1
 80010e0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b004      	add	sp, #16
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	ffffc00f 	.word	0xffffc00f

080010f8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2221      	movs	r2, #33	@ 0x21
 8001104:	5c9b      	ldrb	r3, [r3, r2]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d008      	beq.n	800111e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2204      	movs	r2, #4
 8001110:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2220      	movs	r2, #32
 8001116:	2100      	movs	r1, #0
 8001118:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e020      	b.n	8001160 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	210e      	movs	r1, #14
 800112a:	438a      	bics	r2, r1
 800112c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	438a      	bics	r2, r1
 800113c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001146:	2101      	movs	r1, #1
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2221      	movs	r2, #33	@ 0x21
 8001152:	2101      	movs	r1, #1
 8001154:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	210f      	movs	r1, #15
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2221      	movs	r2, #33	@ 0x21
 800117c:	5c9b      	ldrb	r3, [r3, r2]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d006      	beq.n	8001192 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e028      	b.n	80011e4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	210e      	movs	r1, #14
 800119e:	438a      	bics	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ba:	2101      	movs	r1, #1
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2221      	movs	r2, #33	@ 0x21
 80011c6:	2101      	movs	r1, #1
 80011c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	2100      	movs	r1, #0
 80011d0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	0010      	movs	r0, r2
 80011e2:	4798      	blx	r3
    }
  }
  return status;
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	781b      	ldrb	r3, [r3, #0]
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	2204      	movs	r2, #4
 8001210:	409a      	lsls	r2, r3
 8001212:	0013      	movs	r3, r2
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4013      	ands	r3, r2
 8001218:	d024      	beq.n	8001264 <HAL_DMA_IRQHandler+0x72>
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	2204      	movs	r2, #4
 800121e:	4013      	ands	r3, r2
 8001220:	d020      	beq.n	8001264 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2220      	movs	r2, #32
 800122a:	4013      	ands	r3, r2
 800122c:	d107      	bne.n	800123e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2104      	movs	r1, #4
 800123a:	438a      	bics	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001246:	2104      	movs	r1, #4
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <HAL_DMA_IRQHandler+0x66>
 8001256:	e06a      	b.n	800132e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	0010      	movs	r0, r2
 8001260:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001262:	e064      	b.n	800132e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	2202      	movs	r2, #2
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	d02b      	beq.n	80012cc <HAL_DMA_IRQHandler+0xda>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2202      	movs	r2, #2
 8001278:	4013      	ands	r3, r2
 800127a:	d027      	beq.n	80012cc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2220      	movs	r2, #32
 8001284:	4013      	ands	r3, r2
 8001286:	d10b      	bne.n	80012a0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	210a      	movs	r1, #10
 8001294:	438a      	bics	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2221      	movs	r2, #33	@ 0x21
 800129c:	2101      	movs	r1, #1
 800129e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a8:	2102      	movs	r1, #2
 80012aa:	4091      	lsls	r1, r2
 80012ac:	000a      	movs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2220      	movs	r2, #32
 80012b4:	2100      	movs	r1, #0
 80012b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d036      	beq.n	800132e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	0010      	movs	r0, r2
 80012c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80012ca:	e030      	b.n	800132e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	2208      	movs	r2, #8
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	d028      	beq.n	800132e <HAL_DMA_IRQHandler+0x13c>
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2208      	movs	r2, #8
 80012e0:	4013      	ands	r3, r2
 80012e2:	d024      	beq.n	800132e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	210e      	movs	r1, #14
 80012f0:	438a      	bics	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012fc:	2101      	movs	r1, #1
 80012fe:	4091      	lsls	r1, r2
 8001300:	000a      	movs	r2, r1
 8001302:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2221      	movs	r2, #33	@ 0x21
 800130e:	2101      	movs	r1, #1
 8001310:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2220      	movs	r2, #32
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	0010      	movs	r0, r2
 800132a:	4798      	blx	r3
    }
  }
}
 800132c:	e7ff      	b.n	800132e <HAL_DMA_IRQHandler+0x13c>
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b004      	add	sp, #16
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <DMA_CalcBaseAndBitshift+0x30>)
 8001346:	4694      	mov	ip, r2
 8001348:	4463      	add	r3, ip
 800134a:	2114      	movs	r1, #20
 800134c:	0018      	movs	r0, r3
 800134e:	f7fe feed 	bl	800012c <__udivsi3>
 8001352:	0003      	movs	r3, r0
 8001354:	009a      	lsls	r2, r3, #2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a03      	ldr	r2, [pc, #12]	@ (800136c <DMA_CalcBaseAndBitshift+0x34>)
 800135e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}
 8001368:	bffdfff8 	.word	0xbffdfff8
 800136c:	40020000 	.word	0x40020000

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e14f      	b.n	8001620 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4091      	lsls	r1, r2
 800138a:	000a      	movs	r2, r1
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d100      	bne.n	8001398 <HAL_GPIO_Init+0x28>
 8001396:	e140      	b.n	800161a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2203      	movs	r2, #3
 800139e:	4013      	ands	r3, r2
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	43da      	mvns	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	409a      	lsls	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	43da      	mvns	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	2201      	movs	r2, #1
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2203      	movs	r2, #3
 8001418:	4013      	ands	r3, r2
 800141a:	2b03      	cmp	r3, #3
 800141c:	d017      	beq.n	800144e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	4013      	ands	r3, r2
 8001456:	2b02      	cmp	r3, #2
 8001458:	d123      	bne.n	80014a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	0092      	lsls	r2, r2, #2
 8001464:	58d3      	ldr	r3, [r2, r3]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2207      	movs	r2, #7
 800146c:	4013      	ands	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2107      	movs	r1, #7
 8001486:	400b      	ands	r3, r1
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	6939      	ldr	r1, [r7, #16]
 80014a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	401a      	ands	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	23c0      	movs	r3, #192	@ 0xc0
 80014dc:	029b      	lsls	r3, r3, #10
 80014de:	4013      	ands	r3, r2
 80014e0:	d100      	bne.n	80014e4 <HAL_GPIO_Init+0x174>
 80014e2:	e09a      	b.n	800161a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	4b54      	ldr	r3, [pc, #336]	@ (8001638 <HAL_GPIO_Init+0x2c8>)
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <HAL_GPIO_Init+0x2c8>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	430a      	orrs	r2, r1
 80014ee:	619a      	str	r2, [r3, #24]
 80014f0:	4b51      	ldr	r3, [pc, #324]	@ (8001638 <HAL_GPIO_Init+0x2c8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4013      	ands	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fc:	4a4f      	ldr	r2, [pc, #316]	@ (800163c <HAL_GPIO_Init+0x2cc>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	589b      	ldr	r3, [r3, r2]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2203      	movs	r2, #3
 800150e:	4013      	ands	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	409a      	lsls	r2, r3
 8001516:	0013      	movs	r3, r2
 8001518:	43da      	mvns	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	2390      	movs	r3, #144	@ 0x90
 8001524:	05db      	lsls	r3, r3, #23
 8001526:	429a      	cmp	r2, r3
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x1e2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a44      	ldr	r2, [pc, #272]	@ (8001640 <HAL_GPIO_Init+0x2d0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x1de>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a43      	ldr	r2, [pc, #268]	@ (8001644 <HAL_GPIO_Init+0x2d4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x1da>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a42      	ldr	r2, [pc, #264]	@ (8001648 <HAL_GPIO_Init+0x2d8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x1d6>
 8001542:	2303      	movs	r3, #3
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x1e4>
 8001546:	2305      	movs	r3, #5
 8001548:	e004      	b.n	8001554 <HAL_GPIO_Init+0x1e4>
 800154a:	2302      	movs	r3, #2
 800154c:	e002      	b.n	8001554 <HAL_GPIO_Init+0x1e4>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_GPIO_Init+0x1e4>
 8001552:	2300      	movs	r3, #0
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	2103      	movs	r1, #3
 8001558:	400a      	ands	r2, r1
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	4093      	lsls	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001564:	4935      	ldr	r1, [pc, #212]	@ (800163c <HAL_GPIO_Init+0x2cc>)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001572:	4b36      	ldr	r3, [pc, #216]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43da      	mvns	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	2380      	movs	r3, #128	@ 0x80
 8001588:	035b      	lsls	r3, r3, #13
 800158a:	4013      	ands	r3, r2
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800159c:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43da      	mvns	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	039b      	lsls	r3, r3, #14
 80015b4:	4013      	ands	r3, r2
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015c0:	4b22      	ldr	r3, [pc, #136]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43da      	mvns	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43da      	mvns	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	4013      	ands	r3, r2
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001614:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_GPIO_Init+0x2dc>)
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	40da      	lsrs	r2, r3
 8001628:	1e13      	subs	r3, r2, #0
 800162a:	d000      	beq.n	800162e <HAL_GPIO_Init+0x2be>
 800162c:	e6a8      	b.n	8001380 <HAL_GPIO_Init+0x10>
  } 
}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b006      	add	sp, #24
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	40010000 	.word	0x40010000
 8001640:	48000400 	.word	0x48000400
 8001644:	48000800 	.word	0x48000800
 8001648:	48000c00 	.word	0x48000c00
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	0008      	movs	r0, r1
 800165a:	0011      	movs	r1, r2
 800165c:	1cbb      	adds	r3, r7, #2
 800165e:	1c02      	adds	r2, r0, #0
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	1c7b      	adds	r3, r7, #1
 8001664:	1c0a      	adds	r2, r1, #0
 8001666:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001668:	1c7b      	adds	r3, r7, #1
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001670:	1cbb      	adds	r3, r7, #2
 8001672:	881a      	ldrh	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001678:	e003      	b.n	8001682 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167a:	1cbb      	adds	r3, r7, #2
 800167c:	881a      	ldrh	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e301      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	d100      	bne.n	80016aa <HAL_RCC_OscConfig+0x1e>
 80016a8:	e08d      	b.n	80017c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016aa:	4bc3      	ldr	r3, [pc, #780]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	220c      	movs	r2, #12
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d00e      	beq.n	80016d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b6:	4bc0      	ldr	r3, [pc, #768]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	220c      	movs	r2, #12
 80016bc:	4013      	ands	r3, r2
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d116      	bne.n	80016f0 <HAL_RCC_OscConfig+0x64>
 80016c2:	4bbd      	ldr	r3, [pc, #756]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	401a      	ands	r2, r3
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d10d      	bne.n	80016f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	4bb8      	ldr	r3, [pc, #736]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	4013      	ands	r3, r2
 80016de:	d100      	bne.n	80016e2 <HAL_RCC_OscConfig+0x56>
 80016e0:	e070      	b.n	80017c4 <HAL_RCC_OscConfig+0x138>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d000      	beq.n	80016ec <HAL_RCC_OscConfig+0x60>
 80016ea:	e06b      	b.n	80017c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e2d8      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_RCC_OscConfig+0x7c>
 80016f8:	4baf      	ldr	r3, [pc, #700]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4bae      	ldr	r3, [pc, #696]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	2180      	movs	r1, #128	@ 0x80
 8001700:	0249      	lsls	r1, r1, #9
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e02f      	b.n	8001768 <HAL_RCC_OscConfig+0xdc>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10c      	bne.n	800172a <HAL_RCC_OscConfig+0x9e>
 8001710:	4ba9      	ldr	r3, [pc, #676]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4ba8      	ldr	r3, [pc, #672]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001716:	49a9      	ldr	r1, [pc, #676]	@ (80019bc <HAL_RCC_OscConfig+0x330>)
 8001718:	400a      	ands	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	4ba6      	ldr	r3, [pc, #664]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4ba5      	ldr	r3, [pc, #660]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001722:	49a7      	ldr	r1, [pc, #668]	@ (80019c0 <HAL_RCC_OscConfig+0x334>)
 8001724:	400a      	ands	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e01e      	b.n	8001768 <HAL_RCC_OscConfig+0xdc>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b05      	cmp	r3, #5
 8001730:	d10e      	bne.n	8001750 <HAL_RCC_OscConfig+0xc4>
 8001732:	4ba1      	ldr	r3, [pc, #644]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4ba0      	ldr	r3, [pc, #640]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001738:	2180      	movs	r1, #128	@ 0x80
 800173a:	02c9      	lsls	r1, r1, #11
 800173c:	430a      	orrs	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4b9d      	ldr	r3, [pc, #628]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b9c      	ldr	r3, [pc, #624]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	0249      	lsls	r1, r1, #9
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e00b      	b.n	8001768 <HAL_RCC_OscConfig+0xdc>
 8001750:	4b99      	ldr	r3, [pc, #612]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b98      	ldr	r3, [pc, #608]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001756:	4999      	ldr	r1, [pc, #612]	@ (80019bc <HAL_RCC_OscConfig+0x330>)
 8001758:	400a      	ands	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	4b96      	ldr	r3, [pc, #600]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b95      	ldr	r3, [pc, #596]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001762:	4997      	ldr	r1, [pc, #604]	@ (80019c0 <HAL_RCC_OscConfig+0x334>)
 8001764:	400a      	ands	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d014      	beq.n	800179a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fb6e 	bl	8000e50 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177a:	f7ff fb69 	bl	8000e50 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	@ 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e28a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178c:	4b8a      	ldr	r3, [pc, #552]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0xee>
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff fb59 	bl	8000e50 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb54 	bl	8000e50 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	@ 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e275      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b80      	ldr	r3, [pc, #512]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	029b      	lsls	r3, r3, #10
 80017be:	4013      	ands	r3, r2
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x118>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d100      	bne.n	80017d2 <HAL_RCC_OscConfig+0x146>
 80017d0:	e069      	b.n	80018a6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017d2:	4b79      	ldr	r3, [pc, #484]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	220c      	movs	r2, #12
 80017d8:	4013      	ands	r3, r2
 80017da:	d00b      	beq.n	80017f4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017dc:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	220c      	movs	r2, #12
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d11c      	bne.n	8001822 <HAL_RCC_OscConfig+0x196>
 80017e8:	4b73      	ldr	r3, [pc, #460]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	025b      	lsls	r3, r3, #9
 80017f0:	4013      	ands	r3, r2
 80017f2:	d116      	bne.n	8001822 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f4:	4b70      	ldr	r3, [pc, #448]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x17e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d001      	beq.n	800180a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e24b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b6b      	ldr	r3, [pc, #428]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	22f8      	movs	r2, #248	@ 0xf8
 8001810:	4393      	bics	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	00da      	lsls	r2, r3, #3
 800181a:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001820:	e041      	b.n	80018a6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d024      	beq.n	8001874 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182a:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b62      	ldr	r3, [pc, #392]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001830:	2101      	movs	r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb0b 	bl	8000e50 <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fb06 	bl	8000e50 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e227      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d0f1      	beq.n	8001840 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	22f8      	movs	r2, #248	@ 0xf8
 8001862:	4393      	bics	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00da      	lsls	r2, r3, #3
 800186c:	4b52      	ldr	r3, [pc, #328]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e018      	b.n	80018a6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001874:	4b50      	ldr	r3, [pc, #320]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b4f      	ldr	r3, [pc, #316]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800187a:	2101      	movs	r1, #1
 800187c:	438a      	bics	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fae6 	bl	8000e50 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fae1 	bl	8000e50 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e202      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189c:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f1      	bne.n	800188a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2208      	movs	r2, #8
 80018ac:	4013      	ands	r3, r2
 80018ae:	d036      	beq.n	800191e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d019      	beq.n	80018ec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b8:	4b3f      	ldr	r3, [pc, #252]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018bc:	4b3e      	ldr	r3, [pc, #248]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018be:	2101      	movs	r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fac4 	bl	8000e50 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fabf 	bl	8000e50 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1e0      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e0:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	2202      	movs	r2, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	d0f1      	beq.n	80018ce <HAL_RCC_OscConfig+0x242>
 80018ea:	e018      	b.n	800191e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018f0:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	438a      	bics	r2, r1
 80018f6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff faaa 	bl	8000e50 <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff faa5 	bl	8000e50 <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e1c6      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001914:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	2202      	movs	r2, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d1f1      	bne.n	8001902 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2204      	movs	r2, #4
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x29e>
 8001928:	e0b4      	b.n	8001a94 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	201f      	movs	r0, #31
 800192c:	183b      	adds	r3, r7, r0
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	055b      	lsls	r3, r3, #21
 800193a:	4013      	ands	r3, r2
 800193c:	d110      	bne.n	8001960 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 8001944:	2180      	movs	r1, #128	@ 0x80
 8001946:	0549      	lsls	r1, r1, #21
 8001948:	430a      	orrs	r2, r1
 800194a:	61da      	str	r2, [r3, #28]
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	055b      	lsls	r3, r3, #21
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800195a:	183b      	adds	r3, r7, r0
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <HAL_RCC_OscConfig+0x338>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4013      	ands	r3, r2
 800196a:	d11a      	bne.n	80019a2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_RCC_OscConfig+0x338>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_RCC_OscConfig+0x338>)
 8001972:	2180      	movs	r1, #128	@ 0x80
 8001974:	0049      	lsls	r1, r1, #1
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7ff fa69 	bl	8000e50 <HAL_GetTick>
 800197e:	0003      	movs	r3, r0
 8001980:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001984:	f7ff fa64 	bl	8000e50 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e185      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_RCC_OscConfig+0x338>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10e      	bne.n	80019c8 <HAL_RCC_OscConfig+0x33c>
 80019aa:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	4b02      	ldr	r3, [pc, #8]	@ (80019b8 <HAL_RCC_OscConfig+0x32c>)
 80019b0:	2101      	movs	r1, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	621a      	str	r2, [r3, #32]
 80019b6:	e035      	b.n	8001a24 <HAL_RCC_OscConfig+0x398>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	fffeffff 	.word	0xfffeffff
 80019c0:	fffbffff 	.word	0xfffbffff
 80019c4:	40007000 	.word	0x40007000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x35e>
 80019d0:	4bb6      	ldr	r3, [pc, #728]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 80019d2:	6a1a      	ldr	r2, [r3, #32]
 80019d4:	4bb5      	ldr	r3, [pc, #724]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	621a      	str	r2, [r3, #32]
 80019dc:	4bb3      	ldr	r3, [pc, #716]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 80019de:	6a1a      	ldr	r2, [r3, #32]
 80019e0:	4bb2      	ldr	r3, [pc, #712]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 80019e2:	2104      	movs	r1, #4
 80019e4:	438a      	bics	r2, r1
 80019e6:	621a      	str	r2, [r3, #32]
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x398>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x380>
 80019f2:	4bae      	ldr	r3, [pc, #696]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 80019f4:	6a1a      	ldr	r2, [r3, #32]
 80019f6:	4bad      	ldr	r3, [pc, #692]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 80019f8:	2104      	movs	r1, #4
 80019fa:	430a      	orrs	r2, r1
 80019fc:	621a      	str	r2, [r3, #32]
 80019fe:	4bab      	ldr	r3, [pc, #684]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a00:	6a1a      	ldr	r2, [r3, #32]
 8001a02:	4baa      	ldr	r3, [pc, #680]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	621a      	str	r2, [r3, #32]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0x398>
 8001a0c:	4ba7      	ldr	r3, [pc, #668]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	4ba6      	ldr	r3, [pc, #664]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	621a      	str	r2, [r3, #32]
 8001a18:	4ba4      	ldr	r3, [pc, #656]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a1a:	6a1a      	ldr	r2, [r3, #32]
 8001a1c:	4ba3      	ldr	r3, [pc, #652]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a1e:	2104      	movs	r1, #4
 8001a20:	438a      	bics	r2, r1
 8001a22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d014      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fa10 	bl	8000e50 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fa0b 	bl	8000e50 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4a9b      	ldr	r2, [pc, #620]	@ (8001cb0 <HAL_RCC_OscConfig+0x624>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e12b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	4b98      	ldr	r3, [pc, #608]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3aa>
 8001a54:	e013      	b.n	8001a7e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff f9fb 	bl	8000e50 <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5e:	e009      	b.n	8001a74 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff f9f6 	bl	8000e50 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	4a91      	ldr	r2, [pc, #580]	@ (8001cb0 <HAL_RCC_OscConfig+0x624>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e116      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	4b8d      	ldr	r3, [pc, #564]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a7e:	231f      	movs	r3, #31
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4b88      	ldr	r3, [pc, #544]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	4b87      	ldr	r3, [pc, #540]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001a8e:	4989      	ldr	r1, [pc, #548]	@ (8001cb4 <HAL_RCC_OscConfig+0x628>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2210      	movs	r2, #16
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d12a      	bne.n	8001afc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001aa6:	4b81      	ldr	r3, [pc, #516]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aaa:	4b80      	ldr	r3, [pc, #512]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001aac:	2104      	movs	r1, #4
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ab2:	4b7e      	ldr	r3, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab6:	4b7d      	ldr	r3, [pc, #500]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff f9c7 	bl	8000e50 <HAL_GetTick>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ac8:	f7ff f9c2 	bl	8000e50 <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e0e3      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ada:	4b74      	ldr	r3, [pc, #464]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d0f1      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ae4:	4b71      	ldr	r3, [pc, #452]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae8:	22f8      	movs	r2, #248	@ 0xf8
 8001aea:	4393      	bics	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	00da      	lsls	r2, r3, #3
 8001af4:	4b6d      	ldr	r3, [pc, #436]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001afa:	e034      	b.n	8001b66 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	3305      	adds	r3, #5
 8001b02:	d111      	bne.n	8001b28 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b04:	4b69      	ldr	r3, [pc, #420]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b08:	4b68      	ldr	r3, [pc, #416]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b14:	22f8      	movs	r2, #248	@ 0xf8
 8001b16:	4393      	bics	r3, r2
 8001b18:	0019      	movs	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	00da      	lsls	r2, r3, #3
 8001b20:	4b62      	ldr	r3, [pc, #392]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b26:	e01e      	b.n	8001b66 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b28:	4b60      	ldr	r3, [pc, #384]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b2e:	2104      	movs	r1, #4
 8001b30:	430a      	orrs	r2, r1
 8001b32:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b34:	4b5d      	ldr	r3, [pc, #372]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b38:	4b5c      	ldr	r3, [pc, #368]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b40:	f7ff f986 	bl	8000e50 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b4a:	f7ff f981 	bl	8000e50 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0a2      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b5c:	4b53      	ldr	r3, [pc, #332]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d1f1      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d100      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4e4>
 8001b6e:	e097      	b.n	8001ca0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b70:	4b4e      	ldr	r3, [pc, #312]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	220c      	movs	r2, #12
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d100      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4f2>
 8001b7c:	e06b      	b.n	8001c56 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d14c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001b8c:	494a      	ldr	r1, [pc, #296]	@ (8001cb8 <HAL_RCC_OscConfig+0x62c>)
 8001b8e:	400a      	ands	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff f95d 	bl	8000e50 <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f958 	bl	8000e50 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e079      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	4b3f      	ldr	r3, [pc, #252]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	049b      	lsls	r3, r3, #18
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	4393      	bics	r3, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc8:	4b38      	ldr	r3, [pc, #224]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bce:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8001cbc <HAL_RCC_OscConfig+0x630>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	431a      	orrs	r2, r3
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b2f      	ldr	r3, [pc, #188]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001bee:	2180      	movs	r1, #128	@ 0x80
 8001bf0:	0449      	lsls	r1, r1, #17
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f92b 	bl	8000e50 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f926 	bl	8000e50 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e047      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c12:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	049b      	lsls	r3, r3, #18
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x574>
 8001c1e:	e03f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001c26:	4924      	ldr	r1, [pc, #144]	@ (8001cb8 <HAL_RCC_OscConfig+0x62c>)
 8001c28:	400a      	ands	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f910 	bl	8000e50 <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff f90b 	bl	8000e50 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e02c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	049b      	lsls	r3, r3, #18
 8001c50:	4013      	ands	r3, r2
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x5aa>
 8001c54:	e024      	b.n	8001ca0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e01f      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c62:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c68:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_RCC_OscConfig+0x620>)
 8001c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	025b      	lsls	r3, r3, #9
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d10e      	bne.n	8001c9c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	220f      	movs	r2, #15
 8001c82:	401a      	ands	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	23f0      	movs	r3, #240	@ 0xf0
 8001c90:	039b      	lsls	r3, r3, #14
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b008      	add	sp, #32
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	00001388 	.word	0x00001388
 8001cb4:	efffffff 	.word	0xefffffff
 8001cb8:	feffffff 	.word	0xfeffffff
 8001cbc:	ffc2ffff 	.word	0xffc2ffff

08001cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0b3      	b.n	8001e3c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <HAL_RCC_ClockConfig+0x184>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d911      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b58      	ldr	r3, [pc, #352]	@ (8001e44 <HAL_RCC_ClockConfig+0x184>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4393      	bics	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	4b55      	ldr	r3, [pc, #340]	@ (8001e44 <HAL_RCC_ClockConfig+0x184>)
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf4:	4b53      	ldr	r3, [pc, #332]	@ (8001e44 <HAL_RCC_ClockConfig+0x184>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e09a      	b.n	8001e3c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d015      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2204      	movs	r2, #4
 8001d16:	4013      	ands	r3, r2
 8001d18:	d006      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d20:	21e0      	movs	r1, #224	@ 0xe0
 8001d22:	00c9      	lsls	r1, r1, #3
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b47      	ldr	r3, [pc, #284]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	22f0      	movs	r2, #240	@ 0xf0
 8001d2e:	4393      	bics	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	4b44      	ldr	r3, [pc, #272]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	d040      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	d114      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06e      	b.n	8001e3c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	2380      	movs	r3, #128	@ 0x80
 8001d6c:	049b      	lsls	r3, r3, #18
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d108      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e062      	b.n	8001e3c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b34      	ldr	r3, [pc, #208]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e05b      	b.n	8001e3c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d84:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4393      	bics	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001d94:	430a      	orrs	r2, r1
 8001d96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d98:	f7ff f85a 	bl	8000e50 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da0:	e009      	b.n	8001db6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f7ff f855 	bl	8000e50 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	4a27      	ldr	r2, [pc, #156]	@ (8001e4c <HAL_RCC_ClockConfig+0x18c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e042      	b.n	8001e3c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	220c      	movs	r2, #12
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1ec      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e44 <HAL_RCC_ClockConfig+0x184>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d211      	bcs.n	8001dfa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_RCC_ClockConfig+0x184>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4393      	bics	r3, r2
 8001dde:	0019      	movs	r1, r3
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_RCC_ClockConfig+0x184>)
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <HAL_RCC_ClockConfig+0x184>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4013      	ands	r3, r2
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e020      	b.n	8001e3c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	4013      	ands	r3, r2
 8001e02:	d009      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <HAL_RCC_ClockConfig+0x190>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e18:	f000 f820 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1c:	0001      	movs	r1, r0
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_RCC_ClockConfig+0x188>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	220f      	movs	r2, #15
 8001e26:	4013      	ands	r3, r2
 8001e28:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <HAL_RCC_ClockConfig+0x194>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	40da      	lsrs	r2, r3
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x198>)
 8001e32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f7fe ffc5 	bl	8000dc4 <HAL_InitTick>
  
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b004      	add	sp, #16
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	00001388 	.word	0x00001388
 8001e50:	fffff8ff 	.word	0xfffff8ff
 8001e54:	080049fc 	.word	0x080049fc
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	220c      	movs	r2, #12
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x30>
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x36>
 8001e8a:	e02c      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e8e:	613b      	str	r3, [r7, #16]
      break;
 8001e90:	e02c      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	0c9b      	lsrs	r3, r3, #18
 8001e96:	220f      	movs	r2, #15
 8001e98:	4013      	ands	r3, r2
 8001e9a:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	025b      	lsls	r3, r3, #9
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	4810      	ldr	r0, [pc, #64]	@ (8001efc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ebc:	f7fe f936 	bl	800012c <__udivsi3>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4353      	muls	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e009      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	000a      	movs	r2, r1
 8001ed0:	0152      	lsls	r2, r2, #5
 8001ed2:	1a52      	subs	r2, r2, r1
 8001ed4:	0193      	lsls	r3, r2, #6
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	185b      	adds	r3, r3, r1
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
      break;
 8001ee4:	e002      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ee8:	613b      	str	r3, [r7, #16]
      break;
 8001eea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eec:	693b      	ldr	r3, [r7, #16]
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b006      	add	sp, #24
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	08004a14 	.word	0x08004a14
 8001f04:	08004a24 	.word	0x08004a24

08001f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	@ (8001f18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f20:	f7ff fff2 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f24:	0001      	movs	r1, r0
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	4013      	ands	r3, r2
 8001f30:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f32:	5cd3      	ldrb	r3, [r2, r3]
 8001f34:	40d9      	lsrs	r1, r3
 8001f36:	000b      	movs	r3, r1
}    
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08004a0c 	.word	0x08004a0c

08001f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	4013      	ands	r3, r2
 8001f62:	d100      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f64:	e08e      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2017      	movs	r0, #23
 8001f68:	183b      	adds	r3, r7, r0
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	055b      	lsls	r3, r3, #21
 8001f76:	4013      	ands	r3, r2
 8001f78:	d110      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f80:	2180      	movs	r1, #128	@ 0x80
 8001f82:	0549      	lsls	r1, r1, #21
 8001f84:	430a      	orrs	r2, r1
 8001f86:	61da      	str	r2, [r3, #28]
 8001f88:	4b58      	ldr	r3, [pc, #352]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	055b      	lsls	r3, r3, #21
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	183b      	adds	r3, r7, r0
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	4b54      	ldr	r3, [pc, #336]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d11a      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa8:	4b51      	ldr	r3, [pc, #324]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b50      	ldr	r3, [pc, #320]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001fae:	2180      	movs	r1, #128	@ 0x80
 8001fb0:	0049      	lsls	r1, r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ff4b 	bl	8000e50 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc0:	f7fe ff46 	bl	8000e50 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	@ 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e087      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	4b47      	ldr	r3, [pc, #284]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fde:	4b43      	ldr	r3, [pc, #268]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	23c0      	movs	r3, #192	@ 0xc0
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d034      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	23c0      	movs	r3, #192	@ 0xc0
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d02c      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002000:	4b3a      	ldr	r3, [pc, #232]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a3b      	ldr	r2, [pc, #236]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	4b37      	ldr	r3, [pc, #220]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002010:	2180      	movs	r1, #128	@ 0x80
 8002012:	0249      	lsls	r1, r1, #9
 8002014:	430a      	orrs	r2, r1
 8002016:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002018:	4b34      	ldr	r3, [pc, #208]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800201a:	6a1a      	ldr	r2, [r3, #32]
 800201c:	4b33      	ldr	r3, [pc, #204]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800201e:	4936      	ldr	r1, [pc, #216]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002020:	400a      	ands	r2, r1
 8002022:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002024:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe ff0d 	bl	8000e50 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	e009      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe ff08 	bl	8000e50 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e048      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4b26      	ldr	r3, [pc, #152]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d0f0      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800205a:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a25      	ldr	r2, [pc, #148]	@ (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	4b20      	ldr	r3, [pc, #128]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800206a:	430a      	orrs	r2, r1
 800206c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800206e:	2317      	movs	r3, #23
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800207e:	4920      	ldr	r1, [pc, #128]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002080:	400a      	ands	r2, r1
 8002082:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800208e:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	2203      	movs	r2, #3
 8002094:	4393      	bics	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2220      	movs	r2, #32
 80020a8:	4013      	ands	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ac:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	2210      	movs	r2, #16
 80020b2:	4393      	bics	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4013      	ands	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020cc:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	2240      	movs	r2, #64	@ 0x40
 80020d2:	4393      	bics	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b006      	add	sp, #24
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
 80020f4:	fffffcff 	.word	0xfffffcff
 80020f8:	fffeffff 	.word	0xfffeffff
 80020fc:	00001388 	.word	0x00001388
 8002100:	efffffff 	.word	0xefffffff

08002104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e044      	b.n	80021a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2278      	movs	r2, #120	@ 0x78
 8002122:	2100      	movs	r1, #0
 8002124:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f7fe fc97 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2224      	movs	r2, #36	@ 0x24
 8002132:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2101      	movs	r1, #1
 8002140:	438a      	bics	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 fd5e 	bl	8002c10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	0018      	movs	r0, r3
 8002158:	f000 fc1a 	bl	8002990 <UART_SetConfig>
 800215c:	0003      	movs	r3, r0
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e01c      	b.n	80021a0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	490d      	ldr	r1, [pc, #52]	@ (80021a8 <HAL_UART_Init+0xa4>)
 8002172:	400a      	ands	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	212a      	movs	r1, #42	@ 0x2a
 8002182:	438a      	bics	r2, r1
 8002184:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 fded 	bl	8002d78 <UART_CheckIdleState>
 800219e:	0003      	movs	r3, r0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	ffffb7ff 	.word	0xffffb7ff

080021ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	@ 0x28
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	1dbb      	adds	r3, r7, #6
 80021ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	d000      	beq.n	80021c6 <HAL_UART_Transmit+0x1a>
 80021c4:	e08c      	b.n	80022e0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_UART_Transmit+0x28>
 80021cc:	1dbb      	adds	r3, r7, #6
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e084      	b.n	80022e2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	015b      	lsls	r3, r3, #5
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d109      	bne.n	80021f8 <HAL_UART_Transmit+0x4c>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2201      	movs	r2, #1
 80021f0:	4013      	ands	r3, r2
 80021f2:	d001      	beq.n	80021f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e074      	b.n	80022e2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2284      	movs	r2, #132	@ 0x84
 80021fc:	2100      	movs	r1, #0
 80021fe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2221      	movs	r2, #33	@ 0x21
 8002204:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002206:	f7fe fe23 	bl	8000e50 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1dba      	adds	r2, r7, #6
 8002212:	2150      	movs	r1, #80	@ 0x50
 8002214:	8812      	ldrh	r2, [r2, #0]
 8002216:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1dba      	adds	r2, r7, #6
 800221c:	2152      	movs	r1, #82	@ 0x52
 800221e:	8812      	ldrh	r2, [r2, #0]
 8002220:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	2380      	movs	r3, #128	@ 0x80
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	429a      	cmp	r2, r3
 800222c:	d108      	bne.n	8002240 <HAL_UART_Transmit+0x94>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d104      	bne.n	8002240 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	e003      	b.n	8002248 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002248:	e02f      	b.n	80022aa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	0013      	movs	r3, r2
 8002254:	2200      	movs	r2, #0
 8002256:	2180      	movs	r1, #128	@ 0x80
 8002258:	f000 fe36 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 800225c:	1e03      	subs	r3, r0, #0
 800225e:	d004      	beq.n	800226a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e03b      	b.n	80022e2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	05d2      	lsls	r2, r2, #23
 800227a:	0dd2      	lsrs	r2, r2, #23
 800227c:	b292      	uxth	r2, r2
 800227e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	3302      	adds	r3, #2
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	e007      	b.n	8002298 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2252      	movs	r2, #82	@ 0x52
 800229c:	5a9b      	ldrh	r3, [r3, r2]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b299      	uxth	r1, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2252      	movs	r2, #82	@ 0x52
 80022a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2252      	movs	r2, #82	@ 0x52
 80022ae:	5a9b      	ldrh	r3, [r3, r2]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1c9      	bne.n	800224a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	0013      	movs	r3, r2
 80022c0:	2200      	movs	r2, #0
 80022c2:	2140      	movs	r1, #64	@ 0x40
 80022c4:	f000 fe00 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 80022c8:	1e03      	subs	r3, r0, #0
 80022ca:	d004      	beq.n	80022d6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e005      	b.n	80022e2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b008      	add	sp, #32
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b088      	sub	sp, #32
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	1dbb      	adds	r3, r7, #6
 80022f6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2280      	movs	r2, #128	@ 0x80
 80022fc:	589b      	ldr	r3, [r3, r2]
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d145      	bne.n	800238e <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_UART_Receive_IT+0x26>
 8002308:	1dbb      	adds	r3, r7, #6
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e03d      	b.n	8002390 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	015b      	lsls	r3, r3, #5
 800231c:	429a      	cmp	r2, r3
 800231e:	d109      	bne.n	8002334 <HAL_UART_Receive_IT+0x4a>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2201      	movs	r2, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d001      	beq.n	8002334 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e02d      	b.n	8002390 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	4013      	ands	r3, r2
 8002346:	d019      	beq.n	800237c <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002348:	f3ef 8310 	mrs	r3, PRIMASK
 800234c:	613b      	str	r3, [r7, #16]
  return(result);
 800234e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	2301      	movs	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f383 8810 	msr	PRIMASK, r3
}
 800235c:	46c0      	nop			@ (mov r8, r8)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	04c9      	lsls	r1, r1, #19
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f383 8810 	msr	PRIMASK, r3
}
 800237a:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800237c:	1dbb      	adds	r3, r7, #6
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fe0f 	bl	8002fa8 <UART_Start_Receive_IT>
 800238a:	0003      	movs	r3, r0
 800238c:	e000      	b.n	8002390 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b008      	add	sp, #32
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b0ab      	sub	sp, #172	@ 0xac
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	22a4      	movs	r2, #164	@ 0xa4
 80023a8:	18b9      	adds	r1, r7, r2
 80023aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	20a0      	movs	r0, #160	@ 0xa0
 80023b4:	1839      	adds	r1, r7, r0
 80023b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	219c      	movs	r1, #156	@ 0x9c
 80023c0:	1879      	adds	r1, r7, r1
 80023c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023c4:	0011      	movs	r1, r2
 80023c6:	18bb      	adds	r3, r7, r2
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a99      	ldr	r2, [pc, #612]	@ (8002630 <HAL_UART_IRQHandler+0x298>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	2298      	movs	r2, #152	@ 0x98
 80023d0:	18bc      	adds	r4, r7, r2
 80023d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80023d4:	18bb      	adds	r3, r7, r2
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d114      	bne.n	8002406 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2220      	movs	r2, #32
 80023e2:	4013      	ands	r3, r2
 80023e4:	d00f      	beq.n	8002406 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023e6:	183b      	adds	r3, r7, r0
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	4013      	ands	r3, r2
 80023ee:	d00a      	beq.n	8002406 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d100      	bne.n	80023fa <HAL_UART_IRQHandler+0x62>
 80023f8:	e29e      	b.n	8002938 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	0010      	movs	r0, r2
 8002402:	4798      	blx	r3
      }
      return;
 8002404:	e298      	b.n	8002938 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002406:	2398      	movs	r3, #152	@ 0x98
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d100      	bne.n	8002412 <HAL_UART_IRQHandler+0x7a>
 8002410:	e114      	b.n	800263c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002412:	239c      	movs	r3, #156	@ 0x9c
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	4013      	ands	r3, r2
 800241c:	d106      	bne.n	800242c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800241e:	23a0      	movs	r3, #160	@ 0xa0
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a83      	ldr	r2, [pc, #524]	@ (8002634 <HAL_UART_IRQHandler+0x29c>)
 8002426:	4013      	ands	r3, r2
 8002428:	d100      	bne.n	800242c <HAL_UART_IRQHandler+0x94>
 800242a:	e107      	b.n	800263c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800242c:	23a4      	movs	r3, #164	@ 0xa4
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	4013      	ands	r3, r2
 8002436:	d012      	beq.n	800245e <HAL_UART_IRQHandler+0xc6>
 8002438:	23a0      	movs	r3, #160	@ 0xa0
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4013      	ands	r3, r2
 8002444:	d00b      	beq.n	800245e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2201      	movs	r2, #1
 800244c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2284      	movs	r2, #132	@ 0x84
 8002452:	589b      	ldr	r3, [r3, r2]
 8002454:	2201      	movs	r2, #1
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2184      	movs	r1, #132	@ 0x84
 800245c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800245e:	23a4      	movs	r3, #164	@ 0xa4
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2202      	movs	r2, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d011      	beq.n	800248e <HAL_UART_IRQHandler+0xf6>
 800246a:	239c      	movs	r3, #156	@ 0x9c
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	d00b      	beq.n	800248e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2202      	movs	r2, #2
 800247c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2284      	movs	r2, #132	@ 0x84
 8002482:	589b      	ldr	r3, [r3, r2]
 8002484:	2204      	movs	r2, #4
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2184      	movs	r1, #132	@ 0x84
 800248c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800248e:	23a4      	movs	r3, #164	@ 0xa4
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2204      	movs	r2, #4
 8002496:	4013      	ands	r3, r2
 8002498:	d011      	beq.n	80024be <HAL_UART_IRQHandler+0x126>
 800249a:	239c      	movs	r3, #156	@ 0x9c
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2201      	movs	r2, #1
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00b      	beq.n	80024be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2204      	movs	r2, #4
 80024ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2284      	movs	r2, #132	@ 0x84
 80024b2:	589b      	ldr	r3, [r3, r2]
 80024b4:	2202      	movs	r2, #2
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2184      	movs	r1, #132	@ 0x84
 80024bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024be:	23a4      	movs	r3, #164	@ 0xa4
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	d017      	beq.n	80024fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024ca:	23a0      	movs	r3, #160	@ 0xa0
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2220      	movs	r2, #32
 80024d2:	4013      	ands	r3, r2
 80024d4:	d105      	bne.n	80024e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80024d6:	239c      	movs	r3, #156	@ 0x9c
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024e0:	d00b      	beq.n	80024fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2208      	movs	r2, #8
 80024e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2284      	movs	r2, #132	@ 0x84
 80024ee:	589b      	ldr	r3, [r3, r2]
 80024f0:	2208      	movs	r2, #8
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2184      	movs	r1, #132	@ 0x84
 80024f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024fa:	23a4      	movs	r3, #164	@ 0xa4
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	4013      	ands	r3, r2
 8002506:	d013      	beq.n	8002530 <HAL_UART_IRQHandler+0x198>
 8002508:	23a0      	movs	r3, #160	@ 0xa0
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	@ 0x80
 8002510:	04db      	lsls	r3, r3, #19
 8002512:	4013      	ands	r3, r2
 8002514:	d00c      	beq.n	8002530 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2284      	movs	r2, #132	@ 0x84
 8002524:	589b      	ldr	r3, [r3, r2]
 8002526:	2220      	movs	r2, #32
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2184      	movs	r1, #132	@ 0x84
 800252e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2284      	movs	r2, #132	@ 0x84
 8002534:	589b      	ldr	r3, [r3, r2]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d100      	bne.n	800253c <HAL_UART_IRQHandler+0x1a4>
 800253a:	e1ff      	b.n	800293c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800253c:	23a4      	movs	r3, #164	@ 0xa4
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2220      	movs	r2, #32
 8002544:	4013      	ands	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002548:	23a0      	movs	r3, #160	@ 0xa0
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2220      	movs	r2, #32
 8002550:	4013      	ands	r3, r2
 8002552:	d008      	beq.n	8002566 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002558:	2b00      	cmp	r3, #0
 800255a:	d004      	beq.n	8002566 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	0010      	movs	r0, r2
 8002564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2284      	movs	r2, #132	@ 0x84
 800256a:	589b      	ldr	r3, [r3, r2]
 800256c:	2194      	movs	r1, #148	@ 0x94
 800256e:	187a      	adds	r2, r7, r1
 8002570:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2240      	movs	r2, #64	@ 0x40
 800257a:	4013      	ands	r3, r2
 800257c:	2b40      	cmp	r3, #64	@ 0x40
 800257e:	d004      	beq.n	800258a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002580:	187b      	adds	r3, r7, r1
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2228      	movs	r2, #40	@ 0x28
 8002586:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002588:	d047      	beq.n	800261a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 fdc1 	bl	8003114 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2240      	movs	r2, #64	@ 0x40
 800259a:	4013      	ands	r3, r2
 800259c:	2b40      	cmp	r3, #64	@ 0x40
 800259e:	d137      	bne.n	8002610 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a0:	f3ef 8310 	mrs	r3, PRIMASK
 80025a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80025a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a8:	2090      	movs	r0, #144	@ 0x90
 80025aa:	183a      	adds	r2, r7, r0
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	2301      	movs	r3, #1
 80025b0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025b4:	f383 8810 	msr	PRIMASK, r3
}
 80025b8:	46c0      	nop			@ (mov r8, r8)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2140      	movs	r1, #64	@ 0x40
 80025c6:	438a      	bics	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	183b      	adds	r3, r7, r0
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025d2:	f383 8810 	msr	PRIMASK, r3
}
 80025d6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e4:	4a14      	ldr	r2, [pc, #80]	@ (8002638 <HAL_UART_IRQHandler+0x2a0>)
 80025e6:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7fe fdbb 	bl	8001168 <HAL_DMA_Abort_IT>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d01a      	beq.n	800262c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002600:	0018      	movs	r0, r3
 8002602:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	e012      	b.n	800262c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f000 f9ad 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260e:	e00d      	b.n	800262c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f9a8 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	e008      	b.n	800262c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f000 f9a3 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2284      	movs	r2, #132	@ 0x84
 8002626:	2100      	movs	r1, #0
 8002628:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800262a:	e187      	b.n	800293c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	46c0      	nop			@ (mov r8, r8)
    return;
 800262e:	e185      	b.n	800293c <HAL_UART_IRQHandler+0x5a4>
 8002630:	0000080f 	.word	0x0000080f
 8002634:	04000120 	.word	0x04000120
 8002638:	080031dd 	.word	0x080031dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002640:	2b01      	cmp	r3, #1
 8002642:	d000      	beq.n	8002646 <HAL_UART_IRQHandler+0x2ae>
 8002644:	e139      	b.n	80028ba <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002646:	23a4      	movs	r3, #164	@ 0xa4
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2210      	movs	r2, #16
 800264e:	4013      	ands	r3, r2
 8002650:	d100      	bne.n	8002654 <HAL_UART_IRQHandler+0x2bc>
 8002652:	e132      	b.n	80028ba <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002654:	23a0      	movs	r3, #160	@ 0xa0
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2210      	movs	r2, #16
 800265c:	4013      	ands	r3, r2
 800265e:	d100      	bne.n	8002662 <HAL_UART_IRQHandler+0x2ca>
 8002660:	e12b      	b.n	80028ba <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2210      	movs	r2, #16
 8002668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2240      	movs	r2, #64	@ 0x40
 8002672:	4013      	ands	r3, r2
 8002674:	2b40      	cmp	r3, #64	@ 0x40
 8002676:	d000      	beq.n	800267a <HAL_UART_IRQHandler+0x2e2>
 8002678:	e09f      	b.n	80027ba <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	217e      	movs	r1, #126	@ 0x7e
 8002684:	187b      	adds	r3, r7, r1
 8002686:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002688:	187b      	adds	r3, r7, r1
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d100      	bne.n	8002692 <HAL_UART_IRQHandler+0x2fa>
 8002690:	e156      	b.n	8002940 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2258      	movs	r2, #88	@ 0x58
 8002696:	5a9b      	ldrh	r3, [r3, r2]
 8002698:	187a      	adds	r2, r7, r1
 800269a:	8812      	ldrh	r2, [r2, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d300      	bcc.n	80026a2 <HAL_UART_IRQHandler+0x30a>
 80026a0:	e14e      	b.n	8002940 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	187a      	adds	r2, r7, r1
 80026a6:	215a      	movs	r1, #90	@ 0x5a
 80026a8:	8812      	ldrh	r2, [r2, #0]
 80026aa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d06f      	beq.n	8002796 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026c0:	2301      	movs	r3, #1
 80026c2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c6:	f383 8810 	msr	PRIMASK, r3
}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	499e      	ldr	r1, [pc, #632]	@ (8002950 <HAL_UART_IRQHandler+0x5b8>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026de:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e2:	f383 8810 	msr	PRIMASK, r3
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e8:	f3ef 8310 	mrs	r3, PRIMASK
 80026ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80026ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80026f2:	2301      	movs	r3, #1
 80026f4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			@ (mov r8, r8)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	438a      	bics	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002710:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002714:	f383 8810 	msr	PRIMASK, r3
}
 8002718:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271a:	f3ef 8310 	mrs	r3, PRIMASK
 800271e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002722:	673b      	str	r3, [r7, #112]	@ 0x70
 8002724:	2301      	movs	r3, #1
 8002726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800272a:	f383 8810 	msr	PRIMASK, r3
}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	438a      	bics	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002742:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002746:	f383 8810 	msr	PRIMASK, r3
}
 800274a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	2120      	movs	r1, #32
 8002752:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275a:	f3ef 8310 	mrs	r3, PRIMASK
 800275e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002762:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002764:	2301      	movs	r3, #1
 8002766:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002768:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800276a:	f383 8810 	msr	PRIMASK, r3
}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2110      	movs	r1, #16
 800277c:	438a      	bics	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002782:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002786:	f383 8810 	msr	PRIMASK, r3
}
 800278a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002790:	0018      	movs	r0, r3
 8002792:	f7fe fcb1 	bl	80010f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2258      	movs	r2, #88	@ 0x58
 80027a0:	5a9a      	ldrh	r2, [r3, r2]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	215a      	movs	r1, #90	@ 0x5a
 80027a6:	5a5b      	ldrh	r3, [r3, r1]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0011      	movs	r1, r2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f8e0 	bl	8002978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027b8:	e0c2      	b.n	8002940 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2258      	movs	r2, #88	@ 0x58
 80027be:	5a99      	ldrh	r1, [r3, r2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	225a      	movs	r2, #90	@ 0x5a
 80027c4:	5a9b      	ldrh	r3, [r3, r2]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	208e      	movs	r0, #142	@ 0x8e
 80027ca:	183b      	adds	r3, r7, r0
 80027cc:	1a8a      	subs	r2, r1, r2
 80027ce:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	225a      	movs	r2, #90	@ 0x5a
 80027d4:	5a9b      	ldrh	r3, [r3, r2]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d100      	bne.n	80027de <HAL_UART_IRQHandler+0x446>
 80027dc:	e0b2      	b.n	8002944 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80027de:	183b      	adds	r3, r7, r0
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d100      	bne.n	80027e8 <HAL_UART_IRQHandler+0x450>
 80027e6:	e0ad      	b.n	8002944 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e8:	f3ef 8310 	mrs	r3, PRIMASK
 80027ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80027ee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f0:	2488      	movs	r4, #136	@ 0x88
 80027f2:	193a      	adds	r2, r7, r4
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f383 8810 	msr	PRIMASK, r3
}
 8002800:	46c0      	nop			@ (mov r8, r8)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4951      	ldr	r1, [pc, #324]	@ (8002954 <HAL_UART_IRQHandler+0x5bc>)
 800280e:	400a      	ands	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	193b      	adds	r3, r7, r4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f383 8810 	msr	PRIMASK, r3
}
 800281e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002820:	f3ef 8310 	mrs	r3, PRIMASK
 8002824:	61bb      	str	r3, [r7, #24]
  return(result);
 8002826:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002828:	2484      	movs	r4, #132	@ 0x84
 800282a:	193a      	adds	r2, r7, r4
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f383 8810 	msr	PRIMASK, r3
}
 8002838:	46c0      	nop			@ (mov r8, r8)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	438a      	bics	r2, r1
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	193b      	adds	r3, r7, r4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2280      	movs	r2, #128	@ 0x80
 800285c:	2120      	movs	r1, #32
 800285e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800286c:	f3ef 8310 	mrs	r3, PRIMASK
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002874:	2480      	movs	r4, #128	@ 0x80
 8002876:	193a      	adds	r2, r7, r4
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	2301      	movs	r3, #1
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002880:	f383 8810 	msr	PRIMASK, r3
}
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2110      	movs	r1, #16
 8002892:	438a      	bics	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	193b      	adds	r3, r7, r4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800289e:	f383 8810 	msr	PRIMASK, r3
}
 80028a2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028aa:	183b      	adds	r3, r7, r0
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0011      	movs	r1, r2
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 f860 	bl	8002978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028b8:	e044      	b.n	8002944 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028ba:	23a4      	movs	r3, #164	@ 0xa4
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	035b      	lsls	r3, r3, #13
 80028c4:	4013      	ands	r3, r2
 80028c6:	d010      	beq.n	80028ea <HAL_UART_IRQHandler+0x552>
 80028c8:	239c      	movs	r3, #156	@ 0x9c
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	03db      	lsls	r3, r3, #15
 80028d2:	4013      	ands	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2280      	movs	r2, #128	@ 0x80
 80028dc:	0352      	lsls	r2, r2, #13
 80028de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fe74 	bl	80035d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028e8:	e02f      	b.n	800294a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80028ea:	23a4      	movs	r3, #164	@ 0xa4
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2280      	movs	r2, #128	@ 0x80
 80028f2:	4013      	ands	r3, r2
 80028f4:	d00f      	beq.n	8002916 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80028f6:	23a0      	movs	r3, #160	@ 0xa0
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2280      	movs	r2, #128	@ 0x80
 80028fe:	4013      	ands	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01e      	beq.n	8002948 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	0010      	movs	r0, r2
 8002912:	4798      	blx	r3
    }
    return;
 8002914:	e018      	b.n	8002948 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002916:	23a4      	movs	r3, #164	@ 0xa4
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2240      	movs	r2, #64	@ 0x40
 800291e:	4013      	ands	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_UART_IRQHandler+0x5b2>
 8002922:	23a0      	movs	r3, #160	@ 0xa0
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2240      	movs	r2, #64	@ 0x40
 800292a:	4013      	ands	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 fc6a 	bl	800320a <UART_EndTransmit_IT>
    return;
 8002936:	e008      	b.n	800294a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	e006      	b.n	800294a <HAL_UART_IRQHandler+0x5b2>
    return;
 800293c:	46c0      	nop			@ (mov r8, r8)
 800293e:	e004      	b.n	800294a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002940:	46c0      	nop			@ (mov r8, r8)
 8002942:	e002      	b.n	800294a <HAL_UART_IRQHandler+0x5b2>
      return;
 8002944:	46c0      	nop			@ (mov r8, r8)
 8002946:	e000      	b.n	800294a <HAL_UART_IRQHandler+0x5b2>
    return;
 8002948:	46c0      	nop			@ (mov r8, r8)
  }

}
 800294a:	46bd      	mov	sp, r7
 800294c:	b02b      	add	sp, #172	@ 0xac
 800294e:	bd90      	pop	{r4, r7, pc}
 8002950:	fffffeff 	.word	0xfffffeff
 8002954:	fffffedf 	.word	0xfffffedf

08002958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002960:	46c0      	nop			@ (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002970:	46c0      	nop			@ (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	000a      	movs	r2, r1
 8002982:	1cbb      	adds	r3, r7, #2
 8002984:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002998:	231e      	movs	r3, #30
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a8d      	ldr	r2, [pc, #564]	@ (8002bf4 <UART_SetConfig+0x264>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	0019      	movs	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a88      	ldr	r2, [pc, #544]	@ (8002bf8 <UART_SetConfig+0x268>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a7f      	ldr	r2, [pc, #508]	@ (8002bfc <UART_SetConfig+0x26c>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a7b      	ldr	r2, [pc, #492]	@ (8002c00 <UART_SetConfig+0x270>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d127      	bne.n	8002a66 <UART_SetConfig+0xd6>
 8002a16:	4b7b      	ldr	r3, [pc, #492]	@ (8002c04 <UART_SetConfig+0x274>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d00d      	beq.n	8002a3e <UART_SetConfig+0xae>
 8002a22:	d81b      	bhi.n	8002a5c <UART_SetConfig+0xcc>
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d014      	beq.n	8002a52 <UART_SetConfig+0xc2>
 8002a28:	d818      	bhi.n	8002a5c <UART_SetConfig+0xcc>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <UART_SetConfig+0xa4>
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00a      	beq.n	8002a48 <UART_SetConfig+0xb8>
 8002a32:	e013      	b.n	8002a5c <UART_SetConfig+0xcc>
 8002a34:	231f      	movs	r3, #31
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e021      	b.n	8002a82 <UART_SetConfig+0xf2>
 8002a3e:	231f      	movs	r3, #31
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2202      	movs	r2, #2
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e01c      	b.n	8002a82 <UART_SetConfig+0xf2>
 8002a48:	231f      	movs	r3, #31
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e017      	b.n	8002a82 <UART_SetConfig+0xf2>
 8002a52:	231f      	movs	r3, #31
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	2208      	movs	r2, #8
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e012      	b.n	8002a82 <UART_SetConfig+0xf2>
 8002a5c:	231f      	movs	r3, #31
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	2210      	movs	r2, #16
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e00d      	b.n	8002a82 <UART_SetConfig+0xf2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a67      	ldr	r2, [pc, #412]	@ (8002c08 <UART_SetConfig+0x278>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d104      	bne.n	8002a7a <UART_SetConfig+0xea>
 8002a70:	231f      	movs	r3, #31
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e003      	b.n	8002a82 <UART_SetConfig+0xf2>
 8002a7a:	231f      	movs	r3, #31
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	2210      	movs	r2, #16
 8002a80:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d15c      	bne.n	8002b48 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002a8e:	231f      	movs	r3, #31
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d015      	beq.n	8002ac4 <UART_SetConfig+0x134>
 8002a98:	dc18      	bgt.n	8002acc <UART_SetConfig+0x13c>
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d00d      	beq.n	8002aba <UART_SetConfig+0x12a>
 8002a9e:	dc15      	bgt.n	8002acc <UART_SetConfig+0x13c>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <UART_SetConfig+0x11a>
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d005      	beq.n	8002ab4 <UART_SetConfig+0x124>
 8002aa8:	e010      	b.n	8002acc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aaa:	f7ff fa37 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	61bb      	str	r3, [r7, #24]
        break;
 8002ab2:	e012      	b.n	8002ada <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ab4:	4b55      	ldr	r3, [pc, #340]	@ (8002c0c <UART_SetConfig+0x27c>)
 8002ab6:	61bb      	str	r3, [r7, #24]
        break;
 8002ab8:	e00f      	b.n	8002ada <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aba:	f7ff f9cf 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	61bb      	str	r3, [r7, #24]
        break;
 8002ac2:	e00a      	b.n	8002ada <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	61bb      	str	r3, [r7, #24]
        break;
 8002aca:	e006      	b.n	8002ada <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ad0:	231e      	movs	r3, #30
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
        break;
 8002ad8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d100      	bne.n	8002ae2 <UART_SetConfig+0x152>
 8002ae0:	e07a      	b.n	8002bd8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	005a      	lsls	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	18d2      	adds	r2, r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	0019      	movs	r1, r3
 8002af4:	0010      	movs	r0, r2
 8002af6:	f7fd fb19 	bl	800012c <__udivsi3>
 8002afa:	0003      	movs	r3, r0
 8002afc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d91c      	bls.n	8002b3e <UART_SetConfig+0x1ae>
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	025b      	lsls	r3, r3, #9
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d217      	bcs.n	8002b3e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	200e      	movs	r0, #14
 8002b14:	183b      	adds	r3, r7, r0
 8002b16:	210f      	movs	r1, #15
 8002b18:	438a      	bics	r2, r1
 8002b1a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2207      	movs	r2, #7
 8002b24:	4013      	ands	r3, r2
 8002b26:	b299      	uxth	r1, r3
 8002b28:	183b      	adds	r3, r7, r0
 8002b2a:	183a      	adds	r2, r7, r0
 8002b2c:	8812      	ldrh	r2, [r2, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	183a      	adds	r2, r7, r0
 8002b38:	8812      	ldrh	r2, [r2, #0]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	e04c      	b.n	8002bd8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002b3e:	231e      	movs	r3, #30
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e047      	b.n	8002bd8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b48:	231f      	movs	r3, #31
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d015      	beq.n	8002b7e <UART_SetConfig+0x1ee>
 8002b52:	dc18      	bgt.n	8002b86 <UART_SetConfig+0x1f6>
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d00d      	beq.n	8002b74 <UART_SetConfig+0x1e4>
 8002b58:	dc15      	bgt.n	8002b86 <UART_SetConfig+0x1f6>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <UART_SetConfig+0x1d4>
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d005      	beq.n	8002b6e <UART_SetConfig+0x1de>
 8002b62:	e010      	b.n	8002b86 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b64:	f7ff f9da 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	61bb      	str	r3, [r7, #24]
        break;
 8002b6c:	e012      	b.n	8002b94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b6e:	4b27      	ldr	r3, [pc, #156]	@ (8002c0c <UART_SetConfig+0x27c>)
 8002b70:	61bb      	str	r3, [r7, #24]
        break;
 8002b72:	e00f      	b.n	8002b94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b74:	f7ff f972 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	61bb      	str	r3, [r7, #24]
        break;
 8002b7c:	e00a      	b.n	8002b94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b7e:	2380      	movs	r3, #128	@ 0x80
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	61bb      	str	r3, [r7, #24]
        break;
 8002b84:	e006      	b.n	8002b94 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b8a:	231e      	movs	r3, #30
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
        break;
 8002b92:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01e      	beq.n	8002bd8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	085a      	lsrs	r2, r3, #1
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	18d2      	adds	r2, r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	0019      	movs	r1, r3
 8002baa:	0010      	movs	r0, r2
 8002bac:	f7fd fabe 	bl	800012c <__udivsi3>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d90a      	bls.n	8002bd0 <UART_SetConfig+0x240>
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	025b      	lsls	r3, r3, #9
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d205      	bcs.n	8002bd0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	e003      	b.n	8002bd8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002bd0:	231e      	movs	r3, #30
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002be4:	231e      	movs	r3, #30
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b008      	add	sp, #32
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	ffff69f3 	.word	0xffff69f3
 8002bf8:	ffffcfff 	.word	0xffffcfff
 8002bfc:	fffff4ff 	.word	0xfffff4ff
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40004400 	.word	0x40004400
 8002c0c:	007a1200 	.word	0x007a1200

08002c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a4a      	ldr	r2, [pc, #296]	@ (8002d54 <UART_AdvFeatureConfig+0x144>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	d00b      	beq.n	8002c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4a43      	ldr	r2, [pc, #268]	@ (8002d58 <UART_AdvFeatureConfig+0x148>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	2202      	movs	r2, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d5c <UART_AdvFeatureConfig+0x14c>)
 8002c6e:	4013      	ands	r3, r2
 8002c70:	0019      	movs	r1, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	2204      	movs	r2, #4
 8002c84:	4013      	ands	r3, r2
 8002c86:	d00b      	beq.n	8002ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a34      	ldr	r2, [pc, #208]	@ (8002d60 <UART_AdvFeatureConfig+0x150>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	0019      	movs	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d00b      	beq.n	8002cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d64 <UART_AdvFeatureConfig+0x154>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4a25      	ldr	r2, [pc, #148]	@ (8002d68 <UART_AdvFeatureConfig+0x158>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	2240      	movs	r2, #64	@ 0x40
 8002cea:	4013      	ands	r3, r2
 8002cec:	d01d      	beq.n	8002d2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <UART_AdvFeatureConfig+0x15c>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	035b      	lsls	r3, r3, #13
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d10b      	bne.n	8002d2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <UART_AdvFeatureConfig+0x160>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2e:	2280      	movs	r2, #128	@ 0x80
 8002d30:	4013      	ands	r3, r2
 8002d32:	d00b      	beq.n	8002d4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d74 <UART_AdvFeatureConfig+0x164>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  }
}
 8002d4c:	46c0      	nop			@ (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	ffff7fff 	.word	0xffff7fff
 8002d58:	fffdffff 	.word	0xfffdffff
 8002d5c:	fffeffff 	.word	0xfffeffff
 8002d60:	fffbffff 	.word	0xfffbffff
 8002d64:	ffffefff 	.word	0xffffefff
 8002d68:	ffffdfff 	.word	0xffffdfff
 8002d6c:	ffefffff 	.word	0xffefffff
 8002d70:	ff9fffff 	.word	0xff9fffff
 8002d74:	fff7ffff 	.word	0xfff7ffff

08002d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b092      	sub	sp, #72	@ 0x48
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2284      	movs	r2, #132	@ 0x84
 8002d84:	2100      	movs	r1, #0
 8002d86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d88:	f7fe f862 	bl	8000e50 <HAL_GetTick>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2208      	movs	r2, #8
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d12c      	bne.n	8002df8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da0:	2280      	movs	r2, #128	@ 0x80
 8002da2:	0391      	lsls	r1, r2, #14
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4a46      	ldr	r2, [pc, #280]	@ (8002ec0 <UART_CheckIdleState+0x148>)
 8002da8:	9200      	str	r2, [sp, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f000 f88c 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d021      	beq.n	8002df8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db4:	f3ef 8310 	mrs	r3, PRIMASK
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc4:	f383 8810 	msr	PRIMASK, r3
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2180      	movs	r1, #128	@ 0x80
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2278      	movs	r2, #120	@ 0x78
 8002df0:	2100      	movs	r1, #0
 8002df2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e05f      	b.n	8002eb8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d146      	bne.n	8002e94 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e08:	2280      	movs	r2, #128	@ 0x80
 8002e0a:	03d1      	lsls	r1, r2, #15
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <UART_CheckIdleState+0x148>)
 8002e10:	9200      	str	r2, [sp, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f000 f858 	bl	8002ec8 <UART_WaitOnFlagUntilTimeout>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d03b      	beq.n	8002e94 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e22:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e26:	2301      	movs	r3, #1
 8002e28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f383 8810 	msr	PRIMASK, r3
}
 8002e30:	46c0      	nop			@ (mov r8, r8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4921      	ldr	r1, [pc, #132]	@ (8002ec4 <UART_CheckIdleState+0x14c>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f383 8810 	msr	PRIMASK, r3
}
 8002e4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e52:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e54:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e56:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e58:	2301      	movs	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f383 8810 	msr	PRIMASK, r3
}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	438a      	bics	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	f383 8810 	msr	PRIMASK, r3
}
 8002e7e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2280      	movs	r2, #128	@ 0x80
 8002e84:	2120      	movs	r1, #32
 8002e86:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2278      	movs	r2, #120	@ 0x78
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e011      	b.n	8002eb8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	2120      	movs	r1, #32
 8002ea0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2278      	movs	r2, #120	@ 0x78
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b010      	add	sp, #64	@ 0x40
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	01ffffff 	.word	0x01ffffff
 8002ec4:	fffffedf 	.word	0xfffffedf

08002ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed8:	e051      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	3301      	adds	r3, #1
 8002ede:	d04e      	beq.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7fd ffb6 	bl	8000e50 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e051      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	d03b      	beq.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b80      	cmp	r3, #128	@ 0x80
 8002f0a:	d038      	beq.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b40      	cmp	r3, #64	@ 0x40
 8002f10:	d035      	beq.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d111      	bne.n	8002f44 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2208      	movs	r2, #8
 8002f26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f000 f8f2 	bl	8003114 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2284      	movs	r2, #132	@ 0x84
 8002f34:	2108      	movs	r1, #8
 8002f36:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2278      	movs	r2, #120	@ 0x78
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e02c      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	401a      	ands	r2, r3
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d112      	bne.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2280      	movs	r2, #128	@ 0x80
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 f8d5 	bl	8003114 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2284      	movs	r2, #132	@ 0x84
 8002f6e:	2120      	movs	r1, #32
 8002f70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2278      	movs	r2, #120	@ 0x78
 8002f76:	2100      	movs	r1, #0
 8002f78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e00f      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	4013      	ands	r3, r2
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	425a      	negs	r2, r3
 8002f8e:	4153      	adcs	r3, r2
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	001a      	movs	r2, r3
 8002f94:	1dfb      	adds	r3, r7, #7
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d09e      	beq.n	8002eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b004      	add	sp, #16
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b090      	sub	sp, #64	@ 0x40
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	1dbb      	adds	r3, r7, #6
 8002fb4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1dba      	adds	r2, r7, #6
 8002fc0:	2158      	movs	r1, #88	@ 0x58
 8002fc2:	8812      	ldrh	r2, [r2, #0]
 8002fc4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1dba      	adds	r2, r7, #6
 8002fca:	215a      	movs	r1, #90	@ 0x5a
 8002fcc:	8812      	ldrh	r2, [r2, #0]
 8002fce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	2380      	movs	r3, #128	@ 0x80
 8002fdc:	015b      	lsls	r3, r3, #5
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d10d      	bne.n	8002ffe <UART_Start_Receive_IT+0x56>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <UART_Start_Receive_IT+0x4c>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	225c      	movs	r2, #92	@ 0x5c
 8002fee:	4946      	ldr	r1, [pc, #280]	@ (8003108 <UART_Start_Receive_IT+0x160>)
 8002ff0:	5299      	strh	r1, [r3, r2]
 8002ff2:	e01a      	b.n	800302a <UART_Start_Receive_IT+0x82>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	225c      	movs	r2, #92	@ 0x5c
 8002ff8:	21ff      	movs	r1, #255	@ 0xff
 8002ffa:	5299      	strh	r1, [r3, r2]
 8002ffc:	e015      	b.n	800302a <UART_Start_Receive_IT+0x82>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <UART_Start_Receive_IT+0x7a>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <UART_Start_Receive_IT+0x70>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	225c      	movs	r2, #92	@ 0x5c
 8003012:	21ff      	movs	r1, #255	@ 0xff
 8003014:	5299      	strh	r1, [r3, r2]
 8003016:	e008      	b.n	800302a <UART_Start_Receive_IT+0x82>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	225c      	movs	r2, #92	@ 0x5c
 800301c:	217f      	movs	r1, #127	@ 0x7f
 800301e:	5299      	strh	r1, [r3, r2]
 8003020:	e003      	b.n	800302a <UART_Start_Receive_IT+0x82>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	225c      	movs	r2, #92	@ 0x5c
 8003026:	2100      	movs	r1, #0
 8003028:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2284      	movs	r2, #132	@ 0x84
 800302e:	2100      	movs	r1, #0
 8003030:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	2122      	movs	r1, #34	@ 0x22
 8003038:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800303a:	f3ef 8310 	mrs	r3, PRIMASK
 800303e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003044:	2301      	movs	r3, #1
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	f383 8810 	msr	PRIMASK, r3
}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	430a      	orrs	r2, r1
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	f383 8810 	msr	PRIMASK, r3
}
 800306a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	015b      	lsls	r3, r3, #5
 8003074:	429a      	cmp	r2, r3
 8003076:	d107      	bne.n	8003088 <UART_Start_Receive_IT+0xe0>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d103      	bne.n	8003088 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a22      	ldr	r2, [pc, #136]	@ (800310c <UART_Start_Receive_IT+0x164>)
 8003084:	669a      	str	r2, [r3, #104]	@ 0x68
 8003086:	e002      	b.n	800308e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a21      	ldr	r2, [pc, #132]	@ (8003110 <UART_Start_Receive_IT+0x168>)
 800308c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003096:	f3ef 8310 	mrs	r3, PRIMASK
 800309a:	61fb      	str	r3, [r7, #28]
  return(result);
 800309c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800309e:	637b      	str	r3, [r7, #52]	@ 0x34
 80030a0:	2301      	movs	r3, #1
 80030a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	f383 8810 	msr	PRIMASK, r3
}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2190      	movs	r1, #144	@ 0x90
 80030b8:	0049      	lsls	r1, r1, #1
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	e018      	b.n	80030fc <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ca:	f3ef 8310 	mrs	r3, PRIMASK
 80030ce:	613b      	str	r3, [r7, #16]
  return(result);
 80030d0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80030d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030d4:	2301      	movs	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f383 8810 	msr	PRIMASK, r3
}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2120      	movs	r1, #32
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f383 8810 	msr	PRIMASK, r3
}
 80030fa:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b010      	add	sp, #64	@ 0x40
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	000001ff 	.word	0x000001ff
 800310c:	08003419 	.word	0x08003419
 8003110:	08003261 	.word	0x08003261

08003114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08e      	sub	sp, #56	@ 0x38
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311c:	f3ef 8310 	mrs	r3, PRIMASK
 8003120:	617b      	str	r3, [r7, #20]
  return(result);
 8003122:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003124:	637b      	str	r3, [r7, #52]	@ 0x34
 8003126:	2301      	movs	r3, #1
 8003128:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f383 8810 	msr	PRIMASK, r3
}
 8003130:	46c0      	nop			@ (mov r8, r8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4926      	ldr	r1, [pc, #152]	@ (80031d8 <UART_EndRxTransfer+0xc4>)
 800313e:	400a      	ands	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003144:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f383 8810 	msr	PRIMASK, r3
}
 800314c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314e:	f3ef 8310 	mrs	r3, PRIMASK
 8003152:	623b      	str	r3, [r7, #32]
  return(result);
 8003154:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003156:	633b      	str	r3, [r7, #48]	@ 0x30
 8003158:	2301      	movs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2101      	movs	r1, #1
 8003170:	438a      	bics	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003176:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003184:	2b01      	cmp	r3, #1
 8003186:	d118      	bne.n	80031ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003188:	f3ef 8310 	mrs	r3, PRIMASK
 800318c:	60bb      	str	r3, [r7, #8]
  return(result);
 800318e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003192:	2301      	movs	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2110      	movs	r1, #16
 80031aa:	438a      	bics	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f383 8810 	msr	PRIMASK, r3
}
 80031b8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2280      	movs	r2, #128	@ 0x80
 80031be:	2120      	movs	r1, #32
 80031c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b00e      	add	sp, #56	@ 0x38
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	fffffedf 	.word	0xfffffedf

080031dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	225a      	movs	r2, #90	@ 0x5a
 80031ee:	2100      	movs	r1, #0
 80031f0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2252      	movs	r2, #82	@ 0x52
 80031f6:	2100      	movs	r1, #0
 80031f8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff fbb3 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}

0800320a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003212:	f3ef 8310 	mrs	r3, PRIMASK
 8003216:	60bb      	str	r3, [r7, #8]
  return(result);
 8003218:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	2301      	movs	r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2140      	movs	r1, #64	@ 0x40
 8003234:	438a      	bics	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f383 8810 	msr	PRIMASK, r3
}
 8003242:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0018      	movs	r0, r3
 8003254:	f7ff fb80 	bl	8002958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b006      	add	sp, #24
 800325e:	bd80      	pop	{r7, pc}

08003260 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b094      	sub	sp, #80	@ 0x50
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003268:	204e      	movs	r0, #78	@ 0x4e
 800326a:	183b      	adds	r3, r7, r0
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	215c      	movs	r1, #92	@ 0x5c
 8003270:	5a52      	ldrh	r2, [r2, r1]
 8003272:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	589b      	ldr	r3, [r3, r2]
 800327a:	2b22      	cmp	r3, #34	@ 0x22
 800327c:	d000      	beq.n	8003280 <UART_RxISR_8BIT+0x20>
 800327e:	e0ba      	b.n	80033f6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	214c      	movs	r1, #76	@ 0x4c
 8003286:	187b      	adds	r3, r7, r1
 8003288:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800328a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800328c:	187b      	adds	r3, r7, r1
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	183b      	adds	r3, r7, r0
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b2d9      	uxtb	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	400a      	ands	r2, r1
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	225a      	movs	r2, #90	@ 0x5a
 80032b0:	5a9b      	ldrh	r3, [r3, r2]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b299      	uxth	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	225a      	movs	r2, #90	@ 0x5a
 80032bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	225a      	movs	r2, #90	@ 0x5a
 80032c2:	5a9b      	ldrh	r3, [r3, r2]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d000      	beq.n	80032cc <UART_RxISR_8BIT+0x6c>
 80032ca:	e09c      	b.n	8003406 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032cc:	f3ef 8310 	mrs	r3, PRIMASK
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032d6:	2301      	movs	r3, #1
 80032d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032dc:	f383 8810 	msr	PRIMASK, r3
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4948      	ldr	r1, [pc, #288]	@ (8003410 <UART_RxISR_8BIT+0x1b0>)
 80032ee:	400a      	ands	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f8:	f383 8810 	msr	PRIMASK, r3
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003302:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003306:	647b      	str	r3, [r7, #68]	@ 0x44
 8003308:	2301      	movs	r3, #1
 800330a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2101      	movs	r1, #1
 8003320:	438a      	bics	r2, r1
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003326:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332a:	f383 8810 	msr	PRIMASK, r3
}
 800332e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	@ 0x80
 8003334:	2120      	movs	r1, #32
 8003336:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	4013      	ands	r3, r2
 8003350:	d018      	beq.n	8003384 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003352:	f3ef 8310 	mrs	r3, PRIMASK
 8003356:	61bb      	str	r3, [r7, #24]
  return(result);
 8003358:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800335a:	643b      	str	r3, [r7, #64]	@ 0x40
 800335c:	2301      	movs	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f383 8810 	msr	PRIMASK, r3
}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4928      	ldr	r1, [pc, #160]	@ (8003414 <UART_RxISR_8BIT+0x1b4>)
 8003374:	400a      	ands	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800337a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	f383 8810 	msr	PRIMASK, r3
}
 8003382:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003388:	2b01      	cmp	r3, #1
 800338a:	d12f      	bne.n	80033ec <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003392:	f3ef 8310 	mrs	r3, PRIMASK
 8003396:	60fb      	str	r3, [r7, #12]
  return(result);
 8003398:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800339c:	2301      	movs	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f383 8810 	msr	PRIMASK, r3
}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2110      	movs	r1, #16
 80033b4:	438a      	bics	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	2210      	movs	r2, #16
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d103      	bne.n	80033da <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2210      	movs	r2, #16
 80033d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2258      	movs	r2, #88	@ 0x58
 80033de:	5a9a      	ldrh	r2, [r3, r2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0011      	movs	r1, r2
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff fac7 	bl	8002978 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033ea:	e00c      	b.n	8003406 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fd f840 	bl	8000474 <HAL_UART_RxCpltCallback>
}
 80033f4:	e007      	b.n	8003406 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2108      	movs	r1, #8
 8003402:	430a      	orrs	r2, r1
 8003404:	619a      	str	r2, [r3, #24]
}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b014      	add	sp, #80	@ 0x50
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	fffffedf 	.word	0xfffffedf
 8003414:	fbffffff 	.word	0xfbffffff

08003418 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b094      	sub	sp, #80	@ 0x50
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003420:	204e      	movs	r0, #78	@ 0x4e
 8003422:	183b      	adds	r3, r7, r0
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	215c      	movs	r1, #92	@ 0x5c
 8003428:	5a52      	ldrh	r2, [r2, r1]
 800342a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2280      	movs	r2, #128	@ 0x80
 8003430:	589b      	ldr	r3, [r3, r2]
 8003432:	2b22      	cmp	r3, #34	@ 0x22
 8003434:	d000      	beq.n	8003438 <UART_RxISR_16BIT+0x20>
 8003436:	e0ba      	b.n	80035ae <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	214c      	movs	r1, #76	@ 0x4c
 800343e:	187b      	adds	r3, r7, r1
 8003440:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003442:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003448:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800344a:	187b      	adds	r3, r7, r1
 800344c:	183a      	adds	r2, r7, r0
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	8812      	ldrh	r2, [r2, #0]
 8003452:	4013      	ands	r3, r2
 8003454:	b29a      	uxth	r2, r3
 8003456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003458:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	225a      	movs	r2, #90	@ 0x5a
 8003468:	5a9b      	ldrh	r3, [r3, r2]
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b299      	uxth	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	225a      	movs	r2, #90	@ 0x5a
 8003474:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	225a      	movs	r2, #90	@ 0x5a
 800347a:	5a9b      	ldrh	r3, [r3, r2]
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d000      	beq.n	8003484 <UART_RxISR_16BIT+0x6c>
 8003482:	e09c      	b.n	80035be <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003484:	f3ef 8310 	mrs	r3, PRIMASK
 8003488:	623b      	str	r3, [r7, #32]
  return(result);
 800348a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348c:	647b      	str	r3, [r7, #68]	@ 0x44
 800348e:	2301      	movs	r3, #1
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4948      	ldr	r1, [pc, #288]	@ (80035c8 <UART_RxISR_16BIT+0x1b0>)
 80034a6:	400a      	ands	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	f383 8810 	msr	PRIMASK, r3
}
 80034b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80034bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	643b      	str	r3, [r7, #64]	@ 0x40
 80034c0:	2301      	movs	r3, #1
 80034c2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c6:	f383 8810 	msr	PRIMASK, r3
}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2101      	movs	r1, #1
 80034d8:	438a      	bics	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	2120      	movs	r1, #32
 80034ee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	2380      	movs	r3, #128	@ 0x80
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	4013      	ands	r3, r2
 8003508:	d018      	beq.n	800353c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350a:	f3ef 8310 	mrs	r3, PRIMASK
 800350e:	617b      	str	r3, [r7, #20]
  return(result);
 8003510:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003514:	2301      	movs	r3, #1
 8003516:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4928      	ldr	r1, [pc, #160]	@ (80035cc <UART_RxISR_16BIT+0x1b4>)
 800352c:	400a      	ands	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003540:	2b01      	cmp	r3, #1
 8003542:	d12f      	bne.n	80035a4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354a:	f3ef 8310 	mrs	r3, PRIMASK
 800354e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003550:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003554:	2301      	movs	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2110      	movs	r1, #16
 800356c:	438a      	bics	r2, r1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	2210      	movs	r2, #16
 8003584:	4013      	ands	r3, r2
 8003586:	2b10      	cmp	r3, #16
 8003588:	d103      	bne.n	8003592 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2210      	movs	r2, #16
 8003590:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2258      	movs	r2, #88	@ 0x58
 8003596:	5a9a      	ldrh	r2, [r3, r2]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff f9eb 	bl	8002978 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035a2:	e00c      	b.n	80035be <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7fc ff64 	bl	8000474 <HAL_UART_RxCpltCallback>
}
 80035ac:	e007      	b.n	80035be <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2108      	movs	r1, #8
 80035ba:	430a      	orrs	r2, r1
 80035bc:	619a      	str	r2, [r3, #24]
}
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b014      	add	sp, #80	@ 0x50
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	fffffedf 	.word	0xfffffedf
 80035cc:	fbffffff 	.word	0xfbffffff

080035d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}

080035e0 <rand>:
 80035e0:	4b16      	ldr	r3, [pc, #88]	@ (800363c <rand+0x5c>)
 80035e2:	b510      	push	{r4, lr}
 80035e4:	681c      	ldr	r4, [r3, #0]
 80035e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d116      	bne.n	800361a <rand+0x3a>
 80035ec:	2018      	movs	r0, #24
 80035ee:	f000 fa5b 	bl	8003aa8 <malloc>
 80035f2:	1e02      	subs	r2, r0, #0
 80035f4:	6320      	str	r0, [r4, #48]	@ 0x30
 80035f6:	d104      	bne.n	8003602 <rand+0x22>
 80035f8:	2152      	movs	r1, #82	@ 0x52
 80035fa:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <rand+0x60>)
 80035fc:	4811      	ldr	r0, [pc, #68]	@ (8003644 <rand+0x64>)
 80035fe:	f000 f9eb 	bl	80039d8 <__assert_func>
 8003602:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <rand+0x68>)
 8003604:	2100      	movs	r1, #0
 8003606:	6003      	str	r3, [r0, #0]
 8003608:	4b10      	ldr	r3, [pc, #64]	@ (800364c <rand+0x6c>)
 800360a:	6043      	str	r3, [r0, #4]
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <rand+0x70>)
 800360e:	6083      	str	r3, [r0, #8]
 8003610:	230b      	movs	r3, #11
 8003612:	8183      	strh	r3, [r0, #12]
 8003614:	2001      	movs	r0, #1
 8003616:	6110      	str	r0, [r2, #16]
 8003618:	6151      	str	r1, [r2, #20]
 800361a:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 800361c:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <rand+0x74>)
 800361e:	6920      	ldr	r0, [r4, #16]
 8003620:	6961      	ldr	r1, [r4, #20]
 8003622:	4b0d      	ldr	r3, [pc, #52]	@ (8003658 <rand+0x78>)
 8003624:	f7fc fef8 	bl	8000418 <__aeabi_lmul>
 8003628:	2201      	movs	r2, #1
 800362a:	2300      	movs	r3, #0
 800362c:	1880      	adds	r0, r0, r2
 800362e:	4159      	adcs	r1, r3
 8003630:	6120      	str	r0, [r4, #16]
 8003632:	6161      	str	r1, [r4, #20]
 8003634:	0048      	lsls	r0, r1, #1
 8003636:	0840      	lsrs	r0, r0, #1
 8003638:	bd10      	pop	{r4, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	2000001c 	.word	0x2000001c
 8003640:	08004a34 	.word	0x08004a34
 8003644:	08004a4b 	.word	0x08004a4b
 8003648:	abcd330e 	.word	0xabcd330e
 800364c:	e66d1234 	.word	0xe66d1234
 8003650:	0005deec 	.word	0x0005deec
 8003654:	4c957f2d 	.word	0x4c957f2d
 8003658:	5851f42d 	.word	0x5851f42d

0800365c <std>:
 800365c:	2300      	movs	r3, #0
 800365e:	b510      	push	{r4, lr}
 8003660:	0004      	movs	r4, r0
 8003662:	6003      	str	r3, [r0, #0]
 8003664:	6043      	str	r3, [r0, #4]
 8003666:	6083      	str	r3, [r0, #8]
 8003668:	8181      	strh	r1, [r0, #12]
 800366a:	6643      	str	r3, [r0, #100]	@ 0x64
 800366c:	81c2      	strh	r2, [r0, #14]
 800366e:	6103      	str	r3, [r0, #16]
 8003670:	6143      	str	r3, [r0, #20]
 8003672:	6183      	str	r3, [r0, #24]
 8003674:	0019      	movs	r1, r3
 8003676:	2208      	movs	r2, #8
 8003678:	305c      	adds	r0, #92	@ 0x5c
 800367a:	f000 f921 	bl	80038c0 <memset>
 800367e:	4b0b      	ldr	r3, [pc, #44]	@ (80036ac <std+0x50>)
 8003680:	6224      	str	r4, [r4, #32]
 8003682:	6263      	str	r3, [r4, #36]	@ 0x24
 8003684:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <std+0x54>)
 8003686:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003688:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <std+0x58>)
 800368a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <std+0x5c>)
 800368e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <std+0x60>)
 8003692:	429c      	cmp	r4, r3
 8003694:	d005      	beq.n	80036a2 <std+0x46>
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <std+0x64>)
 8003698:	429c      	cmp	r4, r3
 800369a:	d002      	beq.n	80036a2 <std+0x46>
 800369c:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <std+0x68>)
 800369e:	429c      	cmp	r4, r3
 80036a0:	d103      	bne.n	80036aa <std+0x4e>
 80036a2:	0020      	movs	r0, r4
 80036a4:	3058      	adds	r0, #88	@ 0x58
 80036a6:	f000 f98b 	bl	80039c0 <__retarget_lock_init_recursive>
 80036aa:	bd10      	pop	{r4, pc}
 80036ac:	08003829 	.word	0x08003829
 80036b0:	08003851 	.word	0x08003851
 80036b4:	08003889 	.word	0x08003889
 80036b8:	080038b5 	.word	0x080038b5
 80036bc:	20000498 	.word	0x20000498
 80036c0:	20000500 	.word	0x20000500
 80036c4:	20000568 	.word	0x20000568

080036c8 <stdio_exit_handler>:
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4a03      	ldr	r2, [pc, #12]	@ (80036d8 <stdio_exit_handler+0x10>)
 80036cc:	4903      	ldr	r1, [pc, #12]	@ (80036dc <stdio_exit_handler+0x14>)
 80036ce:	4804      	ldr	r0, [pc, #16]	@ (80036e0 <stdio_exit_handler+0x18>)
 80036d0:	f000 f86c 	bl	80037ac <_fwalk_sglue>
 80036d4:	bd10      	pop	{r4, pc}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	20000010 	.word	0x20000010
 80036dc:	080042e1 	.word	0x080042e1
 80036e0:	20000020 	.word	0x20000020

080036e4 <cleanup_stdio>:
 80036e4:	6841      	ldr	r1, [r0, #4]
 80036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <cleanup_stdio+0x30>)
 80036e8:	b510      	push	{r4, lr}
 80036ea:	0004      	movs	r4, r0
 80036ec:	4299      	cmp	r1, r3
 80036ee:	d001      	beq.n	80036f4 <cleanup_stdio+0x10>
 80036f0:	f000 fdf6 	bl	80042e0 <_fflush_r>
 80036f4:	68a1      	ldr	r1, [r4, #8]
 80036f6:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <cleanup_stdio+0x34>)
 80036f8:	4299      	cmp	r1, r3
 80036fa:	d002      	beq.n	8003702 <cleanup_stdio+0x1e>
 80036fc:	0020      	movs	r0, r4
 80036fe:	f000 fdef 	bl	80042e0 <_fflush_r>
 8003702:	68e1      	ldr	r1, [r4, #12]
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <cleanup_stdio+0x38>)
 8003706:	4299      	cmp	r1, r3
 8003708:	d002      	beq.n	8003710 <cleanup_stdio+0x2c>
 800370a:	0020      	movs	r0, r4
 800370c:	f000 fde8 	bl	80042e0 <_fflush_r>
 8003710:	bd10      	pop	{r4, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	20000498 	.word	0x20000498
 8003718:	20000500 	.word	0x20000500
 800371c:	20000568 	.word	0x20000568

08003720 <global_stdio_init.part.0>:
 8003720:	b510      	push	{r4, lr}
 8003722:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <global_stdio_init.part.0+0x28>)
 8003724:	4a09      	ldr	r2, [pc, #36]	@ (800374c <global_stdio_init.part.0+0x2c>)
 8003726:	2104      	movs	r1, #4
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	4809      	ldr	r0, [pc, #36]	@ (8003750 <global_stdio_init.part.0+0x30>)
 800372c:	2200      	movs	r2, #0
 800372e:	f7ff ff95 	bl	800365c <std>
 8003732:	2201      	movs	r2, #1
 8003734:	2109      	movs	r1, #9
 8003736:	4807      	ldr	r0, [pc, #28]	@ (8003754 <global_stdio_init.part.0+0x34>)
 8003738:	f7ff ff90 	bl	800365c <std>
 800373c:	2202      	movs	r2, #2
 800373e:	2112      	movs	r1, #18
 8003740:	4805      	ldr	r0, [pc, #20]	@ (8003758 <global_stdio_init.part.0+0x38>)
 8003742:	f7ff ff8b 	bl	800365c <std>
 8003746:	bd10      	pop	{r4, pc}
 8003748:	200005d0 	.word	0x200005d0
 800374c:	080036c9 	.word	0x080036c9
 8003750:	20000498 	.word	0x20000498
 8003754:	20000500 	.word	0x20000500
 8003758:	20000568 	.word	0x20000568

0800375c <__sfp_lock_acquire>:
 800375c:	b510      	push	{r4, lr}
 800375e:	4802      	ldr	r0, [pc, #8]	@ (8003768 <__sfp_lock_acquire+0xc>)
 8003760:	f000 f92f 	bl	80039c2 <__retarget_lock_acquire_recursive>
 8003764:	bd10      	pop	{r4, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	200005d9 	.word	0x200005d9

0800376c <__sfp_lock_release>:
 800376c:	b510      	push	{r4, lr}
 800376e:	4802      	ldr	r0, [pc, #8]	@ (8003778 <__sfp_lock_release+0xc>)
 8003770:	f000 f928 	bl	80039c4 <__retarget_lock_release_recursive>
 8003774:	bd10      	pop	{r4, pc}
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	200005d9 	.word	0x200005d9

0800377c <__sinit>:
 800377c:	b510      	push	{r4, lr}
 800377e:	0004      	movs	r4, r0
 8003780:	f7ff ffec 	bl	800375c <__sfp_lock_acquire>
 8003784:	6a23      	ldr	r3, [r4, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <__sinit+0x14>
 800378a:	f7ff ffef 	bl	800376c <__sfp_lock_release>
 800378e:	bd10      	pop	{r4, pc}
 8003790:	4b04      	ldr	r3, [pc, #16]	@ (80037a4 <__sinit+0x28>)
 8003792:	6223      	str	r3, [r4, #32]
 8003794:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <__sinit+0x2c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f6      	bne.n	800378a <__sinit+0xe>
 800379c:	f7ff ffc0 	bl	8003720 <global_stdio_init.part.0>
 80037a0:	e7f3      	b.n	800378a <__sinit+0xe>
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	080036e5 	.word	0x080036e5
 80037a8:	200005d0 	.word	0x200005d0

080037ac <_fwalk_sglue>:
 80037ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037ae:	0014      	movs	r4, r2
 80037b0:	2600      	movs	r6, #0
 80037b2:	9000      	str	r0, [sp, #0]
 80037b4:	9101      	str	r1, [sp, #4]
 80037b6:	68a5      	ldr	r5, [r4, #8]
 80037b8:	6867      	ldr	r7, [r4, #4]
 80037ba:	3f01      	subs	r7, #1
 80037bc:	d504      	bpl.n	80037c8 <_fwalk_sglue+0x1c>
 80037be:	6824      	ldr	r4, [r4, #0]
 80037c0:	2c00      	cmp	r4, #0
 80037c2:	d1f8      	bne.n	80037b6 <_fwalk_sglue+0xa>
 80037c4:	0030      	movs	r0, r6
 80037c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037c8:	89ab      	ldrh	r3, [r5, #12]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d908      	bls.n	80037e0 <_fwalk_sglue+0x34>
 80037ce:	220e      	movs	r2, #14
 80037d0:	5eab      	ldrsh	r3, [r5, r2]
 80037d2:	3301      	adds	r3, #1
 80037d4:	d004      	beq.n	80037e0 <_fwalk_sglue+0x34>
 80037d6:	0029      	movs	r1, r5
 80037d8:	9800      	ldr	r0, [sp, #0]
 80037da:	9b01      	ldr	r3, [sp, #4]
 80037dc:	4798      	blx	r3
 80037de:	4306      	orrs	r6, r0
 80037e0:	3568      	adds	r5, #104	@ 0x68
 80037e2:	e7ea      	b.n	80037ba <_fwalk_sglue+0xe>

080037e4 <siprintf>:
 80037e4:	b40e      	push	{r1, r2, r3}
 80037e6:	b510      	push	{r4, lr}
 80037e8:	2400      	movs	r4, #0
 80037ea:	490c      	ldr	r1, [pc, #48]	@ (800381c <siprintf+0x38>)
 80037ec:	b09d      	sub	sp, #116	@ 0x74
 80037ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80037f0:	9002      	str	r0, [sp, #8]
 80037f2:	9006      	str	r0, [sp, #24]
 80037f4:	9107      	str	r1, [sp, #28]
 80037f6:	9104      	str	r1, [sp, #16]
 80037f8:	4809      	ldr	r0, [pc, #36]	@ (8003820 <siprintf+0x3c>)
 80037fa:	490a      	ldr	r1, [pc, #40]	@ (8003824 <siprintf+0x40>)
 80037fc:	cb04      	ldmia	r3!, {r2}
 80037fe:	9105      	str	r1, [sp, #20]
 8003800:	6800      	ldr	r0, [r0, #0]
 8003802:	a902      	add	r1, sp, #8
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003808:	f000 fa6a 	bl	8003ce0 <_svfiprintf_r>
 800380c:	9b02      	ldr	r3, [sp, #8]
 800380e:	701c      	strb	r4, [r3, #0]
 8003810:	b01d      	add	sp, #116	@ 0x74
 8003812:	bc10      	pop	{r4}
 8003814:	bc08      	pop	{r3}
 8003816:	b003      	add	sp, #12
 8003818:	4718      	bx	r3
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	7fffffff 	.word	0x7fffffff
 8003820:	2000001c 	.word	0x2000001c
 8003824:	ffff0208 	.word	0xffff0208

08003828 <__sread>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	000c      	movs	r4, r1
 800382c:	250e      	movs	r5, #14
 800382e:	5f49      	ldrsh	r1, [r1, r5]
 8003830:	f000 f874 	bl	800391c <_read_r>
 8003834:	2800      	cmp	r0, #0
 8003836:	db03      	blt.n	8003840 <__sread+0x18>
 8003838:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800383a:	181b      	adds	r3, r3, r0
 800383c:	6563      	str	r3, [r4, #84]	@ 0x54
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	4a02      	ldr	r2, [pc, #8]	@ (800384c <__sread+0x24>)
 8003844:	4013      	ands	r3, r2
 8003846:	81a3      	strh	r3, [r4, #12]
 8003848:	e7f9      	b.n	800383e <__sread+0x16>
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	ffffefff 	.word	0xffffefff

08003850 <__swrite>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	001f      	movs	r7, r3
 8003854:	898b      	ldrh	r3, [r1, #12]
 8003856:	0005      	movs	r5, r0
 8003858:	000c      	movs	r4, r1
 800385a:	0016      	movs	r6, r2
 800385c:	05db      	lsls	r3, r3, #23
 800385e:	d505      	bpl.n	800386c <__swrite+0x1c>
 8003860:	230e      	movs	r3, #14
 8003862:	5ec9      	ldrsh	r1, [r1, r3]
 8003864:	2200      	movs	r2, #0
 8003866:	2302      	movs	r3, #2
 8003868:	f000 f844 	bl	80038f4 <_lseek_r>
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	4a05      	ldr	r2, [pc, #20]	@ (8003884 <__swrite+0x34>)
 8003870:	0028      	movs	r0, r5
 8003872:	4013      	ands	r3, r2
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	0032      	movs	r2, r6
 8003878:	230e      	movs	r3, #14
 800387a:	5ee1      	ldrsh	r1, [r4, r3]
 800387c:	003b      	movs	r3, r7
 800387e:	f000 f861 	bl	8003944 <_write_r>
 8003882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003884:	ffffefff 	.word	0xffffefff

08003888 <__sseek>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	000c      	movs	r4, r1
 800388c:	250e      	movs	r5, #14
 800388e:	5f49      	ldrsh	r1, [r1, r5]
 8003890:	f000 f830 	bl	80038f4 <_lseek_r>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	1c42      	adds	r2, r0, #1
 8003898:	d103      	bne.n	80038a2 <__sseek+0x1a>
 800389a:	4a05      	ldr	r2, [pc, #20]	@ (80038b0 <__sseek+0x28>)
 800389c:	4013      	ands	r3, r2
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	2280      	movs	r2, #128	@ 0x80
 80038a4:	0152      	lsls	r2, r2, #5
 80038a6:	4313      	orrs	r3, r2
 80038a8:	81a3      	strh	r3, [r4, #12]
 80038aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80038ac:	e7f8      	b.n	80038a0 <__sseek+0x18>
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	ffffefff 	.word	0xffffefff

080038b4 <__sclose>:
 80038b4:	b510      	push	{r4, lr}
 80038b6:	230e      	movs	r3, #14
 80038b8:	5ec9      	ldrsh	r1, [r1, r3]
 80038ba:	f000 f809 	bl	80038d0 <_close_r>
 80038be:	bd10      	pop	{r4, pc}

080038c0 <memset>:
 80038c0:	0003      	movs	r3, r0
 80038c2:	1882      	adds	r2, r0, r2
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	7019      	strb	r1, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <_close_r>:
 80038d0:	2300      	movs	r3, #0
 80038d2:	b570      	push	{r4, r5, r6, lr}
 80038d4:	4d06      	ldr	r5, [pc, #24]	@ (80038f0 <_close_r+0x20>)
 80038d6:	0004      	movs	r4, r0
 80038d8:	0008      	movs	r0, r1
 80038da:	602b      	str	r3, [r5, #0]
 80038dc:	f7fd f9cc 	bl	8000c78 <_close>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d103      	bne.n	80038ec <_close_r+0x1c>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d000      	beq.n	80038ec <_close_r+0x1c>
 80038ea:	6023      	str	r3, [r4, #0]
 80038ec:	bd70      	pop	{r4, r5, r6, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	200005d4 	.word	0x200005d4

080038f4 <_lseek_r>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	0004      	movs	r4, r0
 80038f8:	0008      	movs	r0, r1
 80038fa:	0011      	movs	r1, r2
 80038fc:	001a      	movs	r2, r3
 80038fe:	2300      	movs	r3, #0
 8003900:	4d05      	ldr	r5, [pc, #20]	@ (8003918 <_lseek_r+0x24>)
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	f7fd f9d9 	bl	8000cba <_lseek>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	d103      	bne.n	8003914 <_lseek_r+0x20>
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d000      	beq.n	8003914 <_lseek_r+0x20>
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	bd70      	pop	{r4, r5, r6, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	200005d4 	.word	0x200005d4

0800391c <_read_r>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	0004      	movs	r4, r0
 8003920:	0008      	movs	r0, r1
 8003922:	0011      	movs	r1, r2
 8003924:	001a      	movs	r2, r3
 8003926:	2300      	movs	r3, #0
 8003928:	4d05      	ldr	r5, [pc, #20]	@ (8003940 <_read_r+0x24>)
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	f7fd f96b 	bl	8000c06 <_read>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d103      	bne.n	800393c <_read_r+0x20>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d000      	beq.n	800393c <_read_r+0x20>
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	200005d4 	.word	0x200005d4

08003944 <_write_r>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	0004      	movs	r4, r0
 8003948:	0008      	movs	r0, r1
 800394a:	0011      	movs	r1, r2
 800394c:	001a      	movs	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	4d05      	ldr	r5, [pc, #20]	@ (8003968 <_write_r+0x24>)
 8003952:	602b      	str	r3, [r5, #0]
 8003954:	f7fd f974 	bl	8000c40 <_write>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d103      	bne.n	8003964 <_write_r+0x20>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d000      	beq.n	8003964 <_write_r+0x20>
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	bd70      	pop	{r4, r5, r6, pc}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	200005d4 	.word	0x200005d4

0800396c <__errno>:
 800396c:	4b01      	ldr	r3, [pc, #4]	@ (8003974 <__errno+0x8>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	4770      	bx	lr
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	2000001c 	.word	0x2000001c

08003978 <__libc_init_array>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	2600      	movs	r6, #0
 800397c:	4c0c      	ldr	r4, [pc, #48]	@ (80039b0 <__libc_init_array+0x38>)
 800397e:	4d0d      	ldr	r5, [pc, #52]	@ (80039b4 <__libc_init_array+0x3c>)
 8003980:	1b64      	subs	r4, r4, r5
 8003982:	10a4      	asrs	r4, r4, #2
 8003984:	42a6      	cmp	r6, r4
 8003986:	d109      	bne.n	800399c <__libc_init_array+0x24>
 8003988:	2600      	movs	r6, #0
 800398a:	f001 f811 	bl	80049b0 <_init>
 800398e:	4c0a      	ldr	r4, [pc, #40]	@ (80039b8 <__libc_init_array+0x40>)
 8003990:	4d0a      	ldr	r5, [pc, #40]	@ (80039bc <__libc_init_array+0x44>)
 8003992:	1b64      	subs	r4, r4, r5
 8003994:	10a4      	asrs	r4, r4, #2
 8003996:	42a6      	cmp	r6, r4
 8003998:	d105      	bne.n	80039a6 <__libc_init_array+0x2e>
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	00b3      	lsls	r3, r6, #2
 800399e:	58eb      	ldr	r3, [r5, r3]
 80039a0:	4798      	blx	r3
 80039a2:	3601      	adds	r6, #1
 80039a4:	e7ee      	b.n	8003984 <__libc_init_array+0xc>
 80039a6:	00b3      	lsls	r3, r6, #2
 80039a8:	58eb      	ldr	r3, [r5, r3]
 80039aa:	4798      	blx	r3
 80039ac:	3601      	adds	r6, #1
 80039ae:	e7f2      	b.n	8003996 <__libc_init_array+0x1e>
 80039b0:	08004b14 	.word	0x08004b14
 80039b4:	08004b14 	.word	0x08004b14
 80039b8:	08004b18 	.word	0x08004b18
 80039bc:	08004b14 	.word	0x08004b14

080039c0 <__retarget_lock_init_recursive>:
 80039c0:	4770      	bx	lr

080039c2 <__retarget_lock_acquire_recursive>:
 80039c2:	4770      	bx	lr

080039c4 <__retarget_lock_release_recursive>:
 80039c4:	4770      	bx	lr

080039c6 <memcpy>:
 80039c6:	2300      	movs	r3, #0
 80039c8:	b510      	push	{r4, lr}
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d100      	bne.n	80039d0 <memcpy+0xa>
 80039ce:	bd10      	pop	{r4, pc}
 80039d0:	5ccc      	ldrb	r4, [r1, r3]
 80039d2:	54c4      	strb	r4, [r0, r3]
 80039d4:	3301      	adds	r3, #1
 80039d6:	e7f8      	b.n	80039ca <memcpy+0x4>

080039d8 <__assert_func>:
 80039d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80039da:	0014      	movs	r4, r2
 80039dc:	001a      	movs	r2, r3
 80039de:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <__assert_func+0x2c>)
 80039e0:	0005      	movs	r5, r0
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	000e      	movs	r6, r1
 80039e6:	68d8      	ldr	r0, [r3, #12]
 80039e8:	4b07      	ldr	r3, [pc, #28]	@ (8003a08 <__assert_func+0x30>)
 80039ea:	2c00      	cmp	r4, #0
 80039ec:	d101      	bne.n	80039f2 <__assert_func+0x1a>
 80039ee:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <__assert_func+0x34>)
 80039f0:	001c      	movs	r4, r3
 80039f2:	4907      	ldr	r1, [pc, #28]	@ (8003a10 <__assert_func+0x38>)
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	9402      	str	r4, [sp, #8]
 80039f8:	002b      	movs	r3, r5
 80039fa:	9600      	str	r6, [sp, #0]
 80039fc:	f000 fc9c 	bl	8004338 <fiprintf>
 8003a00:	f000 fcd9 	bl	80043b6 <abort>
 8003a04:	2000001c 	.word	0x2000001c
 8003a08:	08004aa3 	.word	0x08004aa3
 8003a0c:	08004ade 	.word	0x08004ade
 8003a10:	08004ab0 	.word	0x08004ab0

08003a14 <_free_r>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	0005      	movs	r5, r0
 8003a18:	1e0c      	subs	r4, r1, #0
 8003a1a:	d010      	beq.n	8003a3e <_free_r+0x2a>
 8003a1c:	3c04      	subs	r4, #4
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	da00      	bge.n	8003a26 <_free_r+0x12>
 8003a24:	18e4      	adds	r4, r4, r3
 8003a26:	0028      	movs	r0, r5
 8003a28:	f000 f8ea 	bl	8003c00 <__malloc_lock>
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <_free_r+0x90>)
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <_free_r+0x2c>
 8003a34:	6063      	str	r3, [r4, #4]
 8003a36:	6014      	str	r4, [r2, #0]
 8003a38:	0028      	movs	r0, r5
 8003a3a:	f000 f8e9 	bl	8003c10 <__malloc_unlock>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	d908      	bls.n	8003a56 <_free_r+0x42>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	1821      	adds	r1, r4, r0
 8003a48:	428b      	cmp	r3, r1
 8003a4a:	d1f3      	bne.n	8003a34 <_free_r+0x20>
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	1809      	adds	r1, r1, r0
 8003a52:	6021      	str	r1, [r4, #0]
 8003a54:	e7ee      	b.n	8003a34 <_free_r+0x20>
 8003a56:	001a      	movs	r2, r3
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <_free_r+0x4e>
 8003a5e:	42a3      	cmp	r3, r4
 8003a60:	d9f9      	bls.n	8003a56 <_free_r+0x42>
 8003a62:	6811      	ldr	r1, [r2, #0]
 8003a64:	1850      	adds	r0, r2, r1
 8003a66:	42a0      	cmp	r0, r4
 8003a68:	d10b      	bne.n	8003a82 <_free_r+0x6e>
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	1809      	adds	r1, r1, r0
 8003a6e:	1850      	adds	r0, r2, r1
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	4283      	cmp	r3, r0
 8003a74:	d1e0      	bne.n	8003a38 <_free_r+0x24>
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	1841      	adds	r1, r0, r1
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	6053      	str	r3, [r2, #4]
 8003a80:	e7da      	b.n	8003a38 <_free_r+0x24>
 8003a82:	42a0      	cmp	r0, r4
 8003a84:	d902      	bls.n	8003a8c <_free_r+0x78>
 8003a86:	230c      	movs	r3, #12
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	e7d5      	b.n	8003a38 <_free_r+0x24>
 8003a8c:	6820      	ldr	r0, [r4, #0]
 8003a8e:	1821      	adds	r1, r4, r0
 8003a90:	428b      	cmp	r3, r1
 8003a92:	d103      	bne.n	8003a9c <_free_r+0x88>
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	1809      	adds	r1, r1, r0
 8003a9a:	6021      	str	r1, [r4, #0]
 8003a9c:	6063      	str	r3, [r4, #4]
 8003a9e:	6054      	str	r4, [r2, #4]
 8003aa0:	e7ca      	b.n	8003a38 <_free_r+0x24>
 8003aa2:	46c0      	nop			@ (mov r8, r8)
 8003aa4:	200005e0 	.word	0x200005e0

08003aa8 <malloc>:
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <malloc+0x10>)
 8003aac:	0001      	movs	r1, r0
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	f000 f826 	bl	8003b00 <_malloc_r>
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	2000001c 	.word	0x2000001c

08003abc <sbrk_aligned>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4e0f      	ldr	r6, [pc, #60]	@ (8003afc <sbrk_aligned+0x40>)
 8003ac0:	000d      	movs	r5, r1
 8003ac2:	6831      	ldr	r1, [r6, #0]
 8003ac4:	0004      	movs	r4, r0
 8003ac6:	2900      	cmp	r1, #0
 8003ac8:	d102      	bne.n	8003ad0 <sbrk_aligned+0x14>
 8003aca:	f000 fc57 	bl	800437c <_sbrk_r>
 8003ace:	6030      	str	r0, [r6, #0]
 8003ad0:	0029      	movs	r1, r5
 8003ad2:	0020      	movs	r0, r4
 8003ad4:	f000 fc52 	bl	800437c <_sbrk_r>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d103      	bne.n	8003ae4 <sbrk_aligned+0x28>
 8003adc:	2501      	movs	r5, #1
 8003ade:	426d      	negs	r5, r5
 8003ae0:	0028      	movs	r0, r5
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	1cc5      	adds	r5, r0, #3
 8003ae8:	439d      	bics	r5, r3
 8003aea:	42a8      	cmp	r0, r5
 8003aec:	d0f8      	beq.n	8003ae0 <sbrk_aligned+0x24>
 8003aee:	1a29      	subs	r1, r5, r0
 8003af0:	0020      	movs	r0, r4
 8003af2:	f000 fc43 	bl	800437c <_sbrk_r>
 8003af6:	3001      	adds	r0, #1
 8003af8:	d1f2      	bne.n	8003ae0 <sbrk_aligned+0x24>
 8003afa:	e7ef      	b.n	8003adc <sbrk_aligned+0x20>
 8003afc:	200005dc 	.word	0x200005dc

08003b00 <_malloc_r>:
 8003b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b02:	2203      	movs	r2, #3
 8003b04:	1ccb      	adds	r3, r1, #3
 8003b06:	4393      	bics	r3, r2
 8003b08:	3308      	adds	r3, #8
 8003b0a:	0005      	movs	r5, r0
 8003b0c:	001f      	movs	r7, r3
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d234      	bcs.n	8003b7c <_malloc_r+0x7c>
 8003b12:	270c      	movs	r7, #12
 8003b14:	42b9      	cmp	r1, r7
 8003b16:	d833      	bhi.n	8003b80 <_malloc_r+0x80>
 8003b18:	0028      	movs	r0, r5
 8003b1a:	f000 f871 	bl	8003c00 <__malloc_lock>
 8003b1e:	4e37      	ldr	r6, [pc, #220]	@ (8003bfc <_malloc_r+0xfc>)
 8003b20:	6833      	ldr	r3, [r6, #0]
 8003b22:	001c      	movs	r4, r3
 8003b24:	2c00      	cmp	r4, #0
 8003b26:	d12f      	bne.n	8003b88 <_malloc_r+0x88>
 8003b28:	0039      	movs	r1, r7
 8003b2a:	0028      	movs	r0, r5
 8003b2c:	f7ff ffc6 	bl	8003abc <sbrk_aligned>
 8003b30:	0004      	movs	r4, r0
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	d15f      	bne.n	8003bf6 <_malloc_r+0xf6>
 8003b36:	6834      	ldr	r4, [r6, #0]
 8003b38:	9400      	str	r4, [sp, #0]
 8003b3a:	9b00      	ldr	r3, [sp, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d14a      	bne.n	8003bd6 <_malloc_r+0xd6>
 8003b40:	2c00      	cmp	r4, #0
 8003b42:	d052      	beq.n	8003bea <_malloc_r+0xea>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	0028      	movs	r0, r5
 8003b48:	18e3      	adds	r3, r4, r3
 8003b4a:	9900      	ldr	r1, [sp, #0]
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	f000 fc15 	bl	800437c <_sbrk_r>
 8003b52:	9b01      	ldr	r3, [sp, #4]
 8003b54:	4283      	cmp	r3, r0
 8003b56:	d148      	bne.n	8003bea <_malloc_r+0xea>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	0028      	movs	r0, r5
 8003b5c:	1aff      	subs	r7, r7, r3
 8003b5e:	0039      	movs	r1, r7
 8003b60:	f7ff ffac 	bl	8003abc <sbrk_aligned>
 8003b64:	3001      	adds	r0, #1
 8003b66:	d040      	beq.n	8003bea <_malloc_r+0xea>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	19db      	adds	r3, r3, r7
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	6833      	ldr	r3, [r6, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	d133      	bne.n	8003bde <_malloc_r+0xde>
 8003b76:	9b00      	ldr	r3, [sp, #0]
 8003b78:	6033      	str	r3, [r6, #0]
 8003b7a:	e019      	b.n	8003bb0 <_malloc_r+0xb0>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	dac9      	bge.n	8003b14 <_malloc_r+0x14>
 8003b80:	230c      	movs	r3, #12
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	2000      	movs	r0, #0
 8003b86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b88:	6821      	ldr	r1, [r4, #0]
 8003b8a:	1bc9      	subs	r1, r1, r7
 8003b8c:	d420      	bmi.n	8003bd0 <_malloc_r+0xd0>
 8003b8e:	290b      	cmp	r1, #11
 8003b90:	d90a      	bls.n	8003ba8 <_malloc_r+0xa8>
 8003b92:	19e2      	adds	r2, r4, r7
 8003b94:	6027      	str	r7, [r4, #0]
 8003b96:	42a3      	cmp	r3, r4
 8003b98:	d104      	bne.n	8003ba4 <_malloc_r+0xa4>
 8003b9a:	6032      	str	r2, [r6, #0]
 8003b9c:	6863      	ldr	r3, [r4, #4]
 8003b9e:	6011      	str	r1, [r2, #0]
 8003ba0:	6053      	str	r3, [r2, #4]
 8003ba2:	e005      	b.n	8003bb0 <_malloc_r+0xb0>
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	e7f9      	b.n	8003b9c <_malloc_r+0x9c>
 8003ba8:	6862      	ldr	r2, [r4, #4]
 8003baa:	42a3      	cmp	r3, r4
 8003bac:	d10e      	bne.n	8003bcc <_malloc_r+0xcc>
 8003bae:	6032      	str	r2, [r6, #0]
 8003bb0:	0028      	movs	r0, r5
 8003bb2:	f000 f82d 	bl	8003c10 <__malloc_unlock>
 8003bb6:	0020      	movs	r0, r4
 8003bb8:	2207      	movs	r2, #7
 8003bba:	300b      	adds	r0, #11
 8003bbc:	1d23      	adds	r3, r4, #4
 8003bbe:	4390      	bics	r0, r2
 8003bc0:	1ac2      	subs	r2, r0, r3
 8003bc2:	4298      	cmp	r0, r3
 8003bc4:	d0df      	beq.n	8003b86 <_malloc_r+0x86>
 8003bc6:	1a1b      	subs	r3, r3, r0
 8003bc8:	50a3      	str	r3, [r4, r2]
 8003bca:	e7dc      	b.n	8003b86 <_malloc_r+0x86>
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e7ef      	b.n	8003bb0 <_malloc_r+0xb0>
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	6864      	ldr	r4, [r4, #4]
 8003bd4:	e7a6      	b.n	8003b24 <_malloc_r+0x24>
 8003bd6:	9c00      	ldr	r4, [sp, #0]
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	e7ad      	b.n	8003b3a <_malloc_r+0x3a>
 8003bde:	001a      	movs	r2, r3
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	d1fb      	bne.n	8003bde <_malloc_r+0xde>
 8003be6:	2300      	movs	r3, #0
 8003be8:	e7da      	b.n	8003ba0 <_malloc_r+0xa0>
 8003bea:	230c      	movs	r3, #12
 8003bec:	0028      	movs	r0, r5
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	f000 f80e 	bl	8003c10 <__malloc_unlock>
 8003bf4:	e7c6      	b.n	8003b84 <_malloc_r+0x84>
 8003bf6:	6007      	str	r7, [r0, #0]
 8003bf8:	e7da      	b.n	8003bb0 <_malloc_r+0xb0>
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	200005e0 	.word	0x200005e0

08003c00 <__malloc_lock>:
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4802      	ldr	r0, [pc, #8]	@ (8003c0c <__malloc_lock+0xc>)
 8003c04:	f7ff fedd 	bl	80039c2 <__retarget_lock_acquire_recursive>
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	200005d8 	.word	0x200005d8

08003c10 <__malloc_unlock>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4802      	ldr	r0, [pc, #8]	@ (8003c1c <__malloc_unlock+0xc>)
 8003c14:	f7ff fed6 	bl	80039c4 <__retarget_lock_release_recursive>
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	200005d8 	.word	0x200005d8

08003c20 <__ssputs_r>:
 8003c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c22:	688e      	ldr	r6, [r1, #8]
 8003c24:	b085      	sub	sp, #20
 8003c26:	001f      	movs	r7, r3
 8003c28:	000c      	movs	r4, r1
 8003c2a:	680b      	ldr	r3, [r1, #0]
 8003c2c:	9002      	str	r0, [sp, #8]
 8003c2e:	9203      	str	r2, [sp, #12]
 8003c30:	42be      	cmp	r6, r7
 8003c32:	d830      	bhi.n	8003c96 <__ssputs_r+0x76>
 8003c34:	210c      	movs	r1, #12
 8003c36:	5e62      	ldrsh	r2, [r4, r1]
 8003c38:	2190      	movs	r1, #144	@ 0x90
 8003c3a:	00c9      	lsls	r1, r1, #3
 8003c3c:	420a      	tst	r2, r1
 8003c3e:	d028      	beq.n	8003c92 <__ssputs_r+0x72>
 8003c40:	2003      	movs	r0, #3
 8003c42:	6921      	ldr	r1, [r4, #16]
 8003c44:	1a5b      	subs	r3, r3, r1
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	6963      	ldr	r3, [r4, #20]
 8003c4a:	4343      	muls	r3, r0
 8003c4c:	9801      	ldr	r0, [sp, #4]
 8003c4e:	0fdd      	lsrs	r5, r3, #31
 8003c50:	18ed      	adds	r5, r5, r3
 8003c52:	1c7b      	adds	r3, r7, #1
 8003c54:	181b      	adds	r3, r3, r0
 8003c56:	106d      	asrs	r5, r5, #1
 8003c58:	42ab      	cmp	r3, r5
 8003c5a:	d900      	bls.n	8003c5e <__ssputs_r+0x3e>
 8003c5c:	001d      	movs	r5, r3
 8003c5e:	0552      	lsls	r2, r2, #21
 8003c60:	d528      	bpl.n	8003cb4 <__ssputs_r+0x94>
 8003c62:	0029      	movs	r1, r5
 8003c64:	9802      	ldr	r0, [sp, #8]
 8003c66:	f7ff ff4b 	bl	8003b00 <_malloc_r>
 8003c6a:	1e06      	subs	r6, r0, #0
 8003c6c:	d02c      	beq.n	8003cc8 <__ssputs_r+0xa8>
 8003c6e:	9a01      	ldr	r2, [sp, #4]
 8003c70:	6921      	ldr	r1, [r4, #16]
 8003c72:	f7ff fea8 	bl	80039c6 <memcpy>
 8003c76:	89a2      	ldrh	r2, [r4, #12]
 8003c78:	4b18      	ldr	r3, [pc, #96]	@ (8003cdc <__ssputs_r+0xbc>)
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	9b01      	ldr	r3, [sp, #4]
 8003c84:	6126      	str	r6, [r4, #16]
 8003c86:	18f6      	adds	r6, r6, r3
 8003c88:	6026      	str	r6, [r4, #0]
 8003c8a:	003e      	movs	r6, r7
 8003c8c:	6165      	str	r5, [r4, #20]
 8003c8e:	1aed      	subs	r5, r5, r3
 8003c90:	60a5      	str	r5, [r4, #8]
 8003c92:	42be      	cmp	r6, r7
 8003c94:	d900      	bls.n	8003c98 <__ssputs_r+0x78>
 8003c96:	003e      	movs	r6, r7
 8003c98:	0032      	movs	r2, r6
 8003c9a:	9903      	ldr	r1, [sp, #12]
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	f000 fb5b 	bl	8004358 <memmove>
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	68a3      	ldr	r3, [r4, #8]
 8003ca6:	1b9b      	subs	r3, r3, r6
 8003ca8:	60a3      	str	r3, [r4, #8]
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	199b      	adds	r3, r3, r6
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	b005      	add	sp, #20
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb4:	002a      	movs	r2, r5
 8003cb6:	9802      	ldr	r0, [sp, #8]
 8003cb8:	f000 fb84 	bl	80043c4 <_realloc_r>
 8003cbc:	1e06      	subs	r6, r0, #0
 8003cbe:	d1e0      	bne.n	8003c82 <__ssputs_r+0x62>
 8003cc0:	6921      	ldr	r1, [r4, #16]
 8003cc2:	9802      	ldr	r0, [sp, #8]
 8003cc4:	f7ff fea6 	bl	8003a14 <_free_r>
 8003cc8:	230c      	movs	r3, #12
 8003cca:	2001      	movs	r0, #1
 8003ccc:	9a02      	ldr	r2, [sp, #8]
 8003cce:	4240      	negs	r0, r0
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	89a2      	ldrh	r2, [r4, #12]
 8003cd4:	3334      	adds	r3, #52	@ 0x34
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	81a3      	strh	r3, [r4, #12]
 8003cda:	e7e9      	b.n	8003cb0 <__ssputs_r+0x90>
 8003cdc:	fffffb7f 	.word	0xfffffb7f

08003ce0 <_svfiprintf_r>:
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	b0a1      	sub	sp, #132	@ 0x84
 8003ce4:	9003      	str	r0, [sp, #12]
 8003ce6:	001d      	movs	r5, r3
 8003ce8:	898b      	ldrh	r3, [r1, #12]
 8003cea:	000f      	movs	r7, r1
 8003cec:	0016      	movs	r6, r2
 8003cee:	061b      	lsls	r3, r3, #24
 8003cf0:	d511      	bpl.n	8003d16 <_svfiprintf_r+0x36>
 8003cf2:	690b      	ldr	r3, [r1, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10e      	bne.n	8003d16 <_svfiprintf_r+0x36>
 8003cf8:	2140      	movs	r1, #64	@ 0x40
 8003cfa:	f7ff ff01 	bl	8003b00 <_malloc_r>
 8003cfe:	6038      	str	r0, [r7, #0]
 8003d00:	6138      	str	r0, [r7, #16]
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d105      	bne.n	8003d12 <_svfiprintf_r+0x32>
 8003d06:	230c      	movs	r3, #12
 8003d08:	9a03      	ldr	r2, [sp, #12]
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	4240      	negs	r0, r0
 8003d10:	e0cf      	b.n	8003eb2 <_svfiprintf_r+0x1d2>
 8003d12:	2340      	movs	r3, #64	@ 0x40
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	2300      	movs	r3, #0
 8003d18:	ac08      	add	r4, sp, #32
 8003d1a:	6163      	str	r3, [r4, #20]
 8003d1c:	3320      	adds	r3, #32
 8003d1e:	7663      	strb	r3, [r4, #25]
 8003d20:	3310      	adds	r3, #16
 8003d22:	76a3      	strb	r3, [r4, #26]
 8003d24:	9507      	str	r5, [sp, #28]
 8003d26:	0035      	movs	r5, r6
 8003d28:	782b      	ldrb	r3, [r5, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <_svfiprintf_r+0x52>
 8003d2e:	2b25      	cmp	r3, #37	@ 0x25
 8003d30:	d148      	bne.n	8003dc4 <_svfiprintf_r+0xe4>
 8003d32:	1bab      	subs	r3, r5, r6
 8003d34:	9305      	str	r3, [sp, #20]
 8003d36:	42b5      	cmp	r5, r6
 8003d38:	d00b      	beq.n	8003d52 <_svfiprintf_r+0x72>
 8003d3a:	0032      	movs	r2, r6
 8003d3c:	0039      	movs	r1, r7
 8003d3e:	9803      	ldr	r0, [sp, #12]
 8003d40:	f7ff ff6e 	bl	8003c20 <__ssputs_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d100      	bne.n	8003d4a <_svfiprintf_r+0x6a>
 8003d48:	e0ae      	b.n	8003ea8 <_svfiprintf_r+0x1c8>
 8003d4a:	6963      	ldr	r3, [r4, #20]
 8003d4c:	9a05      	ldr	r2, [sp, #20]
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	6163      	str	r3, [r4, #20]
 8003d52:	782b      	ldrb	r3, [r5, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d100      	bne.n	8003d5a <_svfiprintf_r+0x7a>
 8003d58:	e0a6      	b.n	8003ea8 <_svfiprintf_r+0x1c8>
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	4252      	negs	r2, r2
 8003d60:	6062      	str	r2, [r4, #4]
 8003d62:	a904      	add	r1, sp, #16
 8003d64:	3254      	adds	r2, #84	@ 0x54
 8003d66:	1852      	adds	r2, r2, r1
 8003d68:	1c6e      	adds	r6, r5, #1
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	60e3      	str	r3, [r4, #12]
 8003d6e:	60a3      	str	r3, [r4, #8]
 8003d70:	7013      	strb	r3, [r2, #0]
 8003d72:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003d74:	4b54      	ldr	r3, [pc, #336]	@ (8003ec8 <_svfiprintf_r+0x1e8>)
 8003d76:	2205      	movs	r2, #5
 8003d78:	0018      	movs	r0, r3
 8003d7a:	7831      	ldrb	r1, [r6, #0]
 8003d7c:	9305      	str	r3, [sp, #20]
 8003d7e:	f000 fb0f 	bl	80043a0 <memchr>
 8003d82:	1c75      	adds	r5, r6, #1
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d11f      	bne.n	8003dc8 <_svfiprintf_r+0xe8>
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	06d3      	lsls	r3, r2, #27
 8003d8c:	d504      	bpl.n	8003d98 <_svfiprintf_r+0xb8>
 8003d8e:	2353      	movs	r3, #83	@ 0x53
 8003d90:	a904      	add	r1, sp, #16
 8003d92:	185b      	adds	r3, r3, r1
 8003d94:	2120      	movs	r1, #32
 8003d96:	7019      	strb	r1, [r3, #0]
 8003d98:	0713      	lsls	r3, r2, #28
 8003d9a:	d504      	bpl.n	8003da6 <_svfiprintf_r+0xc6>
 8003d9c:	2353      	movs	r3, #83	@ 0x53
 8003d9e:	a904      	add	r1, sp, #16
 8003da0:	185b      	adds	r3, r3, r1
 8003da2:	212b      	movs	r1, #43	@ 0x2b
 8003da4:	7019      	strb	r1, [r3, #0]
 8003da6:	7833      	ldrb	r3, [r6, #0]
 8003da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003daa:	d016      	beq.n	8003dda <_svfiprintf_r+0xfa>
 8003dac:	0035      	movs	r5, r6
 8003dae:	2100      	movs	r1, #0
 8003db0:	200a      	movs	r0, #10
 8003db2:	68e3      	ldr	r3, [r4, #12]
 8003db4:	782a      	ldrb	r2, [r5, #0]
 8003db6:	1c6e      	adds	r6, r5, #1
 8003db8:	3a30      	subs	r2, #48	@ 0x30
 8003dba:	2a09      	cmp	r2, #9
 8003dbc:	d950      	bls.n	8003e60 <_svfiprintf_r+0x180>
 8003dbe:	2900      	cmp	r1, #0
 8003dc0:	d111      	bne.n	8003de6 <_svfiprintf_r+0x106>
 8003dc2:	e017      	b.n	8003df4 <_svfiprintf_r+0x114>
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	e7af      	b.n	8003d28 <_svfiprintf_r+0x48>
 8003dc8:	9b05      	ldr	r3, [sp, #20]
 8003dca:	6822      	ldr	r2, [r4, #0]
 8003dcc:	1ac0      	subs	r0, r0, r3
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4083      	lsls	r3, r0
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	002e      	movs	r6, r5
 8003dd6:	6023      	str	r3, [r4, #0]
 8003dd8:	e7cc      	b.n	8003d74 <_svfiprintf_r+0x94>
 8003dda:	9b07      	ldr	r3, [sp, #28]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	9107      	str	r1, [sp, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	db01      	blt.n	8003dea <_svfiprintf_r+0x10a>
 8003de6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003de8:	e004      	b.n	8003df4 <_svfiprintf_r+0x114>
 8003dea:	425b      	negs	r3, r3
 8003dec:	60e3      	str	r3, [r4, #12]
 8003dee:	2302      	movs	r3, #2
 8003df0:	4313      	orrs	r3, r2
 8003df2:	6023      	str	r3, [r4, #0]
 8003df4:	782b      	ldrb	r3, [r5, #0]
 8003df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003df8:	d10c      	bne.n	8003e14 <_svfiprintf_r+0x134>
 8003dfa:	786b      	ldrb	r3, [r5, #1]
 8003dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dfe:	d134      	bne.n	8003e6a <_svfiprintf_r+0x18a>
 8003e00:	9b07      	ldr	r3, [sp, #28]
 8003e02:	3502      	adds	r5, #2
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	9207      	str	r2, [sp, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da01      	bge.n	8003e12 <_svfiprintf_r+0x132>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	425b      	negs	r3, r3
 8003e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e14:	4e2d      	ldr	r6, [pc, #180]	@ (8003ecc <_svfiprintf_r+0x1ec>)
 8003e16:	2203      	movs	r2, #3
 8003e18:	0030      	movs	r0, r6
 8003e1a:	7829      	ldrb	r1, [r5, #0]
 8003e1c:	f000 fac0 	bl	80043a0 <memchr>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d006      	beq.n	8003e32 <_svfiprintf_r+0x152>
 8003e24:	2340      	movs	r3, #64	@ 0x40
 8003e26:	1b80      	subs	r0, r0, r6
 8003e28:	4083      	lsls	r3, r0
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	3501      	adds	r5, #1
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	7829      	ldrb	r1, [r5, #0]
 8003e34:	2206      	movs	r2, #6
 8003e36:	4826      	ldr	r0, [pc, #152]	@ (8003ed0 <_svfiprintf_r+0x1f0>)
 8003e38:	1c6e      	adds	r6, r5, #1
 8003e3a:	7621      	strb	r1, [r4, #24]
 8003e3c:	f000 fab0 	bl	80043a0 <memchr>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	d038      	beq.n	8003eb6 <_svfiprintf_r+0x1d6>
 8003e44:	4b23      	ldr	r3, [pc, #140]	@ (8003ed4 <_svfiprintf_r+0x1f4>)
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d122      	bne.n	8003e90 <_svfiprintf_r+0x1b0>
 8003e4a:	2207      	movs	r2, #7
 8003e4c:	9b07      	ldr	r3, [sp, #28]
 8003e4e:	3307      	adds	r3, #7
 8003e50:	4393      	bics	r3, r2
 8003e52:	3308      	adds	r3, #8
 8003e54:	9307      	str	r3, [sp, #28]
 8003e56:	6963      	ldr	r3, [r4, #20]
 8003e58:	9a04      	ldr	r2, [sp, #16]
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	6163      	str	r3, [r4, #20]
 8003e5e:	e762      	b.n	8003d26 <_svfiprintf_r+0x46>
 8003e60:	4343      	muls	r3, r0
 8003e62:	0035      	movs	r5, r6
 8003e64:	2101      	movs	r1, #1
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	e7a4      	b.n	8003db4 <_svfiprintf_r+0xd4>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	200a      	movs	r0, #10
 8003e6e:	0019      	movs	r1, r3
 8003e70:	3501      	adds	r5, #1
 8003e72:	6063      	str	r3, [r4, #4]
 8003e74:	782a      	ldrb	r2, [r5, #0]
 8003e76:	1c6e      	adds	r6, r5, #1
 8003e78:	3a30      	subs	r2, #48	@ 0x30
 8003e7a:	2a09      	cmp	r2, #9
 8003e7c:	d903      	bls.n	8003e86 <_svfiprintf_r+0x1a6>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0c8      	beq.n	8003e14 <_svfiprintf_r+0x134>
 8003e82:	9109      	str	r1, [sp, #36]	@ 0x24
 8003e84:	e7c6      	b.n	8003e14 <_svfiprintf_r+0x134>
 8003e86:	4341      	muls	r1, r0
 8003e88:	0035      	movs	r5, r6
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	1889      	adds	r1, r1, r2
 8003e8e:	e7f1      	b.n	8003e74 <_svfiprintf_r+0x194>
 8003e90:	aa07      	add	r2, sp, #28
 8003e92:	9200      	str	r2, [sp, #0]
 8003e94:	0021      	movs	r1, r4
 8003e96:	003a      	movs	r2, r7
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <_svfiprintf_r+0x1f8>)
 8003e9a:	9803      	ldr	r0, [sp, #12]
 8003e9c:	e000      	b.n	8003ea0 <_svfiprintf_r+0x1c0>
 8003e9e:	bf00      	nop
 8003ea0:	9004      	str	r0, [sp, #16]
 8003ea2:	9b04      	ldr	r3, [sp, #16]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	d1d6      	bne.n	8003e56 <_svfiprintf_r+0x176>
 8003ea8:	89bb      	ldrh	r3, [r7, #12]
 8003eaa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003eac:	065b      	lsls	r3, r3, #25
 8003eae:	d500      	bpl.n	8003eb2 <_svfiprintf_r+0x1d2>
 8003eb0:	e72c      	b.n	8003d0c <_svfiprintf_r+0x2c>
 8003eb2:	b021      	add	sp, #132	@ 0x84
 8003eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb6:	aa07      	add	r2, sp, #28
 8003eb8:	9200      	str	r2, [sp, #0]
 8003eba:	0021      	movs	r1, r4
 8003ebc:	003a      	movs	r2, r7
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <_svfiprintf_r+0x1f8>)
 8003ec0:	9803      	ldr	r0, [sp, #12]
 8003ec2:	f000 f87b 	bl	8003fbc <_printf_i>
 8003ec6:	e7eb      	b.n	8003ea0 <_svfiprintf_r+0x1c0>
 8003ec8:	08004adf 	.word	0x08004adf
 8003ecc:	08004ae5 	.word	0x08004ae5
 8003ed0:	08004ae9 	.word	0x08004ae9
 8003ed4:	00000000 	.word	0x00000000
 8003ed8:	08003c21 	.word	0x08003c21

08003edc <_printf_common>:
 8003edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ede:	0016      	movs	r6, r2
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	688a      	ldr	r2, [r1, #8]
 8003ee4:	690b      	ldr	r3, [r1, #16]
 8003ee6:	000c      	movs	r4, r1
 8003ee8:	9000      	str	r0, [sp, #0]
 8003eea:	4293      	cmp	r3, r2
 8003eec:	da00      	bge.n	8003ef0 <_printf_common+0x14>
 8003eee:	0013      	movs	r3, r2
 8003ef0:	0022      	movs	r2, r4
 8003ef2:	6033      	str	r3, [r6, #0]
 8003ef4:	3243      	adds	r2, #67	@ 0x43
 8003ef6:	7812      	ldrb	r2, [r2, #0]
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	d001      	beq.n	8003f00 <_printf_common+0x24>
 8003efc:	3301      	adds	r3, #1
 8003efe:	6033      	str	r3, [r6, #0]
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	069b      	lsls	r3, r3, #26
 8003f04:	d502      	bpl.n	8003f0c <_printf_common+0x30>
 8003f06:	6833      	ldr	r3, [r6, #0]
 8003f08:	3302      	adds	r3, #2
 8003f0a:	6033      	str	r3, [r6, #0]
 8003f0c:	6822      	ldr	r2, [r4, #0]
 8003f0e:	2306      	movs	r3, #6
 8003f10:	0015      	movs	r5, r2
 8003f12:	401d      	ands	r5, r3
 8003f14:	421a      	tst	r2, r3
 8003f16:	d027      	beq.n	8003f68 <_printf_common+0x8c>
 8003f18:	0023      	movs	r3, r4
 8003f1a:	3343      	adds	r3, #67	@ 0x43
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	1e5a      	subs	r2, r3, #1
 8003f20:	4193      	sbcs	r3, r2
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	0692      	lsls	r2, r2, #26
 8003f26:	d430      	bmi.n	8003f8a <_printf_common+0xae>
 8003f28:	0022      	movs	r2, r4
 8003f2a:	9901      	ldr	r1, [sp, #4]
 8003f2c:	9800      	ldr	r0, [sp, #0]
 8003f2e:	9d08      	ldr	r5, [sp, #32]
 8003f30:	3243      	adds	r2, #67	@ 0x43
 8003f32:	47a8      	blx	r5
 8003f34:	3001      	adds	r0, #1
 8003f36:	d025      	beq.n	8003f84 <_printf_common+0xa8>
 8003f38:	2206      	movs	r2, #6
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	2500      	movs	r5, #0
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d105      	bne.n	8003f50 <_printf_common+0x74>
 8003f44:	6833      	ldr	r3, [r6, #0]
 8003f46:	68e5      	ldr	r5, [r4, #12]
 8003f48:	1aed      	subs	r5, r5, r3
 8003f4a:	43eb      	mvns	r3, r5
 8003f4c:	17db      	asrs	r3, r3, #31
 8003f4e:	401d      	ands	r5, r3
 8003f50:	68a3      	ldr	r3, [r4, #8]
 8003f52:	6922      	ldr	r2, [r4, #16]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	dd01      	ble.n	8003f5c <_printf_common+0x80>
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	18ed      	adds	r5, r5, r3
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	42b5      	cmp	r5, r6
 8003f60:	d120      	bne.n	8003fa4 <_printf_common+0xc8>
 8003f62:	2000      	movs	r0, #0
 8003f64:	e010      	b.n	8003f88 <_printf_common+0xac>
 8003f66:	3501      	adds	r5, #1
 8003f68:	68e3      	ldr	r3, [r4, #12]
 8003f6a:	6832      	ldr	r2, [r6, #0]
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	42ab      	cmp	r3, r5
 8003f70:	ddd2      	ble.n	8003f18 <_printf_common+0x3c>
 8003f72:	0022      	movs	r2, r4
 8003f74:	2301      	movs	r3, #1
 8003f76:	9901      	ldr	r1, [sp, #4]
 8003f78:	9800      	ldr	r0, [sp, #0]
 8003f7a:	9f08      	ldr	r7, [sp, #32]
 8003f7c:	3219      	adds	r2, #25
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	d1f0      	bne.n	8003f66 <_printf_common+0x8a>
 8003f84:	2001      	movs	r0, #1
 8003f86:	4240      	negs	r0, r0
 8003f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f8a:	2030      	movs	r0, #48	@ 0x30
 8003f8c:	18e1      	adds	r1, r4, r3
 8003f8e:	3143      	adds	r1, #67	@ 0x43
 8003f90:	7008      	strb	r0, [r1, #0]
 8003f92:	0021      	movs	r1, r4
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	3145      	adds	r1, #69	@ 0x45
 8003f98:	7809      	ldrb	r1, [r1, #0]
 8003f9a:	18a2      	adds	r2, r4, r2
 8003f9c:	3243      	adds	r2, #67	@ 0x43
 8003f9e:	3302      	adds	r3, #2
 8003fa0:	7011      	strb	r1, [r2, #0]
 8003fa2:	e7c1      	b.n	8003f28 <_printf_common+0x4c>
 8003fa4:	0022      	movs	r2, r4
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	9901      	ldr	r1, [sp, #4]
 8003faa:	9800      	ldr	r0, [sp, #0]
 8003fac:	9f08      	ldr	r7, [sp, #32]
 8003fae:	321a      	adds	r2, #26
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d0e6      	beq.n	8003f84 <_printf_common+0xa8>
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	e7d1      	b.n	8003f5e <_printf_common+0x82>
	...

08003fbc <_printf_i>:
 8003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fbe:	b08b      	sub	sp, #44	@ 0x2c
 8003fc0:	9206      	str	r2, [sp, #24]
 8003fc2:	000a      	movs	r2, r1
 8003fc4:	3243      	adds	r2, #67	@ 0x43
 8003fc6:	9307      	str	r3, [sp, #28]
 8003fc8:	9005      	str	r0, [sp, #20]
 8003fca:	9203      	str	r2, [sp, #12]
 8003fcc:	7e0a      	ldrb	r2, [r1, #24]
 8003fce:	000c      	movs	r4, r1
 8003fd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003fd2:	2a78      	cmp	r2, #120	@ 0x78
 8003fd4:	d809      	bhi.n	8003fea <_printf_i+0x2e>
 8003fd6:	2a62      	cmp	r2, #98	@ 0x62
 8003fd8:	d80b      	bhi.n	8003ff2 <_printf_i+0x36>
 8003fda:	2a00      	cmp	r2, #0
 8003fdc:	d100      	bne.n	8003fe0 <_printf_i+0x24>
 8003fde:	e0ba      	b.n	8004156 <_printf_i+0x19a>
 8003fe0:	497a      	ldr	r1, [pc, #488]	@ (80041cc <_printf_i+0x210>)
 8003fe2:	9104      	str	r1, [sp, #16]
 8003fe4:	2a58      	cmp	r2, #88	@ 0x58
 8003fe6:	d100      	bne.n	8003fea <_printf_i+0x2e>
 8003fe8:	e08e      	b.n	8004108 <_printf_i+0x14c>
 8003fea:	0025      	movs	r5, r4
 8003fec:	3542      	adds	r5, #66	@ 0x42
 8003fee:	702a      	strb	r2, [r5, #0]
 8003ff0:	e022      	b.n	8004038 <_printf_i+0x7c>
 8003ff2:	0010      	movs	r0, r2
 8003ff4:	3863      	subs	r0, #99	@ 0x63
 8003ff6:	2815      	cmp	r0, #21
 8003ff8:	d8f7      	bhi.n	8003fea <_printf_i+0x2e>
 8003ffa:	f7fc f88d 	bl	8000118 <__gnu_thumb1_case_shi>
 8003ffe:	0016      	.short	0x0016
 8004000:	fff6001f 	.word	0xfff6001f
 8004004:	fff6fff6 	.word	0xfff6fff6
 8004008:	001ffff6 	.word	0x001ffff6
 800400c:	fff6fff6 	.word	0xfff6fff6
 8004010:	fff6fff6 	.word	0xfff6fff6
 8004014:	0036009f 	.word	0x0036009f
 8004018:	fff6007e 	.word	0xfff6007e
 800401c:	00b0fff6 	.word	0x00b0fff6
 8004020:	0036fff6 	.word	0x0036fff6
 8004024:	fff6fff6 	.word	0xfff6fff6
 8004028:	0082      	.short	0x0082
 800402a:	0025      	movs	r5, r4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	3542      	adds	r5, #66	@ 0x42
 8004030:	1d11      	adds	r1, r2, #4
 8004032:	6019      	str	r1, [r3, #0]
 8004034:	6813      	ldr	r3, [r2, #0]
 8004036:	702b      	strb	r3, [r5, #0]
 8004038:	2301      	movs	r3, #1
 800403a:	e09e      	b.n	800417a <_printf_i+0x1be>
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	6809      	ldr	r1, [r1, #0]
 8004040:	1d02      	adds	r2, r0, #4
 8004042:	060d      	lsls	r5, r1, #24
 8004044:	d50b      	bpl.n	800405e <_printf_i+0xa2>
 8004046:	6806      	ldr	r6, [r0, #0]
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	2e00      	cmp	r6, #0
 800404c:	da03      	bge.n	8004056 <_printf_i+0x9a>
 800404e:	232d      	movs	r3, #45	@ 0x2d
 8004050:	9a03      	ldr	r2, [sp, #12]
 8004052:	4276      	negs	r6, r6
 8004054:	7013      	strb	r3, [r2, #0]
 8004056:	4b5d      	ldr	r3, [pc, #372]	@ (80041cc <_printf_i+0x210>)
 8004058:	270a      	movs	r7, #10
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	e018      	b.n	8004090 <_printf_i+0xd4>
 800405e:	6806      	ldr	r6, [r0, #0]
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	0649      	lsls	r1, r1, #25
 8004064:	d5f1      	bpl.n	800404a <_printf_i+0x8e>
 8004066:	b236      	sxth	r6, r6
 8004068:	e7ef      	b.n	800404a <_printf_i+0x8e>
 800406a:	6808      	ldr	r0, [r1, #0]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	c940      	ldmia	r1!, {r6}
 8004070:	0605      	lsls	r5, r0, #24
 8004072:	d402      	bmi.n	800407a <_printf_i+0xbe>
 8004074:	0640      	lsls	r0, r0, #25
 8004076:	d500      	bpl.n	800407a <_printf_i+0xbe>
 8004078:	b2b6      	uxth	r6, r6
 800407a:	6019      	str	r1, [r3, #0]
 800407c:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <_printf_i+0x210>)
 800407e:	270a      	movs	r7, #10
 8004080:	9304      	str	r3, [sp, #16]
 8004082:	2a6f      	cmp	r2, #111	@ 0x6f
 8004084:	d100      	bne.n	8004088 <_printf_i+0xcc>
 8004086:	3f02      	subs	r7, #2
 8004088:	0023      	movs	r3, r4
 800408a:	2200      	movs	r2, #0
 800408c:	3343      	adds	r3, #67	@ 0x43
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	6863      	ldr	r3, [r4, #4]
 8004092:	60a3      	str	r3, [r4, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	db06      	blt.n	80040a6 <_printf_i+0xea>
 8004098:	2104      	movs	r1, #4
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	9d03      	ldr	r5, [sp, #12]
 800409e:	438a      	bics	r2, r1
 80040a0:	6022      	str	r2, [r4, #0]
 80040a2:	4333      	orrs	r3, r6
 80040a4:	d00c      	beq.n	80040c0 <_printf_i+0x104>
 80040a6:	9d03      	ldr	r5, [sp, #12]
 80040a8:	0030      	movs	r0, r6
 80040aa:	0039      	movs	r1, r7
 80040ac:	f7fc f8c4 	bl	8000238 <__aeabi_uidivmod>
 80040b0:	9b04      	ldr	r3, [sp, #16]
 80040b2:	3d01      	subs	r5, #1
 80040b4:	5c5b      	ldrb	r3, [r3, r1]
 80040b6:	702b      	strb	r3, [r5, #0]
 80040b8:	0033      	movs	r3, r6
 80040ba:	0006      	movs	r6, r0
 80040bc:	429f      	cmp	r7, r3
 80040be:	d9f3      	bls.n	80040a8 <_printf_i+0xec>
 80040c0:	2f08      	cmp	r7, #8
 80040c2:	d109      	bne.n	80040d8 <_printf_i+0x11c>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	07db      	lsls	r3, r3, #31
 80040c8:	d506      	bpl.n	80040d8 <_printf_i+0x11c>
 80040ca:	6862      	ldr	r2, [r4, #4]
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	dc02      	bgt.n	80040d8 <_printf_i+0x11c>
 80040d2:	2330      	movs	r3, #48	@ 0x30
 80040d4:	3d01      	subs	r5, #1
 80040d6:	702b      	strb	r3, [r5, #0]
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	1b5b      	subs	r3, r3, r5
 80040dc:	6123      	str	r3, [r4, #16]
 80040de:	9b07      	ldr	r3, [sp, #28]
 80040e0:	0021      	movs	r1, r4
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	9805      	ldr	r0, [sp, #20]
 80040e6:	9b06      	ldr	r3, [sp, #24]
 80040e8:	aa09      	add	r2, sp, #36	@ 0x24
 80040ea:	f7ff fef7 	bl	8003edc <_printf_common>
 80040ee:	3001      	adds	r0, #1
 80040f0:	d148      	bne.n	8004184 <_printf_i+0x1c8>
 80040f2:	2001      	movs	r0, #1
 80040f4:	4240      	negs	r0, r0
 80040f6:	b00b      	add	sp, #44	@ 0x2c
 80040f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fa:	2220      	movs	r2, #32
 80040fc:	6809      	ldr	r1, [r1, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	6022      	str	r2, [r4, #0]
 8004102:	2278      	movs	r2, #120	@ 0x78
 8004104:	4932      	ldr	r1, [pc, #200]	@ (80041d0 <_printf_i+0x214>)
 8004106:	9104      	str	r1, [sp, #16]
 8004108:	0021      	movs	r1, r4
 800410a:	3145      	adds	r1, #69	@ 0x45
 800410c:	700a      	strb	r2, [r1, #0]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	c940      	ldmia	r1!, {r6}
 8004114:	0610      	lsls	r0, r2, #24
 8004116:	d402      	bmi.n	800411e <_printf_i+0x162>
 8004118:	0650      	lsls	r0, r2, #25
 800411a:	d500      	bpl.n	800411e <_printf_i+0x162>
 800411c:	b2b6      	uxth	r6, r6
 800411e:	6019      	str	r1, [r3, #0]
 8004120:	07d3      	lsls	r3, r2, #31
 8004122:	d502      	bpl.n	800412a <_printf_i+0x16e>
 8004124:	2320      	movs	r3, #32
 8004126:	4313      	orrs	r3, r2
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	2e00      	cmp	r6, #0
 800412c:	d001      	beq.n	8004132 <_printf_i+0x176>
 800412e:	2710      	movs	r7, #16
 8004130:	e7aa      	b.n	8004088 <_printf_i+0xcc>
 8004132:	2220      	movs	r2, #32
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	4393      	bics	r3, r2
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	e7f8      	b.n	800412e <_printf_i+0x172>
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	680d      	ldr	r5, [r1, #0]
 8004140:	1d10      	adds	r0, r2, #4
 8004142:	6949      	ldr	r1, [r1, #20]
 8004144:	6018      	str	r0, [r3, #0]
 8004146:	6813      	ldr	r3, [r2, #0]
 8004148:	062e      	lsls	r6, r5, #24
 800414a:	d501      	bpl.n	8004150 <_printf_i+0x194>
 800414c:	6019      	str	r1, [r3, #0]
 800414e:	e002      	b.n	8004156 <_printf_i+0x19a>
 8004150:	066d      	lsls	r5, r5, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0x190>
 8004154:	8019      	strh	r1, [r3, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	9d03      	ldr	r5, [sp, #12]
 800415a:	6123      	str	r3, [r4, #16]
 800415c:	e7bf      	b.n	80040de <_printf_i+0x122>
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	1d11      	adds	r1, r2, #4
 8004162:	6019      	str	r1, [r3, #0]
 8004164:	6815      	ldr	r5, [r2, #0]
 8004166:	2100      	movs	r1, #0
 8004168:	0028      	movs	r0, r5
 800416a:	6862      	ldr	r2, [r4, #4]
 800416c:	f000 f918 	bl	80043a0 <memchr>
 8004170:	2800      	cmp	r0, #0
 8004172:	d001      	beq.n	8004178 <_printf_i+0x1bc>
 8004174:	1b40      	subs	r0, r0, r5
 8004176:	6060      	str	r0, [r4, #4]
 8004178:	6863      	ldr	r3, [r4, #4]
 800417a:	6123      	str	r3, [r4, #16]
 800417c:	2300      	movs	r3, #0
 800417e:	9a03      	ldr	r2, [sp, #12]
 8004180:	7013      	strb	r3, [r2, #0]
 8004182:	e7ac      	b.n	80040de <_printf_i+0x122>
 8004184:	002a      	movs	r2, r5
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	9906      	ldr	r1, [sp, #24]
 800418a:	9805      	ldr	r0, [sp, #20]
 800418c:	9d07      	ldr	r5, [sp, #28]
 800418e:	47a8      	blx	r5
 8004190:	3001      	adds	r0, #1
 8004192:	d0ae      	beq.n	80040f2 <_printf_i+0x136>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	079b      	lsls	r3, r3, #30
 8004198:	d415      	bmi.n	80041c6 <_printf_i+0x20a>
 800419a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800419c:	68e0      	ldr	r0, [r4, #12]
 800419e:	4298      	cmp	r0, r3
 80041a0:	daa9      	bge.n	80040f6 <_printf_i+0x13a>
 80041a2:	0018      	movs	r0, r3
 80041a4:	e7a7      	b.n	80040f6 <_printf_i+0x13a>
 80041a6:	0022      	movs	r2, r4
 80041a8:	2301      	movs	r3, #1
 80041aa:	9906      	ldr	r1, [sp, #24]
 80041ac:	9805      	ldr	r0, [sp, #20]
 80041ae:	9e07      	ldr	r6, [sp, #28]
 80041b0:	3219      	adds	r2, #25
 80041b2:	47b0      	blx	r6
 80041b4:	3001      	adds	r0, #1
 80041b6:	d09c      	beq.n	80040f2 <_printf_i+0x136>
 80041b8:	3501      	adds	r5, #1
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	42ab      	cmp	r3, r5
 80041c2:	dcf0      	bgt.n	80041a6 <_printf_i+0x1ea>
 80041c4:	e7e9      	b.n	800419a <_printf_i+0x1de>
 80041c6:	2500      	movs	r5, #0
 80041c8:	e7f7      	b.n	80041ba <_printf_i+0x1fe>
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	08004af0 	.word	0x08004af0
 80041d0:	08004b01 	.word	0x08004b01

080041d4 <__sflush_r>:
 80041d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041d6:	220c      	movs	r2, #12
 80041d8:	5e8b      	ldrsh	r3, [r1, r2]
 80041da:	0005      	movs	r5, r0
 80041dc:	000c      	movs	r4, r1
 80041de:	071a      	lsls	r2, r3, #28
 80041e0:	d456      	bmi.n	8004290 <__sflush_r+0xbc>
 80041e2:	684a      	ldr	r2, [r1, #4]
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	dc02      	bgt.n	80041ee <__sflush_r+0x1a>
 80041e8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	dd4e      	ble.n	800428c <__sflush_r+0xb8>
 80041ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80041f0:	2f00      	cmp	r7, #0
 80041f2:	d04b      	beq.n	800428c <__sflush_r+0xb8>
 80041f4:	2200      	movs	r2, #0
 80041f6:	2080      	movs	r0, #128	@ 0x80
 80041f8:	682e      	ldr	r6, [r5, #0]
 80041fa:	602a      	str	r2, [r5, #0]
 80041fc:	001a      	movs	r2, r3
 80041fe:	0140      	lsls	r0, r0, #5
 8004200:	6a21      	ldr	r1, [r4, #32]
 8004202:	4002      	ands	r2, r0
 8004204:	4203      	tst	r3, r0
 8004206:	d033      	beq.n	8004270 <__sflush_r+0x9c>
 8004208:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	075b      	lsls	r3, r3, #29
 800420e:	d506      	bpl.n	800421e <__sflush_r+0x4a>
 8004210:	6863      	ldr	r3, [r4, #4]
 8004212:	1ad2      	subs	r2, r2, r3
 8004214:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <__sflush_r+0x4a>
 800421a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800421c:	1ad2      	subs	r2, r2, r3
 800421e:	2300      	movs	r3, #0
 8004220:	0028      	movs	r0, r5
 8004222:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004224:	6a21      	ldr	r1, [r4, #32]
 8004226:	47b8      	blx	r7
 8004228:	89a2      	ldrh	r2, [r4, #12]
 800422a:	1c43      	adds	r3, r0, #1
 800422c:	d106      	bne.n	800423c <__sflush_r+0x68>
 800422e:	6829      	ldr	r1, [r5, #0]
 8004230:	291d      	cmp	r1, #29
 8004232:	d846      	bhi.n	80042c2 <__sflush_r+0xee>
 8004234:	4b29      	ldr	r3, [pc, #164]	@ (80042dc <__sflush_r+0x108>)
 8004236:	40cb      	lsrs	r3, r1
 8004238:	07db      	lsls	r3, r3, #31
 800423a:	d542      	bpl.n	80042c2 <__sflush_r+0xee>
 800423c:	2300      	movs	r3, #0
 800423e:	6063      	str	r3, [r4, #4]
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	04d2      	lsls	r2, r2, #19
 8004246:	d505      	bpl.n	8004254 <__sflush_r+0x80>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <__sflush_r+0x7e>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d100      	bne.n	8004254 <__sflush_r+0x80>
 8004252:	6560      	str	r0, [r4, #84]	@ 0x54
 8004254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004256:	602e      	str	r6, [r5, #0]
 8004258:	2900      	cmp	r1, #0
 800425a:	d017      	beq.n	800428c <__sflush_r+0xb8>
 800425c:	0023      	movs	r3, r4
 800425e:	3344      	adds	r3, #68	@ 0x44
 8004260:	4299      	cmp	r1, r3
 8004262:	d002      	beq.n	800426a <__sflush_r+0x96>
 8004264:	0028      	movs	r0, r5
 8004266:	f7ff fbd5 	bl	8003a14 <_free_r>
 800426a:	2300      	movs	r3, #0
 800426c:	6363      	str	r3, [r4, #52]	@ 0x34
 800426e:	e00d      	b.n	800428c <__sflush_r+0xb8>
 8004270:	2301      	movs	r3, #1
 8004272:	0028      	movs	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	0002      	movs	r2, r0
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d1c6      	bne.n	800420a <__sflush_r+0x36>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0c3      	beq.n	800420a <__sflush_r+0x36>
 8004282:	2b1d      	cmp	r3, #29
 8004284:	d001      	beq.n	800428a <__sflush_r+0xb6>
 8004286:	2b16      	cmp	r3, #22
 8004288:	d11a      	bne.n	80042c0 <__sflush_r+0xec>
 800428a:	602e      	str	r6, [r5, #0]
 800428c:	2000      	movs	r0, #0
 800428e:	e01e      	b.n	80042ce <__sflush_r+0xfa>
 8004290:	690e      	ldr	r6, [r1, #16]
 8004292:	2e00      	cmp	r6, #0
 8004294:	d0fa      	beq.n	800428c <__sflush_r+0xb8>
 8004296:	680f      	ldr	r7, [r1, #0]
 8004298:	600e      	str	r6, [r1, #0]
 800429a:	1bba      	subs	r2, r7, r6
 800429c:	9201      	str	r2, [sp, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	079b      	lsls	r3, r3, #30
 80042a2:	d100      	bne.n	80042a6 <__sflush_r+0xd2>
 80042a4:	694a      	ldr	r2, [r1, #20]
 80042a6:	60a2      	str	r2, [r4, #8]
 80042a8:	9b01      	ldr	r3, [sp, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	ddee      	ble.n	800428c <__sflush_r+0xb8>
 80042ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80042b0:	0032      	movs	r2, r6
 80042b2:	001f      	movs	r7, r3
 80042b4:	0028      	movs	r0, r5
 80042b6:	9b01      	ldr	r3, [sp, #4]
 80042b8:	6a21      	ldr	r1, [r4, #32]
 80042ba:	47b8      	blx	r7
 80042bc:	2800      	cmp	r0, #0
 80042be:	dc07      	bgt.n	80042d0 <__sflush_r+0xfc>
 80042c0:	89a2      	ldrh	r2, [r4, #12]
 80042c2:	2340      	movs	r3, #64	@ 0x40
 80042c4:	2001      	movs	r0, #1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b21b      	sxth	r3, r3
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	4240      	negs	r0, r0
 80042ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042d0:	9b01      	ldr	r3, [sp, #4]
 80042d2:	1836      	adds	r6, r6, r0
 80042d4:	1a1b      	subs	r3, r3, r0
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	e7e6      	b.n	80042a8 <__sflush_r+0xd4>
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	20400001 	.word	0x20400001

080042e0 <_fflush_r>:
 80042e0:	690b      	ldr	r3, [r1, #16]
 80042e2:	b570      	push	{r4, r5, r6, lr}
 80042e4:	0005      	movs	r5, r0
 80042e6:	000c      	movs	r4, r1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <_fflush_r+0x12>
 80042ec:	2500      	movs	r5, #0
 80042ee:	0028      	movs	r0, r5
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d004      	beq.n	8004300 <_fflush_r+0x20>
 80042f6:	6a03      	ldr	r3, [r0, #32]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <_fflush_r+0x20>
 80042fc:	f7ff fa3e 	bl	800377c <__sinit>
 8004300:	220c      	movs	r2, #12
 8004302:	5ea3      	ldrsh	r3, [r4, r2]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f1      	beq.n	80042ec <_fflush_r+0xc>
 8004308:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800430a:	07d2      	lsls	r2, r2, #31
 800430c:	d404      	bmi.n	8004318 <_fflush_r+0x38>
 800430e:	059b      	lsls	r3, r3, #22
 8004310:	d402      	bmi.n	8004318 <_fflush_r+0x38>
 8004312:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004314:	f7ff fb55 	bl	80039c2 <__retarget_lock_acquire_recursive>
 8004318:	0028      	movs	r0, r5
 800431a:	0021      	movs	r1, r4
 800431c:	f7ff ff5a 	bl	80041d4 <__sflush_r>
 8004320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004322:	0005      	movs	r5, r0
 8004324:	07db      	lsls	r3, r3, #31
 8004326:	d4e2      	bmi.n	80042ee <_fflush_r+0xe>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	059b      	lsls	r3, r3, #22
 800432c:	d4df      	bmi.n	80042ee <_fflush_r+0xe>
 800432e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004330:	f7ff fb48 	bl	80039c4 <__retarget_lock_release_recursive>
 8004334:	e7db      	b.n	80042ee <_fflush_r+0xe>
	...

08004338 <fiprintf>:
 8004338:	b40e      	push	{r1, r2, r3}
 800433a:	b517      	push	{r0, r1, r2, r4, lr}
 800433c:	4c05      	ldr	r4, [pc, #20]	@ (8004354 <fiprintf+0x1c>)
 800433e:	ab05      	add	r3, sp, #20
 8004340:	cb04      	ldmia	r3!, {r2}
 8004342:	0001      	movs	r1, r0
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	f000 f894 	bl	8004474 <_vfiprintf_r>
 800434c:	bc1e      	pop	{r1, r2, r3, r4}
 800434e:	bc08      	pop	{r3}
 8004350:	b003      	add	sp, #12
 8004352:	4718      	bx	r3
 8004354:	2000001c 	.word	0x2000001c

08004358 <memmove>:
 8004358:	b510      	push	{r4, lr}
 800435a:	4288      	cmp	r0, r1
 800435c:	d902      	bls.n	8004364 <memmove+0xc>
 800435e:	188b      	adds	r3, r1, r2
 8004360:	4298      	cmp	r0, r3
 8004362:	d308      	bcc.n	8004376 <memmove+0x1e>
 8004364:	2300      	movs	r3, #0
 8004366:	429a      	cmp	r2, r3
 8004368:	d007      	beq.n	800437a <memmove+0x22>
 800436a:	5ccc      	ldrb	r4, [r1, r3]
 800436c:	54c4      	strb	r4, [r0, r3]
 800436e:	3301      	adds	r3, #1
 8004370:	e7f9      	b.n	8004366 <memmove+0xe>
 8004372:	5c8b      	ldrb	r3, [r1, r2]
 8004374:	5483      	strb	r3, [r0, r2]
 8004376:	3a01      	subs	r2, #1
 8004378:	d2fb      	bcs.n	8004372 <memmove+0x1a>
 800437a:	bd10      	pop	{r4, pc}

0800437c <_sbrk_r>:
 800437c:	2300      	movs	r3, #0
 800437e:	b570      	push	{r4, r5, r6, lr}
 8004380:	4d06      	ldr	r5, [pc, #24]	@ (800439c <_sbrk_r+0x20>)
 8004382:	0004      	movs	r4, r0
 8004384:	0008      	movs	r0, r1
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	f7fc fca2 	bl	8000cd0 <_sbrk>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d103      	bne.n	8004398 <_sbrk_r+0x1c>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d000      	beq.n	8004398 <_sbrk_r+0x1c>
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	bd70      	pop	{r4, r5, r6, pc}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	200005d4 	.word	0x200005d4

080043a0 <memchr>:
 80043a0:	b2c9      	uxtb	r1, r1
 80043a2:	1882      	adds	r2, r0, r2
 80043a4:	4290      	cmp	r0, r2
 80043a6:	d101      	bne.n	80043ac <memchr+0xc>
 80043a8:	2000      	movs	r0, #0
 80043aa:	4770      	bx	lr
 80043ac:	7803      	ldrb	r3, [r0, #0]
 80043ae:	428b      	cmp	r3, r1
 80043b0:	d0fb      	beq.n	80043aa <memchr+0xa>
 80043b2:	3001      	adds	r0, #1
 80043b4:	e7f6      	b.n	80043a4 <memchr+0x4>

080043b6 <abort>:
 80043b6:	2006      	movs	r0, #6
 80043b8:	b510      	push	{r4, lr}
 80043ba:	f000 fa41 	bl	8004840 <raise>
 80043be:	2001      	movs	r0, #1
 80043c0:	f7fc fc14 	bl	8000bec <_exit>

080043c4 <_realloc_r>:
 80043c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043c6:	0006      	movs	r6, r0
 80043c8:	000c      	movs	r4, r1
 80043ca:	0015      	movs	r5, r2
 80043cc:	2900      	cmp	r1, #0
 80043ce:	d105      	bne.n	80043dc <_realloc_r+0x18>
 80043d0:	0011      	movs	r1, r2
 80043d2:	f7ff fb95 	bl	8003b00 <_malloc_r>
 80043d6:	0004      	movs	r4, r0
 80043d8:	0020      	movs	r0, r4
 80043da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d103      	bne.n	80043e8 <_realloc_r+0x24>
 80043e0:	f7ff fb18 	bl	8003a14 <_free_r>
 80043e4:	002c      	movs	r4, r5
 80043e6:	e7f7      	b.n	80043d8 <_realloc_r+0x14>
 80043e8:	f000 fa4a 	bl	8004880 <_malloc_usable_size_r>
 80043ec:	0007      	movs	r7, r0
 80043ee:	4285      	cmp	r5, r0
 80043f0:	d802      	bhi.n	80043f8 <_realloc_r+0x34>
 80043f2:	0843      	lsrs	r3, r0, #1
 80043f4:	42ab      	cmp	r3, r5
 80043f6:	d3ef      	bcc.n	80043d8 <_realloc_r+0x14>
 80043f8:	0029      	movs	r1, r5
 80043fa:	0030      	movs	r0, r6
 80043fc:	f7ff fb80 	bl	8003b00 <_malloc_r>
 8004400:	9001      	str	r0, [sp, #4]
 8004402:	2800      	cmp	r0, #0
 8004404:	d101      	bne.n	800440a <_realloc_r+0x46>
 8004406:	9c01      	ldr	r4, [sp, #4]
 8004408:	e7e6      	b.n	80043d8 <_realloc_r+0x14>
 800440a:	002a      	movs	r2, r5
 800440c:	42bd      	cmp	r5, r7
 800440e:	d900      	bls.n	8004412 <_realloc_r+0x4e>
 8004410:	003a      	movs	r2, r7
 8004412:	0021      	movs	r1, r4
 8004414:	9801      	ldr	r0, [sp, #4]
 8004416:	f7ff fad6 	bl	80039c6 <memcpy>
 800441a:	0021      	movs	r1, r4
 800441c:	0030      	movs	r0, r6
 800441e:	f7ff faf9 	bl	8003a14 <_free_r>
 8004422:	e7f0      	b.n	8004406 <_realloc_r+0x42>

08004424 <__sfputc_r>:
 8004424:	6893      	ldr	r3, [r2, #8]
 8004426:	b510      	push	{r4, lr}
 8004428:	3b01      	subs	r3, #1
 800442a:	6093      	str	r3, [r2, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	da04      	bge.n	800443a <__sfputc_r+0x16>
 8004430:	6994      	ldr	r4, [r2, #24]
 8004432:	42a3      	cmp	r3, r4
 8004434:	db07      	blt.n	8004446 <__sfputc_r+0x22>
 8004436:	290a      	cmp	r1, #10
 8004438:	d005      	beq.n	8004446 <__sfputc_r+0x22>
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	1c58      	adds	r0, r3, #1
 800443e:	6010      	str	r0, [r2, #0]
 8004440:	7019      	strb	r1, [r3, #0]
 8004442:	0008      	movs	r0, r1
 8004444:	bd10      	pop	{r4, pc}
 8004446:	f000 f931 	bl	80046ac <__swbuf_r>
 800444a:	0001      	movs	r1, r0
 800444c:	e7f9      	b.n	8004442 <__sfputc_r+0x1e>

0800444e <__sfputs_r>:
 800444e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004450:	0006      	movs	r6, r0
 8004452:	000f      	movs	r7, r1
 8004454:	0014      	movs	r4, r2
 8004456:	18d5      	adds	r5, r2, r3
 8004458:	42ac      	cmp	r4, r5
 800445a:	d101      	bne.n	8004460 <__sfputs_r+0x12>
 800445c:	2000      	movs	r0, #0
 800445e:	e007      	b.n	8004470 <__sfputs_r+0x22>
 8004460:	7821      	ldrb	r1, [r4, #0]
 8004462:	003a      	movs	r2, r7
 8004464:	0030      	movs	r0, r6
 8004466:	f7ff ffdd 	bl	8004424 <__sfputc_r>
 800446a:	3401      	adds	r4, #1
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d1f3      	bne.n	8004458 <__sfputs_r+0xa>
 8004470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004474 <_vfiprintf_r>:
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004476:	b0a1      	sub	sp, #132	@ 0x84
 8004478:	000f      	movs	r7, r1
 800447a:	0015      	movs	r5, r2
 800447c:	001e      	movs	r6, r3
 800447e:	9003      	str	r0, [sp, #12]
 8004480:	2800      	cmp	r0, #0
 8004482:	d004      	beq.n	800448e <_vfiprintf_r+0x1a>
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <_vfiprintf_r+0x1a>
 800448a:	f7ff f977 	bl	800377c <__sinit>
 800448e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004490:	07db      	lsls	r3, r3, #31
 8004492:	d405      	bmi.n	80044a0 <_vfiprintf_r+0x2c>
 8004494:	89bb      	ldrh	r3, [r7, #12]
 8004496:	059b      	lsls	r3, r3, #22
 8004498:	d402      	bmi.n	80044a0 <_vfiprintf_r+0x2c>
 800449a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800449c:	f7ff fa91 	bl	80039c2 <__retarget_lock_acquire_recursive>
 80044a0:	89bb      	ldrh	r3, [r7, #12]
 80044a2:	071b      	lsls	r3, r3, #28
 80044a4:	d502      	bpl.n	80044ac <_vfiprintf_r+0x38>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d113      	bne.n	80044d4 <_vfiprintf_r+0x60>
 80044ac:	0039      	movs	r1, r7
 80044ae:	9803      	ldr	r0, [sp, #12]
 80044b0:	f000 f93e 	bl	8004730 <__swsetup_r>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d00d      	beq.n	80044d4 <_vfiprintf_r+0x60>
 80044b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ba:	07db      	lsls	r3, r3, #31
 80044bc:	d503      	bpl.n	80044c6 <_vfiprintf_r+0x52>
 80044be:	2001      	movs	r0, #1
 80044c0:	4240      	negs	r0, r0
 80044c2:	b021      	add	sp, #132	@ 0x84
 80044c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c6:	89bb      	ldrh	r3, [r7, #12]
 80044c8:	059b      	lsls	r3, r3, #22
 80044ca:	d4f8      	bmi.n	80044be <_vfiprintf_r+0x4a>
 80044cc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80044ce:	f7ff fa79 	bl	80039c4 <__retarget_lock_release_recursive>
 80044d2:	e7f4      	b.n	80044be <_vfiprintf_r+0x4a>
 80044d4:	2300      	movs	r3, #0
 80044d6:	ac08      	add	r4, sp, #32
 80044d8:	6163      	str	r3, [r4, #20]
 80044da:	3320      	adds	r3, #32
 80044dc:	7663      	strb	r3, [r4, #25]
 80044de:	3310      	adds	r3, #16
 80044e0:	76a3      	strb	r3, [r4, #26]
 80044e2:	9607      	str	r6, [sp, #28]
 80044e4:	002e      	movs	r6, r5
 80044e6:	7833      	ldrb	r3, [r6, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <_vfiprintf_r+0x7c>
 80044ec:	2b25      	cmp	r3, #37	@ 0x25
 80044ee:	d148      	bne.n	8004582 <_vfiprintf_r+0x10e>
 80044f0:	1b73      	subs	r3, r6, r5
 80044f2:	9305      	str	r3, [sp, #20]
 80044f4:	42ae      	cmp	r6, r5
 80044f6:	d00b      	beq.n	8004510 <_vfiprintf_r+0x9c>
 80044f8:	002a      	movs	r2, r5
 80044fa:	0039      	movs	r1, r7
 80044fc:	9803      	ldr	r0, [sp, #12]
 80044fe:	f7ff ffa6 	bl	800444e <__sfputs_r>
 8004502:	3001      	adds	r0, #1
 8004504:	d100      	bne.n	8004508 <_vfiprintf_r+0x94>
 8004506:	e0ae      	b.n	8004666 <_vfiprintf_r+0x1f2>
 8004508:	6963      	ldr	r3, [r4, #20]
 800450a:	9a05      	ldr	r2, [sp, #20]
 800450c:	189b      	adds	r3, r3, r2
 800450e:	6163      	str	r3, [r4, #20]
 8004510:	7833      	ldrb	r3, [r6, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d100      	bne.n	8004518 <_vfiprintf_r+0xa4>
 8004516:	e0a6      	b.n	8004666 <_vfiprintf_r+0x1f2>
 8004518:	2201      	movs	r2, #1
 800451a:	2300      	movs	r3, #0
 800451c:	4252      	negs	r2, r2
 800451e:	6062      	str	r2, [r4, #4]
 8004520:	a904      	add	r1, sp, #16
 8004522:	3254      	adds	r2, #84	@ 0x54
 8004524:	1852      	adds	r2, r2, r1
 8004526:	1c75      	adds	r5, r6, #1
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	60e3      	str	r3, [r4, #12]
 800452c:	60a3      	str	r3, [r4, #8]
 800452e:	7013      	strb	r3, [r2, #0]
 8004530:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004532:	4b59      	ldr	r3, [pc, #356]	@ (8004698 <_vfiprintf_r+0x224>)
 8004534:	2205      	movs	r2, #5
 8004536:	0018      	movs	r0, r3
 8004538:	7829      	ldrb	r1, [r5, #0]
 800453a:	9305      	str	r3, [sp, #20]
 800453c:	f7ff ff30 	bl	80043a0 <memchr>
 8004540:	1c6e      	adds	r6, r5, #1
 8004542:	2800      	cmp	r0, #0
 8004544:	d11f      	bne.n	8004586 <_vfiprintf_r+0x112>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	06d3      	lsls	r3, r2, #27
 800454a:	d504      	bpl.n	8004556 <_vfiprintf_r+0xe2>
 800454c:	2353      	movs	r3, #83	@ 0x53
 800454e:	a904      	add	r1, sp, #16
 8004550:	185b      	adds	r3, r3, r1
 8004552:	2120      	movs	r1, #32
 8004554:	7019      	strb	r1, [r3, #0]
 8004556:	0713      	lsls	r3, r2, #28
 8004558:	d504      	bpl.n	8004564 <_vfiprintf_r+0xf0>
 800455a:	2353      	movs	r3, #83	@ 0x53
 800455c:	a904      	add	r1, sp, #16
 800455e:	185b      	adds	r3, r3, r1
 8004560:	212b      	movs	r1, #43	@ 0x2b
 8004562:	7019      	strb	r1, [r3, #0]
 8004564:	782b      	ldrb	r3, [r5, #0]
 8004566:	2b2a      	cmp	r3, #42	@ 0x2a
 8004568:	d016      	beq.n	8004598 <_vfiprintf_r+0x124>
 800456a:	002e      	movs	r6, r5
 800456c:	2100      	movs	r1, #0
 800456e:	200a      	movs	r0, #10
 8004570:	68e3      	ldr	r3, [r4, #12]
 8004572:	7832      	ldrb	r2, [r6, #0]
 8004574:	1c75      	adds	r5, r6, #1
 8004576:	3a30      	subs	r2, #48	@ 0x30
 8004578:	2a09      	cmp	r2, #9
 800457a:	d950      	bls.n	800461e <_vfiprintf_r+0x1aa>
 800457c:	2900      	cmp	r1, #0
 800457e:	d111      	bne.n	80045a4 <_vfiprintf_r+0x130>
 8004580:	e017      	b.n	80045b2 <_vfiprintf_r+0x13e>
 8004582:	3601      	adds	r6, #1
 8004584:	e7af      	b.n	80044e6 <_vfiprintf_r+0x72>
 8004586:	9b05      	ldr	r3, [sp, #20]
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	1ac0      	subs	r0, r0, r3
 800458c:	2301      	movs	r3, #1
 800458e:	4083      	lsls	r3, r0
 8004590:	4313      	orrs	r3, r2
 8004592:	0035      	movs	r5, r6
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	e7cc      	b.n	8004532 <_vfiprintf_r+0xbe>
 8004598:	9b07      	ldr	r3, [sp, #28]
 800459a:	1d19      	adds	r1, r3, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	9107      	str	r1, [sp, #28]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db01      	blt.n	80045a8 <_vfiprintf_r+0x134>
 80045a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045a6:	e004      	b.n	80045b2 <_vfiprintf_r+0x13e>
 80045a8:	425b      	negs	r3, r3
 80045aa:	60e3      	str	r3, [r4, #12]
 80045ac:	2302      	movs	r3, #2
 80045ae:	4313      	orrs	r3, r2
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	7833      	ldrb	r3, [r6, #0]
 80045b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80045b6:	d10c      	bne.n	80045d2 <_vfiprintf_r+0x15e>
 80045b8:	7873      	ldrb	r3, [r6, #1]
 80045ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80045bc:	d134      	bne.n	8004628 <_vfiprintf_r+0x1b4>
 80045be:	9b07      	ldr	r3, [sp, #28]
 80045c0:	3602      	adds	r6, #2
 80045c2:	1d1a      	adds	r2, r3, #4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	9207      	str	r2, [sp, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da01      	bge.n	80045d0 <_vfiprintf_r+0x15c>
 80045cc:	2301      	movs	r3, #1
 80045ce:	425b      	negs	r3, r3
 80045d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d2:	4d32      	ldr	r5, [pc, #200]	@ (800469c <_vfiprintf_r+0x228>)
 80045d4:	2203      	movs	r2, #3
 80045d6:	0028      	movs	r0, r5
 80045d8:	7831      	ldrb	r1, [r6, #0]
 80045da:	f7ff fee1 	bl	80043a0 <memchr>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d006      	beq.n	80045f0 <_vfiprintf_r+0x17c>
 80045e2:	2340      	movs	r3, #64	@ 0x40
 80045e4:	1b40      	subs	r0, r0, r5
 80045e6:	4083      	lsls	r3, r0
 80045e8:	6822      	ldr	r2, [r4, #0]
 80045ea:	3601      	adds	r6, #1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	6023      	str	r3, [r4, #0]
 80045f0:	7831      	ldrb	r1, [r6, #0]
 80045f2:	2206      	movs	r2, #6
 80045f4:	482a      	ldr	r0, [pc, #168]	@ (80046a0 <_vfiprintf_r+0x22c>)
 80045f6:	1c75      	adds	r5, r6, #1
 80045f8:	7621      	strb	r1, [r4, #24]
 80045fa:	f7ff fed1 	bl	80043a0 <memchr>
 80045fe:	2800      	cmp	r0, #0
 8004600:	d040      	beq.n	8004684 <_vfiprintf_r+0x210>
 8004602:	4b28      	ldr	r3, [pc, #160]	@ (80046a4 <_vfiprintf_r+0x230>)
 8004604:	2b00      	cmp	r3, #0
 8004606:	d122      	bne.n	800464e <_vfiprintf_r+0x1da>
 8004608:	2207      	movs	r2, #7
 800460a:	9b07      	ldr	r3, [sp, #28]
 800460c:	3307      	adds	r3, #7
 800460e:	4393      	bics	r3, r2
 8004610:	3308      	adds	r3, #8
 8004612:	9307      	str	r3, [sp, #28]
 8004614:	6963      	ldr	r3, [r4, #20]
 8004616:	9a04      	ldr	r2, [sp, #16]
 8004618:	189b      	adds	r3, r3, r2
 800461a:	6163      	str	r3, [r4, #20]
 800461c:	e762      	b.n	80044e4 <_vfiprintf_r+0x70>
 800461e:	4343      	muls	r3, r0
 8004620:	002e      	movs	r6, r5
 8004622:	2101      	movs	r1, #1
 8004624:	189b      	adds	r3, r3, r2
 8004626:	e7a4      	b.n	8004572 <_vfiprintf_r+0xfe>
 8004628:	2300      	movs	r3, #0
 800462a:	200a      	movs	r0, #10
 800462c:	0019      	movs	r1, r3
 800462e:	3601      	adds	r6, #1
 8004630:	6063      	str	r3, [r4, #4]
 8004632:	7832      	ldrb	r2, [r6, #0]
 8004634:	1c75      	adds	r5, r6, #1
 8004636:	3a30      	subs	r2, #48	@ 0x30
 8004638:	2a09      	cmp	r2, #9
 800463a:	d903      	bls.n	8004644 <_vfiprintf_r+0x1d0>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0c8      	beq.n	80045d2 <_vfiprintf_r+0x15e>
 8004640:	9109      	str	r1, [sp, #36]	@ 0x24
 8004642:	e7c6      	b.n	80045d2 <_vfiprintf_r+0x15e>
 8004644:	4341      	muls	r1, r0
 8004646:	002e      	movs	r6, r5
 8004648:	2301      	movs	r3, #1
 800464a:	1889      	adds	r1, r1, r2
 800464c:	e7f1      	b.n	8004632 <_vfiprintf_r+0x1be>
 800464e:	aa07      	add	r2, sp, #28
 8004650:	9200      	str	r2, [sp, #0]
 8004652:	0021      	movs	r1, r4
 8004654:	003a      	movs	r2, r7
 8004656:	4b14      	ldr	r3, [pc, #80]	@ (80046a8 <_vfiprintf_r+0x234>)
 8004658:	9803      	ldr	r0, [sp, #12]
 800465a:	e000      	b.n	800465e <_vfiprintf_r+0x1ea>
 800465c:	bf00      	nop
 800465e:	9004      	str	r0, [sp, #16]
 8004660:	9b04      	ldr	r3, [sp, #16]
 8004662:	3301      	adds	r3, #1
 8004664:	d1d6      	bne.n	8004614 <_vfiprintf_r+0x1a0>
 8004666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004668:	07db      	lsls	r3, r3, #31
 800466a:	d405      	bmi.n	8004678 <_vfiprintf_r+0x204>
 800466c:	89bb      	ldrh	r3, [r7, #12]
 800466e:	059b      	lsls	r3, r3, #22
 8004670:	d402      	bmi.n	8004678 <_vfiprintf_r+0x204>
 8004672:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004674:	f7ff f9a6 	bl	80039c4 <__retarget_lock_release_recursive>
 8004678:	89bb      	ldrh	r3, [r7, #12]
 800467a:	065b      	lsls	r3, r3, #25
 800467c:	d500      	bpl.n	8004680 <_vfiprintf_r+0x20c>
 800467e:	e71e      	b.n	80044be <_vfiprintf_r+0x4a>
 8004680:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004682:	e71e      	b.n	80044c2 <_vfiprintf_r+0x4e>
 8004684:	aa07      	add	r2, sp, #28
 8004686:	9200      	str	r2, [sp, #0]
 8004688:	0021      	movs	r1, r4
 800468a:	003a      	movs	r2, r7
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <_vfiprintf_r+0x234>)
 800468e:	9803      	ldr	r0, [sp, #12]
 8004690:	f7ff fc94 	bl	8003fbc <_printf_i>
 8004694:	e7e3      	b.n	800465e <_vfiprintf_r+0x1ea>
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	08004adf 	.word	0x08004adf
 800469c:	08004ae5 	.word	0x08004ae5
 80046a0:	08004ae9 	.word	0x08004ae9
 80046a4:	00000000 	.word	0x00000000
 80046a8:	0800444f 	.word	0x0800444f

080046ac <__swbuf_r>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	0006      	movs	r6, r0
 80046b0:	000d      	movs	r5, r1
 80046b2:	0014      	movs	r4, r2
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d004      	beq.n	80046c2 <__swbuf_r+0x16>
 80046b8:	6a03      	ldr	r3, [r0, #32]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <__swbuf_r+0x16>
 80046be:	f7ff f85d 	bl	800377c <__sinit>
 80046c2:	69a3      	ldr	r3, [r4, #24]
 80046c4:	60a3      	str	r3, [r4, #8]
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	071b      	lsls	r3, r3, #28
 80046ca:	d502      	bpl.n	80046d2 <__swbuf_r+0x26>
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <__swbuf_r+0x3a>
 80046d2:	0021      	movs	r1, r4
 80046d4:	0030      	movs	r0, r6
 80046d6:	f000 f82b 	bl	8004730 <__swsetup_r>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d003      	beq.n	80046e6 <__swbuf_r+0x3a>
 80046de:	2501      	movs	r5, #1
 80046e0:	426d      	negs	r5, r5
 80046e2:	0028      	movs	r0, r5
 80046e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	b2ef      	uxtb	r7, r5
 80046ec:	1ac0      	subs	r0, r0, r3
 80046ee:	6963      	ldr	r3, [r4, #20]
 80046f0:	b2ed      	uxtb	r5, r5
 80046f2:	4283      	cmp	r3, r0
 80046f4:	dc05      	bgt.n	8004702 <__swbuf_r+0x56>
 80046f6:	0021      	movs	r1, r4
 80046f8:	0030      	movs	r0, r6
 80046fa:	f7ff fdf1 	bl	80042e0 <_fflush_r>
 80046fe:	2800      	cmp	r0, #0
 8004700:	d1ed      	bne.n	80046de <__swbuf_r+0x32>
 8004702:	68a3      	ldr	r3, [r4, #8]
 8004704:	3001      	adds	r0, #1
 8004706:	3b01      	subs	r3, #1
 8004708:	60a3      	str	r3, [r4, #8]
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	701f      	strb	r7, [r3, #0]
 8004712:	6963      	ldr	r3, [r4, #20]
 8004714:	4283      	cmp	r3, r0
 8004716:	d004      	beq.n	8004722 <__swbuf_r+0x76>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	07db      	lsls	r3, r3, #31
 800471c:	d5e1      	bpl.n	80046e2 <__swbuf_r+0x36>
 800471e:	2d0a      	cmp	r5, #10
 8004720:	d1df      	bne.n	80046e2 <__swbuf_r+0x36>
 8004722:	0021      	movs	r1, r4
 8004724:	0030      	movs	r0, r6
 8004726:	f7ff fddb 	bl	80042e0 <_fflush_r>
 800472a:	2800      	cmp	r0, #0
 800472c:	d0d9      	beq.n	80046e2 <__swbuf_r+0x36>
 800472e:	e7d6      	b.n	80046de <__swbuf_r+0x32>

08004730 <__swsetup_r>:
 8004730:	4b2d      	ldr	r3, [pc, #180]	@ (80047e8 <__swsetup_r+0xb8>)
 8004732:	b570      	push	{r4, r5, r6, lr}
 8004734:	0005      	movs	r5, r0
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	000c      	movs	r4, r1
 800473a:	2800      	cmp	r0, #0
 800473c:	d004      	beq.n	8004748 <__swsetup_r+0x18>
 800473e:	6a03      	ldr	r3, [r0, #32]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <__swsetup_r+0x18>
 8004744:	f7ff f81a 	bl	800377c <__sinit>
 8004748:	220c      	movs	r2, #12
 800474a:	5ea3      	ldrsh	r3, [r4, r2]
 800474c:	071a      	lsls	r2, r3, #28
 800474e:	d423      	bmi.n	8004798 <__swsetup_r+0x68>
 8004750:	06da      	lsls	r2, r3, #27
 8004752:	d407      	bmi.n	8004764 <__swsetup_r+0x34>
 8004754:	2209      	movs	r2, #9
 8004756:	602a      	str	r2, [r5, #0]
 8004758:	2240      	movs	r2, #64	@ 0x40
 800475a:	2001      	movs	r0, #1
 800475c:	4313      	orrs	r3, r2
 800475e:	81a3      	strh	r3, [r4, #12]
 8004760:	4240      	negs	r0, r0
 8004762:	e03a      	b.n	80047da <__swsetup_r+0xaa>
 8004764:	075b      	lsls	r3, r3, #29
 8004766:	d513      	bpl.n	8004790 <__swsetup_r+0x60>
 8004768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800476a:	2900      	cmp	r1, #0
 800476c:	d008      	beq.n	8004780 <__swsetup_r+0x50>
 800476e:	0023      	movs	r3, r4
 8004770:	3344      	adds	r3, #68	@ 0x44
 8004772:	4299      	cmp	r1, r3
 8004774:	d002      	beq.n	800477c <__swsetup_r+0x4c>
 8004776:	0028      	movs	r0, r5
 8004778:	f7ff f94c 	bl	8003a14 <_free_r>
 800477c:	2300      	movs	r3, #0
 800477e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004780:	2224      	movs	r2, #36	@ 0x24
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	4393      	bics	r3, r2
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	2300      	movs	r3, #0
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	2308      	movs	r3, #8
 8004792:	89a2      	ldrh	r2, [r4, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	81a3      	strh	r3, [r4, #12]
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <__swsetup_r+0x86>
 800479e:	21a0      	movs	r1, #160	@ 0xa0
 80047a0:	2280      	movs	r2, #128	@ 0x80
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	0089      	lsls	r1, r1, #2
 80047a6:	0092      	lsls	r2, r2, #2
 80047a8:	400b      	ands	r3, r1
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <__swsetup_r+0x86>
 80047ae:	0021      	movs	r1, r4
 80047b0:	0028      	movs	r0, r5
 80047b2:	f000 f897 	bl	80048e4 <__smakebuf_r>
 80047b6:	220c      	movs	r2, #12
 80047b8:	5ea3      	ldrsh	r3, [r4, r2]
 80047ba:	2101      	movs	r1, #1
 80047bc:	001a      	movs	r2, r3
 80047be:	400a      	ands	r2, r1
 80047c0:	420b      	tst	r3, r1
 80047c2:	d00b      	beq.n	80047dc <__swsetup_r+0xac>
 80047c4:	2200      	movs	r2, #0
 80047c6:	60a2      	str	r2, [r4, #8]
 80047c8:	6962      	ldr	r2, [r4, #20]
 80047ca:	4252      	negs	r2, r2
 80047cc:	61a2      	str	r2, [r4, #24]
 80047ce:	2000      	movs	r0, #0
 80047d0:	6922      	ldr	r2, [r4, #16]
 80047d2:	4282      	cmp	r2, r0
 80047d4:	d101      	bne.n	80047da <__swsetup_r+0xaa>
 80047d6:	061a      	lsls	r2, r3, #24
 80047d8:	d4be      	bmi.n	8004758 <__swsetup_r+0x28>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	0799      	lsls	r1, r3, #30
 80047de:	d400      	bmi.n	80047e2 <__swsetup_r+0xb2>
 80047e0:	6962      	ldr	r2, [r4, #20]
 80047e2:	60a2      	str	r2, [r4, #8]
 80047e4:	e7f3      	b.n	80047ce <__swsetup_r+0x9e>
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	2000001c 	.word	0x2000001c

080047ec <_raise_r>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	0004      	movs	r4, r0
 80047f0:	000d      	movs	r5, r1
 80047f2:	291f      	cmp	r1, #31
 80047f4:	d904      	bls.n	8004800 <_raise_r+0x14>
 80047f6:	2316      	movs	r3, #22
 80047f8:	6003      	str	r3, [r0, #0]
 80047fa:	2001      	movs	r0, #1
 80047fc:	4240      	negs	r0, r0
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <_raise_r+0x24>
 8004806:	008a      	lsls	r2, r1, #2
 8004808:	189b      	adds	r3, r3, r2
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	2a00      	cmp	r2, #0
 800480e:	d108      	bne.n	8004822 <_raise_r+0x36>
 8004810:	0020      	movs	r0, r4
 8004812:	f000 f831 	bl	8004878 <_getpid_r>
 8004816:	002a      	movs	r2, r5
 8004818:	0001      	movs	r1, r0
 800481a:	0020      	movs	r0, r4
 800481c:	f000 f81a 	bl	8004854 <_kill_r>
 8004820:	e7ed      	b.n	80047fe <_raise_r+0x12>
 8004822:	2a01      	cmp	r2, #1
 8004824:	d009      	beq.n	800483a <_raise_r+0x4e>
 8004826:	1c51      	adds	r1, r2, #1
 8004828:	d103      	bne.n	8004832 <_raise_r+0x46>
 800482a:	2316      	movs	r3, #22
 800482c:	6003      	str	r3, [r0, #0]
 800482e:	2001      	movs	r0, #1
 8004830:	e7e5      	b.n	80047fe <_raise_r+0x12>
 8004832:	2100      	movs	r1, #0
 8004834:	0028      	movs	r0, r5
 8004836:	6019      	str	r1, [r3, #0]
 8004838:	4790      	blx	r2
 800483a:	2000      	movs	r0, #0
 800483c:	e7df      	b.n	80047fe <_raise_r+0x12>
	...

08004840 <raise>:
 8004840:	b510      	push	{r4, lr}
 8004842:	4b03      	ldr	r3, [pc, #12]	@ (8004850 <raise+0x10>)
 8004844:	0001      	movs	r1, r0
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	f7ff ffd0 	bl	80047ec <_raise_r>
 800484c:	bd10      	pop	{r4, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	2000001c 	.word	0x2000001c

08004854 <_kill_r>:
 8004854:	2300      	movs	r3, #0
 8004856:	b570      	push	{r4, r5, r6, lr}
 8004858:	4d06      	ldr	r5, [pc, #24]	@ (8004874 <_kill_r+0x20>)
 800485a:	0004      	movs	r4, r0
 800485c:	0008      	movs	r0, r1
 800485e:	0011      	movs	r1, r2
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	f7fc f9b3 	bl	8000bcc <_kill>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d103      	bne.n	8004872 <_kill_r+0x1e>
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d000      	beq.n	8004872 <_kill_r+0x1e>
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	200005d4 	.word	0x200005d4

08004878 <_getpid_r>:
 8004878:	b510      	push	{r4, lr}
 800487a:	f7fc f9a1 	bl	8000bc0 <_getpid>
 800487e:	bd10      	pop	{r4, pc}

08004880 <_malloc_usable_size_r>:
 8004880:	1f0b      	subs	r3, r1, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	1f18      	subs	r0, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	da01      	bge.n	800488e <_malloc_usable_size_r+0xe>
 800488a:	580b      	ldr	r3, [r1, r0]
 800488c:	18c0      	adds	r0, r0, r3
 800488e:	4770      	bx	lr

08004890 <__swhatbuf_r>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	000e      	movs	r6, r1
 8004894:	001d      	movs	r5, r3
 8004896:	230e      	movs	r3, #14
 8004898:	5ec9      	ldrsh	r1, [r1, r3]
 800489a:	0014      	movs	r4, r2
 800489c:	b096      	sub	sp, #88	@ 0x58
 800489e:	2900      	cmp	r1, #0
 80048a0:	da0c      	bge.n	80048bc <__swhatbuf_r+0x2c>
 80048a2:	89b2      	ldrh	r2, [r6, #12]
 80048a4:	2380      	movs	r3, #128	@ 0x80
 80048a6:	0011      	movs	r1, r2
 80048a8:	4019      	ands	r1, r3
 80048aa:	421a      	tst	r2, r3
 80048ac:	d114      	bne.n	80048d8 <__swhatbuf_r+0x48>
 80048ae:	2380      	movs	r3, #128	@ 0x80
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	2000      	movs	r0, #0
 80048b4:	6029      	str	r1, [r5, #0]
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	b016      	add	sp, #88	@ 0x58
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	466a      	mov	r2, sp
 80048be:	f000 f853 	bl	8004968 <_fstat_r>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	dbed      	blt.n	80048a2 <__swhatbuf_r+0x12>
 80048c6:	23f0      	movs	r3, #240	@ 0xf0
 80048c8:	9901      	ldr	r1, [sp, #4]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	4019      	ands	r1, r3
 80048ce:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <__swhatbuf_r+0x50>)
 80048d0:	18c9      	adds	r1, r1, r3
 80048d2:	424b      	negs	r3, r1
 80048d4:	4159      	adcs	r1, r3
 80048d6:	e7ea      	b.n	80048ae <__swhatbuf_r+0x1e>
 80048d8:	2100      	movs	r1, #0
 80048da:	2340      	movs	r3, #64	@ 0x40
 80048dc:	e7e9      	b.n	80048b2 <__swhatbuf_r+0x22>
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	ffffe000 	.word	0xffffe000

080048e4 <__smakebuf_r>:
 80048e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e6:	2602      	movs	r6, #2
 80048e8:	898b      	ldrh	r3, [r1, #12]
 80048ea:	0005      	movs	r5, r0
 80048ec:	000c      	movs	r4, r1
 80048ee:	b085      	sub	sp, #20
 80048f0:	4233      	tst	r3, r6
 80048f2:	d007      	beq.n	8004904 <__smakebuf_r+0x20>
 80048f4:	0023      	movs	r3, r4
 80048f6:	3347      	adds	r3, #71	@ 0x47
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	6123      	str	r3, [r4, #16]
 80048fc:	2301      	movs	r3, #1
 80048fe:	6163      	str	r3, [r4, #20]
 8004900:	b005      	add	sp, #20
 8004902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004904:	ab03      	add	r3, sp, #12
 8004906:	aa02      	add	r2, sp, #8
 8004908:	f7ff ffc2 	bl	8004890 <__swhatbuf_r>
 800490c:	9f02      	ldr	r7, [sp, #8]
 800490e:	9001      	str	r0, [sp, #4]
 8004910:	0039      	movs	r1, r7
 8004912:	0028      	movs	r0, r5
 8004914:	f7ff f8f4 	bl	8003b00 <_malloc_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	d108      	bne.n	800492e <__smakebuf_r+0x4a>
 800491c:	220c      	movs	r2, #12
 800491e:	5ea3      	ldrsh	r3, [r4, r2]
 8004920:	059a      	lsls	r2, r3, #22
 8004922:	d4ed      	bmi.n	8004900 <__smakebuf_r+0x1c>
 8004924:	2203      	movs	r2, #3
 8004926:	4393      	bics	r3, r2
 8004928:	431e      	orrs	r6, r3
 800492a:	81a6      	strh	r6, [r4, #12]
 800492c:	e7e2      	b.n	80048f4 <__smakebuf_r+0x10>
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	89a2      	ldrh	r2, [r4, #12]
 8004932:	6020      	str	r0, [r4, #0]
 8004934:	4313      	orrs	r3, r2
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	9b03      	ldr	r3, [sp, #12]
 800493a:	6120      	str	r0, [r4, #16]
 800493c:	6167      	str	r7, [r4, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <__smakebuf_r+0x78>
 8004942:	0028      	movs	r0, r5
 8004944:	230e      	movs	r3, #14
 8004946:	5ee1      	ldrsh	r1, [r4, r3]
 8004948:	f000 f820 	bl	800498c <_isatty_r>
 800494c:	2800      	cmp	r0, #0
 800494e:	d005      	beq.n	800495c <__smakebuf_r+0x78>
 8004950:	2303      	movs	r3, #3
 8004952:	89a2      	ldrh	r2, [r4, #12]
 8004954:	439a      	bics	r2, r3
 8004956:	3b02      	subs	r3, #2
 8004958:	4313      	orrs	r3, r2
 800495a:	81a3      	strh	r3, [r4, #12]
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	9a01      	ldr	r2, [sp, #4]
 8004960:	4313      	orrs	r3, r2
 8004962:	81a3      	strh	r3, [r4, #12]
 8004964:	e7cc      	b.n	8004900 <__smakebuf_r+0x1c>
	...

08004968 <_fstat_r>:
 8004968:	2300      	movs	r3, #0
 800496a:	b570      	push	{r4, r5, r6, lr}
 800496c:	4d06      	ldr	r5, [pc, #24]	@ (8004988 <_fstat_r+0x20>)
 800496e:	0004      	movs	r4, r0
 8004970:	0008      	movs	r0, r1
 8004972:	0011      	movs	r1, r2
 8004974:	602b      	str	r3, [r5, #0]
 8004976:	f7fc f989 	bl	8000c8c <_fstat>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	d103      	bne.n	8004986 <_fstat_r+0x1e>
 800497e:	682b      	ldr	r3, [r5, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d000      	beq.n	8004986 <_fstat_r+0x1e>
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	200005d4 	.word	0x200005d4

0800498c <_isatty_r>:
 800498c:	2300      	movs	r3, #0
 800498e:	b570      	push	{r4, r5, r6, lr}
 8004990:	4d06      	ldr	r5, [pc, #24]	@ (80049ac <_isatty_r+0x20>)
 8004992:	0004      	movs	r4, r0
 8004994:	0008      	movs	r0, r1
 8004996:	602b      	str	r3, [r5, #0]
 8004998:	f7fc f986 	bl	8000ca8 <_isatty>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d103      	bne.n	80049a8 <_isatty_r+0x1c>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d000      	beq.n	80049a8 <_isatty_r+0x1c>
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	200005d4 	.word	0x200005d4

080049b0 <_init>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr

080049bc <_fini>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr
