
random_apple_spawn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080039a4  080039a4  000049a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003abc  08003abc  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003abc  08003abc  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003abc  08003abc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003abc  08003abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ac0  08003ac0  00004ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ac4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000068  08003b2c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003b2c  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000971d  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1d  00000000  00000000  0000e7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  000103d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d1  00000000  00000000  00010b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a14  00000000  00000000  00011149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac5a  00000000  00000000  00023b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006aaed  00000000  00000000  0002e7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000992a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f4  00000000  00000000  000992e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0009b5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800398c 	.word	0x0800398c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800398c 	.word	0x0800398c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fae2 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f810 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8bc 	bl	80003bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000244:	f000 f89c 	bl	8000380 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000248:	f000 f86a 	bl	8000320 <MX_USART1_UART_Init>
  srand(HAL_GetTick()); // Ініціалізація випадкових чисел
 800024c:	f000 fb32 	bl	80008b4 <HAL_GetTick>
 8000250:	0003      	movs	r3, r0
 8000252:	0018      	movs	r0, r3
 8000254:	f002 fb92 	bl	800297c <srand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(100); // Маленька пауза для стабільності
 8000258:	2064      	movs	r0, #100	@ 0x64
 800025a:	f000 fb35 	bl	80008c8 <HAL_Delay>
 800025e:	e7fb      	b.n	8000258 <main+0x24>

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b097      	sub	sp, #92	@ 0x5c
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2428      	movs	r4, #40	@ 0x28
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2330      	movs	r3, #48	@ 0x30
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 fcc3 	bl	8002bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	2318      	movs	r3, #24
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f002 fcbb 	bl	8002bfc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f002 fcb4 	bl	8002bfc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000294:	0021      	movs	r1, r4
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2201      	movs	r2, #1
 800029a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2201      	movs	r2, #1
 80002a0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2280      	movs	r2, #128	@ 0x80
 80002ac:	0252      	lsls	r2, r2, #9
 80002ae:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2280      	movs	r2, #128	@ 0x80
 80002b4:	0352      	lsls	r2, r2, #13
 80002b6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 ff15 	bl	80010f0 <HAL_RCC_OscConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ca:	f000 f8cf 	bl	800046c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	2118      	movs	r1, #24
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2207      	movs	r2, #7
 80002d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2101      	movs	r1, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fa19 	bl	8001724 <HAL_RCC_ClockConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002f6:	f000 f8b9 	bl	800046c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2201      	movs	r2, #1
 80002fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fb4f 	bl	80019ac <HAL_RCCEx_PeriphCLKConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000312:	f000 f8ab 	bl	800046c <Error_Handler>
  }
}
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b017      	add	sp, #92	@ 0x5c
 800031c:	bd90      	pop	{r4, r7, pc}
	...

08000320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000324:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 8000326:	4a15      	ldr	r2, [pc, #84]	@ (800037c <MX_USART1_UART_Init+0x5c>)
 8000328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800032a:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 800032c:	2296      	movs	r2, #150	@ 0x96
 800032e:	0192      	lsls	r2, r2, #6
 8000330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000332:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000338:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 8000346:	220c      	movs	r2, #12
 8000348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000362:	4b05      	ldr	r3, [pc, #20]	@ (8000378 <MX_USART1_UART_Init+0x58>)
 8000364:	0018      	movs	r0, r3
 8000366:	f001 fbff 	bl	8001b68 <HAL_UART_Init>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800036e:	f000 f87d 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000084 	.word	0x20000084
 800037c:	40013800 	.word	0x40013800

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_DMA_Init+0x38>)
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <MX_DMA_Init+0x38>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	615a      	str	r2, [r3, #20]
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_DMA_Init+0x38>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	200a      	movs	r0, #10
 80003a4:	f000 fb60 	bl	8000a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003a8:	200a      	movs	r0, #10
 80003aa:	f000 fb72 	bl	8000a92 <HAL_NVIC_EnableIRQ>

}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	b002      	add	sp, #8
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			@ (mov r8, r8)
 80003b8:	40021000 	.word	0x40021000

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b590      	push	{r4, r7, lr}
 80003be:	b089      	sub	sp, #36	@ 0x24
 80003c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	240c      	movs	r4, #12
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	0018      	movs	r0, r3
 80003c8:	2314      	movs	r3, #20
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 fc15 	bl	8002bfc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003d2:	4b24      	ldr	r3, [pc, #144]	@ (8000464 <MX_GPIO_Init+0xa8>)
 80003d4:	695a      	ldr	r2, [r3, #20]
 80003d6:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_GPIO_Init+0xa8>)
 80003d8:	2180      	movs	r1, #128	@ 0x80
 80003da:	03c9      	lsls	r1, r1, #15
 80003dc:	430a      	orrs	r2, r1
 80003de:	615a      	str	r2, [r3, #20]
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_GPIO_Init+0xa8>)
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	2380      	movs	r3, #128	@ 0x80
 80003e6:	03db      	lsls	r3, r3, #15
 80003e8:	4013      	ands	r3, r2
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_GPIO_Init+0xa8>)
 80003f0:	695a      	ldr	r2, [r3, #20]
 80003f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000464 <MX_GPIO_Init+0xa8>)
 80003f4:	2180      	movs	r1, #128	@ 0x80
 80003f6:	0309      	lsls	r1, r1, #12
 80003f8:	430a      	orrs	r2, r1
 80003fa:	615a      	str	r2, [r3, #20]
 80003fc:	4b19      	ldr	r3, [pc, #100]	@ (8000464 <MX_GPIO_Init+0xa8>)
 80003fe:	695a      	ldr	r2, [r3, #20]
 8000400:	2380      	movs	r3, #128	@ 0x80
 8000402:	031b      	lsls	r3, r3, #12
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b16      	ldr	r3, [pc, #88]	@ (8000464 <MX_GPIO_Init+0xa8>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <MX_GPIO_Init+0xa8>)
 8000410:	2180      	movs	r1, #128	@ 0x80
 8000412:	0289      	lsls	r1, r1, #10
 8000414:	430a      	orrs	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <MX_GPIO_Init+0xa8>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	2380      	movs	r3, #128	@ 0x80
 800041e:	029b      	lsls	r3, r3, #10
 8000420:	4013      	ands	r3, r2
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000426:	23c0      	movs	r3, #192	@ 0xc0
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	480f      	ldr	r0, [pc, #60]	@ (8000468 <MX_GPIO_Init+0xac>)
 800042c:	2200      	movs	r2, #0
 800042e:	0019      	movs	r1, r3
 8000430:	f000 fe40 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	22c0      	movs	r2, #192	@ 0xc0
 8000438:	0092      	lsls	r2, r2, #2
 800043a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2201      	movs	r2, #1
 8000440:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800044e:	193b      	adds	r3, r7, r4
 8000450:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <MX_GPIO_Init+0xac>)
 8000452:	0019      	movs	r1, r3
 8000454:	0010      	movs	r0, r2
 8000456:	f000 fcbd 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b009      	add	sp, #36	@ 0x24
 8000460:	bd90      	pop	{r4, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	40021000 	.word	0x40021000
 8000468:	48000800 	.word	0x48000800

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	e7fd      	b.n	8000474 <Error_Handler+0x8>

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x44>)
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <HAL_MspInit+0x44>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	619a      	str	r2, [r3, #24]
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_MspInit+0x44>)
 8000498:	69da      	ldr	r2, [r3, #28]
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <HAL_MspInit+0x44>)
 800049c:	2180      	movs	r1, #128	@ 0x80
 800049e:	0549      	lsls	r1, r1, #21
 80004a0:	430a      	orrs	r2, r1
 80004a2:	61da      	str	r2, [r3, #28]
 80004a4:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <HAL_MspInit+0x44>)
 80004a6:	69da      	ldr	r2, [r3, #28]
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	055b      	lsls	r3, r3, #21
 80004ac:	4013      	ands	r3, r2
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	@ 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	2414      	movs	r4, #20
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	0018      	movs	r0, r3
 80004ce:	2314      	movs	r3, #20
 80004d0:	001a      	movs	r2, r3
 80004d2:	2100      	movs	r1, #0
 80004d4:	f002 fb92 	bl	8002bfc <memset>
  if(huart->Instance==USART1)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a34      	ldr	r2, [pc, #208]	@ (80005b0 <HAL_UART_MspInit+0xf0>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d161      	bne.n	80005a6 <HAL_UART_MspInit+0xe6>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004e2:	4b34      	ldr	r3, [pc, #208]	@ (80005b4 <HAL_UART_MspInit+0xf4>)
 80004e4:	699a      	ldr	r2, [r3, #24]
 80004e6:	4b33      	ldr	r3, [pc, #204]	@ (80005b4 <HAL_UART_MspInit+0xf4>)
 80004e8:	2180      	movs	r1, #128	@ 0x80
 80004ea:	01c9      	lsls	r1, r1, #7
 80004ec:	430a      	orrs	r2, r1
 80004ee:	619a      	str	r2, [r3, #24]
 80004f0:	4b30      	ldr	r3, [pc, #192]	@ (80005b4 <HAL_UART_MspInit+0xf4>)
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	2380      	movs	r3, #128	@ 0x80
 80004f6:	01db      	lsls	r3, r3, #7
 80004f8:	4013      	ands	r3, r2
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	4b2d      	ldr	r3, [pc, #180]	@ (80005b4 <HAL_UART_MspInit+0xf4>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b2c      	ldr	r3, [pc, #176]	@ (80005b4 <HAL_UART_MspInit+0xf4>)
 8000504:	2180      	movs	r1, #128	@ 0x80
 8000506:	0289      	lsls	r1, r1, #10
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <HAL_UART_MspInit+0xf4>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	029b      	lsls	r3, r3, #10
 8000514:	4013      	ands	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	22c0      	movs	r2, #192	@ 0xc0
 800051e:	00d2      	lsls	r2, r2, #3
 8000520:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2203      	movs	r2, #3
 8000534:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2201      	movs	r2, #1
 800053a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	187a      	adds	r2, r7, r1
 800053e:	2390      	movs	r3, #144	@ 0x90
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fc45 	bl	8000dd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800054a:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 800054c:	4a1b      	ldr	r2, [pc, #108]	@ (80005bc <HAL_UART_MspInit+0xfc>)
 800054e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000550:	4b19      	ldr	r3, [pc, #100]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000556:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800055c:	4b16      	ldr	r3, [pc, #88]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000562:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000568:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000574:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800057a:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 800057c:	0018      	movs	r0, r3
 800057e:	f000 faa5 	bl	8000acc <HAL_DMA_Init>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000586:	f7ff ff71 	bl	800046c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 800058e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000590:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <HAL_UART_MspInit+0xf8>)
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	201b      	movs	r0, #27
 800059c:	f000 fa64 	bl	8000a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005a0:	201b      	movs	r0, #27
 80005a2:	f000 fa76 	bl	8000a92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b00b      	add	sp, #44	@ 0x2c
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	40013800 	.word	0x40013800
 80005b4:	40021000 	.word	0x40021000
 80005b8:	2000010c 	.word	0x2000010c
 80005bc:	40020030 	.word	0x40020030

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	e7fd      	b.n	80005c4 <NMI_Handler+0x4>

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	e7fd      	b.n	80005cc <HardFault_Handler+0x4>

080005d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e8:	f000 f952 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ec:	46c0      	nop			@ (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <DMA1_Channel2_3_IRQHandler+0x14>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fb2b 	bl	8000c56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	2000010c 	.word	0x2000010c

0800060c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000610:	4b03      	ldr	r3, [pc, #12]	@ (8000620 <USART1_IRQHandler+0x14>)
 8000612:	0018      	movs	r0, r3
 8000614:	f001 fafc 	bl	8001c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	20000084 	.word	0x20000084

08000624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  return 1;
 8000628:	2301      	movs	r3, #1
}
 800062a:	0018      	movs	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <_kill>:

int _kill(int pid, int sig)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800063a:	f002 fb35 	bl	8002ca8 <__errno>
 800063e:	0003      	movs	r3, r0
 8000640:	2216      	movs	r2, #22
 8000642:	601a      	str	r2, [r3, #0]
  return -1;
 8000644:	2301      	movs	r3, #1
 8000646:	425b      	negs	r3, r3
}
 8000648:	0018      	movs	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}

08000650 <_exit>:

void _exit (int status)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000658:	2301      	movs	r3, #1
 800065a:	425a      	negs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ffe5 	bl	8000630 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	e7fd      	b.n	8000666 <_exit+0x16>

0800066a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e00a      	b.n	8000692 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800067c:	e000      	b.n	8000680 <_read+0x16>
 800067e:	bf00      	nop
 8000680:	0001      	movs	r1, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	60ba      	str	r2, [r7, #8]
 8000688:	b2ca      	uxtb	r2, r1
 800068a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	dbf0      	blt.n	800067c <_read+0x12>
  }

  return len;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	b006      	add	sp, #24
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e009      	b.n	80006ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	60ba      	str	r2, [r7, #8]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	0018      	movs	r0, r3
 80006c0:	e000      	b.n	80006c4 <_write+0x20>
 80006c2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dbf1      	blt.n	80006b6 <_write+0x12>
  }
  return len;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b006      	add	sp, #24
 80006da:	bd80      	pop	{r7, pc}

080006dc <_close>:

int _close(int file)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	425b      	negs	r3, r3
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	0192      	lsls	r2, r2, #6
 8000700:	605a      	str	r2, [r3, #4]
  return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bd80      	pop	{r7, pc}

0800070c <_isatty>:

int _isatty(int file)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000714:	2301      	movs	r3, #1
}
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}

0800071e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	60f8      	str	r0, [r7, #12]
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	b004      	add	sp, #16
 8000732:	bd80      	pop	{r7, pc}

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f002 faa0 	bl	8002ca8 <__errno>
 8000768:	0003      	movs	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	2301      	movs	r3, #1
 8000770:	425b      	negs	r3, r3
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	18d2      	adds	r2, r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <_sbrk+0x64>)
 8000784:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	b006      	add	sp, #24
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20002000 	.word	0x20002000
 8000794:	00000400 	.word	0x00000400
 8000798:	20000150 	.word	0x20000150
 800079c:	200002a8 	.word	0x200002a8

080007a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ac:	480d      	ldr	r0, [pc, #52]	@ (80007e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ae:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80007b0:	f7ff fff6 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	@ (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	@ (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007da:	f002 fa6b 	bl	8002cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fd29 	bl	8000234 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   r0, =_estack
 80007e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007f0:	08003ac4 	.word	0x08003ac4
  ldr r2, =_sbss
 80007f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007f8:	200002a4 	.word	0x200002a4

080007fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_COMP_IRQHandler>
	...

08000800 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <HAL_Init+0x24>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_Init+0x24>)
 800080a:	2110      	movs	r1, #16
 800080c:	430a      	orrs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f809 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000816:	f7ff fe2f 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
}
 800081c:	0018      	movs	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <HAL_InitTick+0x5c>)
 8000832:	681c      	ldr	r4, [r3, #0]
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <HAL_InitTick+0x60>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	0019      	movs	r1, r3
 800083a:	23fa      	movs	r3, #250	@ 0xfa
 800083c:	0098      	lsls	r0, r3, #2
 800083e:	f7ff fc6d 	bl	800011c <__udivsi3>
 8000842:	0003      	movs	r3, r0
 8000844:	0019      	movs	r1, r3
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff fc68 	bl	800011c <__udivsi3>
 800084c:	0003      	movs	r3, r0
 800084e:	0018      	movs	r0, r3
 8000850:	f000 f92f 	bl	8000ab2 <HAL_SYSTICK_Config>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e00f      	b.n	800087c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d80b      	bhi.n	800087a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2301      	movs	r3, #1
 8000866:	425b      	negs	r3, r3
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f000 f8fc 	bl	8000a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_InitTick+0x64>)
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b003      	add	sp, #12
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001a      	movs	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	18d2      	adds	r2, r2, r3
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <HAL_IncTick+0x20>)
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000154 	.word	0x20000154

080008b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	@ (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	20000154 	.word	0x20000154

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff fff0 	bl	80008b4 <HAL_GetTick>
 80008d4:	0003      	movs	r3, r0
 80008d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3301      	adds	r3, #1
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	001a      	movs	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	189b      	adds	r3, r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	f7ff ffe0 	bl	80008b4 <HAL_GetTick>
 80008f4:	0002      	movs	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	20000008 	.word	0x20000008

08000910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b7f      	cmp	r3, #127	@ 0x7f
 8000922:	d809      	bhi.n	8000938 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	001a      	movs	r2, r3
 800092a:	231f      	movs	r3, #31
 800092c:	401a      	ands	r2, r3
 800092e:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <__NVIC_EnableIRQ+0x30>)
 8000930:	2101      	movs	r1, #1
 8000932:	4091      	lsls	r1, r2
 8000934:	000a      	movs	r2, r1
 8000936:	601a      	str	r2, [r3, #0]
  }
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b7f      	cmp	r3, #127	@ 0x7f
 8000958:	d828      	bhi.n	80009ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a18 <__NVIC_SetPriority+0xd4>)
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25b      	sxtb	r3, r3
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	33c0      	adds	r3, #192	@ 0xc0
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	589b      	ldr	r3, [r3, r2]
 800096a:	1dfa      	adds	r2, r7, #7
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	0011      	movs	r1, r2
 8000970:	2203      	movs	r2, #3
 8000972:	400a      	ands	r2, r1
 8000974:	00d2      	lsls	r2, r2, #3
 8000976:	21ff      	movs	r1, #255	@ 0xff
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	43d2      	mvns	r2, r2
 800097e:	401a      	ands	r2, r3
 8000980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	22ff      	movs	r2, #255	@ 0xff
 8000988:	401a      	ands	r2, r3
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0018      	movs	r0, r3
 8000990:	2303      	movs	r3, #3
 8000992:	4003      	ands	r3, r0
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000998:	481f      	ldr	r0, [pc, #124]	@ (8000a18 <__NVIC_SetPriority+0xd4>)
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	430a      	orrs	r2, r1
 80009a4:	33c0      	adds	r3, #192	@ 0xc0
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009aa:	e031      	b.n	8000a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	4a1b      	ldr	r2, [pc, #108]	@ (8000a1c <__NVIC_SetPriority+0xd8>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0019      	movs	r1, r3
 80009b4:	230f      	movs	r3, #15
 80009b6:	400b      	ands	r3, r1
 80009b8:	3b08      	subs	r3, #8
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3306      	adds	r3, #6
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	3304      	adds	r3, #4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1dfa      	adds	r2, r7, #7
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	0011      	movs	r1, r2
 80009cc:	2203      	movs	r2, #3
 80009ce:	400a      	ands	r2, r1
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	21ff      	movs	r1, #255	@ 0xff
 80009d4:	4091      	lsls	r1, r2
 80009d6:	000a      	movs	r2, r1
 80009d8:	43d2      	mvns	r2, r2
 80009da:	401a      	ands	r2, r3
 80009dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	22ff      	movs	r2, #255	@ 0xff
 80009e4:	401a      	ands	r2, r3
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0018      	movs	r0, r3
 80009ec:	2303      	movs	r3, #3
 80009ee:	4003      	ands	r3, r0
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <__NVIC_SetPriority+0xd8>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	001c      	movs	r4, r3
 80009fc:	230f      	movs	r3, #15
 80009fe:	4023      	ands	r3, r4
 8000a00:	3b08      	subs	r3, #8
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	430a      	orrs	r2, r1
 8000a06:	3306      	adds	r3, #6
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	18c3      	adds	r3, r0, r3
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b003      	add	sp, #12
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	1e5a      	subs	r2, r3, #1
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	045b      	lsls	r3, r3, #17
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d301      	bcc.n	8000a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a34:	2301      	movs	r3, #1
 8000a36:	e010      	b.n	8000a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <SysTick_Config+0x44>)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	3a01      	subs	r2, #1
 8000a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a40:	2301      	movs	r3, #1
 8000a42:	425b      	negs	r3, r3
 8000a44:	2103      	movs	r1, #3
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff ff7c 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <SysTick_Config+0x44>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <SysTick_Config+0x44>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	210f      	movs	r1, #15
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff ff5d 	bl	8000944 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	0002      	movs	r2, r0
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ff33 	bl	8000910 <__NVIC_EnableIRQ>
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	0018      	movs	r0, r3
 8000abe:	f7ff ffaf 	bl	8000a20 <SysTick_Config>
 8000ac2:	0003      	movs	r3, r0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e036      	b.n	8000b50 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2221      	movs	r2, #33	@ 0x21
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4a18      	ldr	r2, [pc, #96]	@ (8000b58 <HAL_DMA_Init+0x8c>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 f932 	bl	8000d9c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2221      	movs	r2, #33	@ 0x21
 8000b42:	2101      	movs	r1, #1
 8000b44:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2220      	movs	r2, #32
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b004      	add	sp, #16
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	ffffc00f 	.word	0xffffc00f

08000b5c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2221      	movs	r2, #33	@ 0x21
 8000b68:	5c9b      	ldrb	r3, [r3, r2]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d008      	beq.n	8000b82 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2204      	movs	r2, #4
 8000b74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2220      	movs	r2, #32
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e020      	b.n	8000bc4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	438a      	bics	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	438a      	bics	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000baa:	2101      	movs	r1, #1
 8000bac:	4091      	lsls	r1, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2221      	movs	r2, #33	@ 0x21
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd4:	210f      	movs	r1, #15
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2221      	movs	r2, #33	@ 0x21
 8000be0:	5c9b      	ldrb	r3, [r3, r2]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d006      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2204      	movs	r2, #4
 8000bec:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e028      	b.n	8000c48 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	210e      	movs	r1, #14
 8000c02:	438a      	bics	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2101      	movs	r1, #1
 8000c12:	438a      	bics	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2221      	movs	r2, #33	@ 0x21
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2220      	movs	r2, #32
 8000c32:	2100      	movs	r1, #0
 8000c34:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d004      	beq.n	8000c48 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	0010      	movs	r0, r2
 8000c46:	4798      	blx	r3
    }
  }
  return status;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	2204      	movs	r2, #4
 8000c74:	409a      	lsls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d024      	beq.n	8000cc8 <HAL_DMA_IRQHandler+0x72>
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2204      	movs	r2, #4
 8000c82:	4013      	ands	r3, r2
 8000c84:	d020      	beq.n	8000cc8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d107      	bne.n	8000ca2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000caa:	2104      	movs	r1, #4
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <HAL_DMA_IRQHandler+0x66>
 8000cba:	e06a      	b.n	8000d92 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000cc6:	e064      	b.n	8000d92 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	2202      	movs	r2, #2
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d02b      	beq.n	8000d30 <HAL_DMA_IRQHandler+0xda>
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	4013      	ands	r3, r2
 8000cde:	d027      	beq.n	8000d30 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d10b      	bne.n	8000d04 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	210a      	movs	r1, #10
 8000cf8:	438a      	bics	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2221      	movs	r2, #33	@ 0x21
 8000d00:	2101      	movs	r1, #1
 8000d02:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4091      	lsls	r1, r2
 8000d10:	000a      	movs	r2, r1
 8000d12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2220      	movs	r2, #32
 8000d18:	2100      	movs	r1, #0
 8000d1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d036      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	0010      	movs	r0, r2
 8000d2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000d2e:	e030      	b.n	8000d92 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	2208      	movs	r2, #8
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d028      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x13c>
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2208      	movs	r2, #8
 8000d44:	4013      	ands	r3, r2
 8000d46:	d024      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	210e      	movs	r1, #14
 8000d54:	438a      	bics	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d60:	2101      	movs	r1, #1
 8000d62:	4091      	lsls	r1, r2
 8000d64:	000a      	movs	r2, r1
 8000d66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2221      	movs	r2, #33	@ 0x21
 8000d72:	2101      	movs	r1, #1
 8000d74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d005      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	0010      	movs	r0, r2
 8000d8e:	4798      	blx	r3
    }
  }
}
 8000d90:	e7ff      	b.n	8000d92 <HAL_DMA_IRQHandler+0x13c>
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a08      	ldr	r2, [pc, #32]	@ (8000dcc <DMA_CalcBaseAndBitshift+0x30>)
 8000daa:	4694      	mov	ip, r2
 8000dac:	4463      	add	r3, ip
 8000dae:	2114      	movs	r1, #20
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff f9b3 	bl	800011c <__udivsi3>
 8000db6:	0003      	movs	r3, r0
 8000db8:	009a      	lsls	r2, r3, #2
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a03      	ldr	r2, [pc, #12]	@ (8000dd0 <DMA_CalcBaseAndBitshift+0x34>)
 8000dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	bffdfff8 	.word	0xbffdfff8
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e14f      	b.n	8001084 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4091      	lsls	r1, r2
 8000dee:	000a      	movs	r2, r1
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d100      	bne.n	8000dfc <HAL_GPIO_Init+0x28>
 8000dfa:	e140      	b.n	800107e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	2201      	movs	r2, #1
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	58d3      	ldr	r3, [r2, r3]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2207      	movs	r2, #7
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2107      	movs	r1, #7
 8000eea:	400b      	ands	r3, r1
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	6939      	ldr	r1, [r7, #16]
 8000f04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2203      	movs	r2, #3
 8000f24:	401a      	ands	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	23c0      	movs	r3, #192	@ 0xc0
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4013      	ands	r3, r2
 8000f44:	d100      	bne.n	8000f48 <HAL_GPIO_Init+0x174>
 8000f46:	e09a      	b.n	800107e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b54      	ldr	r3, [pc, #336]	@ (800109c <HAL_GPIO_Init+0x2c8>)
 8000f4a:	699a      	ldr	r2, [r3, #24]
 8000f4c:	4b53      	ldr	r3, [pc, #332]	@ (800109c <HAL_GPIO_Init+0x2c8>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	430a      	orrs	r2, r1
 8000f52:	619a      	str	r2, [r3, #24]
 8000f54:	4b51      	ldr	r3, [pc, #324]	@ (800109c <HAL_GPIO_Init+0x2c8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f60:	4a4f      	ldr	r2, [pc, #316]	@ (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	589b      	ldr	r3, [r3, r2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2203      	movs	r2, #3
 8000f72:	4013      	ands	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	2390      	movs	r3, #144	@ 0x90
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a44      	ldr	r2, [pc, #272]	@ (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x1de>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a43      	ldr	r2, [pc, #268]	@ (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x1da>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a42      	ldr	r2, [pc, #264]	@ (80010ac <HAL_GPIO_Init+0x2d8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x1d6>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x1e4>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x1e4>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x1e4>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x1e4>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	2103      	movs	r1, #3
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc8:	4935      	ldr	r1, [pc, #212]	@ (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b36      	ldr	r3, [pc, #216]	@ (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	035b      	lsls	r3, r3, #13
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001000:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <HAL_GPIO_Init+0x2dc>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	039b      	lsls	r3, r3, #14
 8001018:	4013      	ands	r3, r2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <HAL_GPIO_Init+0x2dc>)
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800102a:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <HAL_GPIO_Init+0x2dc>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43da      	mvns	r2, r3
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	2380      	movs	r3, #128	@ 0x80
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800104e:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <HAL_GPIO_Init+0x2dc>)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <HAL_GPIO_Init+0x2dc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43da      	mvns	r2, r3
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	4013      	ands	r3, r2
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <HAL_GPIO_Init+0x2dc>)
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	40da      	lsrs	r2, r3
 800108c:	1e13      	subs	r3, r2, #0
 800108e:	d000      	beq.n	8001092 <HAL_GPIO_Init+0x2be>
 8001090:	e6a8      	b.n	8000de4 <HAL_GPIO_Init+0x10>
  } 
}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	48000400 	.word	0x48000400
 80010a8:	48000800 	.word	0x48000800
 80010ac:	48000c00 	.word	0x48000c00
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	0008      	movs	r0, r1
 80010be:	0011      	movs	r1, r2
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	1c02      	adds	r2, r0, #0
 80010c4:	801a      	strh	r2, [r3, #0]
 80010c6:	1c7b      	adds	r3, r7, #1
 80010c8:	1c0a      	adds	r2, r1, #0
 80010ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010cc:	1c7b      	adds	r3, r7, #1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d4:	1cbb      	adds	r3, r7, #2
 80010d6:	881a      	ldrh	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010de:	1cbb      	adds	r3, r7, #2
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e301      	b.n	8001706 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2201      	movs	r2, #1
 8001108:	4013      	ands	r3, r2
 800110a:	d100      	bne.n	800110e <HAL_RCC_OscConfig+0x1e>
 800110c:	e08d      	b.n	800122a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800110e:	4bc3      	ldr	r3, [pc, #780]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	220c      	movs	r2, #12
 8001114:	4013      	ands	r3, r2
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00e      	beq.n	8001138 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800111a:	4bc0      	ldr	r3, [pc, #768]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	220c      	movs	r2, #12
 8001120:	4013      	ands	r3, r2
 8001122:	2b08      	cmp	r3, #8
 8001124:	d116      	bne.n	8001154 <HAL_RCC_OscConfig+0x64>
 8001126:	4bbd      	ldr	r3, [pc, #756]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	2380      	movs	r3, #128	@ 0x80
 800112c:	025b      	lsls	r3, r3, #9
 800112e:	401a      	ands	r2, r3
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	025b      	lsls	r3, r3, #9
 8001134:	429a      	cmp	r2, r3
 8001136:	d10d      	bne.n	8001154 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4bb8      	ldr	r3, [pc, #736]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	4013      	ands	r3, r2
 8001142:	d100      	bne.n	8001146 <HAL_RCC_OscConfig+0x56>
 8001144:	e070      	b.n	8001228 <HAL_RCC_OscConfig+0x138>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d000      	beq.n	8001150 <HAL_RCC_OscConfig+0x60>
 800114e:	e06b      	b.n	8001228 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e2d8      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d107      	bne.n	800116c <HAL_RCC_OscConfig+0x7c>
 800115c:	4baf      	ldr	r3, [pc, #700]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4bae      	ldr	r3, [pc, #696]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001162:	2180      	movs	r1, #128	@ 0x80
 8001164:	0249      	lsls	r1, r1, #9
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	e02f      	b.n	80011cc <HAL_RCC_OscConfig+0xdc>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10c      	bne.n	800118e <HAL_RCC_OscConfig+0x9e>
 8001174:	4ba9      	ldr	r3, [pc, #676]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4ba8      	ldr	r3, [pc, #672]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800117a:	49a9      	ldr	r1, [pc, #676]	@ (8001420 <HAL_RCC_OscConfig+0x330>)
 800117c:	400a      	ands	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	4ba6      	ldr	r3, [pc, #664]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4ba5      	ldr	r3, [pc, #660]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001186:	49a7      	ldr	r1, [pc, #668]	@ (8001424 <HAL_RCC_OscConfig+0x334>)
 8001188:	400a      	ands	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e01e      	b.n	80011cc <HAL_RCC_OscConfig+0xdc>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d10e      	bne.n	80011b4 <HAL_RCC_OscConfig+0xc4>
 8001196:	4ba1      	ldr	r3, [pc, #644]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4ba0      	ldr	r3, [pc, #640]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	02c9      	lsls	r1, r1, #11
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	4b9d      	ldr	r3, [pc, #628]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b9c      	ldr	r3, [pc, #624]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80011aa:	2180      	movs	r1, #128	@ 0x80
 80011ac:	0249      	lsls	r1, r1, #9
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e00b      	b.n	80011cc <HAL_RCC_OscConfig+0xdc>
 80011b4:	4b99      	ldr	r3, [pc, #612]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b98      	ldr	r3, [pc, #608]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80011ba:	4999      	ldr	r1, [pc, #612]	@ (8001420 <HAL_RCC_OscConfig+0x330>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	4b96      	ldr	r3, [pc, #600]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b95      	ldr	r3, [pc, #596]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80011c6:	4997      	ldr	r1, [pc, #604]	@ (8001424 <HAL_RCC_OscConfig+0x334>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d014      	beq.n	80011fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb6e 	bl	80008b4 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011de:	f7ff fb69 	bl	80008b4 <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b64      	cmp	r3, #100	@ 0x64
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e28a      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f0:	4b8a      	ldr	r3, [pc, #552]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0xee>
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fb59 	bl	80008b4 <HAL_GetTick>
 8001202:	0003      	movs	r3, r0
 8001204:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fb54 	bl	80008b4 <HAL_GetTick>
 800120c:	0002      	movs	r2, r0
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	@ 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e275      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	4b80      	ldr	r3, [pc, #512]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x118>
 8001226:	e000      	b.n	800122a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x146>
 8001234:	e069      	b.n	800130a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001236:	4b79      	ldr	r3, [pc, #484]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	220c      	movs	r2, #12
 800123c:	4013      	ands	r3, r2
 800123e:	d00b      	beq.n	8001258 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001240:	4b76      	ldr	r3, [pc, #472]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	220c      	movs	r2, #12
 8001246:	4013      	ands	r3, r2
 8001248:	2b08      	cmp	r3, #8
 800124a:	d11c      	bne.n	8001286 <HAL_RCC_OscConfig+0x196>
 800124c:	4b73      	ldr	r3, [pc, #460]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	4013      	ands	r3, r2
 8001256:	d116      	bne.n	8001286 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001258:	4b70      	ldr	r3, [pc, #448]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d005      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d001      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e24b      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126e:	4b6b      	ldr	r3, [pc, #428]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	22f8      	movs	r2, #248	@ 0xf8
 8001274:	4393      	bics	r3, r2
 8001276:	0019      	movs	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	00da      	lsls	r2, r3, #3
 800127e:	4b67      	ldr	r3, [pc, #412]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001284:	e041      	b.n	800130a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d024      	beq.n	80012d8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128e:	4b63      	ldr	r3, [pc, #396]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b62      	ldr	r3, [pc, #392]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001294:	2101      	movs	r1, #1
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fb0b 	bl	80008b4 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb06 	bl	80008b4 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e227      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4b59      	ldr	r3, [pc, #356]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d0f1      	beq.n	80012a4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b56      	ldr	r3, [pc, #344]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	22f8      	movs	r2, #248	@ 0xf8
 80012c6:	4393      	bics	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00da      	lsls	r2, r3, #3
 80012d0:	4b52      	ldr	r3, [pc, #328]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e018      	b.n	800130a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d8:	4b50      	ldr	r3, [pc, #320]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b4f      	ldr	r3, [pc, #316]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80012de:	2101      	movs	r1, #1
 80012e0:	438a      	bics	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fae6 	bl	80008b4 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fae1 	bl	80008b4 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e202      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001300:	4b46      	ldr	r3, [pc, #280]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2202      	movs	r2, #2
 8001306:	4013      	ands	r3, r2
 8001308:	d1f1      	bne.n	80012ee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2208      	movs	r2, #8
 8001310:	4013      	ands	r3, r2
 8001312:	d036      	beq.n	8001382 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d019      	beq.n	8001350 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131c:	4b3f      	ldr	r3, [pc, #252]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800131e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001320:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001322:	2101      	movs	r1, #1
 8001324:	430a      	orrs	r2, r1
 8001326:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff fac4 	bl	80008b4 <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fabf 	bl	80008b4 <HAL_GetTick>
 8001336:	0002      	movs	r2, r0
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1e0      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001344:	4b35      	ldr	r3, [pc, #212]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	2202      	movs	r2, #2
 800134a:	4013      	ands	r3, r2
 800134c:	d0f1      	beq.n	8001332 <HAL_RCC_OscConfig+0x242>
 800134e:	e018      	b.n	8001382 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001350:	4b32      	ldr	r3, [pc, #200]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001354:	4b31      	ldr	r3, [pc, #196]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001356:	2101      	movs	r1, #1
 8001358:	438a      	bics	r2, r1
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff faaa 	bl	80008b4 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff faa5 	bl	80008b4 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e1c6      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d1f1      	bne.n	8001366 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2204      	movs	r2, #4
 8001388:	4013      	ands	r3, r2
 800138a:	d100      	bne.n	800138e <HAL_RCC_OscConfig+0x29e>
 800138c:	e0b4      	b.n	80014f8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138e:	201f      	movs	r0, #31
 8001390:	183b      	adds	r3, r7, r0
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001396:	4b21      	ldr	r3, [pc, #132]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001398:	69da      	ldr	r2, [r3, #28]
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	055b      	lsls	r3, r3, #21
 800139e:	4013      	ands	r3, r2
 80013a0:	d110      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80013a4:	69da      	ldr	r2, [r3, #28]
 80013a6:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	0549      	lsls	r1, r1, #21
 80013ac:	430a      	orrs	r2, r1
 80013ae:	61da      	str	r2, [r3, #28]
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 80013b2:	69da      	ldr	r2, [r3, #28]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	055b      	lsls	r3, r3, #21
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013be:	183b      	adds	r3, r7, r0
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <HAL_RCC_OscConfig+0x338>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4013      	ands	r3, r2
 80013ce:	d11a      	bne.n	8001406 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_RCC_OscConfig+0x338>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_RCC_OscConfig+0x338>)
 80013d6:	2180      	movs	r1, #128	@ 0x80
 80013d8:	0049      	lsls	r1, r1, #1
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013de:	f7ff fa69 	bl	80008b4 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff fa64 	bl	80008b4 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e185      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_RCC_OscConfig+0x338>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	2380      	movs	r3, #128	@ 0x80
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4013      	ands	r3, r2
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10e      	bne.n	800142c <HAL_RCC_OscConfig+0x33c>
 800140e:	4b03      	ldr	r3, [pc, #12]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b02      	ldr	r3, [pc, #8]	@ (800141c <HAL_RCC_OscConfig+0x32c>)
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	621a      	str	r2, [r3, #32]
 800141a:	e035      	b.n	8001488 <HAL_RCC_OscConfig+0x398>
 800141c:	40021000 	.word	0x40021000
 8001420:	fffeffff 	.word	0xfffeffff
 8001424:	fffbffff 	.word	0xfffbffff
 8001428:	40007000 	.word	0x40007000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10c      	bne.n	800144e <HAL_RCC_OscConfig+0x35e>
 8001434:	4bb6      	ldr	r3, [pc, #728]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	4bb5      	ldr	r3, [pc, #724]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800143a:	2101      	movs	r1, #1
 800143c:	438a      	bics	r2, r1
 800143e:	621a      	str	r2, [r3, #32]
 8001440:	4bb3      	ldr	r3, [pc, #716]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	4bb2      	ldr	r3, [pc, #712]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001446:	2104      	movs	r1, #4
 8001448:	438a      	bics	r2, r1
 800144a:	621a      	str	r2, [r3, #32]
 800144c:	e01c      	b.n	8001488 <HAL_RCC_OscConfig+0x398>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b05      	cmp	r3, #5
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x380>
 8001456:	4bae      	ldr	r3, [pc, #696]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001458:	6a1a      	ldr	r2, [r3, #32]
 800145a:	4bad      	ldr	r3, [pc, #692]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800145c:	2104      	movs	r1, #4
 800145e:	430a      	orrs	r2, r1
 8001460:	621a      	str	r2, [r3, #32]
 8001462:	4bab      	ldr	r3, [pc, #684]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	4baa      	ldr	r3, [pc, #680]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	621a      	str	r2, [r3, #32]
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0x398>
 8001470:	4ba7      	ldr	r3, [pc, #668]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	4ba6      	ldr	r3, [pc, #664]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001476:	2101      	movs	r1, #1
 8001478:	438a      	bics	r2, r1
 800147a:	621a      	str	r2, [r3, #32]
 800147c:	4ba4      	ldr	r3, [pc, #656]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	4ba3      	ldr	r3, [pc, #652]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001482:	2104      	movs	r1, #4
 8001484:	438a      	bics	r2, r1
 8001486:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d014      	beq.n	80014ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff fa10 	bl	80008b4 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	e009      	b.n	80014ae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fa0b 	bl	80008b4 <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	4a9b      	ldr	r2, [pc, #620]	@ (8001714 <HAL_RCC_OscConfig+0x624>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e12b      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ae:	4b98      	ldr	r3, [pc, #608]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x3aa>
 80014b8:	e013      	b.n	80014e2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff f9fb 	bl	80008b4 <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c2:	e009      	b.n	80014d8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f7ff f9f6 	bl	80008b4 <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	4a91      	ldr	r2, [pc, #580]	@ (8001714 <HAL_RCC_OscConfig+0x624>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e116      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014e2:	231f      	movs	r3, #31
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ec:	4b88      	ldr	r3, [pc, #544]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	4b87      	ldr	r3, [pc, #540]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80014f2:	4989      	ldr	r1, [pc, #548]	@ (8001718 <HAL_RCC_OscConfig+0x628>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2210      	movs	r2, #16
 80014fe:	4013      	ands	r3, r2
 8001500:	d063      	beq.n	80015ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d12a      	bne.n	8001560 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800150a:	4b81      	ldr	r3, [pc, #516]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800150c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800150e:	4b80      	ldr	r3, [pc, #512]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001510:	2104      	movs	r1, #4
 8001512:	430a      	orrs	r2, r1
 8001514:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001516:	4b7e      	ldr	r3, [pc, #504]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800151a:	4b7d      	ldr	r3, [pc, #500]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff f9c7 	bl	80008b4 <HAL_GetTick>
 8001526:	0003      	movs	r3, r0
 8001528:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800152c:	f7ff f9c2 	bl	80008b4 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0e3      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800153e:	4b74      	ldr	r3, [pc, #464]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d0f1      	beq.n	800152c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001548:	4b71      	ldr	r3, [pc, #452]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800154a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800154c:	22f8      	movs	r2, #248	@ 0xf8
 800154e:	4393      	bics	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	00da      	lsls	r2, r3, #3
 8001558:	4b6d      	ldr	r3, [pc, #436]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800155a:	430a      	orrs	r2, r1
 800155c:	635a      	str	r2, [r3, #52]	@ 0x34
 800155e:	e034      	b.n	80015ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	3305      	adds	r3, #5
 8001566:	d111      	bne.n	800158c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001568:	4b69      	ldr	r3, [pc, #420]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800156a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800156c:	4b68      	ldr	r3, [pc, #416]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800156e:	2104      	movs	r1, #4
 8001570:	438a      	bics	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001574:	4b66      	ldr	r3, [pc, #408]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001578:	22f8      	movs	r2, #248	@ 0xf8
 800157a:	4393      	bics	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	00da      	lsls	r2, r3, #3
 8001584:	4b62      	ldr	r3, [pc, #392]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001586:	430a      	orrs	r2, r1
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34
 800158a:	e01e      	b.n	80015ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800158c:	4b60      	ldr	r3, [pc, #384]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800158e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001590:	4b5f      	ldr	r3, [pc, #380]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001592:	2104      	movs	r1, #4
 8001594:	430a      	orrs	r2, r1
 8001596:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001598:	4b5d      	ldr	r3, [pc, #372]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800159a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800159c:	4b5c      	ldr	r3, [pc, #368]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800159e:	2101      	movs	r1, #1
 80015a0:	438a      	bics	r2, r1
 80015a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff f986 	bl	80008b4 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015ae:	f7ff f981 	bl	80008b4 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0a2      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015c0:	4b53      	ldr	r3, [pc, #332]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80015c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d1f1      	bne.n	80015ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d100      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4e4>
 80015d2:	e097      	b.n	8001704 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	220c      	movs	r2, #12
 80015da:	4013      	ands	r3, r2
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d100      	bne.n	80015e2 <HAL_RCC_OscConfig+0x4f2>
 80015e0:	e06b      	b.n	80016ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d14c      	bne.n	8001684 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b49      	ldr	r3, [pc, #292]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b48      	ldr	r3, [pc, #288]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80015f0:	494a      	ldr	r1, [pc, #296]	@ (800171c <HAL_RCC_OscConfig+0x62c>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff f95d 	bl	80008b4 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff f958 	bl	80008b4 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e079      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	4b3f      	ldr	r3, [pc, #252]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	@ 0x80
 8001618:	049b      	lsls	r3, r3, #18
 800161a:	4013      	ands	r3, r2
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161e:	4b3c      	ldr	r3, [pc, #240]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001622:	220f      	movs	r2, #15
 8001624:	4393      	bics	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800162c:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800162e:	430a      	orrs	r2, r1
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001632:	4b37      	ldr	r3, [pc, #220]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a3a      	ldr	r2, [pc, #232]	@ (8001720 <HAL_RCC_OscConfig+0x630>)
 8001638:	4013      	ands	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	431a      	orrs	r2, r3
 8001646:	4b32      	ldr	r3, [pc, #200]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b30      	ldr	r3, [pc, #192]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b2f      	ldr	r3, [pc, #188]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	0449      	lsls	r1, r1, #17
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff f92b 	bl	80008b4 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff f926 	bl	80008b4 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e047      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001676:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	049b      	lsls	r3, r3, #18
 800167e:	4013      	ands	r3, r2
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x574>
 8001682:	e03f      	b.n	8001704 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 800168a:	4924      	ldr	r1, [pc, #144]	@ (800171c <HAL_RCC_OscConfig+0x62c>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff f910 	bl	80008b4 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff f90b 	bl	80008b4 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e02c      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	049b      	lsls	r3, r3, #18
 80016b4:	4013      	ands	r3, r2
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x5aa>
 80016b8:	e024      	b.n	8001704 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e01f      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016c6:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_RCC_OscConfig+0x620>)
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	025b      	lsls	r3, r3, #9
 80016d8:	401a      	ands	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	429a      	cmp	r2, r3
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	220f      	movs	r2, #15
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	23f0      	movs	r3, #240	@ 0xf0
 80016f4:	039b      	lsls	r3, r3, #14
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b008      	add	sp, #32
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	40021000 	.word	0x40021000
 8001714:	00001388 	.word	0x00001388
 8001718:	efffffff 	.word	0xefffffff
 800171c:	feffffff 	.word	0xfeffffff
 8001720:	ffc2ffff 	.word	0xffc2ffff

08001724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0b3      	b.n	80018a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b5b      	ldr	r3, [pc, #364]	@ (80018a8 <HAL_RCC_ClockConfig+0x184>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d911      	bls.n	800176a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <HAL_RCC_ClockConfig+0x184>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	4393      	bics	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	4b55      	ldr	r3, [pc, #340]	@ (80018a8 <HAL_RCC_ClockConfig+0x184>)
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001758:	4b53      	ldr	r3, [pc, #332]	@ (80018a8 <HAL_RCC_ClockConfig+0x184>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e09a      	b.n	80018a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d015      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2204      	movs	r2, #4
 800177a:	4013      	ands	r3, r2
 800177c:	d006      	beq.n	800178c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800177e:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4b4a      	ldr	r3, [pc, #296]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 8001784:	21e0      	movs	r1, #224	@ 0xe0
 8001786:	00c9      	lsls	r1, r1, #3
 8001788:	430a      	orrs	r2, r1
 800178a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b47      	ldr	r3, [pc, #284]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	22f0      	movs	r2, #240	@ 0xf0
 8001792:	4393      	bics	r3, r2
 8001794:	0019      	movs	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	4b44      	ldr	r3, [pc, #272]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4013      	ands	r3, r2
 80017a8:	d040      	beq.n	800182c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b3e      	ldr	r3, [pc, #248]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	@ 0x80
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	4013      	ands	r3, r2
 80017bc:	d114      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06e      	b.n	80018a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b38      	ldr	r3, [pc, #224]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	@ 0x80
 80017d0:	049b      	lsls	r3, r3, #18
 80017d2:	4013      	ands	r3, r2
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e062      	b.n	80018a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e05b      	b.n	80018a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e8:	4b30      	ldr	r3, [pc, #192]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	4393      	bics	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4b2d      	ldr	r3, [pc, #180]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff f85a 	bl	80008b4 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001804:	e009      	b.n	800181a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001806:	f7ff f855 	bl	80008b4 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a27      	ldr	r2, [pc, #156]	@ (80018b0 <HAL_RCC_ClockConfig+0x18c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e042      	b.n	80018a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	220c      	movs	r2, #12
 8001820:	401a      	ands	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	429a      	cmp	r2, r3
 800182a:	d1ec      	bne.n	8001806 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <HAL_RCC_ClockConfig+0x184>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d211      	bcs.n	800185e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_RCC_ClockConfig+0x184>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	4393      	bics	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_RCC_ClockConfig+0x184>)
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184c:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <HAL_RCC_ClockConfig+0x184>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d001      	beq.n	800185e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e020      	b.n	80018a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2204      	movs	r2, #4
 8001864:	4013      	ands	r3, r2
 8001866:	d009      	beq.n	800187c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <HAL_RCC_ClockConfig+0x190>)
 800186e:	4013      	ands	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800187c:	f000 f820 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 8001880:	0001      	movs	r1, r0
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_RCC_ClockConfig+0x188>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	220f      	movs	r2, #15
 800188a:	4013      	ands	r3, r2
 800188c:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <HAL_RCC_ClockConfig+0x194>)
 800188e:	5cd3      	ldrb	r3, [r2, r3]
 8001890:	000a      	movs	r2, r1
 8001892:	40da      	lsrs	r2, r3
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_RCC_ClockConfig+0x198>)
 8001896:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001898:	2003      	movs	r0, #3
 800189a:	f7fe ffc5 	bl	8000828 <HAL_InitTick>
  
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b004      	add	sp, #16
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40022000 	.word	0x40022000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	00001388 	.word	0x00001388
 80018b4:	fffff8ff 	.word	0xfffff8ff
 80018b8:	080039a4 	.word	0x080039a4
 80018bc:	20000000 	.word	0x20000000

080018c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	220c      	movs	r2, #12
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x30>
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x36>
 80018ee:	e02c      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018f2:	613b      	str	r3, [r7, #16]
      break;
 80018f4:	e02c      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	0c9b      	lsrs	r3, r3, #18
 80018fa:	220f      	movs	r2, #15
 80018fc:	4013      	ands	r3, r2
 80018fe:	4a19      	ldr	r2, [pc, #100]	@ (8001964 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001908:	220f      	movs	r2, #15
 800190a:	4013      	ands	r3, r2
 800190c:	4a16      	ldr	r2, [pc, #88]	@ (8001968 <HAL_RCC_GetSysClockFreq+0xa8>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	4013      	ands	r3, r2
 800191a:	d009      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	4810      	ldr	r0, [pc, #64]	@ (8001960 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001920:	f7fe fbfc 	bl	800011c <__udivsi3>
 8001924:	0003      	movs	r3, r0
 8001926:	001a      	movs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4353      	muls	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e009      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	000a      	movs	r2, r1
 8001934:	0152      	lsls	r2, r2, #5
 8001936:	1a52      	subs	r2, r2, r1
 8001938:	0193      	lsls	r3, r2, #6
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	185b      	adds	r3, r3, r1
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
      break;
 8001948:	e002      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800194a:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_RCC_GetSysClockFreq+0xa0>)
 800194c:	613b      	str	r3, [r7, #16]
      break;
 800194e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001950:	693b      	ldr	r3, [r7, #16]
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b006      	add	sp, #24
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	40021000 	.word	0x40021000
 8001960:	007a1200 	.word	0x007a1200
 8001964:	080039bc 	.word	0x080039bc
 8001968:	080039cc 	.word	0x080039cc

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b02      	ldr	r3, [pc, #8]	@ (800197c <HAL_RCC_GetHCLKFreq+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001984:	f7ff fff2 	bl	800196c <HAL_RCC_GetHCLKFreq>
 8001988:	0001      	movs	r1, r0
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	2207      	movs	r2, #7
 8001992:	4013      	ands	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	@ (80019a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	40d9      	lsrs	r1, r3
 800199a:	000b      	movs	r3, r1
}    
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	40021000 	.word	0x40021000
 80019a8:	080039b4 	.word	0x080039b4

080019ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019c8:	e08e      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	2017      	movs	r0, #23
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	4013      	ands	r3, r2
 80019dc:	d110      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b5c      	ldr	r3, [pc, #368]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	0549      	lsls	r1, r1, #21
 80019e8:	430a      	orrs	r2, r1
 80019ea:	61da      	str	r2, [r3, #28]
 80019ec:	4b58      	ldr	r3, [pc, #352]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b54      	ldr	r3, [pc, #336]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d11a      	bne.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0c:	4b51      	ldr	r3, [pc, #324]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b50      	ldr	r3, [pc, #320]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a12:	2180      	movs	r1, #128	@ 0x80
 8001a14:	0049      	lsls	r1, r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7fe ff4b 	bl	80008b4 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	e008      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a24:	f7fe ff46 	bl	80008b4 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	@ 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e087      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a42:	4b43      	ldr	r3, [pc, #268]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	23c0      	movs	r3, #192	@ 0xc0
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d034      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	23c0      	movs	r3, #192	@ 0xc0
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d02c      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a3b      	ldr	r2, [pc, #236]	@ (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a6e:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a70:	6a1a      	ldr	r2, [r3, #32]
 8001a72:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a74:	2180      	movs	r1, #128	@ 0x80
 8001a76:	0249      	lsls	r1, r1, #9
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a7c:	4b34      	ldr	r3, [pc, #208]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	4b33      	ldr	r3, [pc, #204]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a82:	4936      	ldr	r1, [pc, #216]	@ (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a88:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7fe ff0d 	bl	80008b4 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7fe ff08 	bl	80008b4 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e048      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001abe:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a25      	ldr	r2, [pc, #148]	@ (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ad2:	2317      	movs	r3, #23
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001adc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ade:	69da      	ldr	r2, [r3, #28]
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ae2:	4920      	ldr	r1, [pc, #128]	@ (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	d009      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	2203      	movs	r2, #3
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d009      	beq.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b14:	2210      	movs	r2, #16
 8001b16:	4393      	bics	r3, r2
 8001b18:	0019      	movs	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d009      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b30:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	2240      	movs	r2, #64	@ 0x40
 8001b36:	4393      	bics	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	4b04      	ldr	r3, [pc, #16]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b006      	add	sp, #24
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
 8001b58:	fffffcff 	.word	0xfffffcff
 8001b5c:	fffeffff 	.word	0xfffeffff
 8001b60:	00001388 	.word	0x00001388
 8001b64:	efffffff 	.word	0xefffffff

08001b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e044      	b.n	8001c04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2278      	movs	r2, #120	@ 0x78
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fc97 	bl	80004c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2224      	movs	r2, #36	@ 0x24
 8001b96:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 fc68 	bl	8002488 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 fb24 	bl	8002208 <UART_SetConfig>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e01c      	b.n	8001c04 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <HAL_UART_Init+0xa4>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	212a      	movs	r1, #42	@ 0x2a
 8001be6:	438a      	bics	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 fcf7 	bl	80025f0 <UART_CheckIdleState>
 8001c02:	0003      	movs	r3, r0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	ffffb7ff 	.word	0xffffb7ff

08001c10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b0ab      	sub	sp, #172	@ 0xac
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	22a4      	movs	r2, #164	@ 0xa4
 8001c20:	18b9      	adds	r1, r7, r2
 8001c22:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	20a0      	movs	r0, #160	@ 0xa0
 8001c2c:	1839      	adds	r1, r7, r0
 8001c2e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	219c      	movs	r1, #156	@ 0x9c
 8001c38:	1879      	adds	r1, r7, r1
 8001c3a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001c3c:	0011      	movs	r1, r2
 8001c3e:	18bb      	adds	r3, r7, r2
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a99      	ldr	r2, [pc, #612]	@ (8001ea8 <HAL_UART_IRQHandler+0x298>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	2298      	movs	r2, #152	@ 0x98
 8001c48:	18bc      	adds	r4, r7, r2
 8001c4a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001c4c:	18bb      	adds	r3, r7, r2
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d114      	bne.n	8001c7e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d00f      	beq.n	8001c7e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c5e:	183b      	adds	r3, r7, r0
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2220      	movs	r2, #32
 8001c64:	4013      	ands	r3, r2
 8001c66:	d00a      	beq.n	8001c7e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d100      	bne.n	8001c72 <HAL_UART_IRQHandler+0x62>
 8001c70:	e29e      	b.n	80021b0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	0010      	movs	r0, r2
 8001c7a:	4798      	blx	r3
      }
      return;
 8001c7c:	e298      	b.n	80021b0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001c7e:	2398      	movs	r3, #152	@ 0x98
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d100      	bne.n	8001c8a <HAL_UART_IRQHandler+0x7a>
 8001c88:	e114      	b.n	8001eb4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001c8a:	239c      	movs	r3, #156	@ 0x9c
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	d106      	bne.n	8001ca4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001c96:	23a0      	movs	r3, #160	@ 0xa0
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a83      	ldr	r2, [pc, #524]	@ (8001eac <HAL_UART_IRQHandler+0x29c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d100      	bne.n	8001ca4 <HAL_UART_IRQHandler+0x94>
 8001ca2:	e107      	b.n	8001eb4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ca4:	23a4      	movs	r3, #164	@ 0xa4
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	4013      	ands	r3, r2
 8001cae:	d012      	beq.n	8001cd6 <HAL_UART_IRQHandler+0xc6>
 8001cb0:	23a0      	movs	r3, #160	@ 0xa0
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	@ 0x80
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2284      	movs	r2, #132	@ 0x84
 8001cca:	589b      	ldr	r3, [r3, r2]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2184      	movs	r1, #132	@ 0x84
 8001cd4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001cd6:	23a4      	movs	r3, #164	@ 0xa4
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d011      	beq.n	8001d06 <HAL_UART_IRQHandler+0xf6>
 8001ce2:	239c      	movs	r3, #156	@ 0x9c
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	d00b      	beq.n	8001d06 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2284      	movs	r2, #132	@ 0x84
 8001cfa:	589b      	ldr	r3, [r3, r2]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2184      	movs	r1, #132	@ 0x84
 8001d04:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d06:	23a4      	movs	r3, #164	@ 0xa4
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d011      	beq.n	8001d36 <HAL_UART_IRQHandler+0x126>
 8001d12:	239c      	movs	r3, #156	@ 0x9c
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d00b      	beq.n	8001d36 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2204      	movs	r2, #4
 8001d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2284      	movs	r2, #132	@ 0x84
 8001d2a:	589b      	ldr	r3, [r3, r2]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2184      	movs	r1, #132	@ 0x84
 8001d34:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d36:	23a4      	movs	r3, #164	@ 0xa4
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d017      	beq.n	8001d72 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d42:	23a0      	movs	r3, #160	@ 0xa0
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d105      	bne.n	8001d5a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001d4e:	239c      	movs	r3, #156	@ 0x9c
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d58:	d00b      	beq.n	8001d72 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2208      	movs	r2, #8
 8001d60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2284      	movs	r2, #132	@ 0x84
 8001d66:	589b      	ldr	r3, [r3, r2]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2184      	movs	r1, #132	@ 0x84
 8001d70:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001d72:	23a4      	movs	r3, #164	@ 0xa4
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d013      	beq.n	8001da8 <HAL_UART_IRQHandler+0x198>
 8001d80:	23a0      	movs	r3, #160	@ 0xa0
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	04db      	lsls	r3, r3, #19
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d00c      	beq.n	8001da8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2280      	movs	r2, #128	@ 0x80
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2284      	movs	r2, #132	@ 0x84
 8001d9c:	589b      	ldr	r3, [r3, r2]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2184      	movs	r1, #132	@ 0x84
 8001da6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2284      	movs	r2, #132	@ 0x84
 8001dac:	589b      	ldr	r3, [r3, r2]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d100      	bne.n	8001db4 <HAL_UART_IRQHandler+0x1a4>
 8001db2:	e1ff      	b.n	80021b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001db4:	23a4      	movs	r3, #164	@ 0xa4
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d00e      	beq.n	8001dde <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001dc0:	23a0      	movs	r3, #160	@ 0xa0
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d008      	beq.n	8001dde <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	0010      	movs	r0, r2
 8001ddc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2284      	movs	r2, #132	@ 0x84
 8001de2:	589b      	ldr	r3, [r3, r2]
 8001de4:	2194      	movs	r1, #148	@ 0x94
 8001de6:	187a      	adds	r2, r7, r1
 8001de8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2240      	movs	r2, #64	@ 0x40
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b40      	cmp	r3, #64	@ 0x40
 8001df6:	d004      	beq.n	8001e02 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2228      	movs	r2, #40	@ 0x28
 8001dfe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e00:	d047      	beq.n	8001e92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 fd0b 	bl	8002820 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2240      	movs	r2, #64	@ 0x40
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b40      	cmp	r3, #64	@ 0x40
 8001e16:	d137      	bne.n	8001e88 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e18:	f3ef 8310 	mrs	r3, PRIMASK
 8001e1c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001e1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e20:	2090      	movs	r0, #144	@ 0x90
 8001e22:	183a      	adds	r2, r7, r0
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	2301      	movs	r3, #1
 8001e28:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e2c:	f383 8810 	msr	PRIMASK, r3
}
 8001e30:	46c0      	nop			@ (mov r8, r8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2140      	movs	r1, #64	@ 0x40
 8001e3e:	438a      	bics	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	183b      	adds	r3, r7, r0
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e4a:	f383 8810 	msr	PRIMASK, r3
}
 8001e4e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d012      	beq.n	8001e7e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <HAL_UART_IRQHandler+0x2a0>)
 8001e5e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7fe feb1 	bl	8000bcc <HAL_DMA_Abort_IT>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d01a      	beq.n	8001ea4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e78:	0018      	movs	r0, r3
 8001e7a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7c:	e012      	b.n	8001ea4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f000 f9ad 	bl	80021e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e86:	e00d      	b.n	8001ea4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 f9a8 	bl	80021e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e90:	e008      	b.n	8001ea4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f000 f9a3 	bl	80021e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2284      	movs	r2, #132	@ 0x84
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001ea2:	e187      	b.n	80021b4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea4:	46c0      	nop			@ (mov r8, r8)
    return;
 8001ea6:	e185      	b.n	80021b4 <HAL_UART_IRQHandler+0x5a4>
 8001ea8:	0000080f 	.word	0x0000080f
 8001eac:	04000120 	.word	0x04000120
 8001eb0:	080028e9 	.word	0x080028e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d000      	beq.n	8001ebe <HAL_UART_IRQHandler+0x2ae>
 8001ebc:	e139      	b.n	8002132 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001ebe:	23a4      	movs	r3, #164	@ 0xa4
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d100      	bne.n	8001ecc <HAL_UART_IRQHandler+0x2bc>
 8001eca:	e132      	b.n	8002132 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001ecc:	23a0      	movs	r3, #160	@ 0xa0
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d100      	bne.n	8001eda <HAL_UART_IRQHandler+0x2ca>
 8001ed8:	e12b      	b.n	8002132 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2210      	movs	r2, #16
 8001ee0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2240      	movs	r2, #64	@ 0x40
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b40      	cmp	r3, #64	@ 0x40
 8001eee:	d000      	beq.n	8001ef2 <HAL_UART_IRQHandler+0x2e2>
 8001ef0:	e09f      	b.n	8002032 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	217e      	movs	r1, #126	@ 0x7e
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d100      	bne.n	8001f0a <HAL_UART_IRQHandler+0x2fa>
 8001f08:	e156      	b.n	80021b8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2258      	movs	r2, #88	@ 0x58
 8001f0e:	5a9b      	ldrh	r3, [r3, r2]
 8001f10:	187a      	adds	r2, r7, r1
 8001f12:	8812      	ldrh	r2, [r2, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d300      	bcc.n	8001f1a <HAL_UART_IRQHandler+0x30a>
 8001f18:	e14e      	b.n	80021b8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	187a      	adds	r2, r7, r1
 8001f1e:	215a      	movs	r1, #90	@ 0x5a
 8001f20:	8812      	ldrh	r2, [r2, #0]
 8001f22:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d06f      	beq.n	800200e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f38:	2301      	movs	r3, #1
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3e:	f383 8810 	msr	PRIMASK, r3
}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	499e      	ldr	r1, [pc, #632]	@ (80021c8 <HAL_UART_IRQHandler+0x5b8>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f5a:	f383 8810 	msr	PRIMASK, r3
}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f60:	f3ef 8310 	mrs	r3, PRIMASK
 8001f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8001f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f68:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f70:	f383 8810 	msr	PRIMASK, r3
}
 8001f74:	46c0      	nop			@ (mov r8, r8)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	438a      	bics	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f88:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f8c:	f383 8810 	msr	PRIMASK, r3
}
 8001f90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f92:	f3ef 8310 	mrs	r3, PRIMASK
 8001f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8001f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fa2:	f383 8810 	msr	PRIMASK, r3
}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2140      	movs	r1, #64	@ 0x40
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fbe:	f383 8810 	msr	PRIMASK, r3
}
 8001fc2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	2120      	movs	r1, #32
 8001fca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fd6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8001fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001fdc:	2301      	movs	r3, #1
 8001fde:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe2:	f383 8810 	msr	PRIMASK, r3
}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2110      	movs	r1, #16
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ffe:	f383 8810 	msr	PRIMASK, r3
}
 8002002:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002008:	0018      	movs	r0, r3
 800200a:	f7fe fda7 	bl	8000b5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2258      	movs	r2, #88	@ 0x58
 8002018:	5a9a      	ldrh	r2, [r3, r2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	215a      	movs	r1, #90	@ 0x5a
 800201e:	5a5b      	ldrh	r3, [r3, r1]
 8002020:	b29b      	uxth	r3, r3
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0011      	movs	r1, r2
 800202a:	0018      	movs	r0, r3
 800202c:	f000 f8e0 	bl	80021f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002030:	e0c2      	b.n	80021b8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2258      	movs	r2, #88	@ 0x58
 8002036:	5a99      	ldrh	r1, [r3, r2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	225a      	movs	r2, #90	@ 0x5a
 800203c:	5a9b      	ldrh	r3, [r3, r2]
 800203e:	b29a      	uxth	r2, r3
 8002040:	208e      	movs	r0, #142	@ 0x8e
 8002042:	183b      	adds	r3, r7, r0
 8002044:	1a8a      	subs	r2, r1, r2
 8002046:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	225a      	movs	r2, #90	@ 0x5a
 800204c:	5a9b      	ldrh	r3, [r3, r2]
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d100      	bne.n	8002056 <HAL_UART_IRQHandler+0x446>
 8002054:	e0b2      	b.n	80021bc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002056:	183b      	adds	r3, r7, r0
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d100      	bne.n	8002060 <HAL_UART_IRQHandler+0x450>
 800205e:	e0ad      	b.n	80021bc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002060:	f3ef 8310 	mrs	r3, PRIMASK
 8002064:	60fb      	str	r3, [r7, #12]
  return(result);
 8002066:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002068:	2488      	movs	r4, #136	@ 0x88
 800206a:	193a      	adds	r2, r7, r4
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	2301      	movs	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f383 8810 	msr	PRIMASK, r3
}
 8002078:	46c0      	nop			@ (mov r8, r8)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4951      	ldr	r1, [pc, #324]	@ (80021cc <HAL_UART_IRQHandler+0x5bc>)
 8002086:	400a      	ands	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	193b      	adds	r3, r7, r4
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f383 8810 	msr	PRIMASK, r3
}
 8002096:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002098:	f3ef 8310 	mrs	r3, PRIMASK
 800209c:	61bb      	str	r3, [r7, #24]
  return(result);
 800209e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a0:	2484      	movs	r4, #132	@ 0x84
 80020a2:	193a      	adds	r2, r7, r4
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f383 8810 	msr	PRIMASK, r3
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	438a      	bics	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	193b      	adds	r3, r7, r4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f383 8810 	msr	PRIMASK, r3
}
 80020ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2280      	movs	r2, #128	@ 0x80
 80020d4:	2120      	movs	r1, #32
 80020d6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e4:	f3ef 8310 	mrs	r3, PRIMASK
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ec:	2480      	movs	r4, #128	@ 0x80
 80020ee:	193a      	adds	r2, r7, r4
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	2301      	movs	r3, #1
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f8:	f383 8810 	msr	PRIMASK, r3
}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2110      	movs	r1, #16
 800210a:	438a      	bics	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	193b      	adds	r3, r7, r4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002116:	f383 8810 	msr	PRIMASK, r3
}
 800211a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002122:	183b      	adds	r3, r7, r0
 8002124:	881a      	ldrh	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0011      	movs	r1, r2
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f860 	bl	80021f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002130:	e044      	b.n	80021bc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002132:	23a4      	movs	r3, #164	@ 0xa4
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	@ 0x80
 800213a:	035b      	lsls	r3, r3, #13
 800213c:	4013      	ands	r3, r2
 800213e:	d010      	beq.n	8002162 <HAL_UART_IRQHandler+0x552>
 8002140:	239c      	movs	r3, #156	@ 0x9c
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	03db      	lsls	r3, r3, #15
 800214a:	4013      	ands	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2280      	movs	r2, #128	@ 0x80
 8002154:	0352      	lsls	r2, r2, #13
 8002156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	0018      	movs	r0, r3
 800215c:	f000 fc06 	bl	800296c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002160:	e02f      	b.n	80021c2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002162:	23a4      	movs	r3, #164	@ 0xa4
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2280      	movs	r2, #128	@ 0x80
 800216a:	4013      	ands	r3, r2
 800216c:	d00f      	beq.n	800218e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800216e:	23a0      	movs	r3, #160	@ 0xa0
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2280      	movs	r2, #128	@ 0x80
 8002176:	4013      	ands	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01e      	beq.n	80021c0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	0010      	movs	r0, r2
 800218a:	4798      	blx	r3
    }
    return;
 800218c:	e018      	b.n	80021c0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800218e:	23a4      	movs	r3, #164	@ 0xa4
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2240      	movs	r2, #64	@ 0x40
 8002196:	4013      	ands	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_UART_IRQHandler+0x5b2>
 800219a:	23a0      	movs	r3, #160	@ 0xa0
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2240      	movs	r2, #64	@ 0x40
 80021a2:	4013      	ands	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 fbb4 	bl	8002916 <UART_EndTransmit_IT>
    return;
 80021ae:	e008      	b.n	80021c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	e006      	b.n	80021c2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80021b4:	46c0      	nop			@ (mov r8, r8)
 80021b6:	e004      	b.n	80021c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	e002      	b.n	80021c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	e000      	b.n	80021c2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80021c0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b02b      	add	sp, #172	@ 0xac
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	fffffeff 	.word	0xfffffeff
 80021cc:	fffffedf 	.word	0xfffffedf

080021d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b002      	add	sp, #8
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80021e8:	46c0      	nop			@ (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	000a      	movs	r2, r1
 80021fa:	1cbb      	adds	r3, r7, #2
 80021fc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	b002      	add	sp, #8
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002210:	231e      	movs	r3, #30
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a8d      	ldr	r2, [pc, #564]	@ (800246c <UART_SetConfig+0x264>)
 8002238:	4013      	ands	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a88      	ldr	r2, [pc, #544]	@ (8002470 <UART_SetConfig+0x268>)
 800224e:	4013      	ands	r3, r2
 8002250:	0019      	movs	r1, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a7f      	ldr	r2, [pc, #508]	@ (8002474 <UART_SetConfig+0x26c>)
 8002276:	4013      	ands	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	430a      	orrs	r2, r1
 8002282:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a7b      	ldr	r2, [pc, #492]	@ (8002478 <UART_SetConfig+0x270>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d127      	bne.n	80022de <UART_SetConfig+0xd6>
 800228e:	4b7b      	ldr	r3, [pc, #492]	@ (800247c <UART_SetConfig+0x274>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	2203      	movs	r2, #3
 8002294:	4013      	ands	r3, r2
 8002296:	2b03      	cmp	r3, #3
 8002298:	d00d      	beq.n	80022b6 <UART_SetConfig+0xae>
 800229a:	d81b      	bhi.n	80022d4 <UART_SetConfig+0xcc>
 800229c:	2b02      	cmp	r3, #2
 800229e:	d014      	beq.n	80022ca <UART_SetConfig+0xc2>
 80022a0:	d818      	bhi.n	80022d4 <UART_SetConfig+0xcc>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <UART_SetConfig+0xa4>
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d00a      	beq.n	80022c0 <UART_SetConfig+0xb8>
 80022aa:	e013      	b.n	80022d4 <UART_SetConfig+0xcc>
 80022ac:	231f      	movs	r3, #31
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e021      	b.n	80022fa <UART_SetConfig+0xf2>
 80022b6:	231f      	movs	r3, #31
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2202      	movs	r2, #2
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e01c      	b.n	80022fa <UART_SetConfig+0xf2>
 80022c0:	231f      	movs	r3, #31
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2204      	movs	r2, #4
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e017      	b.n	80022fa <UART_SetConfig+0xf2>
 80022ca:	231f      	movs	r3, #31
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2208      	movs	r2, #8
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e012      	b.n	80022fa <UART_SetConfig+0xf2>
 80022d4:	231f      	movs	r3, #31
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2210      	movs	r2, #16
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e00d      	b.n	80022fa <UART_SetConfig+0xf2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a67      	ldr	r2, [pc, #412]	@ (8002480 <UART_SetConfig+0x278>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d104      	bne.n	80022f2 <UART_SetConfig+0xea>
 80022e8:	231f      	movs	r3, #31
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e003      	b.n	80022fa <UART_SetConfig+0xf2>
 80022f2:	231f      	movs	r3, #31
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2210      	movs	r2, #16
 80022f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	429a      	cmp	r2, r3
 8002304:	d15c      	bne.n	80023c0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002306:	231f      	movs	r3, #31
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b08      	cmp	r3, #8
 800230e:	d015      	beq.n	800233c <UART_SetConfig+0x134>
 8002310:	dc18      	bgt.n	8002344 <UART_SetConfig+0x13c>
 8002312:	2b04      	cmp	r3, #4
 8002314:	d00d      	beq.n	8002332 <UART_SetConfig+0x12a>
 8002316:	dc15      	bgt.n	8002344 <UART_SetConfig+0x13c>
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <UART_SetConfig+0x11a>
 800231c:	2b02      	cmp	r3, #2
 800231e:	d005      	beq.n	800232c <UART_SetConfig+0x124>
 8002320:	e010      	b.n	8002344 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002322:	f7ff fb2d 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 8002326:	0003      	movs	r3, r0
 8002328:	61bb      	str	r3, [r7, #24]
        break;
 800232a:	e012      	b.n	8002352 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800232c:	4b55      	ldr	r3, [pc, #340]	@ (8002484 <UART_SetConfig+0x27c>)
 800232e:	61bb      	str	r3, [r7, #24]
        break;
 8002330:	e00f      	b.n	8002352 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002332:	f7ff fac5 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 8002336:	0003      	movs	r3, r0
 8002338:	61bb      	str	r3, [r7, #24]
        break;
 800233a:	e00a      	b.n	8002352 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	61bb      	str	r3, [r7, #24]
        break;
 8002342:	e006      	b.n	8002352 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002348:	231e      	movs	r3, #30
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
        break;
 8002350:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d100      	bne.n	800235a <UART_SetConfig+0x152>
 8002358:	e07a      	b.n	8002450 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	005a      	lsls	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	18d2      	adds	r2, r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	0019      	movs	r1, r3
 800236c:	0010      	movs	r0, r2
 800236e:	f7fd fed5 	bl	800011c <__udivsi3>
 8002372:	0003      	movs	r3, r0
 8002374:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d91c      	bls.n	80023b6 <UART_SetConfig+0x1ae>
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	025b      	lsls	r3, r3, #9
 8002382:	429a      	cmp	r2, r3
 8002384:	d217      	bcs.n	80023b6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	b29a      	uxth	r2, r3
 800238a:	200e      	movs	r0, #14
 800238c:	183b      	adds	r3, r7, r0
 800238e:	210f      	movs	r1, #15
 8002390:	438a      	bics	r2, r1
 8002392:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	2207      	movs	r2, #7
 800239c:	4013      	ands	r3, r2
 800239e:	b299      	uxth	r1, r3
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	183a      	adds	r2, r7, r0
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	183a      	adds	r2, r7, r0
 80023b0:	8812      	ldrh	r2, [r2, #0]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	e04c      	b.n	8002450 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80023b6:	231e      	movs	r3, #30
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e047      	b.n	8002450 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023c0:	231f      	movs	r3, #31
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d015      	beq.n	80023f6 <UART_SetConfig+0x1ee>
 80023ca:	dc18      	bgt.n	80023fe <UART_SetConfig+0x1f6>
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d00d      	beq.n	80023ec <UART_SetConfig+0x1e4>
 80023d0:	dc15      	bgt.n	80023fe <UART_SetConfig+0x1f6>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <UART_SetConfig+0x1d4>
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d005      	beq.n	80023e6 <UART_SetConfig+0x1de>
 80023da:	e010      	b.n	80023fe <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023dc:	f7ff fad0 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 80023e0:	0003      	movs	r3, r0
 80023e2:	61bb      	str	r3, [r7, #24]
        break;
 80023e4:	e012      	b.n	800240c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023e6:	4b27      	ldr	r3, [pc, #156]	@ (8002484 <UART_SetConfig+0x27c>)
 80023e8:	61bb      	str	r3, [r7, #24]
        break;
 80023ea:	e00f      	b.n	800240c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ec:	f7ff fa68 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 80023f0:	0003      	movs	r3, r0
 80023f2:	61bb      	str	r3, [r7, #24]
        break;
 80023f4:	e00a      	b.n	800240c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	61bb      	str	r3, [r7, #24]
        break;
 80023fc:	e006      	b.n	800240c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002402:	231e      	movs	r3, #30
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
        break;
 800240a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01e      	beq.n	8002450 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	085a      	lsrs	r2, r3, #1
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	18d2      	adds	r2, r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	0019      	movs	r1, r3
 8002422:	0010      	movs	r0, r2
 8002424:	f7fd fe7a 	bl	800011c <__udivsi3>
 8002428:	0003      	movs	r3, r0
 800242a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	d90a      	bls.n	8002448 <UART_SetConfig+0x240>
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	025b      	lsls	r3, r3, #9
 8002438:	429a      	cmp	r2, r3
 800243a:	d205      	bcs.n	8002448 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	e003      	b.n	8002450 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002448:	231e      	movs	r3, #30
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800245c:	231e      	movs	r3, #30
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	781b      	ldrb	r3, [r3, #0]
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b008      	add	sp, #32
 8002468:	bd80      	pop	{r7, pc}
 800246a:	46c0      	nop			@ (mov r8, r8)
 800246c:	ffff69f3 	.word	0xffff69f3
 8002470:	ffffcfff 	.word	0xffffcfff
 8002474:	fffff4ff 	.word	0xfffff4ff
 8002478:	40013800 	.word	0x40013800
 800247c:	40021000 	.word	0x40021000
 8002480:	40004400 	.word	0x40004400
 8002484:	007a1200 	.word	0x007a1200

08002488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	2208      	movs	r2, #8
 8002496:	4013      	ands	r3, r2
 8002498:	d00b      	beq.n	80024b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4a4a      	ldr	r2, [pc, #296]	@ (80025cc <UART_AdvFeatureConfig+0x144>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	d00b      	beq.n	80024d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a43      	ldr	r2, [pc, #268]	@ (80025d0 <UART_AdvFeatureConfig+0x148>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d00b      	beq.n	80024f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a3b      	ldr	r2, [pc, #236]	@ (80025d4 <UART_AdvFeatureConfig+0x14c>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	0019      	movs	r1, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	2204      	movs	r2, #4
 80024fc:	4013      	ands	r3, r2
 80024fe:	d00b      	beq.n	8002518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a34      	ldr	r2, [pc, #208]	@ (80025d8 <UART_AdvFeatureConfig+0x150>)
 8002508:	4013      	ands	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	2210      	movs	r2, #16
 800251e:	4013      	ands	r3, r2
 8002520:	d00b      	beq.n	800253a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a2c      	ldr	r2, [pc, #176]	@ (80025dc <UART_AdvFeatureConfig+0x154>)
 800252a:	4013      	ands	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	2220      	movs	r2, #32
 8002540:	4013      	ands	r3, r2
 8002542:	d00b      	beq.n	800255c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4a25      	ldr	r2, [pc, #148]	@ (80025e0 <UART_AdvFeatureConfig+0x158>)
 800254c:	4013      	ands	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	2240      	movs	r2, #64	@ 0x40
 8002562:	4013      	ands	r3, r2
 8002564:	d01d      	beq.n	80025a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <UART_AdvFeatureConfig+0x15c>)
 800256e:	4013      	ands	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	035b      	lsls	r3, r3, #13
 8002586:	429a      	cmp	r2, r3
 8002588:	d10b      	bne.n	80025a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a15      	ldr	r2, [pc, #84]	@ (80025e8 <UART_AdvFeatureConfig+0x160>)
 8002592:	4013      	ands	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	4013      	ands	r3, r2
 80025aa:	d00b      	beq.n	80025c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a0e      	ldr	r2, [pc, #56]	@ (80025ec <UART_AdvFeatureConfig+0x164>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
  }
}
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	ffff7fff 	.word	0xffff7fff
 80025d0:	fffdffff 	.word	0xfffdffff
 80025d4:	fffeffff 	.word	0xfffeffff
 80025d8:	fffbffff 	.word	0xfffbffff
 80025dc:	ffffefff 	.word	0xffffefff
 80025e0:	ffffdfff 	.word	0xffffdfff
 80025e4:	ffefffff 	.word	0xffefffff
 80025e8:	ff9fffff 	.word	0xff9fffff
 80025ec:	fff7ffff 	.word	0xfff7ffff

080025f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b092      	sub	sp, #72	@ 0x48
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2284      	movs	r2, #132	@ 0x84
 80025fc:	2100      	movs	r1, #0
 80025fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002600:	f7fe f958 	bl	80008b4 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2208      	movs	r2, #8
 8002610:	4013      	ands	r3, r2
 8002612:	2b08      	cmp	r3, #8
 8002614:	d12c      	bne.n	8002670 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002618:	2280      	movs	r2, #128	@ 0x80
 800261a:	0391      	lsls	r1, r2, #14
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4a46      	ldr	r2, [pc, #280]	@ (8002738 <UART_CheckIdleState+0x148>)
 8002620:	9200      	str	r2, [sp, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	f000 f88c 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 8002628:	1e03      	subs	r3, r0, #0
 800262a:	d021      	beq.n	8002670 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800262c:	f3ef 8310 	mrs	r3, PRIMASK
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002634:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002636:	2301      	movs	r3, #1
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	f383 8810 	msr	PRIMASK, r3
}
 8002640:	46c0      	nop			@ (mov r8, r8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2180      	movs	r1, #128	@ 0x80
 800264e:	438a      	bics	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002658:	f383 8810 	msr	PRIMASK, r3
}
 800265c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2278      	movs	r2, #120	@ 0x78
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e05f      	b.n	8002730 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2204      	movs	r2, #4
 8002678:	4013      	ands	r3, r2
 800267a:	2b04      	cmp	r3, #4
 800267c:	d146      	bne.n	800270c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800267e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002680:	2280      	movs	r2, #128	@ 0x80
 8002682:	03d1      	lsls	r1, r2, #15
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4a2c      	ldr	r2, [pc, #176]	@ (8002738 <UART_CheckIdleState+0x148>)
 8002688:	9200      	str	r2, [sp, #0]
 800268a:	2200      	movs	r2, #0
 800268c:	f000 f858 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d03b      	beq.n	800270c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002694:	f3ef 8310 	mrs	r3, PRIMASK
 8002698:	60fb      	str	r3, [r7, #12]
  return(result);
 800269a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800269c:	637b      	str	r3, [r7, #52]	@ 0x34
 800269e:	2301      	movs	r3, #1
 80026a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f383 8810 	msr	PRIMASK, r3
}
 80026a8:	46c0      	nop			@ (mov r8, r8)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4921      	ldr	r1, [pc, #132]	@ (800273c <UART_CheckIdleState+0x14c>)
 80026b6:	400a      	ands	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f383 8810 	msr	PRIMASK, r3
}
 80026c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80026cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80026d0:	2301      	movs	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f383 8810 	msr	PRIMASK, r3
}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	f383 8810 	msr	PRIMASK, r3
}
 80026f6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	@ 0x80
 80026fc:	2120      	movs	r1, #32
 80026fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2278      	movs	r2, #120	@ 0x78
 8002704:	2100      	movs	r1, #0
 8002706:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e011      	b.n	8002730 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2280      	movs	r2, #128	@ 0x80
 8002716:	2120      	movs	r1, #32
 8002718:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2278      	movs	r2, #120	@ 0x78
 800272a:	2100      	movs	r1, #0
 800272c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b010      	add	sp, #64	@ 0x40
 8002736:	bd80      	pop	{r7, pc}
 8002738:	01ffffff 	.word	0x01ffffff
 800273c:	fffffedf 	.word	0xfffffedf

08002740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002750:	e051      	b.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3301      	adds	r3, #1
 8002756:	d04e      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002758:	f7fe f8ac 	bl	80008b4 <HAL_GetTick>
 800275c:	0002      	movs	r2, r0
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	429a      	cmp	r2, r3
 8002766:	d302      	bcc.n	800276e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e051      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2204      	movs	r2, #4
 800277a:	4013      	ands	r3, r2
 800277c:	d03b      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b80      	cmp	r3, #128	@ 0x80
 8002782:	d038      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b40      	cmp	r3, #64	@ 0x40
 8002788:	d035      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	2208      	movs	r2, #8
 8002792:	4013      	ands	r3, r2
 8002794:	2b08      	cmp	r3, #8
 8002796:	d111      	bne.n	80027bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2208      	movs	r2, #8
 800279e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 f83c 	bl	8002820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2284      	movs	r2, #132	@ 0x84
 80027ac:	2108      	movs	r1, #8
 80027ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2278      	movs	r2, #120	@ 0x78
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e02c      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	401a      	ands	r2, r3
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d112      	bne.n	80027f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 f81f 	bl	8002820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2284      	movs	r2, #132	@ 0x84
 80027e6:	2120      	movs	r1, #32
 80027e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2278      	movs	r2, #120	@ 0x78
 80027ee:	2100      	movs	r1, #0
 80027f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e00f      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	4013      	ands	r3, r2
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	425a      	negs	r2, r3
 8002806:	4153      	adcs	r3, r2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	001a      	movs	r2, r3
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d09e      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b004      	add	sp, #16
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	@ 0x38
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002828:	f3ef 8310 	mrs	r3, PRIMASK
 800282c:	617b      	str	r3, [r7, #20]
  return(result);
 800282e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f383 8810 	msr	PRIMASK, r3
}
 800283c:	46c0      	nop			@ (mov r8, r8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4926      	ldr	r1, [pc, #152]	@ (80028e4 <UART_EndRxTransfer+0xc4>)
 800284a:	400a      	ands	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f383 8810 	msr	PRIMASK, r3
}
 8002858:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285a:	f3ef 8310 	mrs	r3, PRIMASK
 800285e:	623b      	str	r3, [r7, #32]
  return(result);
 8002860:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002862:	633b      	str	r3, [r7, #48]	@ 0x30
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	f383 8810 	msr	PRIMASK, r3
}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	438a      	bics	r2, r1
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	f383 8810 	msr	PRIMASK, r3
}
 800288a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002890:	2b01      	cmp	r3, #1
 8002892:	d118      	bne.n	80028c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002894:	f3ef 8310 	mrs	r3, PRIMASK
 8002898:	60bb      	str	r3, [r7, #8]
  return(result);
 800289a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800289e:	2301      	movs	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f383 8810 	msr	PRIMASK, r3
}
 80028a8:	46c0      	nop			@ (mov r8, r8)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2110      	movs	r1, #16
 80028b6:	438a      	bics	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f383 8810 	msr	PRIMASK, r3
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2280      	movs	r2, #128	@ 0x80
 80028ca:	2120      	movs	r1, #32
 80028cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b00e      	add	sp, #56	@ 0x38
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	fffffedf 	.word	0xfffffedf

080028e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	225a      	movs	r2, #90	@ 0x5a
 80028fa:	2100      	movs	r1, #0
 80028fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2252      	movs	r2, #82	@ 0x52
 8002902:	2100      	movs	r1, #0
 8002904:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	0018      	movs	r0, r3
 800290a:	f7ff fc69 	bl	80021e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bd80      	pop	{r7, pc}

08002916 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800291e:	f3ef 8310 	mrs	r3, PRIMASK
 8002922:	60bb      	str	r3, [r7, #8]
  return(result);
 8002924:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	2301      	movs	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f383 8810 	msr	PRIMASK, r3
}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2140      	movs	r1, #64	@ 0x40
 8002940:	438a      	bics	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f383 8810 	msr	PRIMASK, r3
}
 800294e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff fc36 	bl	80021d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002964:	46c0      	nop			@ (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b006      	add	sp, #24
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}

0800297c <srand>:
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <srand+0x48>)
 800297e:	b570      	push	{r4, r5, r6, lr}
 8002980:	681d      	ldr	r5, [r3, #0]
 8002982:	0004      	movs	r4, r0
 8002984:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <srand+0x3c>
 800298a:	2018      	movs	r0, #24
 800298c:	f000 fa22 	bl	8002dd4 <malloc>
 8002990:	1e02      	subs	r2, r0, #0
 8002992:	6328      	str	r0, [r5, #48]	@ 0x30
 8002994:	d104      	bne.n	80029a0 <srand+0x24>
 8002996:	2146      	movs	r1, #70	@ 0x46
 8002998:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <srand+0x4c>)
 800299a:	480c      	ldr	r0, [pc, #48]	@ (80029cc <srand+0x50>)
 800299c:	f000 f9b2 	bl	8002d04 <__assert_func>
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <srand+0x54>)
 80029a2:	2100      	movs	r1, #0
 80029a4:	6003      	str	r3, [r0, #0]
 80029a6:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <srand+0x58>)
 80029a8:	6043      	str	r3, [r0, #4]
 80029aa:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <srand+0x5c>)
 80029ac:	6083      	str	r3, [r0, #8]
 80029ae:	230b      	movs	r3, #11
 80029b0:	8183      	strh	r3, [r0, #12]
 80029b2:	2001      	movs	r0, #1
 80029b4:	6110      	str	r0, [r2, #16]
 80029b6:	6151      	str	r1, [r2, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80029bc:	611c      	str	r4, [r3, #16]
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	20000018 	.word	0x20000018
 80029c8:	080039dc 	.word	0x080039dc
 80029cc:	080039f3 	.word	0x080039f3
 80029d0:	abcd330e 	.word	0xabcd330e
 80029d4:	e66d1234 	.word	0xe66d1234
 80029d8:	0005deec 	.word	0x0005deec

080029dc <std>:
 80029dc:	2300      	movs	r3, #0
 80029de:	b510      	push	{r4, lr}
 80029e0:	0004      	movs	r4, r0
 80029e2:	6003      	str	r3, [r0, #0]
 80029e4:	6043      	str	r3, [r0, #4]
 80029e6:	6083      	str	r3, [r0, #8]
 80029e8:	8181      	strh	r1, [r0, #12]
 80029ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80029ec:	81c2      	strh	r2, [r0, #14]
 80029ee:	6103      	str	r3, [r0, #16]
 80029f0:	6143      	str	r3, [r0, #20]
 80029f2:	6183      	str	r3, [r0, #24]
 80029f4:	0019      	movs	r1, r3
 80029f6:	2208      	movs	r2, #8
 80029f8:	305c      	adds	r0, #92	@ 0x5c
 80029fa:	f000 f8ff 	bl	8002bfc <memset>
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <std+0x50>)
 8002a00:	6224      	str	r4, [r4, #32]
 8002a02:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a04:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <std+0x54>)
 8002a06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a08:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <std+0x58>)
 8002a0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <std+0x5c>)
 8002a0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a10:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <std+0x60>)
 8002a12:	429c      	cmp	r4, r3
 8002a14:	d005      	beq.n	8002a22 <std+0x46>
 8002a16:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <std+0x64>)
 8002a18:	429c      	cmp	r4, r3
 8002a1a:	d002      	beq.n	8002a22 <std+0x46>
 8002a1c:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <std+0x68>)
 8002a1e:	429c      	cmp	r4, r3
 8002a20:	d103      	bne.n	8002a2a <std+0x4e>
 8002a22:	0020      	movs	r0, r4
 8002a24:	3058      	adds	r0, #88	@ 0x58
 8002a26:	f000 f969 	bl	8002cfc <__retarget_lock_init_recursive>
 8002a2a:	bd10      	pop	{r4, pc}
 8002a2c:	08002b65 	.word	0x08002b65
 8002a30:	08002b8d 	.word	0x08002b8d
 8002a34:	08002bc5 	.word	0x08002bc5
 8002a38:	08002bf1 	.word	0x08002bf1
 8002a3c:	20000158 	.word	0x20000158
 8002a40:	200001c0 	.word	0x200001c0
 8002a44:	20000228 	.word	0x20000228

08002a48 <stdio_exit_handler>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4a03      	ldr	r2, [pc, #12]	@ (8002a58 <stdio_exit_handler+0x10>)
 8002a4c:	4903      	ldr	r1, [pc, #12]	@ (8002a5c <stdio_exit_handler+0x14>)
 8002a4e:	4804      	ldr	r0, [pc, #16]	@ (8002a60 <stdio_exit_handler+0x18>)
 8002a50:	f000 f86c 	bl	8002b2c <_fwalk_sglue>
 8002a54:	bd10      	pop	{r4, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	08003351 	.word	0x08003351
 8002a60:	2000001c 	.word	0x2000001c

08002a64 <cleanup_stdio>:
 8002a64:	6841      	ldr	r1, [r0, #4]
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <cleanup_stdio+0x30>)
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	0004      	movs	r4, r0
 8002a6c:	4299      	cmp	r1, r3
 8002a6e:	d001      	beq.n	8002a74 <cleanup_stdio+0x10>
 8002a70:	f000 fc6e 	bl	8003350 <_fflush_r>
 8002a74:	68a1      	ldr	r1, [r4, #8]
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <cleanup_stdio+0x34>)
 8002a78:	4299      	cmp	r1, r3
 8002a7a:	d002      	beq.n	8002a82 <cleanup_stdio+0x1e>
 8002a7c:	0020      	movs	r0, r4
 8002a7e:	f000 fc67 	bl	8003350 <_fflush_r>
 8002a82:	68e1      	ldr	r1, [r4, #12]
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <cleanup_stdio+0x38>)
 8002a86:	4299      	cmp	r1, r3
 8002a88:	d002      	beq.n	8002a90 <cleanup_stdio+0x2c>
 8002a8a:	0020      	movs	r0, r4
 8002a8c:	f000 fc60 	bl	8003350 <_fflush_r>
 8002a90:	bd10      	pop	{r4, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	20000158 	.word	0x20000158
 8002a98:	200001c0 	.word	0x200001c0
 8002a9c:	20000228 	.word	0x20000228

08002aa0 <global_stdio_init.part.0>:
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <global_stdio_init.part.0+0x28>)
 8002aa4:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <global_stdio_init.part.0+0x2c>)
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	4809      	ldr	r0, [pc, #36]	@ (8002ad0 <global_stdio_init.part.0+0x30>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	f7ff ff95 	bl	80029dc <std>
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2109      	movs	r1, #9
 8002ab6:	4807      	ldr	r0, [pc, #28]	@ (8002ad4 <global_stdio_init.part.0+0x34>)
 8002ab8:	f7ff ff90 	bl	80029dc <std>
 8002abc:	2202      	movs	r2, #2
 8002abe:	2112      	movs	r1, #18
 8002ac0:	4805      	ldr	r0, [pc, #20]	@ (8002ad8 <global_stdio_init.part.0+0x38>)
 8002ac2:	f7ff ff8b 	bl	80029dc <std>
 8002ac6:	bd10      	pop	{r4, pc}
 8002ac8:	20000290 	.word	0x20000290
 8002acc:	08002a49 	.word	0x08002a49
 8002ad0:	20000158 	.word	0x20000158
 8002ad4:	200001c0 	.word	0x200001c0
 8002ad8:	20000228 	.word	0x20000228

08002adc <__sfp_lock_acquire>:
 8002adc:	b510      	push	{r4, lr}
 8002ade:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <__sfp_lock_acquire+0xc>)
 8002ae0:	f000 f90d 	bl	8002cfe <__retarget_lock_acquire_recursive>
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	20000299 	.word	0x20000299

08002aec <__sfp_lock_release>:
 8002aec:	b510      	push	{r4, lr}
 8002aee:	4802      	ldr	r0, [pc, #8]	@ (8002af8 <__sfp_lock_release+0xc>)
 8002af0:	f000 f906 	bl	8002d00 <__retarget_lock_release_recursive>
 8002af4:	bd10      	pop	{r4, pc}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	20000299 	.word	0x20000299

08002afc <__sinit>:
 8002afc:	b510      	push	{r4, lr}
 8002afe:	0004      	movs	r4, r0
 8002b00:	f7ff ffec 	bl	8002adc <__sfp_lock_acquire>
 8002b04:	6a23      	ldr	r3, [r4, #32]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <__sinit+0x14>
 8002b0a:	f7ff ffef 	bl	8002aec <__sfp_lock_release>
 8002b0e:	bd10      	pop	{r4, pc}
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <__sinit+0x28>)
 8002b12:	6223      	str	r3, [r4, #32]
 8002b14:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <__sinit+0x2c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f6      	bne.n	8002b0a <__sinit+0xe>
 8002b1c:	f7ff ffc0 	bl	8002aa0 <global_stdio_init.part.0>
 8002b20:	e7f3      	b.n	8002b0a <__sinit+0xe>
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	08002a65 	.word	0x08002a65
 8002b28:	20000290 	.word	0x20000290

08002b2c <_fwalk_sglue>:
 8002b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b2e:	0014      	movs	r4, r2
 8002b30:	2600      	movs	r6, #0
 8002b32:	9000      	str	r0, [sp, #0]
 8002b34:	9101      	str	r1, [sp, #4]
 8002b36:	68a5      	ldr	r5, [r4, #8]
 8002b38:	6867      	ldr	r7, [r4, #4]
 8002b3a:	3f01      	subs	r7, #1
 8002b3c:	d504      	bpl.n	8002b48 <_fwalk_sglue+0x1c>
 8002b3e:	6824      	ldr	r4, [r4, #0]
 8002b40:	2c00      	cmp	r4, #0
 8002b42:	d1f8      	bne.n	8002b36 <_fwalk_sglue+0xa>
 8002b44:	0030      	movs	r0, r6
 8002b46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b48:	89ab      	ldrh	r3, [r5, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d908      	bls.n	8002b60 <_fwalk_sglue+0x34>
 8002b4e:	220e      	movs	r2, #14
 8002b50:	5eab      	ldrsh	r3, [r5, r2]
 8002b52:	3301      	adds	r3, #1
 8002b54:	d004      	beq.n	8002b60 <_fwalk_sglue+0x34>
 8002b56:	0029      	movs	r1, r5
 8002b58:	9800      	ldr	r0, [sp, #0]
 8002b5a:	9b01      	ldr	r3, [sp, #4]
 8002b5c:	4798      	blx	r3
 8002b5e:	4306      	orrs	r6, r0
 8002b60:	3568      	adds	r5, #104	@ 0x68
 8002b62:	e7ea      	b.n	8002b3a <_fwalk_sglue+0xe>

08002b64 <__sread>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	000c      	movs	r4, r1
 8002b68:	250e      	movs	r5, #14
 8002b6a:	5f49      	ldrsh	r1, [r1, r5]
 8002b6c:	f000 f874 	bl	8002c58 <_read_r>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	db03      	blt.n	8002b7c <__sread+0x18>
 8002b74:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002b76:	181b      	adds	r3, r3, r0
 8002b78:	6563      	str	r3, [r4, #84]	@ 0x54
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	4a02      	ldr	r2, [pc, #8]	@ (8002b88 <__sread+0x24>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	81a3      	strh	r3, [r4, #12]
 8002b84:	e7f9      	b.n	8002b7a <__sread+0x16>
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	ffffefff 	.word	0xffffefff

08002b8c <__swrite>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	001f      	movs	r7, r3
 8002b90:	898b      	ldrh	r3, [r1, #12]
 8002b92:	0005      	movs	r5, r0
 8002b94:	000c      	movs	r4, r1
 8002b96:	0016      	movs	r6, r2
 8002b98:	05db      	lsls	r3, r3, #23
 8002b9a:	d505      	bpl.n	8002ba8 <__swrite+0x1c>
 8002b9c:	230e      	movs	r3, #14
 8002b9e:	5ec9      	ldrsh	r1, [r1, r3]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f000 f844 	bl	8002c30 <_lseek_r>
 8002ba8:	89a3      	ldrh	r3, [r4, #12]
 8002baa:	4a05      	ldr	r2, [pc, #20]	@ (8002bc0 <__swrite+0x34>)
 8002bac:	0028      	movs	r0, r5
 8002bae:	4013      	ands	r3, r2
 8002bb0:	81a3      	strh	r3, [r4, #12]
 8002bb2:	0032      	movs	r2, r6
 8002bb4:	230e      	movs	r3, #14
 8002bb6:	5ee1      	ldrsh	r1, [r4, r3]
 8002bb8:	003b      	movs	r3, r7
 8002bba:	f000 f861 	bl	8002c80 <_write_r>
 8002bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bc0:	ffffefff 	.word	0xffffefff

08002bc4 <__sseek>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	000c      	movs	r4, r1
 8002bc8:	250e      	movs	r5, #14
 8002bca:	5f49      	ldrsh	r1, [r1, r5]
 8002bcc:	f000 f830 	bl	8002c30 <_lseek_r>
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	1c42      	adds	r2, r0, #1
 8002bd4:	d103      	bne.n	8002bde <__sseek+0x1a>
 8002bd6:	4a05      	ldr	r2, [pc, #20]	@ (8002bec <__sseek+0x28>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	81a3      	strh	r3, [r4, #12]
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}
 8002bde:	2280      	movs	r2, #128	@ 0x80
 8002be0:	0152      	lsls	r2, r2, #5
 8002be2:	4313      	orrs	r3, r2
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	6560      	str	r0, [r4, #84]	@ 0x54
 8002be8:	e7f8      	b.n	8002bdc <__sseek+0x18>
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	ffffefff 	.word	0xffffefff

08002bf0 <__sclose>:
 8002bf0:	b510      	push	{r4, lr}
 8002bf2:	230e      	movs	r3, #14
 8002bf4:	5ec9      	ldrsh	r1, [r1, r3]
 8002bf6:	f000 f809 	bl	8002c0c <_close_r>
 8002bfa:	bd10      	pop	{r4, pc}

08002bfc <memset>:
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	1882      	adds	r2, r0, r2
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d100      	bne.n	8002c06 <memset+0xa>
 8002c04:	4770      	bx	lr
 8002c06:	7019      	strb	r1, [r3, #0]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	e7f9      	b.n	8002c00 <memset+0x4>

08002c0c <_close_r>:
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	b570      	push	{r4, r5, r6, lr}
 8002c10:	4d06      	ldr	r5, [pc, #24]	@ (8002c2c <_close_r+0x20>)
 8002c12:	0004      	movs	r4, r0
 8002c14:	0008      	movs	r0, r1
 8002c16:	602b      	str	r3, [r5, #0]
 8002c18:	f7fd fd60 	bl	80006dc <_close>
 8002c1c:	1c43      	adds	r3, r0, #1
 8002c1e:	d103      	bne.n	8002c28 <_close_r+0x1c>
 8002c20:	682b      	ldr	r3, [r5, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d000      	beq.n	8002c28 <_close_r+0x1c>
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	bd70      	pop	{r4, r5, r6, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	20000294 	.word	0x20000294

08002c30 <_lseek_r>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	0004      	movs	r4, r0
 8002c34:	0008      	movs	r0, r1
 8002c36:	0011      	movs	r1, r2
 8002c38:	001a      	movs	r2, r3
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	4d05      	ldr	r5, [pc, #20]	@ (8002c54 <_lseek_r+0x24>)
 8002c3e:	602b      	str	r3, [r5, #0]
 8002c40:	f7fd fd6d 	bl	800071e <_lseek>
 8002c44:	1c43      	adds	r3, r0, #1
 8002c46:	d103      	bne.n	8002c50 <_lseek_r+0x20>
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d000      	beq.n	8002c50 <_lseek_r+0x20>
 8002c4e:	6023      	str	r3, [r4, #0]
 8002c50:	bd70      	pop	{r4, r5, r6, pc}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	20000294 	.word	0x20000294

08002c58 <_read_r>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	0004      	movs	r4, r0
 8002c5c:	0008      	movs	r0, r1
 8002c5e:	0011      	movs	r1, r2
 8002c60:	001a      	movs	r2, r3
 8002c62:	2300      	movs	r3, #0
 8002c64:	4d05      	ldr	r5, [pc, #20]	@ (8002c7c <_read_r+0x24>)
 8002c66:	602b      	str	r3, [r5, #0]
 8002c68:	f7fd fcff 	bl	800066a <_read>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	d103      	bne.n	8002c78 <_read_r+0x20>
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d000      	beq.n	8002c78 <_read_r+0x20>
 8002c76:	6023      	str	r3, [r4, #0]
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	20000294 	.word	0x20000294

08002c80 <_write_r>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	0004      	movs	r4, r0
 8002c84:	0008      	movs	r0, r1
 8002c86:	0011      	movs	r1, r2
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	4d05      	ldr	r5, [pc, #20]	@ (8002ca4 <_write_r+0x24>)
 8002c8e:	602b      	str	r3, [r5, #0]
 8002c90:	f7fd fd08 	bl	80006a4 <_write>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d103      	bne.n	8002ca0 <_write_r+0x20>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d000      	beq.n	8002ca0 <_write_r+0x20>
 8002c9e:	6023      	str	r3, [r4, #0]
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	20000294 	.word	0x20000294

08002ca8 <__errno>:
 8002ca8:	4b01      	ldr	r3, [pc, #4]	@ (8002cb0 <__errno+0x8>)
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	4770      	bx	lr
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	20000018 	.word	0x20000018

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	4c0c      	ldr	r4, [pc, #48]	@ (8002cec <__libc_init_array+0x38>)
 8002cba:	4d0d      	ldr	r5, [pc, #52]	@ (8002cf0 <__libc_init_array+0x3c>)
 8002cbc:	1b64      	subs	r4, r4, r5
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	42a6      	cmp	r6, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	f000 fe61 	bl	800398c <_init>
 8002cca:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf4 <__libc_init_array+0x40>)
 8002ccc:	4d0a      	ldr	r5, [pc, #40]	@ (8002cf8 <__libc_init_array+0x44>)
 8002cce:	1b64      	subs	r4, r4, r5
 8002cd0:	10a4      	asrs	r4, r4, #2
 8002cd2:	42a6      	cmp	r6, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	00b3      	lsls	r3, r6, #2
 8002cda:	58eb      	ldr	r3, [r5, r3]
 8002cdc:	4798      	blx	r3
 8002cde:	3601      	adds	r6, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	00b3      	lsls	r3, r6, #2
 8002ce4:	58eb      	ldr	r3, [r5, r3]
 8002ce6:	4798      	blx	r3
 8002ce8:	3601      	adds	r6, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08003abc 	.word	0x08003abc
 8002cf0:	08003abc 	.word	0x08003abc
 8002cf4:	08003ac0 	.word	0x08003ac0
 8002cf8:	08003abc 	.word	0x08003abc

08002cfc <__retarget_lock_init_recursive>:
 8002cfc:	4770      	bx	lr

08002cfe <__retarget_lock_acquire_recursive>:
 8002cfe:	4770      	bx	lr

08002d00 <__retarget_lock_release_recursive>:
 8002d00:	4770      	bx	lr
	...

08002d04 <__assert_func>:
 8002d04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002d06:	0014      	movs	r4, r2
 8002d08:	001a      	movs	r2, r3
 8002d0a:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <__assert_func+0x2c>)
 8002d0c:	0005      	movs	r5, r0
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	000e      	movs	r6, r1
 8002d12:	68d8      	ldr	r0, [r3, #12]
 8002d14:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <__assert_func+0x30>)
 8002d16:	2c00      	cmp	r4, #0
 8002d18:	d101      	bne.n	8002d1e <__assert_func+0x1a>
 8002d1a:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <__assert_func+0x34>)
 8002d1c:	001c      	movs	r4, r3
 8002d1e:	4907      	ldr	r1, [pc, #28]	@ (8002d3c <__assert_func+0x38>)
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	9402      	str	r4, [sp, #8]
 8002d24:	002b      	movs	r3, r5
 8002d26:	9600      	str	r6, [sp, #0]
 8002d28:	f000 fb3e 	bl	80033a8 <fiprintf>
 8002d2c:	f000 fb69 	bl	8003402 <abort>
 8002d30:	20000018 	.word	0x20000018
 8002d34:	08003a4b 	.word	0x08003a4b
 8002d38:	08003a86 	.word	0x08003a86
 8002d3c:	08003a58 	.word	0x08003a58

08002d40 <_free_r>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	0005      	movs	r5, r0
 8002d44:	1e0c      	subs	r4, r1, #0
 8002d46:	d010      	beq.n	8002d6a <_free_r+0x2a>
 8002d48:	3c04      	subs	r4, #4
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da00      	bge.n	8002d52 <_free_r+0x12>
 8002d50:	18e4      	adds	r4, r4, r3
 8002d52:	0028      	movs	r0, r5
 8002d54:	f000 f8ea 	bl	8002f2c <__malloc_lock>
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <_free_r+0x90>)
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d105      	bne.n	8002d6c <_free_r+0x2c>
 8002d60:	6063      	str	r3, [r4, #4]
 8002d62:	6014      	str	r4, [r2, #0]
 8002d64:	0028      	movs	r0, r5
 8002d66:	f000 f8e9 	bl	8002f3c <__malloc_unlock>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	42a3      	cmp	r3, r4
 8002d6e:	d908      	bls.n	8002d82 <_free_r+0x42>
 8002d70:	6820      	ldr	r0, [r4, #0]
 8002d72:	1821      	adds	r1, r4, r0
 8002d74:	428b      	cmp	r3, r1
 8002d76:	d1f3      	bne.n	8002d60 <_free_r+0x20>
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	1809      	adds	r1, r1, r0
 8002d7e:	6021      	str	r1, [r4, #0]
 8002d80:	e7ee      	b.n	8002d60 <_free_r+0x20>
 8002d82:	001a      	movs	r2, r3
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <_free_r+0x4e>
 8002d8a:	42a3      	cmp	r3, r4
 8002d8c:	d9f9      	bls.n	8002d82 <_free_r+0x42>
 8002d8e:	6811      	ldr	r1, [r2, #0]
 8002d90:	1850      	adds	r0, r2, r1
 8002d92:	42a0      	cmp	r0, r4
 8002d94:	d10b      	bne.n	8002dae <_free_r+0x6e>
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	1809      	adds	r1, r1, r0
 8002d9a:	1850      	adds	r0, r2, r1
 8002d9c:	6011      	str	r1, [r2, #0]
 8002d9e:	4283      	cmp	r3, r0
 8002da0:	d1e0      	bne.n	8002d64 <_free_r+0x24>
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	1841      	adds	r1, r0, r1
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	6053      	str	r3, [r2, #4]
 8002dac:	e7da      	b.n	8002d64 <_free_r+0x24>
 8002dae:	42a0      	cmp	r0, r4
 8002db0:	d902      	bls.n	8002db8 <_free_r+0x78>
 8002db2:	230c      	movs	r3, #12
 8002db4:	602b      	str	r3, [r5, #0]
 8002db6:	e7d5      	b.n	8002d64 <_free_r+0x24>
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	1821      	adds	r1, r4, r0
 8002dbc:	428b      	cmp	r3, r1
 8002dbe:	d103      	bne.n	8002dc8 <_free_r+0x88>
 8002dc0:	6819      	ldr	r1, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	1809      	adds	r1, r1, r0
 8002dc6:	6021      	str	r1, [r4, #0]
 8002dc8:	6063      	str	r3, [r4, #4]
 8002dca:	6054      	str	r4, [r2, #4]
 8002dcc:	e7ca      	b.n	8002d64 <_free_r+0x24>
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	200002a0 	.word	0x200002a0

08002dd4 <malloc>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <malloc+0x10>)
 8002dd8:	0001      	movs	r1, r0
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	f000 f826 	bl	8002e2c <_malloc_r>
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	20000018 	.word	0x20000018

08002de8 <sbrk_aligned>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	4e0f      	ldr	r6, [pc, #60]	@ (8002e28 <sbrk_aligned+0x40>)
 8002dec:	000d      	movs	r5, r1
 8002dee:	6831      	ldr	r1, [r6, #0]
 8002df0:	0004      	movs	r4, r0
 8002df2:	2900      	cmp	r1, #0
 8002df4:	d102      	bne.n	8002dfc <sbrk_aligned+0x14>
 8002df6:	f000 fae7 	bl	80033c8 <_sbrk_r>
 8002dfa:	6030      	str	r0, [r6, #0]
 8002dfc:	0029      	movs	r1, r5
 8002dfe:	0020      	movs	r0, r4
 8002e00:	f000 fae2 	bl	80033c8 <_sbrk_r>
 8002e04:	1c43      	adds	r3, r0, #1
 8002e06:	d103      	bne.n	8002e10 <sbrk_aligned+0x28>
 8002e08:	2501      	movs	r5, #1
 8002e0a:	426d      	negs	r5, r5
 8002e0c:	0028      	movs	r0, r5
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	2303      	movs	r3, #3
 8002e12:	1cc5      	adds	r5, r0, #3
 8002e14:	439d      	bics	r5, r3
 8002e16:	42a8      	cmp	r0, r5
 8002e18:	d0f8      	beq.n	8002e0c <sbrk_aligned+0x24>
 8002e1a:	1a29      	subs	r1, r5, r0
 8002e1c:	0020      	movs	r0, r4
 8002e1e:	f000 fad3 	bl	80033c8 <_sbrk_r>
 8002e22:	3001      	adds	r0, #1
 8002e24:	d1f2      	bne.n	8002e0c <sbrk_aligned+0x24>
 8002e26:	e7ef      	b.n	8002e08 <sbrk_aligned+0x20>
 8002e28:	2000029c 	.word	0x2000029c

08002e2c <_malloc_r>:
 8002e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e2e:	2203      	movs	r2, #3
 8002e30:	1ccb      	adds	r3, r1, #3
 8002e32:	4393      	bics	r3, r2
 8002e34:	3308      	adds	r3, #8
 8002e36:	0005      	movs	r5, r0
 8002e38:	001f      	movs	r7, r3
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	d234      	bcs.n	8002ea8 <_malloc_r+0x7c>
 8002e3e:	270c      	movs	r7, #12
 8002e40:	42b9      	cmp	r1, r7
 8002e42:	d833      	bhi.n	8002eac <_malloc_r+0x80>
 8002e44:	0028      	movs	r0, r5
 8002e46:	f000 f871 	bl	8002f2c <__malloc_lock>
 8002e4a:	4e37      	ldr	r6, [pc, #220]	@ (8002f28 <_malloc_r+0xfc>)
 8002e4c:	6833      	ldr	r3, [r6, #0]
 8002e4e:	001c      	movs	r4, r3
 8002e50:	2c00      	cmp	r4, #0
 8002e52:	d12f      	bne.n	8002eb4 <_malloc_r+0x88>
 8002e54:	0039      	movs	r1, r7
 8002e56:	0028      	movs	r0, r5
 8002e58:	f7ff ffc6 	bl	8002de8 <sbrk_aligned>
 8002e5c:	0004      	movs	r4, r0
 8002e5e:	1c43      	adds	r3, r0, #1
 8002e60:	d15f      	bne.n	8002f22 <_malloc_r+0xf6>
 8002e62:	6834      	ldr	r4, [r6, #0]
 8002e64:	9400      	str	r4, [sp, #0]
 8002e66:	9b00      	ldr	r3, [sp, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d14a      	bne.n	8002f02 <_malloc_r+0xd6>
 8002e6c:	2c00      	cmp	r4, #0
 8002e6e:	d052      	beq.n	8002f16 <_malloc_r+0xea>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	0028      	movs	r0, r5
 8002e74:	18e3      	adds	r3, r4, r3
 8002e76:	9900      	ldr	r1, [sp, #0]
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	f000 faa5 	bl	80033c8 <_sbrk_r>
 8002e7e:	9b01      	ldr	r3, [sp, #4]
 8002e80:	4283      	cmp	r3, r0
 8002e82:	d148      	bne.n	8002f16 <_malloc_r+0xea>
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	0028      	movs	r0, r5
 8002e88:	1aff      	subs	r7, r7, r3
 8002e8a:	0039      	movs	r1, r7
 8002e8c:	f7ff ffac 	bl	8002de8 <sbrk_aligned>
 8002e90:	3001      	adds	r0, #1
 8002e92:	d040      	beq.n	8002f16 <_malloc_r+0xea>
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	19db      	adds	r3, r3, r7
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	6833      	ldr	r3, [r6, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	d133      	bne.n	8002f0a <_malloc_r+0xde>
 8002ea2:	9b00      	ldr	r3, [sp, #0]
 8002ea4:	6033      	str	r3, [r6, #0]
 8002ea6:	e019      	b.n	8002edc <_malloc_r+0xb0>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	dac9      	bge.n	8002e40 <_malloc_r+0x14>
 8002eac:	230c      	movs	r3, #12
 8002eae:	602b      	str	r3, [r5, #0]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002eb4:	6821      	ldr	r1, [r4, #0]
 8002eb6:	1bc9      	subs	r1, r1, r7
 8002eb8:	d420      	bmi.n	8002efc <_malloc_r+0xd0>
 8002eba:	290b      	cmp	r1, #11
 8002ebc:	d90a      	bls.n	8002ed4 <_malloc_r+0xa8>
 8002ebe:	19e2      	adds	r2, r4, r7
 8002ec0:	6027      	str	r7, [r4, #0]
 8002ec2:	42a3      	cmp	r3, r4
 8002ec4:	d104      	bne.n	8002ed0 <_malloc_r+0xa4>
 8002ec6:	6032      	str	r2, [r6, #0]
 8002ec8:	6863      	ldr	r3, [r4, #4]
 8002eca:	6011      	str	r1, [r2, #0]
 8002ecc:	6053      	str	r3, [r2, #4]
 8002ece:	e005      	b.n	8002edc <_malloc_r+0xb0>
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	e7f9      	b.n	8002ec8 <_malloc_r+0x9c>
 8002ed4:	6862      	ldr	r2, [r4, #4]
 8002ed6:	42a3      	cmp	r3, r4
 8002ed8:	d10e      	bne.n	8002ef8 <_malloc_r+0xcc>
 8002eda:	6032      	str	r2, [r6, #0]
 8002edc:	0028      	movs	r0, r5
 8002ede:	f000 f82d 	bl	8002f3c <__malloc_unlock>
 8002ee2:	0020      	movs	r0, r4
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	300b      	adds	r0, #11
 8002ee8:	1d23      	adds	r3, r4, #4
 8002eea:	4390      	bics	r0, r2
 8002eec:	1ac2      	subs	r2, r0, r3
 8002eee:	4298      	cmp	r0, r3
 8002ef0:	d0df      	beq.n	8002eb2 <_malloc_r+0x86>
 8002ef2:	1a1b      	subs	r3, r3, r0
 8002ef4:	50a3      	str	r3, [r4, r2]
 8002ef6:	e7dc      	b.n	8002eb2 <_malloc_r+0x86>
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	e7ef      	b.n	8002edc <_malloc_r+0xb0>
 8002efc:	0023      	movs	r3, r4
 8002efe:	6864      	ldr	r4, [r4, #4]
 8002f00:	e7a6      	b.n	8002e50 <_malloc_r+0x24>
 8002f02:	9c00      	ldr	r4, [sp, #0]
 8002f04:	6863      	ldr	r3, [r4, #4]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	e7ad      	b.n	8002e66 <_malloc_r+0x3a>
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	42a3      	cmp	r3, r4
 8002f10:	d1fb      	bne.n	8002f0a <_malloc_r+0xde>
 8002f12:	2300      	movs	r3, #0
 8002f14:	e7da      	b.n	8002ecc <_malloc_r+0xa0>
 8002f16:	230c      	movs	r3, #12
 8002f18:	0028      	movs	r0, r5
 8002f1a:	602b      	str	r3, [r5, #0]
 8002f1c:	f000 f80e 	bl	8002f3c <__malloc_unlock>
 8002f20:	e7c6      	b.n	8002eb0 <_malloc_r+0x84>
 8002f22:	6007      	str	r7, [r0, #0]
 8002f24:	e7da      	b.n	8002edc <_malloc_r+0xb0>
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	200002a0 	.word	0x200002a0

08002f2c <__malloc_lock>:
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	4802      	ldr	r0, [pc, #8]	@ (8002f38 <__malloc_lock+0xc>)
 8002f30:	f7ff fee5 	bl	8002cfe <__retarget_lock_acquire_recursive>
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	20000298 	.word	0x20000298

08002f3c <__malloc_unlock>:
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <__malloc_unlock+0xc>)
 8002f40:	f7ff fede 	bl	8002d00 <__retarget_lock_release_recursive>
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	20000298 	.word	0x20000298

08002f4c <_printf_common>:
 8002f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f4e:	0016      	movs	r6, r2
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	688a      	ldr	r2, [r1, #8]
 8002f54:	690b      	ldr	r3, [r1, #16]
 8002f56:	000c      	movs	r4, r1
 8002f58:	9000      	str	r0, [sp, #0]
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	da00      	bge.n	8002f60 <_printf_common+0x14>
 8002f5e:	0013      	movs	r3, r2
 8002f60:	0022      	movs	r2, r4
 8002f62:	6033      	str	r3, [r6, #0]
 8002f64:	3243      	adds	r2, #67	@ 0x43
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	d001      	beq.n	8002f70 <_printf_common+0x24>
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	6033      	str	r3, [r6, #0]
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	d502      	bpl.n	8002f7c <_printf_common+0x30>
 8002f76:	6833      	ldr	r3, [r6, #0]
 8002f78:	3302      	adds	r3, #2
 8002f7a:	6033      	str	r3, [r6, #0]
 8002f7c:	6822      	ldr	r2, [r4, #0]
 8002f7e:	2306      	movs	r3, #6
 8002f80:	0015      	movs	r5, r2
 8002f82:	401d      	ands	r5, r3
 8002f84:	421a      	tst	r2, r3
 8002f86:	d027      	beq.n	8002fd8 <_printf_common+0x8c>
 8002f88:	0023      	movs	r3, r4
 8002f8a:	3343      	adds	r3, #67	@ 0x43
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	4193      	sbcs	r3, r2
 8002f92:	6822      	ldr	r2, [r4, #0]
 8002f94:	0692      	lsls	r2, r2, #26
 8002f96:	d430      	bmi.n	8002ffa <_printf_common+0xae>
 8002f98:	0022      	movs	r2, r4
 8002f9a:	9901      	ldr	r1, [sp, #4]
 8002f9c:	9800      	ldr	r0, [sp, #0]
 8002f9e:	9d08      	ldr	r5, [sp, #32]
 8002fa0:	3243      	adds	r2, #67	@ 0x43
 8002fa2:	47a8      	blx	r5
 8002fa4:	3001      	adds	r0, #1
 8002fa6:	d025      	beq.n	8002ff4 <_printf_common+0xa8>
 8002fa8:	2206      	movs	r2, #6
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	2500      	movs	r5, #0
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d105      	bne.n	8002fc0 <_printf_common+0x74>
 8002fb4:	6833      	ldr	r3, [r6, #0]
 8002fb6:	68e5      	ldr	r5, [r4, #12]
 8002fb8:	1aed      	subs	r5, r5, r3
 8002fba:	43eb      	mvns	r3, r5
 8002fbc:	17db      	asrs	r3, r3, #31
 8002fbe:	401d      	ands	r5, r3
 8002fc0:	68a3      	ldr	r3, [r4, #8]
 8002fc2:	6922      	ldr	r2, [r4, #16]
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	dd01      	ble.n	8002fcc <_printf_common+0x80>
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	18ed      	adds	r5, r5, r3
 8002fcc:	2600      	movs	r6, #0
 8002fce:	42b5      	cmp	r5, r6
 8002fd0:	d120      	bne.n	8003014 <_printf_common+0xc8>
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	e010      	b.n	8002ff8 <_printf_common+0xac>
 8002fd6:	3501      	adds	r5, #1
 8002fd8:	68e3      	ldr	r3, [r4, #12]
 8002fda:	6832      	ldr	r2, [r6, #0]
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	ddd2      	ble.n	8002f88 <_printf_common+0x3c>
 8002fe2:	0022      	movs	r2, r4
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	9901      	ldr	r1, [sp, #4]
 8002fe8:	9800      	ldr	r0, [sp, #0]
 8002fea:	9f08      	ldr	r7, [sp, #32]
 8002fec:	3219      	adds	r2, #25
 8002fee:	47b8      	blx	r7
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d1f0      	bne.n	8002fd6 <_printf_common+0x8a>
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	4240      	negs	r0, r0
 8002ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ffa:	2030      	movs	r0, #48	@ 0x30
 8002ffc:	18e1      	adds	r1, r4, r3
 8002ffe:	3143      	adds	r1, #67	@ 0x43
 8003000:	7008      	strb	r0, [r1, #0]
 8003002:	0021      	movs	r1, r4
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	3145      	adds	r1, #69	@ 0x45
 8003008:	7809      	ldrb	r1, [r1, #0]
 800300a:	18a2      	adds	r2, r4, r2
 800300c:	3243      	adds	r2, #67	@ 0x43
 800300e:	3302      	adds	r3, #2
 8003010:	7011      	strb	r1, [r2, #0]
 8003012:	e7c1      	b.n	8002f98 <_printf_common+0x4c>
 8003014:	0022      	movs	r2, r4
 8003016:	2301      	movs	r3, #1
 8003018:	9901      	ldr	r1, [sp, #4]
 800301a:	9800      	ldr	r0, [sp, #0]
 800301c:	9f08      	ldr	r7, [sp, #32]
 800301e:	321a      	adds	r2, #26
 8003020:	47b8      	blx	r7
 8003022:	3001      	adds	r0, #1
 8003024:	d0e6      	beq.n	8002ff4 <_printf_common+0xa8>
 8003026:	3601      	adds	r6, #1
 8003028:	e7d1      	b.n	8002fce <_printf_common+0x82>
	...

0800302c <_printf_i>:
 800302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302e:	b08b      	sub	sp, #44	@ 0x2c
 8003030:	9206      	str	r2, [sp, #24]
 8003032:	000a      	movs	r2, r1
 8003034:	3243      	adds	r2, #67	@ 0x43
 8003036:	9307      	str	r3, [sp, #28]
 8003038:	9005      	str	r0, [sp, #20]
 800303a:	9203      	str	r2, [sp, #12]
 800303c:	7e0a      	ldrb	r2, [r1, #24]
 800303e:	000c      	movs	r4, r1
 8003040:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003042:	2a78      	cmp	r2, #120	@ 0x78
 8003044:	d809      	bhi.n	800305a <_printf_i+0x2e>
 8003046:	2a62      	cmp	r2, #98	@ 0x62
 8003048:	d80b      	bhi.n	8003062 <_printf_i+0x36>
 800304a:	2a00      	cmp	r2, #0
 800304c:	d100      	bne.n	8003050 <_printf_i+0x24>
 800304e:	e0ba      	b.n	80031c6 <_printf_i+0x19a>
 8003050:	497a      	ldr	r1, [pc, #488]	@ (800323c <_printf_i+0x210>)
 8003052:	9104      	str	r1, [sp, #16]
 8003054:	2a58      	cmp	r2, #88	@ 0x58
 8003056:	d100      	bne.n	800305a <_printf_i+0x2e>
 8003058:	e08e      	b.n	8003178 <_printf_i+0x14c>
 800305a:	0025      	movs	r5, r4
 800305c:	3542      	adds	r5, #66	@ 0x42
 800305e:	702a      	strb	r2, [r5, #0]
 8003060:	e022      	b.n	80030a8 <_printf_i+0x7c>
 8003062:	0010      	movs	r0, r2
 8003064:	3863      	subs	r0, #99	@ 0x63
 8003066:	2815      	cmp	r0, #21
 8003068:	d8f7      	bhi.n	800305a <_printf_i+0x2e>
 800306a:	f7fd f84d 	bl	8000108 <__gnu_thumb1_case_shi>
 800306e:	0016      	.short	0x0016
 8003070:	fff6001f 	.word	0xfff6001f
 8003074:	fff6fff6 	.word	0xfff6fff6
 8003078:	001ffff6 	.word	0x001ffff6
 800307c:	fff6fff6 	.word	0xfff6fff6
 8003080:	fff6fff6 	.word	0xfff6fff6
 8003084:	0036009f 	.word	0x0036009f
 8003088:	fff6007e 	.word	0xfff6007e
 800308c:	00b0fff6 	.word	0x00b0fff6
 8003090:	0036fff6 	.word	0x0036fff6
 8003094:	fff6fff6 	.word	0xfff6fff6
 8003098:	0082      	.short	0x0082
 800309a:	0025      	movs	r5, r4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	3542      	adds	r5, #66	@ 0x42
 80030a0:	1d11      	adds	r1, r2, #4
 80030a2:	6019      	str	r1, [r3, #0]
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	702b      	strb	r3, [r5, #0]
 80030a8:	2301      	movs	r3, #1
 80030aa:	e09e      	b.n	80031ea <_printf_i+0x1be>
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	6809      	ldr	r1, [r1, #0]
 80030b0:	1d02      	adds	r2, r0, #4
 80030b2:	060d      	lsls	r5, r1, #24
 80030b4:	d50b      	bpl.n	80030ce <_printf_i+0xa2>
 80030b6:	6806      	ldr	r6, [r0, #0]
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	2e00      	cmp	r6, #0
 80030bc:	da03      	bge.n	80030c6 <_printf_i+0x9a>
 80030be:	232d      	movs	r3, #45	@ 0x2d
 80030c0:	9a03      	ldr	r2, [sp, #12]
 80030c2:	4276      	negs	r6, r6
 80030c4:	7013      	strb	r3, [r2, #0]
 80030c6:	4b5d      	ldr	r3, [pc, #372]	@ (800323c <_printf_i+0x210>)
 80030c8:	270a      	movs	r7, #10
 80030ca:	9304      	str	r3, [sp, #16]
 80030cc:	e018      	b.n	8003100 <_printf_i+0xd4>
 80030ce:	6806      	ldr	r6, [r0, #0]
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	0649      	lsls	r1, r1, #25
 80030d4:	d5f1      	bpl.n	80030ba <_printf_i+0x8e>
 80030d6:	b236      	sxth	r6, r6
 80030d8:	e7ef      	b.n	80030ba <_printf_i+0x8e>
 80030da:	6808      	ldr	r0, [r1, #0]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	c940      	ldmia	r1!, {r6}
 80030e0:	0605      	lsls	r5, r0, #24
 80030e2:	d402      	bmi.n	80030ea <_printf_i+0xbe>
 80030e4:	0640      	lsls	r0, r0, #25
 80030e6:	d500      	bpl.n	80030ea <_printf_i+0xbe>
 80030e8:	b2b6      	uxth	r6, r6
 80030ea:	6019      	str	r1, [r3, #0]
 80030ec:	4b53      	ldr	r3, [pc, #332]	@ (800323c <_printf_i+0x210>)
 80030ee:	270a      	movs	r7, #10
 80030f0:	9304      	str	r3, [sp, #16]
 80030f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80030f4:	d100      	bne.n	80030f8 <_printf_i+0xcc>
 80030f6:	3f02      	subs	r7, #2
 80030f8:	0023      	movs	r3, r4
 80030fa:	2200      	movs	r2, #0
 80030fc:	3343      	adds	r3, #67	@ 0x43
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	6863      	ldr	r3, [r4, #4]
 8003102:	60a3      	str	r3, [r4, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db06      	blt.n	8003116 <_printf_i+0xea>
 8003108:	2104      	movs	r1, #4
 800310a:	6822      	ldr	r2, [r4, #0]
 800310c:	9d03      	ldr	r5, [sp, #12]
 800310e:	438a      	bics	r2, r1
 8003110:	6022      	str	r2, [r4, #0]
 8003112:	4333      	orrs	r3, r6
 8003114:	d00c      	beq.n	8003130 <_printf_i+0x104>
 8003116:	9d03      	ldr	r5, [sp, #12]
 8003118:	0030      	movs	r0, r6
 800311a:	0039      	movs	r1, r7
 800311c:	f7fd f884 	bl	8000228 <__aeabi_uidivmod>
 8003120:	9b04      	ldr	r3, [sp, #16]
 8003122:	3d01      	subs	r5, #1
 8003124:	5c5b      	ldrb	r3, [r3, r1]
 8003126:	702b      	strb	r3, [r5, #0]
 8003128:	0033      	movs	r3, r6
 800312a:	0006      	movs	r6, r0
 800312c:	429f      	cmp	r7, r3
 800312e:	d9f3      	bls.n	8003118 <_printf_i+0xec>
 8003130:	2f08      	cmp	r7, #8
 8003132:	d109      	bne.n	8003148 <_printf_i+0x11c>
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	07db      	lsls	r3, r3, #31
 8003138:	d506      	bpl.n	8003148 <_printf_i+0x11c>
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	6923      	ldr	r3, [r4, #16]
 800313e:	429a      	cmp	r2, r3
 8003140:	dc02      	bgt.n	8003148 <_printf_i+0x11c>
 8003142:	2330      	movs	r3, #48	@ 0x30
 8003144:	3d01      	subs	r5, #1
 8003146:	702b      	strb	r3, [r5, #0]
 8003148:	9b03      	ldr	r3, [sp, #12]
 800314a:	1b5b      	subs	r3, r3, r5
 800314c:	6123      	str	r3, [r4, #16]
 800314e:	9b07      	ldr	r3, [sp, #28]
 8003150:	0021      	movs	r1, r4
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	9805      	ldr	r0, [sp, #20]
 8003156:	9b06      	ldr	r3, [sp, #24]
 8003158:	aa09      	add	r2, sp, #36	@ 0x24
 800315a:	f7ff fef7 	bl	8002f4c <_printf_common>
 800315e:	3001      	adds	r0, #1
 8003160:	d148      	bne.n	80031f4 <_printf_i+0x1c8>
 8003162:	2001      	movs	r0, #1
 8003164:	4240      	negs	r0, r0
 8003166:	b00b      	add	sp, #44	@ 0x2c
 8003168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316a:	2220      	movs	r2, #32
 800316c:	6809      	ldr	r1, [r1, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	6022      	str	r2, [r4, #0]
 8003172:	2278      	movs	r2, #120	@ 0x78
 8003174:	4932      	ldr	r1, [pc, #200]	@ (8003240 <_printf_i+0x214>)
 8003176:	9104      	str	r1, [sp, #16]
 8003178:	0021      	movs	r1, r4
 800317a:	3145      	adds	r1, #69	@ 0x45
 800317c:	700a      	strb	r2, [r1, #0]
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	c940      	ldmia	r1!, {r6}
 8003184:	0610      	lsls	r0, r2, #24
 8003186:	d402      	bmi.n	800318e <_printf_i+0x162>
 8003188:	0650      	lsls	r0, r2, #25
 800318a:	d500      	bpl.n	800318e <_printf_i+0x162>
 800318c:	b2b6      	uxth	r6, r6
 800318e:	6019      	str	r1, [r3, #0]
 8003190:	07d3      	lsls	r3, r2, #31
 8003192:	d502      	bpl.n	800319a <_printf_i+0x16e>
 8003194:	2320      	movs	r3, #32
 8003196:	4313      	orrs	r3, r2
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	2e00      	cmp	r6, #0
 800319c:	d001      	beq.n	80031a2 <_printf_i+0x176>
 800319e:	2710      	movs	r7, #16
 80031a0:	e7aa      	b.n	80030f8 <_printf_i+0xcc>
 80031a2:	2220      	movs	r2, #32
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	4393      	bics	r3, r2
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	e7f8      	b.n	800319e <_printf_i+0x172>
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	680d      	ldr	r5, [r1, #0]
 80031b0:	1d10      	adds	r0, r2, #4
 80031b2:	6949      	ldr	r1, [r1, #20]
 80031b4:	6018      	str	r0, [r3, #0]
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	062e      	lsls	r6, r5, #24
 80031ba:	d501      	bpl.n	80031c0 <_printf_i+0x194>
 80031bc:	6019      	str	r1, [r3, #0]
 80031be:	e002      	b.n	80031c6 <_printf_i+0x19a>
 80031c0:	066d      	lsls	r5, r5, #25
 80031c2:	d5fb      	bpl.n	80031bc <_printf_i+0x190>
 80031c4:	8019      	strh	r1, [r3, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9d03      	ldr	r5, [sp, #12]
 80031ca:	6123      	str	r3, [r4, #16]
 80031cc:	e7bf      	b.n	800314e <_printf_i+0x122>
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	1d11      	adds	r1, r2, #4
 80031d2:	6019      	str	r1, [r3, #0]
 80031d4:	6815      	ldr	r5, [r2, #0]
 80031d6:	2100      	movs	r1, #0
 80031d8:	0028      	movs	r0, r5
 80031da:	6862      	ldr	r2, [r4, #4]
 80031dc:	f000 f906 	bl	80033ec <memchr>
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d001      	beq.n	80031e8 <_printf_i+0x1bc>
 80031e4:	1b40      	subs	r0, r0, r5
 80031e6:	6060      	str	r0, [r4, #4]
 80031e8:	6863      	ldr	r3, [r4, #4]
 80031ea:	6123      	str	r3, [r4, #16]
 80031ec:	2300      	movs	r3, #0
 80031ee:	9a03      	ldr	r2, [sp, #12]
 80031f0:	7013      	strb	r3, [r2, #0]
 80031f2:	e7ac      	b.n	800314e <_printf_i+0x122>
 80031f4:	002a      	movs	r2, r5
 80031f6:	6923      	ldr	r3, [r4, #16]
 80031f8:	9906      	ldr	r1, [sp, #24]
 80031fa:	9805      	ldr	r0, [sp, #20]
 80031fc:	9d07      	ldr	r5, [sp, #28]
 80031fe:	47a8      	blx	r5
 8003200:	3001      	adds	r0, #1
 8003202:	d0ae      	beq.n	8003162 <_printf_i+0x136>
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	079b      	lsls	r3, r3, #30
 8003208:	d415      	bmi.n	8003236 <_printf_i+0x20a>
 800320a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800320c:	68e0      	ldr	r0, [r4, #12]
 800320e:	4298      	cmp	r0, r3
 8003210:	daa9      	bge.n	8003166 <_printf_i+0x13a>
 8003212:	0018      	movs	r0, r3
 8003214:	e7a7      	b.n	8003166 <_printf_i+0x13a>
 8003216:	0022      	movs	r2, r4
 8003218:	2301      	movs	r3, #1
 800321a:	9906      	ldr	r1, [sp, #24]
 800321c:	9805      	ldr	r0, [sp, #20]
 800321e:	9e07      	ldr	r6, [sp, #28]
 8003220:	3219      	adds	r2, #25
 8003222:	47b0      	blx	r6
 8003224:	3001      	adds	r0, #1
 8003226:	d09c      	beq.n	8003162 <_printf_i+0x136>
 8003228:	3501      	adds	r5, #1
 800322a:	68e3      	ldr	r3, [r4, #12]
 800322c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	42ab      	cmp	r3, r5
 8003232:	dcf0      	bgt.n	8003216 <_printf_i+0x1ea>
 8003234:	e7e9      	b.n	800320a <_printf_i+0x1de>
 8003236:	2500      	movs	r5, #0
 8003238:	e7f7      	b.n	800322a <_printf_i+0x1fe>
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	08003a87 	.word	0x08003a87
 8003240:	08003a98 	.word	0x08003a98

08003244 <__sflush_r>:
 8003244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003246:	220c      	movs	r2, #12
 8003248:	5e8b      	ldrsh	r3, [r1, r2]
 800324a:	0005      	movs	r5, r0
 800324c:	000c      	movs	r4, r1
 800324e:	071a      	lsls	r2, r3, #28
 8003250:	d456      	bmi.n	8003300 <__sflush_r+0xbc>
 8003252:	684a      	ldr	r2, [r1, #4]
 8003254:	2a00      	cmp	r2, #0
 8003256:	dc02      	bgt.n	800325e <__sflush_r+0x1a>
 8003258:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800325a:	2a00      	cmp	r2, #0
 800325c:	dd4e      	ble.n	80032fc <__sflush_r+0xb8>
 800325e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003260:	2f00      	cmp	r7, #0
 8003262:	d04b      	beq.n	80032fc <__sflush_r+0xb8>
 8003264:	2200      	movs	r2, #0
 8003266:	2080      	movs	r0, #128	@ 0x80
 8003268:	682e      	ldr	r6, [r5, #0]
 800326a:	602a      	str	r2, [r5, #0]
 800326c:	001a      	movs	r2, r3
 800326e:	0140      	lsls	r0, r0, #5
 8003270:	6a21      	ldr	r1, [r4, #32]
 8003272:	4002      	ands	r2, r0
 8003274:	4203      	tst	r3, r0
 8003276:	d033      	beq.n	80032e0 <__sflush_r+0x9c>
 8003278:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800327a:	89a3      	ldrh	r3, [r4, #12]
 800327c:	075b      	lsls	r3, r3, #29
 800327e:	d506      	bpl.n	800328e <__sflush_r+0x4a>
 8003280:	6863      	ldr	r3, [r4, #4]
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <__sflush_r+0x4a>
 800328a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800328c:	1ad2      	subs	r2, r2, r3
 800328e:	2300      	movs	r3, #0
 8003290:	0028      	movs	r0, r5
 8003292:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003294:	6a21      	ldr	r1, [r4, #32]
 8003296:	47b8      	blx	r7
 8003298:	89a2      	ldrh	r2, [r4, #12]
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	d106      	bne.n	80032ac <__sflush_r+0x68>
 800329e:	6829      	ldr	r1, [r5, #0]
 80032a0:	291d      	cmp	r1, #29
 80032a2:	d846      	bhi.n	8003332 <__sflush_r+0xee>
 80032a4:	4b29      	ldr	r3, [pc, #164]	@ (800334c <__sflush_r+0x108>)
 80032a6:	40cb      	lsrs	r3, r1
 80032a8:	07db      	lsls	r3, r3, #31
 80032aa:	d542      	bpl.n	8003332 <__sflush_r+0xee>
 80032ac:	2300      	movs	r3, #0
 80032ae:	6063      	str	r3, [r4, #4]
 80032b0:	6923      	ldr	r3, [r4, #16]
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	04d2      	lsls	r2, r2, #19
 80032b6:	d505      	bpl.n	80032c4 <__sflush_r+0x80>
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d102      	bne.n	80032c2 <__sflush_r+0x7e>
 80032bc:	682b      	ldr	r3, [r5, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d100      	bne.n	80032c4 <__sflush_r+0x80>
 80032c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80032c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032c6:	602e      	str	r6, [r5, #0]
 80032c8:	2900      	cmp	r1, #0
 80032ca:	d017      	beq.n	80032fc <__sflush_r+0xb8>
 80032cc:	0023      	movs	r3, r4
 80032ce:	3344      	adds	r3, #68	@ 0x44
 80032d0:	4299      	cmp	r1, r3
 80032d2:	d002      	beq.n	80032da <__sflush_r+0x96>
 80032d4:	0028      	movs	r0, r5
 80032d6:	f7ff fd33 	bl	8002d40 <_free_r>
 80032da:	2300      	movs	r3, #0
 80032dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80032de:	e00d      	b.n	80032fc <__sflush_r+0xb8>
 80032e0:	2301      	movs	r3, #1
 80032e2:	0028      	movs	r0, r5
 80032e4:	47b8      	blx	r7
 80032e6:	0002      	movs	r2, r0
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d1c6      	bne.n	800327a <__sflush_r+0x36>
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0c3      	beq.n	800327a <__sflush_r+0x36>
 80032f2:	2b1d      	cmp	r3, #29
 80032f4:	d001      	beq.n	80032fa <__sflush_r+0xb6>
 80032f6:	2b16      	cmp	r3, #22
 80032f8:	d11a      	bne.n	8003330 <__sflush_r+0xec>
 80032fa:	602e      	str	r6, [r5, #0]
 80032fc:	2000      	movs	r0, #0
 80032fe:	e01e      	b.n	800333e <__sflush_r+0xfa>
 8003300:	690e      	ldr	r6, [r1, #16]
 8003302:	2e00      	cmp	r6, #0
 8003304:	d0fa      	beq.n	80032fc <__sflush_r+0xb8>
 8003306:	680f      	ldr	r7, [r1, #0]
 8003308:	600e      	str	r6, [r1, #0]
 800330a:	1bba      	subs	r2, r7, r6
 800330c:	9201      	str	r2, [sp, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	079b      	lsls	r3, r3, #30
 8003312:	d100      	bne.n	8003316 <__sflush_r+0xd2>
 8003314:	694a      	ldr	r2, [r1, #20]
 8003316:	60a2      	str	r2, [r4, #8]
 8003318:	9b01      	ldr	r3, [sp, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	ddee      	ble.n	80032fc <__sflush_r+0xb8>
 800331e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003320:	0032      	movs	r2, r6
 8003322:	001f      	movs	r7, r3
 8003324:	0028      	movs	r0, r5
 8003326:	9b01      	ldr	r3, [sp, #4]
 8003328:	6a21      	ldr	r1, [r4, #32]
 800332a:	47b8      	blx	r7
 800332c:	2800      	cmp	r0, #0
 800332e:	dc07      	bgt.n	8003340 <__sflush_r+0xfc>
 8003330:	89a2      	ldrh	r2, [r4, #12]
 8003332:	2340      	movs	r3, #64	@ 0x40
 8003334:	2001      	movs	r0, #1
 8003336:	4313      	orrs	r3, r2
 8003338:	b21b      	sxth	r3, r3
 800333a:	81a3      	strh	r3, [r4, #12]
 800333c:	4240      	negs	r0, r0
 800333e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003340:	9b01      	ldr	r3, [sp, #4]
 8003342:	1836      	adds	r6, r6, r0
 8003344:	1a1b      	subs	r3, r3, r0
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	e7e6      	b.n	8003318 <__sflush_r+0xd4>
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	20400001 	.word	0x20400001

08003350 <_fflush_r>:
 8003350:	690b      	ldr	r3, [r1, #16]
 8003352:	b570      	push	{r4, r5, r6, lr}
 8003354:	0005      	movs	r5, r0
 8003356:	000c      	movs	r4, r1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <_fflush_r+0x12>
 800335c:	2500      	movs	r5, #0
 800335e:	0028      	movs	r0, r5
 8003360:	bd70      	pop	{r4, r5, r6, pc}
 8003362:	2800      	cmp	r0, #0
 8003364:	d004      	beq.n	8003370 <_fflush_r+0x20>
 8003366:	6a03      	ldr	r3, [r0, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <_fflush_r+0x20>
 800336c:	f7ff fbc6 	bl	8002afc <__sinit>
 8003370:	220c      	movs	r2, #12
 8003372:	5ea3      	ldrsh	r3, [r4, r2]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f1      	beq.n	800335c <_fflush_r+0xc>
 8003378:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800337a:	07d2      	lsls	r2, r2, #31
 800337c:	d404      	bmi.n	8003388 <_fflush_r+0x38>
 800337e:	059b      	lsls	r3, r3, #22
 8003380:	d402      	bmi.n	8003388 <_fflush_r+0x38>
 8003382:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003384:	f7ff fcbb 	bl	8002cfe <__retarget_lock_acquire_recursive>
 8003388:	0028      	movs	r0, r5
 800338a:	0021      	movs	r1, r4
 800338c:	f7ff ff5a 	bl	8003244 <__sflush_r>
 8003390:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003392:	0005      	movs	r5, r0
 8003394:	07db      	lsls	r3, r3, #31
 8003396:	d4e2      	bmi.n	800335e <_fflush_r+0xe>
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	059b      	lsls	r3, r3, #22
 800339c:	d4df      	bmi.n	800335e <_fflush_r+0xe>
 800339e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033a0:	f7ff fcae 	bl	8002d00 <__retarget_lock_release_recursive>
 80033a4:	e7db      	b.n	800335e <_fflush_r+0xe>
	...

080033a8 <fiprintf>:
 80033a8:	b40e      	push	{r1, r2, r3}
 80033aa:	b517      	push	{r0, r1, r2, r4, lr}
 80033ac:	4c05      	ldr	r4, [pc, #20]	@ (80033c4 <fiprintf+0x1c>)
 80033ae:	ab05      	add	r3, sp, #20
 80033b0:	cb04      	ldmia	r3!, {r2}
 80033b2:	0001      	movs	r1, r0
 80033b4:	6820      	ldr	r0, [r4, #0]
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	f000 f852 	bl	8003460 <_vfiprintf_r>
 80033bc:	bc1e      	pop	{r1, r2, r3, r4}
 80033be:	bc08      	pop	{r3}
 80033c0:	b003      	add	sp, #12
 80033c2:	4718      	bx	r3
 80033c4:	20000018 	.word	0x20000018

080033c8 <_sbrk_r>:
 80033c8:	2300      	movs	r3, #0
 80033ca:	b570      	push	{r4, r5, r6, lr}
 80033cc:	4d06      	ldr	r5, [pc, #24]	@ (80033e8 <_sbrk_r+0x20>)
 80033ce:	0004      	movs	r4, r0
 80033d0:	0008      	movs	r0, r1
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	f7fd f9ae 	bl	8000734 <_sbrk>
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	d103      	bne.n	80033e4 <_sbrk_r+0x1c>
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d000      	beq.n	80033e4 <_sbrk_r+0x1c>
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	20000294 	.word	0x20000294

080033ec <memchr>:
 80033ec:	b2c9      	uxtb	r1, r1
 80033ee:	1882      	adds	r2, r0, r2
 80033f0:	4290      	cmp	r0, r2
 80033f2:	d101      	bne.n	80033f8 <memchr+0xc>
 80033f4:	2000      	movs	r0, #0
 80033f6:	4770      	bx	lr
 80033f8:	7803      	ldrb	r3, [r0, #0]
 80033fa:	428b      	cmp	r3, r1
 80033fc:	d0fb      	beq.n	80033f6 <memchr+0xa>
 80033fe:	3001      	adds	r0, #1
 8003400:	e7f6      	b.n	80033f0 <memchr+0x4>

08003402 <abort>:
 8003402:	2006      	movs	r0, #6
 8003404:	b510      	push	{r4, lr}
 8003406:	f000 fa11 	bl	800382c <raise>
 800340a:	2001      	movs	r0, #1
 800340c:	f7fd f920 	bl	8000650 <_exit>

08003410 <__sfputc_r>:
 8003410:	6893      	ldr	r3, [r2, #8]
 8003412:	b510      	push	{r4, lr}
 8003414:	3b01      	subs	r3, #1
 8003416:	6093      	str	r3, [r2, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da04      	bge.n	8003426 <__sfputc_r+0x16>
 800341c:	6994      	ldr	r4, [r2, #24]
 800341e:	42a3      	cmp	r3, r4
 8003420:	db07      	blt.n	8003432 <__sfputc_r+0x22>
 8003422:	290a      	cmp	r1, #10
 8003424:	d005      	beq.n	8003432 <__sfputc_r+0x22>
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	1c58      	adds	r0, r3, #1
 800342a:	6010      	str	r0, [r2, #0]
 800342c:	7019      	strb	r1, [r3, #0]
 800342e:	0008      	movs	r0, r1
 8003430:	bd10      	pop	{r4, pc}
 8003432:	f000 f931 	bl	8003698 <__swbuf_r>
 8003436:	0001      	movs	r1, r0
 8003438:	e7f9      	b.n	800342e <__sfputc_r+0x1e>

0800343a <__sfputs_r>:
 800343a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343c:	0006      	movs	r6, r0
 800343e:	000f      	movs	r7, r1
 8003440:	0014      	movs	r4, r2
 8003442:	18d5      	adds	r5, r2, r3
 8003444:	42ac      	cmp	r4, r5
 8003446:	d101      	bne.n	800344c <__sfputs_r+0x12>
 8003448:	2000      	movs	r0, #0
 800344a:	e007      	b.n	800345c <__sfputs_r+0x22>
 800344c:	7821      	ldrb	r1, [r4, #0]
 800344e:	003a      	movs	r2, r7
 8003450:	0030      	movs	r0, r6
 8003452:	f7ff ffdd 	bl	8003410 <__sfputc_r>
 8003456:	3401      	adds	r4, #1
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d1f3      	bne.n	8003444 <__sfputs_r+0xa>
 800345c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003460 <_vfiprintf_r>:
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b0a1      	sub	sp, #132	@ 0x84
 8003464:	000f      	movs	r7, r1
 8003466:	0015      	movs	r5, r2
 8003468:	001e      	movs	r6, r3
 800346a:	9003      	str	r0, [sp, #12]
 800346c:	2800      	cmp	r0, #0
 800346e:	d004      	beq.n	800347a <_vfiprintf_r+0x1a>
 8003470:	6a03      	ldr	r3, [r0, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <_vfiprintf_r+0x1a>
 8003476:	f7ff fb41 	bl	8002afc <__sinit>
 800347a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800347c:	07db      	lsls	r3, r3, #31
 800347e:	d405      	bmi.n	800348c <_vfiprintf_r+0x2c>
 8003480:	89bb      	ldrh	r3, [r7, #12]
 8003482:	059b      	lsls	r3, r3, #22
 8003484:	d402      	bmi.n	800348c <_vfiprintf_r+0x2c>
 8003486:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003488:	f7ff fc39 	bl	8002cfe <__retarget_lock_acquire_recursive>
 800348c:	89bb      	ldrh	r3, [r7, #12]
 800348e:	071b      	lsls	r3, r3, #28
 8003490:	d502      	bpl.n	8003498 <_vfiprintf_r+0x38>
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d113      	bne.n	80034c0 <_vfiprintf_r+0x60>
 8003498:	0039      	movs	r1, r7
 800349a:	9803      	ldr	r0, [sp, #12]
 800349c:	f000 f93e 	bl	800371c <__swsetup_r>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d00d      	beq.n	80034c0 <_vfiprintf_r+0x60>
 80034a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034a6:	07db      	lsls	r3, r3, #31
 80034a8:	d503      	bpl.n	80034b2 <_vfiprintf_r+0x52>
 80034aa:	2001      	movs	r0, #1
 80034ac:	4240      	negs	r0, r0
 80034ae:	b021      	add	sp, #132	@ 0x84
 80034b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b2:	89bb      	ldrh	r3, [r7, #12]
 80034b4:	059b      	lsls	r3, r3, #22
 80034b6:	d4f8      	bmi.n	80034aa <_vfiprintf_r+0x4a>
 80034b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80034ba:	f7ff fc21 	bl	8002d00 <__retarget_lock_release_recursive>
 80034be:	e7f4      	b.n	80034aa <_vfiprintf_r+0x4a>
 80034c0:	2300      	movs	r3, #0
 80034c2:	ac08      	add	r4, sp, #32
 80034c4:	6163      	str	r3, [r4, #20]
 80034c6:	3320      	adds	r3, #32
 80034c8:	7663      	strb	r3, [r4, #25]
 80034ca:	3310      	adds	r3, #16
 80034cc:	76a3      	strb	r3, [r4, #26]
 80034ce:	9607      	str	r6, [sp, #28]
 80034d0:	002e      	movs	r6, r5
 80034d2:	7833      	ldrb	r3, [r6, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <_vfiprintf_r+0x7c>
 80034d8:	2b25      	cmp	r3, #37	@ 0x25
 80034da:	d148      	bne.n	800356e <_vfiprintf_r+0x10e>
 80034dc:	1b73      	subs	r3, r6, r5
 80034de:	9305      	str	r3, [sp, #20]
 80034e0:	42ae      	cmp	r6, r5
 80034e2:	d00b      	beq.n	80034fc <_vfiprintf_r+0x9c>
 80034e4:	002a      	movs	r2, r5
 80034e6:	0039      	movs	r1, r7
 80034e8:	9803      	ldr	r0, [sp, #12]
 80034ea:	f7ff ffa6 	bl	800343a <__sfputs_r>
 80034ee:	3001      	adds	r0, #1
 80034f0:	d100      	bne.n	80034f4 <_vfiprintf_r+0x94>
 80034f2:	e0ae      	b.n	8003652 <_vfiprintf_r+0x1f2>
 80034f4:	6963      	ldr	r3, [r4, #20]
 80034f6:	9a05      	ldr	r2, [sp, #20]
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	6163      	str	r3, [r4, #20]
 80034fc:	7833      	ldrb	r3, [r6, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d100      	bne.n	8003504 <_vfiprintf_r+0xa4>
 8003502:	e0a6      	b.n	8003652 <_vfiprintf_r+0x1f2>
 8003504:	2201      	movs	r2, #1
 8003506:	2300      	movs	r3, #0
 8003508:	4252      	negs	r2, r2
 800350a:	6062      	str	r2, [r4, #4]
 800350c:	a904      	add	r1, sp, #16
 800350e:	3254      	adds	r2, #84	@ 0x54
 8003510:	1852      	adds	r2, r2, r1
 8003512:	1c75      	adds	r5, r6, #1
 8003514:	6023      	str	r3, [r4, #0]
 8003516:	60e3      	str	r3, [r4, #12]
 8003518:	60a3      	str	r3, [r4, #8]
 800351a:	7013      	strb	r3, [r2, #0]
 800351c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800351e:	4b59      	ldr	r3, [pc, #356]	@ (8003684 <_vfiprintf_r+0x224>)
 8003520:	2205      	movs	r2, #5
 8003522:	0018      	movs	r0, r3
 8003524:	7829      	ldrb	r1, [r5, #0]
 8003526:	9305      	str	r3, [sp, #20]
 8003528:	f7ff ff60 	bl	80033ec <memchr>
 800352c:	1c6e      	adds	r6, r5, #1
 800352e:	2800      	cmp	r0, #0
 8003530:	d11f      	bne.n	8003572 <_vfiprintf_r+0x112>
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	06d3      	lsls	r3, r2, #27
 8003536:	d504      	bpl.n	8003542 <_vfiprintf_r+0xe2>
 8003538:	2353      	movs	r3, #83	@ 0x53
 800353a:	a904      	add	r1, sp, #16
 800353c:	185b      	adds	r3, r3, r1
 800353e:	2120      	movs	r1, #32
 8003540:	7019      	strb	r1, [r3, #0]
 8003542:	0713      	lsls	r3, r2, #28
 8003544:	d504      	bpl.n	8003550 <_vfiprintf_r+0xf0>
 8003546:	2353      	movs	r3, #83	@ 0x53
 8003548:	a904      	add	r1, sp, #16
 800354a:	185b      	adds	r3, r3, r1
 800354c:	212b      	movs	r1, #43	@ 0x2b
 800354e:	7019      	strb	r1, [r3, #0]
 8003550:	782b      	ldrb	r3, [r5, #0]
 8003552:	2b2a      	cmp	r3, #42	@ 0x2a
 8003554:	d016      	beq.n	8003584 <_vfiprintf_r+0x124>
 8003556:	002e      	movs	r6, r5
 8003558:	2100      	movs	r1, #0
 800355a:	200a      	movs	r0, #10
 800355c:	68e3      	ldr	r3, [r4, #12]
 800355e:	7832      	ldrb	r2, [r6, #0]
 8003560:	1c75      	adds	r5, r6, #1
 8003562:	3a30      	subs	r2, #48	@ 0x30
 8003564:	2a09      	cmp	r2, #9
 8003566:	d950      	bls.n	800360a <_vfiprintf_r+0x1aa>
 8003568:	2900      	cmp	r1, #0
 800356a:	d111      	bne.n	8003590 <_vfiprintf_r+0x130>
 800356c:	e017      	b.n	800359e <_vfiprintf_r+0x13e>
 800356e:	3601      	adds	r6, #1
 8003570:	e7af      	b.n	80034d2 <_vfiprintf_r+0x72>
 8003572:	9b05      	ldr	r3, [sp, #20]
 8003574:	6822      	ldr	r2, [r4, #0]
 8003576:	1ac0      	subs	r0, r0, r3
 8003578:	2301      	movs	r3, #1
 800357a:	4083      	lsls	r3, r0
 800357c:	4313      	orrs	r3, r2
 800357e:	0035      	movs	r5, r6
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	e7cc      	b.n	800351e <_vfiprintf_r+0xbe>
 8003584:	9b07      	ldr	r3, [sp, #28]
 8003586:	1d19      	adds	r1, r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	9107      	str	r1, [sp, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db01      	blt.n	8003594 <_vfiprintf_r+0x134>
 8003590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003592:	e004      	b.n	800359e <_vfiprintf_r+0x13e>
 8003594:	425b      	negs	r3, r3
 8003596:	60e3      	str	r3, [r4, #12]
 8003598:	2302      	movs	r3, #2
 800359a:	4313      	orrs	r3, r2
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	7833      	ldrb	r3, [r6, #0]
 80035a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80035a2:	d10c      	bne.n	80035be <_vfiprintf_r+0x15e>
 80035a4:	7873      	ldrb	r3, [r6, #1]
 80035a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80035a8:	d134      	bne.n	8003614 <_vfiprintf_r+0x1b4>
 80035aa:	9b07      	ldr	r3, [sp, #28]
 80035ac:	3602      	adds	r6, #2
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	9207      	str	r2, [sp, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da01      	bge.n	80035bc <_vfiprintf_r+0x15c>
 80035b8:	2301      	movs	r3, #1
 80035ba:	425b      	negs	r3, r3
 80035bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035be:	4d32      	ldr	r5, [pc, #200]	@ (8003688 <_vfiprintf_r+0x228>)
 80035c0:	2203      	movs	r2, #3
 80035c2:	0028      	movs	r0, r5
 80035c4:	7831      	ldrb	r1, [r6, #0]
 80035c6:	f7ff ff11 	bl	80033ec <memchr>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d006      	beq.n	80035dc <_vfiprintf_r+0x17c>
 80035ce:	2340      	movs	r3, #64	@ 0x40
 80035d0:	1b40      	subs	r0, r0, r5
 80035d2:	4083      	lsls	r3, r0
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	3601      	adds	r6, #1
 80035d8:	4313      	orrs	r3, r2
 80035da:	6023      	str	r3, [r4, #0]
 80035dc:	7831      	ldrb	r1, [r6, #0]
 80035de:	2206      	movs	r2, #6
 80035e0:	482a      	ldr	r0, [pc, #168]	@ (800368c <_vfiprintf_r+0x22c>)
 80035e2:	1c75      	adds	r5, r6, #1
 80035e4:	7621      	strb	r1, [r4, #24]
 80035e6:	f7ff ff01 	bl	80033ec <memchr>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d040      	beq.n	8003670 <_vfiprintf_r+0x210>
 80035ee:	4b28      	ldr	r3, [pc, #160]	@ (8003690 <_vfiprintf_r+0x230>)
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d122      	bne.n	800363a <_vfiprintf_r+0x1da>
 80035f4:	2207      	movs	r2, #7
 80035f6:	9b07      	ldr	r3, [sp, #28]
 80035f8:	3307      	adds	r3, #7
 80035fa:	4393      	bics	r3, r2
 80035fc:	3308      	adds	r3, #8
 80035fe:	9307      	str	r3, [sp, #28]
 8003600:	6963      	ldr	r3, [r4, #20]
 8003602:	9a04      	ldr	r2, [sp, #16]
 8003604:	189b      	adds	r3, r3, r2
 8003606:	6163      	str	r3, [r4, #20]
 8003608:	e762      	b.n	80034d0 <_vfiprintf_r+0x70>
 800360a:	4343      	muls	r3, r0
 800360c:	002e      	movs	r6, r5
 800360e:	2101      	movs	r1, #1
 8003610:	189b      	adds	r3, r3, r2
 8003612:	e7a4      	b.n	800355e <_vfiprintf_r+0xfe>
 8003614:	2300      	movs	r3, #0
 8003616:	200a      	movs	r0, #10
 8003618:	0019      	movs	r1, r3
 800361a:	3601      	adds	r6, #1
 800361c:	6063      	str	r3, [r4, #4]
 800361e:	7832      	ldrb	r2, [r6, #0]
 8003620:	1c75      	adds	r5, r6, #1
 8003622:	3a30      	subs	r2, #48	@ 0x30
 8003624:	2a09      	cmp	r2, #9
 8003626:	d903      	bls.n	8003630 <_vfiprintf_r+0x1d0>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0c8      	beq.n	80035be <_vfiprintf_r+0x15e>
 800362c:	9109      	str	r1, [sp, #36]	@ 0x24
 800362e:	e7c6      	b.n	80035be <_vfiprintf_r+0x15e>
 8003630:	4341      	muls	r1, r0
 8003632:	002e      	movs	r6, r5
 8003634:	2301      	movs	r3, #1
 8003636:	1889      	adds	r1, r1, r2
 8003638:	e7f1      	b.n	800361e <_vfiprintf_r+0x1be>
 800363a:	aa07      	add	r2, sp, #28
 800363c:	9200      	str	r2, [sp, #0]
 800363e:	0021      	movs	r1, r4
 8003640:	003a      	movs	r2, r7
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <_vfiprintf_r+0x234>)
 8003644:	9803      	ldr	r0, [sp, #12]
 8003646:	e000      	b.n	800364a <_vfiprintf_r+0x1ea>
 8003648:	bf00      	nop
 800364a:	9004      	str	r0, [sp, #16]
 800364c:	9b04      	ldr	r3, [sp, #16]
 800364e:	3301      	adds	r3, #1
 8003650:	d1d6      	bne.n	8003600 <_vfiprintf_r+0x1a0>
 8003652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003654:	07db      	lsls	r3, r3, #31
 8003656:	d405      	bmi.n	8003664 <_vfiprintf_r+0x204>
 8003658:	89bb      	ldrh	r3, [r7, #12]
 800365a:	059b      	lsls	r3, r3, #22
 800365c:	d402      	bmi.n	8003664 <_vfiprintf_r+0x204>
 800365e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003660:	f7ff fb4e 	bl	8002d00 <__retarget_lock_release_recursive>
 8003664:	89bb      	ldrh	r3, [r7, #12]
 8003666:	065b      	lsls	r3, r3, #25
 8003668:	d500      	bpl.n	800366c <_vfiprintf_r+0x20c>
 800366a:	e71e      	b.n	80034aa <_vfiprintf_r+0x4a>
 800366c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800366e:	e71e      	b.n	80034ae <_vfiprintf_r+0x4e>
 8003670:	aa07      	add	r2, sp, #28
 8003672:	9200      	str	r2, [sp, #0]
 8003674:	0021      	movs	r1, r4
 8003676:	003a      	movs	r2, r7
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <_vfiprintf_r+0x234>)
 800367a:	9803      	ldr	r0, [sp, #12]
 800367c:	f7ff fcd6 	bl	800302c <_printf_i>
 8003680:	e7e3      	b.n	800364a <_vfiprintf_r+0x1ea>
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	08003aa9 	.word	0x08003aa9
 8003688:	08003aaf 	.word	0x08003aaf
 800368c:	08003ab3 	.word	0x08003ab3
 8003690:	00000000 	.word	0x00000000
 8003694:	0800343b 	.word	0x0800343b

08003698 <__swbuf_r>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	0006      	movs	r6, r0
 800369c:	000d      	movs	r5, r1
 800369e:	0014      	movs	r4, r2
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d004      	beq.n	80036ae <__swbuf_r+0x16>
 80036a4:	6a03      	ldr	r3, [r0, #32]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <__swbuf_r+0x16>
 80036aa:	f7ff fa27 	bl	8002afc <__sinit>
 80036ae:	69a3      	ldr	r3, [r4, #24]
 80036b0:	60a3      	str	r3, [r4, #8]
 80036b2:	89a3      	ldrh	r3, [r4, #12]
 80036b4:	071b      	lsls	r3, r3, #28
 80036b6:	d502      	bpl.n	80036be <__swbuf_r+0x26>
 80036b8:	6923      	ldr	r3, [r4, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <__swbuf_r+0x3a>
 80036be:	0021      	movs	r1, r4
 80036c0:	0030      	movs	r0, r6
 80036c2:	f000 f82b 	bl	800371c <__swsetup_r>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d003      	beq.n	80036d2 <__swbuf_r+0x3a>
 80036ca:	2501      	movs	r5, #1
 80036cc:	426d      	negs	r5, r5
 80036ce:	0028      	movs	r0, r5
 80036d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d2:	6923      	ldr	r3, [r4, #16]
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	b2ef      	uxtb	r7, r5
 80036d8:	1ac0      	subs	r0, r0, r3
 80036da:	6963      	ldr	r3, [r4, #20]
 80036dc:	b2ed      	uxtb	r5, r5
 80036de:	4283      	cmp	r3, r0
 80036e0:	dc05      	bgt.n	80036ee <__swbuf_r+0x56>
 80036e2:	0021      	movs	r1, r4
 80036e4:	0030      	movs	r0, r6
 80036e6:	f7ff fe33 	bl	8003350 <_fflush_r>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d1ed      	bne.n	80036ca <__swbuf_r+0x32>
 80036ee:	68a3      	ldr	r3, [r4, #8]
 80036f0:	3001      	adds	r0, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60a3      	str	r3, [r4, #8]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	6022      	str	r2, [r4, #0]
 80036fc:	701f      	strb	r7, [r3, #0]
 80036fe:	6963      	ldr	r3, [r4, #20]
 8003700:	4283      	cmp	r3, r0
 8003702:	d004      	beq.n	800370e <__swbuf_r+0x76>
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	07db      	lsls	r3, r3, #31
 8003708:	d5e1      	bpl.n	80036ce <__swbuf_r+0x36>
 800370a:	2d0a      	cmp	r5, #10
 800370c:	d1df      	bne.n	80036ce <__swbuf_r+0x36>
 800370e:	0021      	movs	r1, r4
 8003710:	0030      	movs	r0, r6
 8003712:	f7ff fe1d 	bl	8003350 <_fflush_r>
 8003716:	2800      	cmp	r0, #0
 8003718:	d0d9      	beq.n	80036ce <__swbuf_r+0x36>
 800371a:	e7d6      	b.n	80036ca <__swbuf_r+0x32>

0800371c <__swsetup_r>:
 800371c:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <__swsetup_r+0xb8>)
 800371e:	b570      	push	{r4, r5, r6, lr}
 8003720:	0005      	movs	r5, r0
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	000c      	movs	r4, r1
 8003726:	2800      	cmp	r0, #0
 8003728:	d004      	beq.n	8003734 <__swsetup_r+0x18>
 800372a:	6a03      	ldr	r3, [r0, #32]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <__swsetup_r+0x18>
 8003730:	f7ff f9e4 	bl	8002afc <__sinit>
 8003734:	220c      	movs	r2, #12
 8003736:	5ea3      	ldrsh	r3, [r4, r2]
 8003738:	071a      	lsls	r2, r3, #28
 800373a:	d423      	bmi.n	8003784 <__swsetup_r+0x68>
 800373c:	06da      	lsls	r2, r3, #27
 800373e:	d407      	bmi.n	8003750 <__swsetup_r+0x34>
 8003740:	2209      	movs	r2, #9
 8003742:	602a      	str	r2, [r5, #0]
 8003744:	2240      	movs	r2, #64	@ 0x40
 8003746:	2001      	movs	r0, #1
 8003748:	4313      	orrs	r3, r2
 800374a:	81a3      	strh	r3, [r4, #12]
 800374c:	4240      	negs	r0, r0
 800374e:	e03a      	b.n	80037c6 <__swsetup_r+0xaa>
 8003750:	075b      	lsls	r3, r3, #29
 8003752:	d513      	bpl.n	800377c <__swsetup_r+0x60>
 8003754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003756:	2900      	cmp	r1, #0
 8003758:	d008      	beq.n	800376c <__swsetup_r+0x50>
 800375a:	0023      	movs	r3, r4
 800375c:	3344      	adds	r3, #68	@ 0x44
 800375e:	4299      	cmp	r1, r3
 8003760:	d002      	beq.n	8003768 <__swsetup_r+0x4c>
 8003762:	0028      	movs	r0, r5
 8003764:	f7ff faec 	bl	8002d40 <_free_r>
 8003768:	2300      	movs	r3, #0
 800376a:	6363      	str	r3, [r4, #52]	@ 0x34
 800376c:	2224      	movs	r2, #36	@ 0x24
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	4393      	bics	r3, r2
 8003772:	81a3      	strh	r3, [r4, #12]
 8003774:	2300      	movs	r3, #0
 8003776:	6063      	str	r3, [r4, #4]
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	6023      	str	r3, [r4, #0]
 800377c:	2308      	movs	r3, #8
 800377e:	89a2      	ldrh	r2, [r4, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	81a3      	strh	r3, [r4, #12]
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <__swsetup_r+0x86>
 800378a:	21a0      	movs	r1, #160	@ 0xa0
 800378c:	2280      	movs	r2, #128	@ 0x80
 800378e:	89a3      	ldrh	r3, [r4, #12]
 8003790:	0089      	lsls	r1, r1, #2
 8003792:	0092      	lsls	r2, r2, #2
 8003794:	400b      	ands	r3, r1
 8003796:	4293      	cmp	r3, r2
 8003798:	d003      	beq.n	80037a2 <__swsetup_r+0x86>
 800379a:	0021      	movs	r1, r4
 800379c:	0028      	movs	r0, r5
 800379e:	f000 f88f 	bl	80038c0 <__smakebuf_r>
 80037a2:	220c      	movs	r2, #12
 80037a4:	5ea3      	ldrsh	r3, [r4, r2]
 80037a6:	2101      	movs	r1, #1
 80037a8:	001a      	movs	r2, r3
 80037aa:	400a      	ands	r2, r1
 80037ac:	420b      	tst	r3, r1
 80037ae:	d00b      	beq.n	80037c8 <__swsetup_r+0xac>
 80037b0:	2200      	movs	r2, #0
 80037b2:	60a2      	str	r2, [r4, #8]
 80037b4:	6962      	ldr	r2, [r4, #20]
 80037b6:	4252      	negs	r2, r2
 80037b8:	61a2      	str	r2, [r4, #24]
 80037ba:	2000      	movs	r0, #0
 80037bc:	6922      	ldr	r2, [r4, #16]
 80037be:	4282      	cmp	r2, r0
 80037c0:	d101      	bne.n	80037c6 <__swsetup_r+0xaa>
 80037c2:	061a      	lsls	r2, r3, #24
 80037c4:	d4be      	bmi.n	8003744 <__swsetup_r+0x28>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	0799      	lsls	r1, r3, #30
 80037ca:	d400      	bmi.n	80037ce <__swsetup_r+0xb2>
 80037cc:	6962      	ldr	r2, [r4, #20]
 80037ce:	60a2      	str	r2, [r4, #8]
 80037d0:	e7f3      	b.n	80037ba <__swsetup_r+0x9e>
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	20000018 	.word	0x20000018

080037d8 <_raise_r>:
 80037d8:	b570      	push	{r4, r5, r6, lr}
 80037da:	0004      	movs	r4, r0
 80037dc:	000d      	movs	r5, r1
 80037de:	291f      	cmp	r1, #31
 80037e0:	d904      	bls.n	80037ec <_raise_r+0x14>
 80037e2:	2316      	movs	r3, #22
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	2001      	movs	r0, #1
 80037e8:	4240      	negs	r0, r0
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <_raise_r+0x24>
 80037f2:	008a      	lsls	r2, r1, #2
 80037f4:	189b      	adds	r3, r3, r2
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2a00      	cmp	r2, #0
 80037fa:	d108      	bne.n	800380e <_raise_r+0x36>
 80037fc:	0020      	movs	r0, r4
 80037fe:	f000 f831 	bl	8003864 <_getpid_r>
 8003802:	002a      	movs	r2, r5
 8003804:	0001      	movs	r1, r0
 8003806:	0020      	movs	r0, r4
 8003808:	f000 f81a 	bl	8003840 <_kill_r>
 800380c:	e7ed      	b.n	80037ea <_raise_r+0x12>
 800380e:	2a01      	cmp	r2, #1
 8003810:	d009      	beq.n	8003826 <_raise_r+0x4e>
 8003812:	1c51      	adds	r1, r2, #1
 8003814:	d103      	bne.n	800381e <_raise_r+0x46>
 8003816:	2316      	movs	r3, #22
 8003818:	6003      	str	r3, [r0, #0]
 800381a:	2001      	movs	r0, #1
 800381c:	e7e5      	b.n	80037ea <_raise_r+0x12>
 800381e:	2100      	movs	r1, #0
 8003820:	0028      	movs	r0, r5
 8003822:	6019      	str	r1, [r3, #0]
 8003824:	4790      	blx	r2
 8003826:	2000      	movs	r0, #0
 8003828:	e7df      	b.n	80037ea <_raise_r+0x12>
	...

0800382c <raise>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4b03      	ldr	r3, [pc, #12]	@ (800383c <raise+0x10>)
 8003830:	0001      	movs	r1, r0
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	f7ff ffd0 	bl	80037d8 <_raise_r>
 8003838:	bd10      	pop	{r4, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000018 	.word	0x20000018

08003840 <_kill_r>:
 8003840:	2300      	movs	r3, #0
 8003842:	b570      	push	{r4, r5, r6, lr}
 8003844:	4d06      	ldr	r5, [pc, #24]	@ (8003860 <_kill_r+0x20>)
 8003846:	0004      	movs	r4, r0
 8003848:	0008      	movs	r0, r1
 800384a:	0011      	movs	r1, r2
 800384c:	602b      	str	r3, [r5, #0]
 800384e:	f7fc feef 	bl	8000630 <_kill>
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	d103      	bne.n	800385e <_kill_r+0x1e>
 8003856:	682b      	ldr	r3, [r5, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d000      	beq.n	800385e <_kill_r+0x1e>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	20000294 	.word	0x20000294

08003864 <_getpid_r>:
 8003864:	b510      	push	{r4, lr}
 8003866:	f7fc fedd 	bl	8000624 <_getpid>
 800386a:	bd10      	pop	{r4, pc}

0800386c <__swhatbuf_r>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	000e      	movs	r6, r1
 8003870:	001d      	movs	r5, r3
 8003872:	230e      	movs	r3, #14
 8003874:	5ec9      	ldrsh	r1, [r1, r3]
 8003876:	0014      	movs	r4, r2
 8003878:	b096      	sub	sp, #88	@ 0x58
 800387a:	2900      	cmp	r1, #0
 800387c:	da0c      	bge.n	8003898 <__swhatbuf_r+0x2c>
 800387e:	89b2      	ldrh	r2, [r6, #12]
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	0011      	movs	r1, r2
 8003884:	4019      	ands	r1, r3
 8003886:	421a      	tst	r2, r3
 8003888:	d114      	bne.n	80038b4 <__swhatbuf_r+0x48>
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	2000      	movs	r0, #0
 8003890:	6029      	str	r1, [r5, #0]
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	b016      	add	sp, #88	@ 0x58
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	466a      	mov	r2, sp
 800389a:	f000 f853 	bl	8003944 <_fstat_r>
 800389e:	2800      	cmp	r0, #0
 80038a0:	dbed      	blt.n	800387e <__swhatbuf_r+0x12>
 80038a2:	23f0      	movs	r3, #240	@ 0xf0
 80038a4:	9901      	ldr	r1, [sp, #4]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	4019      	ands	r1, r3
 80038aa:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <__swhatbuf_r+0x50>)
 80038ac:	18c9      	adds	r1, r1, r3
 80038ae:	424b      	negs	r3, r1
 80038b0:	4159      	adcs	r1, r3
 80038b2:	e7ea      	b.n	800388a <__swhatbuf_r+0x1e>
 80038b4:	2100      	movs	r1, #0
 80038b6:	2340      	movs	r3, #64	@ 0x40
 80038b8:	e7e9      	b.n	800388e <__swhatbuf_r+0x22>
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	ffffe000 	.word	0xffffe000

080038c0 <__smakebuf_r>:
 80038c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c2:	2602      	movs	r6, #2
 80038c4:	898b      	ldrh	r3, [r1, #12]
 80038c6:	0005      	movs	r5, r0
 80038c8:	000c      	movs	r4, r1
 80038ca:	b085      	sub	sp, #20
 80038cc:	4233      	tst	r3, r6
 80038ce:	d007      	beq.n	80038e0 <__smakebuf_r+0x20>
 80038d0:	0023      	movs	r3, r4
 80038d2:	3347      	adds	r3, #71	@ 0x47
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	2301      	movs	r3, #1
 80038da:	6163      	str	r3, [r4, #20]
 80038dc:	b005      	add	sp, #20
 80038de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038e0:	ab03      	add	r3, sp, #12
 80038e2:	aa02      	add	r2, sp, #8
 80038e4:	f7ff ffc2 	bl	800386c <__swhatbuf_r>
 80038e8:	9f02      	ldr	r7, [sp, #8]
 80038ea:	9001      	str	r0, [sp, #4]
 80038ec:	0039      	movs	r1, r7
 80038ee:	0028      	movs	r0, r5
 80038f0:	f7ff fa9c 	bl	8002e2c <_malloc_r>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d108      	bne.n	800390a <__smakebuf_r+0x4a>
 80038f8:	220c      	movs	r2, #12
 80038fa:	5ea3      	ldrsh	r3, [r4, r2]
 80038fc:	059a      	lsls	r2, r3, #22
 80038fe:	d4ed      	bmi.n	80038dc <__smakebuf_r+0x1c>
 8003900:	2203      	movs	r2, #3
 8003902:	4393      	bics	r3, r2
 8003904:	431e      	orrs	r6, r3
 8003906:	81a6      	strh	r6, [r4, #12]
 8003908:	e7e2      	b.n	80038d0 <__smakebuf_r+0x10>
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	89a2      	ldrh	r2, [r4, #12]
 800390e:	6020      	str	r0, [r4, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	81a3      	strh	r3, [r4, #12]
 8003914:	9b03      	ldr	r3, [sp, #12]
 8003916:	6120      	str	r0, [r4, #16]
 8003918:	6167      	str	r7, [r4, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <__smakebuf_r+0x78>
 800391e:	0028      	movs	r0, r5
 8003920:	230e      	movs	r3, #14
 8003922:	5ee1      	ldrsh	r1, [r4, r3]
 8003924:	f000 f820 	bl	8003968 <_isatty_r>
 8003928:	2800      	cmp	r0, #0
 800392a:	d005      	beq.n	8003938 <__smakebuf_r+0x78>
 800392c:	2303      	movs	r3, #3
 800392e:	89a2      	ldrh	r2, [r4, #12]
 8003930:	439a      	bics	r2, r3
 8003932:	3b02      	subs	r3, #2
 8003934:	4313      	orrs	r3, r2
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	9a01      	ldr	r2, [sp, #4]
 800393c:	4313      	orrs	r3, r2
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	e7cc      	b.n	80038dc <__smakebuf_r+0x1c>
	...

08003944 <_fstat_r>:
 8003944:	2300      	movs	r3, #0
 8003946:	b570      	push	{r4, r5, r6, lr}
 8003948:	4d06      	ldr	r5, [pc, #24]	@ (8003964 <_fstat_r+0x20>)
 800394a:	0004      	movs	r4, r0
 800394c:	0008      	movs	r0, r1
 800394e:	0011      	movs	r1, r2
 8003950:	602b      	str	r3, [r5, #0]
 8003952:	f7fc fecd 	bl	80006f0 <_fstat>
 8003956:	1c43      	adds	r3, r0, #1
 8003958:	d103      	bne.n	8003962 <_fstat_r+0x1e>
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d000      	beq.n	8003962 <_fstat_r+0x1e>
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	20000294 	.word	0x20000294

08003968 <_isatty_r>:
 8003968:	2300      	movs	r3, #0
 800396a:	b570      	push	{r4, r5, r6, lr}
 800396c:	4d06      	ldr	r5, [pc, #24]	@ (8003988 <_isatty_r+0x20>)
 800396e:	0004      	movs	r4, r0
 8003970:	0008      	movs	r0, r1
 8003972:	602b      	str	r3, [r5, #0]
 8003974:	f7fc feca 	bl	800070c <_isatty>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	d103      	bne.n	8003984 <_isatty_r+0x1c>
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d000      	beq.n	8003984 <_isatty_r+0x1c>
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	bd70      	pop	{r4, r5, r6, pc}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	20000294 	.word	0x20000294

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
