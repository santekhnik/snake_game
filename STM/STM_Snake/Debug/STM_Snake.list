
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002164  08002164  00003164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021b4  080021b4  00004060  2**0
                  CONTENTS
  4 .ARM          00000000  080021b4  080021b4  00004060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021b4  080021b4  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021b4  080021b4  000031b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021b8  080021b8  000031b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080021bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000060  0800221c  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800221c  0000429c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d81  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c5  00000000  00000000  0000be09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0000d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c8  00000000  00000000  0000d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001218f  00000000  00000000  0000dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008424  00000000  00000000  0001fe57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a678  00000000  00000000  0002827b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000928f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca0  00000000  00000000  00092938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000945d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800214c 	.word	0x0800214c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	0800214c 	.word	0x0800214c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <crc16_ccitt_snake>:
#include <string.h>

#define START_BYTE 0x7E

// Функція обчислення CRC-16-CCITT (поліном 0x1021, початкове значення 0xFFFF)
uint16_t crc16_ccitt_snake(const uint8_t *data, uint16_t len, uint8_t cmd, uint8_t frog_x, uint8_t frog_y) {
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	000c      	movs	r4, r1
 800024e:	0010      	movs	r0, r2
 8000250:	0019      	movs	r1, r3
 8000252:	1cbb      	adds	r3, r7, #2
 8000254:	1c22      	adds	r2, r4, #0
 8000256:	801a      	strh	r2, [r3, #0]
 8000258:	1c7b      	adds	r3, r7, #1
 800025a:	1c02      	adds	r2, r0, #0
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	003b      	movs	r3, r7
 8000260:	1c0a      	adds	r2, r1, #0
 8000262:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000264:	210e      	movs	r1, #14
 8000266:	187b      	adds	r3, r7, r1
 8000268:	2201      	movs	r2, #1
 800026a:	4252      	negs	r2, r2
 800026c:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);
 800026e:	1c7b      	adds	r3, r7, #1
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	021b      	lsls	r3, r3, #8
 8000274:	b21a      	sxth	r2, r3
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2000      	movs	r0, #0
 800027a:	5e1b      	ldrsh	r3, [r3, r0]
 800027c:	4053      	eors	r3, r2
 800027e:	b21a      	sxth	r2, r3
 8000280:	187b      	adds	r3, r7, r1
 8000282:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)frog_x << 8) | frog_y;
 8000284:	003b      	movs	r3, r7
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	021b      	lsls	r3, r3, #8
 800028a:	b21a      	sxth	r2, r3
 800028c:	2320      	movs	r3, #32
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	b21b      	sxth	r3, r3
 8000294:	4313      	orrs	r3, r2
 8000296:	b21a      	sxth	r2, r3
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2000      	movs	r0, #0
 800029c:	5e1b      	ldrsh	r3, [r3, r0]
 800029e:	4053      	eors	r3, r2
 80002a0:	b21a      	sxth	r2, r3
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < len; i++) {
 80002a6:	230c      	movs	r3, #12
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	2200      	movs	r2, #0
 80002ac:	801a      	strh	r2, [r3, #0]
 80002ae:	e03b      	b.n	8000328 <crc16_ccitt_snake+0xe4>
        crc ^= ((uint16_t)data[i] << 8);
 80002b0:	230c      	movs	r3, #12
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	18d3      	adds	r3, r2, r3
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	021b      	lsls	r3, r3, #8
 80002be:	b21a      	sxth	r2, r3
 80002c0:	210e      	movs	r1, #14
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2000      	movs	r0, #0
 80002c6:	5e1b      	ldrsh	r3, [r3, r0]
 80002c8:	4053      	eors	r3, r2
 80002ca:	b21a      	sxth	r2, r3
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 80002d0:	230b      	movs	r3, #11
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e01b      	b.n	8000312 <crc16_ccitt_snake+0xce>
            if (crc & 0x8000)
 80002da:	210e      	movs	r1, #14
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	5e9b      	ldrsh	r3, [r3, r2]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	da09      	bge.n	80002fa <crc16_ccitt_snake+0xb6>
                crc = (crc << 1) ^ 0x1021;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	b21b      	sxth	r3, r3
 80002ee:	4a15      	ldr	r2, [pc, #84]	@ (8000344 <crc16_ccitt_snake+0x100>)
 80002f0:	4053      	eors	r3, r2
 80002f2:	b21a      	sxth	r2, r3
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	801a      	strh	r2, [r3, #0]
 80002f8:	e005      	b.n	8000306 <crc16_ccitt_snake+0xc2>
            else
                crc <<= 1;
 80002fa:	230e      	movs	r3, #14
 80002fc:	18fa      	adds	r2, r7, r3
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	18db      	adds	r3, r3, r3
 8000304:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000306:	210b      	movs	r1, #11
 8000308:	187b      	adds	r3, r7, r1
 800030a:	781a      	ldrb	r2, [r3, #0]
 800030c:	187b      	adds	r3, r7, r1
 800030e:	3201      	adds	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
 8000312:	230b      	movs	r3, #11
 8000314:	18fb      	adds	r3, r7, r3
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b07      	cmp	r3, #7
 800031a:	d9de      	bls.n	80002da <crc16_ccitt_snake+0x96>
    for (uint16_t i = 0; i < len; i++) {
 800031c:	210c      	movs	r1, #12
 800031e:	187b      	adds	r3, r7, r1
 8000320:	881a      	ldrh	r2, [r3, #0]
 8000322:	187b      	adds	r3, r7, r1
 8000324:	3201      	adds	r2, #1
 8000326:	801a      	strh	r2, [r3, #0]
 8000328:	230c      	movs	r3, #12
 800032a:	18fa      	adds	r2, r7, r3
 800032c:	1cbb      	adds	r3, r7, #2
 800032e:	8812      	ldrh	r2, [r2, #0]
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	429a      	cmp	r2, r3
 8000334:	d3bc      	bcc.n	80002b0 <crc16_ccitt_snake+0x6c>
        }
    }
    return crc;
 8000336:	230e      	movs	r3, #14
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	881b      	ldrh	r3, [r3, #0]
}
 800033c:	0018      	movs	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	b005      	add	sp, #20
 8000342:	bd90      	pop	{r4, r7, pc}
 8000344:	00001021 	.word	0x00001021

08000348 <crc16_ccitt>:
uint16_t crc16_ccitt(const uint8_t *data, uint16_t len, uint8_t cmd) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	0008      	movs	r0, r1
 8000352:	0011      	movs	r1, r2
 8000354:	1cbb      	adds	r3, r7, #2
 8000356:	1c02      	adds	r2, r0, #0
 8000358:	801a      	strh	r2, [r3, #0]
 800035a:	1c7b      	adds	r3, r7, #1
 800035c:	1c0a      	adds	r2, r1, #0
 800035e:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000360:	210e      	movs	r1, #14
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2201      	movs	r2, #1
 8000366:	4252      	negs	r2, r2
 8000368:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);
 800036a:	1c7b      	adds	r3, r7, #1
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	021b      	lsls	r3, r3, #8
 8000370:	b21a      	sxth	r2, r3
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2000      	movs	r0, #0
 8000376:	5e1b      	ldrsh	r3, [r3, r0]
 8000378:	4053      	eors	r3, r2
 800037a:	b21a      	sxth	r2, r3
 800037c:	187b      	adds	r3, r7, r1
 800037e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < len; i++) {
 8000380:	230c      	movs	r3, #12
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	2200      	movs	r2, #0
 8000386:	801a      	strh	r2, [r3, #0]
 8000388:	e03b      	b.n	8000402 <crc16_ccitt+0xba>
        crc ^= ((uint16_t)data[i] << 8);
 800038a:	230c      	movs	r3, #12
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	18d3      	adds	r3, r2, r3
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	b21a      	sxth	r2, r3
 800039a:	210e      	movs	r1, #14
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2000      	movs	r0, #0
 80003a0:	5e1b      	ldrsh	r3, [r3, r0]
 80003a2:	4053      	eors	r3, r2
 80003a4:	b21a      	sxth	r2, r3
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 80003aa:	230b      	movs	r3, #11
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]
 80003b2:	e01b      	b.n	80003ec <crc16_ccitt+0xa4>
            if (crc & 0x8000)
 80003b4:	210e      	movs	r1, #14
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	5e9b      	ldrsh	r3, [r3, r2]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	da09      	bge.n	80003d4 <crc16_ccitt+0x8c>
                crc = (crc << 1) ^ 0x1021;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	b21b      	sxth	r3, r3
 80003c8:	4a15      	ldr	r2, [pc, #84]	@ (8000420 <crc16_ccitt+0xd8>)
 80003ca:	4053      	eors	r3, r2
 80003cc:	b21a      	sxth	r2, r3
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	801a      	strh	r2, [r3, #0]
 80003d2:	e005      	b.n	80003e0 <crc16_ccitt+0x98>
            else
                crc <<= 1;
 80003d4:	230e      	movs	r3, #14
 80003d6:	18fa      	adds	r2, r7, r3
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	18db      	adds	r3, r3, r3
 80003de:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 80003e0:	210b      	movs	r1, #11
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	3201      	adds	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
 80003ec:	230b      	movs	r3, #11
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b07      	cmp	r3, #7
 80003f4:	d9de      	bls.n	80003b4 <crc16_ccitt+0x6c>
    for (uint16_t i = 0; i < len; i++) {
 80003f6:	210c      	movs	r1, #12
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	881a      	ldrh	r2, [r3, #0]
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	3201      	adds	r2, #1
 8000400:	801a      	strh	r2, [r3, #0]
 8000402:	230c      	movs	r3, #12
 8000404:	18fa      	adds	r2, r7, r3
 8000406:	1cbb      	adds	r3, r7, #2
 8000408:	8812      	ldrh	r2, [r2, #0]
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	429a      	cmp	r2, r3
 800040e:	d3bc      	bcc.n	800038a <crc16_ccitt+0x42>
        }
    }
    return crc;
 8000410:	230e      	movs	r3, #14
 8000412:	18fb      	adds	r3, r7, r3
 8000414:	881b      	ldrh	r3, [r3, #0]
}
 8000416:	0018      	movs	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	b004      	add	sp, #16
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	00001021 	.word	0x00001021

08000424 <encode_frame_snake>:

//функція кодування пакету змії
uint16_t encode_frame_snake(const uint8_t *payload, uint8_t payload_len, uint8_t *frame, uint8_t cmd_byte, uint8_t frog_x, uint8_t frog_y) {
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	b089      	sub	sp, #36	@ 0x24
 8000428:	af02      	add	r7, sp, #8
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	0008      	movs	r0, r1
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	0019      	movs	r1, r3
 8000432:	240b      	movs	r4, #11
 8000434:	193b      	adds	r3, r7, r4
 8000436:	1c02      	adds	r2, r0, #0
 8000438:	701a      	strb	r2, [r3, #0]
 800043a:	200a      	movs	r0, #10
 800043c:	183b      	adds	r3, r7, r0
 800043e:	1c0a      	adds	r2, r1, #0
 8000440:	701a      	strb	r2, [r3, #0]
    frame[0] = START_BYTE;                  // Початковий байт
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	227e      	movs	r2, #126	@ 0x7e
 8000446:	701a      	strb	r2, [r3, #0]
    frame[1] = cmd_byte;                    // Байт комади
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3301      	adds	r3, #1
 800044c:	183a      	adds	r2, r7, r0
 800044e:	7812      	ldrb	r2, [r2, #0]
 8000450:	701a      	strb	r2, [r3, #0]
    frame[2] = payload_len;                 // Довжина корисного навантаження
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3302      	adds	r3, #2
 8000456:	193a      	adds	r2, r7, r4
 8000458:	7812      	ldrb	r2, [r2, #0]
 800045a:	701a      	strb	r2, [r3, #0]
    memcpy(&frame[3], payload, payload_len);//копіюємо пейлоад
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	1cd8      	adds	r0, r3, #3
 8000460:	0026      	movs	r6, r4
 8000462:	19bb      	adds	r3, r7, r6
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	0019      	movs	r1, r3
 800046a:	f001 f8a8 	bl	80015be <memcpy>
    frame[3 + payload_len] = frog_x;        //x жабки
 800046e:	19bb      	adds	r3, r7, r6
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	3303      	adds	r3, #3
 8000474:	001a      	movs	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	189a      	adds	r2, r3, r2
 800047a:	2528      	movs	r5, #40	@ 0x28
 800047c:	2008      	movs	r0, #8
 800047e:	182b      	adds	r3, r5, r0
 8000480:	19db      	adds	r3, r3, r7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	7013      	strb	r3, [r2, #0]
    frame[4 + payload_len] = frog_y;        //y жабки
 8000486:	19bb      	adds	r3, r7, r6
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	3304      	adds	r3, #4
 800048c:	001a      	movs	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	189b      	adds	r3, r3, r2
 8000492:	222c      	movs	r2, #44	@ 0x2c
 8000494:	1812      	adds	r2, r2, r0
 8000496:	19d2      	adds	r2, r2, r7
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	701a      	strb	r2, [r3, #0]

    uint16_t crc = crc16_ccitt_snake(payload, payload_len, cmd_byte, frog_x, frog_y);    // Додавання CRC (старший байт перший)
 800049c:	19bb      	adds	r3, r7, r6
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	b299      	uxth	r1, r3
 80004a2:	2316      	movs	r3, #22
 80004a4:	18fc      	adds	r4, r7, r3
 80004a6:	0002      	movs	r2, r0
 80004a8:	182b      	adds	r3, r5, r0
 80004aa:	19db      	adds	r3, r3, r7
 80004ac:	781d      	ldrb	r5, [r3, #0]
 80004ae:	200a      	movs	r0, #10
 80004b0:	183b      	adds	r3, r7, r0
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	469c      	mov	ip, r3
 80004b6:	68f8      	ldr	r0, [r7, #12]
 80004b8:	232c      	movs	r3, #44	@ 0x2c
 80004ba:	189b      	adds	r3, r3, r2
 80004bc:	19db      	adds	r3, r3, r7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	002b      	movs	r3, r5
 80004c4:	4662      	mov	r2, ip
 80004c6:	f7ff febd 	bl	8000244 <crc16_ccitt_snake>
 80004ca:	0003      	movs	r3, r0
 80004cc:	8023      	strh	r3, [r4, #0]
    frame[5 + payload_len] = (crc >> 8) & 0xFF; //crc high
 80004ce:	2016      	movs	r0, #22
 80004d0:	183b      	adds	r3, r7, r0
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	19bb      	adds	r3, r7, r6
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	3305      	adds	r3, #5
 80004de:	0019      	movs	r1, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	185b      	adds	r3, r3, r1
 80004e4:	b2d2      	uxtb	r2, r2
 80004e6:	701a      	strb	r2, [r3, #0]
    frame[6 + payload_len] = crc & 0xFF;        //crc low
 80004e8:	19bb      	adds	r3, r7, r6
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	3306      	adds	r3, #6
 80004ee:	001a      	movs	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	189b      	adds	r3, r3, r2
 80004f4:	183a      	adds	r2, r7, r0
 80004f6:	8812      	ldrh	r2, [r2, #0]
 80004f8:	b2d2      	uxtb	r2, r2
 80004fa:	701a      	strb	r2, [r3, #0]
    return frame;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	b29b      	uxth	r3, r3
}
 8000500:	0018      	movs	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	b007      	add	sp, #28
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000508 <decode_frame>:
    frame[4 + payload_len] = crc & 0xFF;        			//crc low
    return frame;
}


int decode_frame(const uint8_t *frame, uint8_t frame_len) {
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	000a      	movs	r2, r1
 8000512:	1cfb      	adds	r3, r7, #3
 8000514:	701a      	strb	r2, [r3, #0]

    if (frame_len < 5)
 8000516:	1cfb      	adds	r3, r7, #3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b04      	cmp	r3, #4
 800051c:	d802      	bhi.n	8000524 <decode_frame+0x1c>
        return -1; // Кадр занадто короткий
 800051e:	2301      	movs	r3, #1
 8000520:	425b      	negs	r3, r3
 8000522:	e03e      	b.n	80005a2 <decode_frame+0x9a>
    if (frame[0] != START_BYTE)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b7e      	cmp	r3, #126	@ 0x7e
 800052a:	d002      	beq.n	8000532 <decode_frame+0x2a>
        return -2; // Невірний стартовий байт
 800052c:	2302      	movs	r3, #2
 800052e:	425b      	negs	r3, r3
 8000530:	e037      	b.n	80005a2 <decode_frame+0x9a>
    uint8_t cmd_byte = frame[1];
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	230f      	movs	r3, #15
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	7812      	ldrb	r2, [r2, #0]
 800053c:	701a      	strb	r2, [r3, #0]
    uint8_t payload_len = frame[2];
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	1c9a      	adds	r2, r3, #2
 8000542:	230e      	movs	r3, #14
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	7812      	ldrb	r2, [r2, #0]
 8000548:	701a      	strb	r2, [r3, #0]
    if (frame_len != 5)
 800054a:	1cfb      	adds	r3, r7, #3
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b05      	cmp	r3, #5
 8000550:	d002      	beq.n	8000558 <decode_frame+0x50>
        return -3; 													// Невідповідність довжини кадру
 8000552:	2303      	movs	r3, #3
 8000554:	425b      	negs	r3, r3
 8000556:	e024      	b.n	80005a2 <decode_frame+0x9a>
    uint16_t received_crc = (frame[3] << 8) | frame[4];				// Отримання переданого CRC
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3303      	adds	r3, #3
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	b21a      	sxth	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3304      	adds	r3, #4
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b21b      	sxth	r3, r3
 800056a:	4313      	orrs	r3, r2
 800056c:	b21a      	sxth	r2, r3
 800056e:	250c      	movs	r5, #12
 8000570:	197b      	adds	r3, r7, r5
 8000572:	801a      	strh	r2, [r3, #0]
    uint16_t computed_crc = crc16_ccitt(&frame[3], 5, cmd_byte);    // Обчислення CRC на основі PAYLOAD
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	1cd8      	adds	r0, r3, #3
 8000578:	260a      	movs	r6, #10
 800057a:	19bc      	adds	r4, r7, r6
 800057c:	230f      	movs	r3, #15
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	001a      	movs	r2, r3
 8000584:	2105      	movs	r1, #5
 8000586:	f7ff fedf 	bl	8000348 <crc16_ccitt>
 800058a:	0003      	movs	r3, r0
 800058c:	8023      	strh	r3, [r4, #0]
    return (received_crc == computed_crc) ? 0 : -4;
 800058e:	197a      	adds	r2, r7, r5
 8000590:	19bb      	adds	r3, r7, r6
 8000592:	8812      	ldrh	r2, [r2, #0]
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	429a      	cmp	r2, r3
 8000598:	d101      	bne.n	800059e <decode_frame+0x96>
 800059a:	2300      	movs	r3, #0
 800059c:	e001      	b.n	80005a2 <decode_frame+0x9a>
 800059e:	2304      	movs	r3, #4
 80005a0:	425b      	negs	r3, r3
}
 80005a2:	0018      	movs	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b005      	add	sp, #20
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b0c7      	sub	sp, #284	@ 0x11c
 80005b0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	 uint8_t payload[] = "w";
 80005b2:	1c7b      	adds	r3, r7, #1
 80005b4:	33ff      	adds	r3, #255	@ 0xff
 80005b6:	2277      	movs	r2, #119	@ 0x77
 80005b8:	801a      	strh	r2, [r3, #0]
	    uint8_t CMD =3;
 80005ba:	2510      	movs	r5, #16
 80005bc:	35ff      	adds	r5, #255	@ 0xff
 80005be:	197b      	adds	r3, r7, r5
 80005c0:	2203      	movs	r2, #3
 80005c2:	701a      	strb	r2, [r3, #0]
	    uint8_t payload_len = (uint8_t)strlen((char*)payload);
 80005c4:	1c7b      	adds	r3, r7, #1
 80005c6:	33ff      	adds	r3, #255	@ 0xff
 80005c8:	0018      	movs	r0, r3
 80005ca:	f7ff fd9d 	bl	8000108 <strlen>
 80005ce:	0002      	movs	r2, r0
 80005d0:	2687      	movs	r6, #135	@ 0x87
 80005d2:	0076      	lsls	r6, r6, #1
 80005d4:	19bb      	adds	r3, r7, r6
 80005d6:	701a      	strb	r2, [r3, #0]
	    uint8_t frog_x =4;
 80005d8:	230e      	movs	r3, #14
 80005da:	33ff      	adds	r3, #255	@ 0xff
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2204      	movs	r2, #4
 80005e0:	701a      	strb	r2, [r3, #0]
	    uint8_t frog_y =1;
 80005e2:	2286      	movs	r2, #134	@ 0x86
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	18bb      	adds	r3, r7, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]

	    // Тут можна число збільшити при потребі
	    uint8_t frame[255];

	    // Кодування кадру
	    uint16_t crc = encode_frame_snake(payload, payload_len, frame, CMD, frog_x, frog_y);
 80005ec:	2185      	movs	r1, #133	@ 0x85
 80005ee:	0049      	lsls	r1, r1, #1
 80005f0:	187c      	adds	r4, r7, r1
 80005f2:	197b      	adds	r3, r7, r5
 80005f4:	781d      	ldrb	r5, [r3, #0]
 80005f6:	003a      	movs	r2, r7
 80005f8:	19bb      	adds	r3, r7, r6
 80005fa:	7819      	ldrb	r1, [r3, #0]
 80005fc:	1c78      	adds	r0, r7, #1
 80005fe:	30ff      	adds	r0, #255	@ 0xff
 8000600:	2386      	movs	r3, #134	@ 0x86
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	230e      	movs	r3, #14
 800060c:	33ff      	adds	r3, #255	@ 0xff
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	002b      	movs	r3, r5
 8000616:	f7ff ff05 	bl	8000424 <encode_frame_snake>
 800061a:	0003      	movs	r3, r0
 800061c:	8023      	strh	r3, [r4, #0]
	    printf("Frame ready, CRC: 0x%04X\n", crc);
 800061e:	2185      	movs	r1, #133	@ 0x85
 8000620:	0049      	lsls	r1, r1, #1
 8000622:	187b      	adds	r3, r7, r1
 8000624:	881a      	ldrh	r2, [r3, #0]
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <main+0xdc>)
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fee8 	bl	8001400 <iprintf>

	    // Загальна довжина кадру = 1 (START) + 1 (CMD) + 1 (LENGTH) + payload + 2 (FROG) + 2 (CRC)
	    uint8_t frame_len = payload_len + 7;
 8000630:	210a      	movs	r1, #10
 8000632:	31ff      	adds	r1, #255	@ 0xff
 8000634:	187b      	adds	r3, r7, r1
 8000636:	19ba      	adds	r2, r7, r6
 8000638:	7812      	ldrb	r2, [r2, #0]
 800063a:	3207      	adds	r2, #7
 800063c:	701a      	strb	r2, [r3, #0]

	    // Декодування та перевірка кадру
	    int result = decode_frame(frame, frame_len);
 800063e:	187b      	adds	r3, r7, r1
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	003b      	movs	r3, r7
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff ff5e 	bl	8000508 <decode_frame>
 800064c:	0003      	movs	r3, r0
 800064e:	1d7a      	adds	r2, r7, #5
 8000650:	32ff      	adds	r2, #255	@ 0xff
 8000652:	6013      	str	r3, [r2, #0]
	    if (result == 0)
 8000654:	1d7b      	adds	r3, r7, #5
 8000656:	33ff      	adds	r3, #255	@ 0xff
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d107      	bne.n	800066e <main+0xc2>
	        HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_9);
 800065e:	2380      	movs	r3, #128	@ 0x80
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <main+0xe0>)
 8000664:	0019      	movs	r1, r3
 8000666:	0010      	movs	r0, r2
 8000668:	f000 fa41 	bl	8000aee <HAL_GPIO_TogglePin>
 800066c:	e006      	b.n	800067c <main+0xd0>
	    else
	    	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_8);
 800066e:	2380      	movs	r3, #128	@ 0x80
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4a06      	ldr	r2, [pc, #24]	@ (800068c <main+0xe0>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f000 fa39 	bl	8000aee <HAL_GPIO_TogglePin>

	    return 0;
 800067c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800067e:	0018      	movs	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	b045      	add	sp, #276	@ 0x114
 8000684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	08002164 	.word	0x08002164
 800068c:	48000800 	.word	0x48000800

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	e7fd      	b.n	8000694 <NMI_Handler+0x4>

08000698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069c:	46c0      	nop			@ (mov r8, r8)
 800069e:	e7fd      	b.n	800069c <HardFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 f8e8 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 f96d 	bl	80009aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	20000104 	.word	0x20000104

080006dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <USART1_IRQHandler+0x14>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fa1e 	bl	8000b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	2000007c 	.word	0x2000007c

080006f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e00a      	b.n	800071c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000706:	e000      	b.n	800070a <_read+0x16>
 8000708:	bf00      	nop
 800070a:	0001      	movs	r1, r0
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	60ba      	str	r2, [r7, #8]
 8000712:	b2ca      	uxtb	r2, r1
 8000714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	dbf0      	blt.n	8000706 <_read+0x12>
  }

  return len;
 8000724:	687b      	ldr	r3, [r7, #4]
}
 8000726:	0018      	movs	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	b006      	add	sp, #24
 800072c:	bd80      	pop	{r7, pc}

0800072e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b086      	sub	sp, #24
 8000732:	af00      	add	r7, sp, #0
 8000734:	60f8      	str	r0, [r7, #12]
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e009      	b.n	8000754 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	60ba      	str	r2, [r7, #8]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	0018      	movs	r0, r3
 800074a:	e000      	b.n	800074e <_write+0x20>
 800074c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf1      	blt.n	8000740 <_write+0x12>
  }
  return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	0018      	movs	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	b006      	add	sp, #24
 8000764:	bd80      	pop	{r7, pc}

08000766 <_close>:

int _close(int file)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800076e:	2301      	movs	r3, #1
 8000770:	425b      	negs	r3, r3
}
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}

0800077a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	0192      	lsls	r2, r2, #6
 800078a:	605a      	str	r2, [r3, #4]
  return 0;
 800078c:	2300      	movs	r3, #0
}
 800078e:	0018      	movs	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}

08000796 <_isatty>:

int _isatty(int file)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b004      	add	sp, #16
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c8:	4a14      	ldr	r2, [pc, #80]	@ (800081c <_sbrk+0x5c>)
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <_sbrk+0x60>)
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <_sbrk+0x64>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <_sbrk+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d207      	bcs.n	8000800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f0:	f000 feb8 	bl	8001564 <__errno>
 80007f4:	0003      	movs	r3, r0
 80007f6:	220c      	movs	r2, #12
 80007f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	425b      	negs	r3, r3
 80007fe:	e009      	b.n	8000814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	18d2      	adds	r2, r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <_sbrk+0x64>)
 8000810:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b006      	add	sp, #24
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20002000 	.word	0x20002000
 8000820:	00000400 	.word	0x00000400
 8000824:	20000148 	.word	0x20000148
 8000828:	200002a0 	.word	0x200002a0

0800082c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000838:	480d      	ldr	r0, [pc, #52]	@ (8000870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800083c:	f7ff fff6 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	@ (8000874 <LoopForever+0x6>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	@ (8000878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <LoopForever+0xe>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	@ (8000884 <LoopForever+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000866:	f000 fe83 	bl	8001570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fe9f 	bl	80005ac <main>

0800086e <LoopForever>:

LoopForever:
    b LoopForever
 800086e:	e7fe      	b.n	800086e <LoopForever>
  ldr   r0, =_estack
 8000870:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800087c:	080021bc 	.word	0x080021bc
  ldr r2, =_sbss
 8000880:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000884:	2000029c 	.word	0x2000029c

08000888 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_COMP_IRQHandler>
	...

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <HAL_IncTick+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_IncTick+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	18d2      	adds	r2, r2, r3
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <HAL_IncTick+0x20>)
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	20000000 	.word	0x20000000
 80008ac:	2000014c 	.word	0x2000014c

080008b0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2221      	movs	r2, #33	@ 0x21
 80008bc:	5c9b      	ldrb	r3, [r3, r2]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d008      	beq.n	80008d6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2204      	movs	r2, #4
 80008c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2220      	movs	r2, #32
 80008ce:	2100      	movs	r1, #0
 80008d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e020      	b.n	8000918 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	210e      	movs	r1, #14
 80008e2:	438a      	bics	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2101      	movs	r1, #1
 80008f2:	438a      	bics	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008fe:	2101      	movs	r1, #1
 8000900:	4091      	lsls	r1, r2
 8000902:	000a      	movs	r2, r1
 8000904:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2221      	movs	r2, #33	@ 0x21
 800090a:	2101      	movs	r1, #1
 800090c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2220      	movs	r2, #32
 8000912:	2100      	movs	r1, #0
 8000914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000916:	2300      	movs	r3, #0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000928:	210f      	movs	r1, #15
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2221      	movs	r2, #33	@ 0x21
 8000934:	5c9b      	ldrb	r3, [r3, r2]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d006      	beq.n	800094a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2204      	movs	r2, #4
 8000940:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2201      	movs	r2, #1
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	e028      	b.n	800099c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	210e      	movs	r1, #14
 8000956:	438a      	bics	r2, r1
 8000958:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2101      	movs	r1, #1
 8000966:	438a      	bics	r2, r1
 8000968:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000972:	2101      	movs	r1, #1
 8000974:	4091      	lsls	r1, r2
 8000976:	000a      	movs	r2, r1
 8000978:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2221      	movs	r2, #33	@ 0x21
 800097e:	2101      	movs	r1, #1
 8000980:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2220      	movs	r2, #32
 8000986:	2100      	movs	r1, #0
 8000988:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800098e:	2b00      	cmp	r3, #0
 8000990:	d004      	beq.n	800099c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	0010      	movs	r0, r2
 800099a:	4798      	blx	r3
    }
  }
  return status;
 800099c:	230f      	movs	r3, #15
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
}
 80009a2:	0018      	movs	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b004      	add	sp, #16
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	2204      	movs	r2, #4
 80009c8:	409a      	lsls	r2, r3
 80009ca:	0013      	movs	r3, r2
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4013      	ands	r3, r2
 80009d0:	d024      	beq.n	8000a1c <HAL_DMA_IRQHandler+0x72>
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2204      	movs	r2, #4
 80009d6:	4013      	ands	r3, r2
 80009d8:	d020      	beq.n	8000a1c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2220      	movs	r2, #32
 80009e2:	4013      	ands	r3, r2
 80009e4:	d107      	bne.n	80009f6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2104      	movs	r1, #4
 80009f2:	438a      	bics	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009fe:	2104      	movs	r1, #4
 8000a00:	4091      	lsls	r1, r2
 8000a02:	000a      	movs	r2, r1
 8000a04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d100      	bne.n	8000a10 <HAL_DMA_IRQHandler+0x66>
 8000a0e:	e06a      	b.n	8000ae6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	0010      	movs	r0, r2
 8000a18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000a1a:	e064      	b.n	8000ae6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	2202      	movs	r2, #2
 8000a22:	409a      	lsls	r2, r3
 8000a24:	0013      	movs	r3, r2
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	d02b      	beq.n	8000a84 <HAL_DMA_IRQHandler+0xda>
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4013      	ands	r3, r2
 8000a32:	d027      	beq.n	8000a84 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	d10b      	bne.n	8000a58 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	210a      	movs	r1, #10
 8000a4c:	438a      	bics	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2221      	movs	r2, #33	@ 0x21
 8000a54:	2101      	movs	r1, #1
 8000a56:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a60:	2102      	movs	r1, #2
 8000a62:	4091      	lsls	r1, r2
 8000a64:	000a      	movs	r2, r1
 8000a66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d036      	beq.n	8000ae6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	0010      	movs	r0, r2
 8000a80:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000a82:	e030      	b.n	8000ae6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	2208      	movs	r2, #8
 8000a8a:	409a      	lsls	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4013      	ands	r3, r2
 8000a92:	d028      	beq.n	8000ae6 <HAL_DMA_IRQHandler+0x13c>
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	2208      	movs	r2, #8
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d024      	beq.n	8000ae6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	210e      	movs	r1, #14
 8000aa8:	438a      	bics	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4091      	lsls	r1, r2
 8000ab8:	000a      	movs	r2, r1
 8000aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2201      	movs	r2, #1
 8000ac0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2221      	movs	r2, #33	@ 0x21
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2220      	movs	r2, #32
 8000ace:	2100      	movs	r1, #0
 8000ad0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d005      	beq.n	8000ae6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	4798      	blx	r3
    }
  }
}
 8000ae4:	e7ff      	b.n	8000ae6 <HAL_DMA_IRQHandler+0x13c>
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	000a      	movs	r2, r1
 8000af8:	1cbb      	adds	r3, r7, #2
 8000afa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b02:	1cbb      	adds	r3, r7, #2
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	041a      	lsls	r2, r3, #16
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	1cb9      	adds	r1, r7, #2
 8000b12:	8809      	ldrh	r1, [r1, #0]
 8000b14:	400b      	ands	r3, r1
 8000b16:	431a      	orrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	619a      	str	r2, [r3, #24]
}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b004      	add	sp, #16
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b0ab      	sub	sp, #172	@ 0xac
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	22a4      	movs	r2, #164	@ 0xa4
 8000b34:	18b9      	adds	r1, r7, r2
 8000b36:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	20a0      	movs	r0, #160	@ 0xa0
 8000b40:	1839      	adds	r1, r7, r0
 8000b42:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	219c      	movs	r1, #156	@ 0x9c
 8000b4c:	1879      	adds	r1, r7, r1
 8000b4e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8000b50:	0011      	movs	r1, r2
 8000b52:	18bb      	adds	r3, r7, r2
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a99      	ldr	r2, [pc, #612]	@ (8000dbc <HAL_UART_IRQHandler+0x298>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2298      	movs	r2, #152	@ 0x98
 8000b5c:	18bc      	adds	r4, r7, r2
 8000b5e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8000b60:	18bb      	adds	r3, r7, r2
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d114      	bne.n	8000b92 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d00f      	beq.n	8000b92 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8000b72:	183b      	adds	r3, r7, r0
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2220      	movs	r2, #32
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d00a      	beq.n	8000b92 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d100      	bne.n	8000b86 <HAL_UART_IRQHandler+0x62>
 8000b84:	e29e      	b.n	80010c4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	4798      	blx	r3
      }
      return;
 8000b90:	e298      	b.n	80010c4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8000b92:	2398      	movs	r3, #152	@ 0x98
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d100      	bne.n	8000b9e <HAL_UART_IRQHandler+0x7a>
 8000b9c:	e114      	b.n	8000dc8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8000b9e:	239c      	movs	r3, #156	@ 0x9c
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d106      	bne.n	8000bb8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8000baa:	23a0      	movs	r3, #160	@ 0xa0
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a83      	ldr	r2, [pc, #524]	@ (8000dc0 <HAL_UART_IRQHandler+0x29c>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d100      	bne.n	8000bb8 <HAL_UART_IRQHandler+0x94>
 8000bb6:	e107      	b.n	8000dc8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8000bb8:	23a4      	movs	r3, #164	@ 0xa4
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	d012      	beq.n	8000bea <HAL_UART_IRQHandler+0xc6>
 8000bc4:	23a0      	movs	r3, #160	@ 0xa0
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	2380      	movs	r3, #128	@ 0x80
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4013      	ands	r3, r2
 8000bd0:	d00b      	beq.n	8000bea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2284      	movs	r2, #132	@ 0x84
 8000bde:	589b      	ldr	r3, [r3, r2]
 8000be0:	2201      	movs	r2, #1
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2184      	movs	r1, #132	@ 0x84
 8000be8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000bea:	23a4      	movs	r3, #164	@ 0xa4
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d011      	beq.n	8000c1a <HAL_UART_IRQHandler+0xf6>
 8000bf6:	239c      	movs	r3, #156	@ 0x9c
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d00b      	beq.n	8000c1a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2202      	movs	r2, #2
 8000c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2284      	movs	r2, #132	@ 0x84
 8000c0e:	589b      	ldr	r3, [r3, r2]
 8000c10:	2204      	movs	r2, #4
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2184      	movs	r1, #132	@ 0x84
 8000c18:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8000c1a:	23a4      	movs	r3, #164	@ 0xa4
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2204      	movs	r2, #4
 8000c22:	4013      	ands	r3, r2
 8000c24:	d011      	beq.n	8000c4a <HAL_UART_IRQHandler+0x126>
 8000c26:	239c      	movs	r3, #156	@ 0x9c
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4013      	ands	r3, r2
 8000c30:	d00b      	beq.n	8000c4a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2204      	movs	r2, #4
 8000c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2284      	movs	r2, #132	@ 0x84
 8000c3e:	589b      	ldr	r3, [r3, r2]
 8000c40:	2202      	movs	r2, #2
 8000c42:	431a      	orrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2184      	movs	r1, #132	@ 0x84
 8000c48:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8000c4a:	23a4      	movs	r3, #164	@ 0xa4
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2208      	movs	r2, #8
 8000c52:	4013      	ands	r3, r2
 8000c54:	d017      	beq.n	8000c86 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8000c56:	23a0      	movs	r3, #160	@ 0xa0
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d105      	bne.n	8000c6e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8000c62:	239c      	movs	r3, #156	@ 0x9c
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8000c6c:	d00b      	beq.n	8000c86 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2208      	movs	r2, #8
 8000c74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2284      	movs	r2, #132	@ 0x84
 8000c7a:	589b      	ldr	r3, [r3, r2]
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2184      	movs	r1, #132	@ 0x84
 8000c84:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8000c86:	23a4      	movs	r3, #164	@ 0xa4
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	4013      	ands	r3, r2
 8000c92:	d013      	beq.n	8000cbc <HAL_UART_IRQHandler+0x198>
 8000c94:	23a0      	movs	r3, #160	@ 0xa0
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	2380      	movs	r3, #128	@ 0x80
 8000c9c:	04db      	lsls	r3, r3, #19
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d00c      	beq.n	8000cbc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2280      	movs	r2, #128	@ 0x80
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2284      	movs	r2, #132	@ 0x84
 8000cb0:	589b      	ldr	r3, [r3, r2]
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2184      	movs	r1, #132	@ 0x84
 8000cba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2284      	movs	r2, #132	@ 0x84
 8000cc0:	589b      	ldr	r3, [r3, r2]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <HAL_UART_IRQHandler+0x1a4>
 8000cc6:	e1ff      	b.n	80010c8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8000cc8:	23a4      	movs	r3, #164	@ 0xa4
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2220      	movs	r2, #32
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d00e      	beq.n	8000cf2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8000cd4:	23a0      	movs	r3, #160	@ 0xa0
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2220      	movs	r2, #32
 8000cdc:	4013      	ands	r3, r2
 8000cde:	d008      	beq.n	8000cf2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d004      	beq.n	8000cf2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	0010      	movs	r0, r2
 8000cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2284      	movs	r2, #132	@ 0x84
 8000cf6:	589b      	ldr	r3, [r3, r2]
 8000cf8:	2194      	movs	r1, #148	@ 0x94
 8000cfa:	187a      	adds	r2, r7, r1
 8000cfc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2240      	movs	r2, #64	@ 0x40
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b40      	cmp	r3, #64	@ 0x40
 8000d0a:	d004      	beq.n	8000d16 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2228      	movs	r2, #40	@ 0x28
 8000d12:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8000d14:	d047      	beq.n	8000da6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 f9ff 	bl	800111c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	2240      	movs	r2, #64	@ 0x40
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b40      	cmp	r3, #64	@ 0x40
 8000d2a:	d137      	bne.n	8000d9c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8000d30:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8000d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000d34:	2090      	movs	r0, #144	@ 0x90
 8000d36:	183a      	adds	r2, r7, r0
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d40:	f383 8810 	msr	PRIMASK, r3
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2140      	movs	r1, #64	@ 0x40
 8000d52:	438a      	bics	r2, r1
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d5e:	f383 8810 	msr	PRIMASK, r3
}
 8000d62:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d012      	beq.n	8000d92 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <HAL_UART_IRQHandler+0x2a0>)
 8000d72:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fdd1 	bl	8000920 <HAL_DMA_Abort_IT>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d01a      	beq.n	8000db8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000d90:	e012      	b.n	8000db8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 f9ad 	bl	80010f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000d9a:	e00d      	b.n	8000db8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 f9a8 	bl	80010f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000da4:	e008      	b.n	8000db8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f9a3 	bl	80010f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2284      	movs	r2, #132	@ 0x84
 8000db2:	2100      	movs	r1, #0
 8000db4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8000db6:	e187      	b.n	80010c8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000db8:	46c0      	nop			@ (mov r8, r8)
    return;
 8000dba:	e185      	b.n	80010c8 <HAL_UART_IRQHandler+0x5a4>
 8000dbc:	0000080f 	.word	0x0000080f
 8000dc0:	04000120 	.word	0x04000120
 8000dc4:	080011e5 	.word	0x080011e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d000      	beq.n	8000dd2 <HAL_UART_IRQHandler+0x2ae>
 8000dd0:	e139      	b.n	8001046 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8000dd2:	23a4      	movs	r3, #164	@ 0xa4
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2210      	movs	r2, #16
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d100      	bne.n	8000de0 <HAL_UART_IRQHandler+0x2bc>
 8000dde:	e132      	b.n	8001046 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8000de0:	23a0      	movs	r3, #160	@ 0xa0
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2210      	movs	r2, #16
 8000de8:	4013      	ands	r3, r2
 8000dea:	d100      	bne.n	8000dee <HAL_UART_IRQHandler+0x2ca>
 8000dec:	e12b      	b.n	8001046 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2210      	movs	r2, #16
 8000df4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2240      	movs	r2, #64	@ 0x40
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b40      	cmp	r3, #64	@ 0x40
 8000e02:	d000      	beq.n	8000e06 <HAL_UART_IRQHandler+0x2e2>
 8000e04:	e09f      	b.n	8000f46 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	217e      	movs	r1, #126	@ 0x7e
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d100      	bne.n	8000e1e <HAL_UART_IRQHandler+0x2fa>
 8000e1c:	e156      	b.n	80010cc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2258      	movs	r2, #88	@ 0x58
 8000e22:	5a9b      	ldrh	r3, [r3, r2]
 8000e24:	187a      	adds	r2, r7, r1
 8000e26:	8812      	ldrh	r2, [r2, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d300      	bcc.n	8000e2e <HAL_UART_IRQHandler+0x30a>
 8000e2c:	e14e      	b.n	80010cc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	187a      	adds	r2, r7, r1
 8000e32:	215a      	movs	r1, #90	@ 0x5a
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b20      	cmp	r3, #32
 8000e40:	d06f      	beq.n	8000f22 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e42:	f3ef 8310 	mrs	r3, PRIMASK
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8000e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e52:	f383 8810 	msr	PRIMASK, r3
}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	499e      	ldr	r1, [pc, #632]	@ (80010dc <HAL_UART_IRQHandler+0x5b8>)
 8000e64:	400a      	ands	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e6e:	f383 8810 	msr	PRIMASK, r3
}
 8000e72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e74:	f3ef 8310 	mrs	r3, PRIMASK
 8000e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8000e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8000e7e:	2301      	movs	r3, #1
 8000e80:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e84:	f383 8810 	msr	PRIMASK, r3
}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	438a      	bics	r2, r1
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e9c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ea0:	f383 8810 	msr	PRIMASK, r3
}
 8000ea4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8000eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8000eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000eae:	673b      	str	r3, [r7, #112]	@ 0x70
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000eb6:	f383 8810 	msr	PRIMASK, r3
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2140      	movs	r1, #64	@ 0x40
 8000ec8:	438a      	bics	r2, r1
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ece:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ed2:	f383 8810 	msr	PRIMASK, r3
}
 8000ed6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	2120      	movs	r1, #32
 8000ede:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8000eea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8000eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ef4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ef6:	f383 8810 	msr	PRIMASK, r3
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2110      	movs	r1, #16
 8000f08:	438a      	bics	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f12:	f383 8810 	msr	PRIMASK, r3
}
 8000f16:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fcc7 	bl	80008b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2202      	movs	r2, #2
 8000f26:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2258      	movs	r2, #88	@ 0x58
 8000f2c:	5a9a      	ldrh	r2, [r3, r2]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	215a      	movs	r1, #90	@ 0x5a
 8000f32:	5a5b      	ldrh	r3, [r3, r1]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 f8e0 	bl	8001104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8000f44:	e0c2      	b.n	80010cc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2258      	movs	r2, #88	@ 0x58
 8000f4a:	5a99      	ldrh	r1, [r3, r2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	225a      	movs	r2, #90	@ 0x5a
 8000f50:	5a9b      	ldrh	r3, [r3, r2]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	208e      	movs	r0, #142	@ 0x8e
 8000f56:	183b      	adds	r3, r7, r0
 8000f58:	1a8a      	subs	r2, r1, r2
 8000f5a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	225a      	movs	r2, #90	@ 0x5a
 8000f60:	5a9b      	ldrh	r3, [r3, r2]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <HAL_UART_IRQHandler+0x446>
 8000f68:	e0b2      	b.n	80010d0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8000f6a:	183b      	adds	r3, r7, r0
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <HAL_UART_IRQHandler+0x450>
 8000f72:	e0ad      	b.n	80010d0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f74:	f3ef 8310 	mrs	r3, PRIMASK
 8000f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000f7c:	2488      	movs	r4, #136	@ 0x88
 8000f7e:	193a      	adds	r2, r7, r4
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	f383 8810 	msr	PRIMASK, r3
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4951      	ldr	r1, [pc, #324]	@ (80010e0 <HAL_UART_IRQHandler+0x5bc>)
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f383 8810 	msr	PRIMASK, r3
}
 8000faa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fac:	f3ef 8310 	mrs	r3, PRIMASK
 8000fb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000fb2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fb4:	2484      	movs	r4, #132	@ 0x84
 8000fb6:	193a      	adds	r2, r7, r4
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f383 8810 	msr	PRIMASK, r3
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	438a      	bics	r2, r1
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	f383 8810 	msr	PRIMASK, r3
}
 8000fe2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2280      	movs	r2, #128	@ 0x80
 8000fe8:	2120      	movs	r1, #32
 8000fea:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001000:	2480      	movs	r4, #128	@ 0x80
 8001002:	193a      	adds	r2, r7, r4
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800100a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800100c:	f383 8810 	msr	PRIMASK, r3
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2110      	movs	r1, #16
 800101e:	438a      	bics	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	193b      	adds	r3, r7, r4
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102a:	f383 8810 	msr	PRIMASK, r3
}
 800102e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2202      	movs	r2, #2
 8001034:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001036:	183b      	adds	r3, r7, r0
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0011      	movs	r1, r2
 800103e:	0018      	movs	r0, r3
 8001040:	f000 f860 	bl	8001104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001044:	e044      	b.n	80010d0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001046:	23a4      	movs	r3, #164	@ 0xa4
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	035b      	lsls	r3, r3, #13
 8001050:	4013      	ands	r3, r2
 8001052:	d010      	beq.n	8001076 <HAL_UART_IRQHandler+0x552>
 8001054:	239c      	movs	r3, #156	@ 0x9c
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	03db      	lsls	r3, r3, #15
 800105e:	4013      	ands	r3, r2
 8001060:	d009      	beq.n	8001076 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2280      	movs	r2, #128	@ 0x80
 8001068:	0352      	lsls	r2, r2, #13
 800106a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0018      	movs	r0, r3
 8001070:	f000 f8fa 	bl	8001268 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001074:	e02f      	b.n	80010d6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001076:	23a4      	movs	r3, #164	@ 0xa4
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2280      	movs	r2, #128	@ 0x80
 800107e:	4013      	ands	r3, r2
 8001080:	d00f      	beq.n	80010a2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001082:	23a0      	movs	r3, #160	@ 0xa0
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	4013      	ands	r3, r2
 800108c:	d009      	beq.n	80010a2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001092:	2b00      	cmp	r3, #0
 8001094:	d01e      	beq.n	80010d4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	0010      	movs	r0, r2
 800109e:	4798      	blx	r3
    }
    return;
 80010a0:	e018      	b.n	80010d4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80010a2:	23a4      	movs	r3, #164	@ 0xa4
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2240      	movs	r2, #64	@ 0x40
 80010aa:	4013      	ands	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_UART_IRQHandler+0x5b2>
 80010ae:	23a0      	movs	r3, #160	@ 0xa0
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2240      	movs	r2, #64	@ 0x40
 80010b6:	4013      	ands	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 f8a8 	bl	8001212 <UART_EndTransmit_IT>
    return;
 80010c2:	e008      	b.n	80010d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	e006      	b.n	80010d6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	e004      	b.n	80010d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80010cc:	46c0      	nop			@ (mov r8, r8)
 80010ce:	e002      	b.n	80010d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	e000      	b.n	80010d6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80010d4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b02b      	add	sp, #172	@ 0xac
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	fffffeff 	.word	0xfffffeff
 80010e0:	fffffedf 	.word	0xfffffedf

080010e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80010ec:	46c0      	nop			@ (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80010fc:	46c0      	nop			@ (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	000a      	movs	r2, r1
 800110e:	1cbb      	adds	r3, r7, #2
 8001110:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	@ 0x38
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001124:	f3ef 8310 	mrs	r3, PRIMASK
 8001128:	617b      	str	r3, [r7, #20]
  return(result);
 800112a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	f383 8810 	msr	PRIMASK, r3
}
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4926      	ldr	r1, [pc, #152]	@ (80011e0 <UART_EndRxTransfer+0xc4>)
 8001146:	400a      	ands	r2, r1
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f383 8810 	msr	PRIMASK, r3
}
 8001154:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001156:	f3ef 8310 	mrs	r3, PRIMASK
 800115a:	623b      	str	r3, [r7, #32]
  return(result);
 800115c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001160:	2301      	movs	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001166:	f383 8810 	msr	PRIMASK, r3
}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2101      	movs	r1, #1
 8001178:	438a      	bics	r2, r1
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001182:	f383 8810 	msr	PRIMASK, r3
}
 8001186:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118c:	2b01      	cmp	r3, #1
 800118e:	d118      	bne.n	80011c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001190:	f3ef 8310 	mrs	r3, PRIMASK
 8001194:	60bb      	str	r3, [r7, #8]
  return(result);
 8001196:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800119a:	2301      	movs	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f383 8810 	msr	PRIMASK, r3
}
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2110      	movs	r1, #16
 80011b2:	438a      	bics	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f383 8810 	msr	PRIMASK, r3
}
 80011c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	2120      	movs	r1, #32
 80011c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b00e      	add	sp, #56	@ 0x38
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	fffffedf 	.word	0xfffffedf

080011e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	225a      	movs	r2, #90	@ 0x5a
 80011f6:	2100      	movs	r1, #0
 80011f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2252      	movs	r2, #82	@ 0x52
 80011fe:	2100      	movs	r1, #0
 8001200:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ff75 	bl	80010f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}

08001212 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800121a:	f3ef 8310 	mrs	r3, PRIMASK
 800121e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001220:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f383 8810 	msr	PRIMASK, r3
}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2140      	movs	r1, #64	@ 0x40
 800123c:	438a      	bics	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	f383 8810 	msr	PRIMASK, r3
}
 800124a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2220      	movs	r2, #32
 8001250:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ff42 	bl	80010e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b006      	add	sp, #24
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <std>:
 8001278:	2300      	movs	r3, #0
 800127a:	b510      	push	{r4, lr}
 800127c:	0004      	movs	r4, r0
 800127e:	6003      	str	r3, [r0, #0]
 8001280:	6043      	str	r3, [r0, #4]
 8001282:	6083      	str	r3, [r0, #8]
 8001284:	8181      	strh	r1, [r0, #12]
 8001286:	6643      	str	r3, [r0, #100]	@ 0x64
 8001288:	81c2      	strh	r2, [r0, #14]
 800128a:	6103      	str	r3, [r0, #16]
 800128c:	6143      	str	r3, [r0, #20]
 800128e:	6183      	str	r3, [r0, #24]
 8001290:	0019      	movs	r1, r3
 8001292:	2208      	movs	r2, #8
 8001294:	305c      	adds	r0, #92	@ 0x5c
 8001296:	f000 f90f 	bl	80014b8 <memset>
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <std+0x50>)
 800129c:	6224      	str	r4, [r4, #32]
 800129e:	6263      	str	r3, [r4, #36]	@ 0x24
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <std+0x54>)
 80012a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80012a4:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <std+0x58>)
 80012a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <std+0x5c>)
 80012aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <std+0x60>)
 80012ae:	429c      	cmp	r4, r3
 80012b0:	d005      	beq.n	80012be <std+0x46>
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <std+0x64>)
 80012b4:	429c      	cmp	r4, r3
 80012b6:	d002      	beq.n	80012be <std+0x46>
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <std+0x68>)
 80012ba:	429c      	cmp	r4, r3
 80012bc:	d103      	bne.n	80012c6 <std+0x4e>
 80012be:	0020      	movs	r0, r4
 80012c0:	3058      	adds	r0, #88	@ 0x58
 80012c2:	f000 f979 	bl	80015b8 <__retarget_lock_init_recursive>
 80012c6:	bd10      	pop	{r4, pc}
 80012c8:	08001421 	.word	0x08001421
 80012cc:	08001449 	.word	0x08001449
 80012d0:	08001481 	.word	0x08001481
 80012d4:	080014ad 	.word	0x080014ad
 80012d8:	20000150 	.word	0x20000150
 80012dc:	200001b8 	.word	0x200001b8
 80012e0:	20000220 	.word	0x20000220

080012e4 <stdio_exit_handler>:
 80012e4:	b510      	push	{r4, lr}
 80012e6:	4a03      	ldr	r2, [pc, #12]	@ (80012f4 <stdio_exit_handler+0x10>)
 80012e8:	4903      	ldr	r1, [pc, #12]	@ (80012f8 <stdio_exit_handler+0x14>)
 80012ea:	4804      	ldr	r0, [pc, #16]	@ (80012fc <stdio_exit_handler+0x18>)
 80012ec:	f000 f86c 	bl	80013c8 <_fwalk_sglue>
 80012f0:	bd10      	pop	{r4, pc}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	20000004 	.word	0x20000004
 80012f8:	08001e59 	.word	0x08001e59
 80012fc:	20000014 	.word	0x20000014

08001300 <cleanup_stdio>:
 8001300:	6841      	ldr	r1, [r0, #4]
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <cleanup_stdio+0x30>)
 8001304:	b510      	push	{r4, lr}
 8001306:	0004      	movs	r4, r0
 8001308:	4299      	cmp	r1, r3
 800130a:	d001      	beq.n	8001310 <cleanup_stdio+0x10>
 800130c:	f000 fda4 	bl	8001e58 <_fflush_r>
 8001310:	68a1      	ldr	r1, [r4, #8]
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <cleanup_stdio+0x34>)
 8001314:	4299      	cmp	r1, r3
 8001316:	d002      	beq.n	800131e <cleanup_stdio+0x1e>
 8001318:	0020      	movs	r0, r4
 800131a:	f000 fd9d 	bl	8001e58 <_fflush_r>
 800131e:	68e1      	ldr	r1, [r4, #12]
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <cleanup_stdio+0x38>)
 8001322:	4299      	cmp	r1, r3
 8001324:	d002      	beq.n	800132c <cleanup_stdio+0x2c>
 8001326:	0020      	movs	r0, r4
 8001328:	f000 fd96 	bl	8001e58 <_fflush_r>
 800132c:	bd10      	pop	{r4, pc}
 800132e:	46c0      	nop			@ (mov r8, r8)
 8001330:	20000150 	.word	0x20000150
 8001334:	200001b8 	.word	0x200001b8
 8001338:	20000220 	.word	0x20000220

0800133c <global_stdio_init.part.0>:
 800133c:	b510      	push	{r4, lr}
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <global_stdio_init.part.0+0x28>)
 8001340:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <global_stdio_init.part.0+0x2c>)
 8001342:	2104      	movs	r1, #4
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	4809      	ldr	r0, [pc, #36]	@ (800136c <global_stdio_init.part.0+0x30>)
 8001348:	2200      	movs	r2, #0
 800134a:	f7ff ff95 	bl	8001278 <std>
 800134e:	2201      	movs	r2, #1
 8001350:	2109      	movs	r1, #9
 8001352:	4807      	ldr	r0, [pc, #28]	@ (8001370 <global_stdio_init.part.0+0x34>)
 8001354:	f7ff ff90 	bl	8001278 <std>
 8001358:	2202      	movs	r2, #2
 800135a:	2112      	movs	r1, #18
 800135c:	4805      	ldr	r0, [pc, #20]	@ (8001374 <global_stdio_init.part.0+0x38>)
 800135e:	f7ff ff8b 	bl	8001278 <std>
 8001362:	bd10      	pop	{r4, pc}
 8001364:	20000288 	.word	0x20000288
 8001368:	080012e5 	.word	0x080012e5
 800136c:	20000150 	.word	0x20000150
 8001370:	200001b8 	.word	0x200001b8
 8001374:	20000220 	.word	0x20000220

08001378 <__sfp_lock_acquire>:
 8001378:	b510      	push	{r4, lr}
 800137a:	4802      	ldr	r0, [pc, #8]	@ (8001384 <__sfp_lock_acquire+0xc>)
 800137c:	f000 f91d 	bl	80015ba <__retarget_lock_acquire_recursive>
 8001380:	bd10      	pop	{r4, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	20000291 	.word	0x20000291

08001388 <__sfp_lock_release>:
 8001388:	b510      	push	{r4, lr}
 800138a:	4802      	ldr	r0, [pc, #8]	@ (8001394 <__sfp_lock_release+0xc>)
 800138c:	f000 f916 	bl	80015bc <__retarget_lock_release_recursive>
 8001390:	bd10      	pop	{r4, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	20000291 	.word	0x20000291

08001398 <__sinit>:
 8001398:	b510      	push	{r4, lr}
 800139a:	0004      	movs	r4, r0
 800139c:	f7ff ffec 	bl	8001378 <__sfp_lock_acquire>
 80013a0:	6a23      	ldr	r3, [r4, #32]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <__sinit+0x14>
 80013a6:	f7ff ffef 	bl	8001388 <__sfp_lock_release>
 80013aa:	bd10      	pop	{r4, pc}
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <__sinit+0x28>)
 80013ae:	6223      	str	r3, [r4, #32]
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <__sinit+0x2c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f6      	bne.n	80013a6 <__sinit+0xe>
 80013b8:	f7ff ffc0 	bl	800133c <global_stdio_init.part.0>
 80013bc:	e7f3      	b.n	80013a6 <__sinit+0xe>
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	08001301 	.word	0x08001301
 80013c4:	20000288 	.word	0x20000288

080013c8 <_fwalk_sglue>:
 80013c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013ca:	0014      	movs	r4, r2
 80013cc:	2600      	movs	r6, #0
 80013ce:	9000      	str	r0, [sp, #0]
 80013d0:	9101      	str	r1, [sp, #4]
 80013d2:	68a5      	ldr	r5, [r4, #8]
 80013d4:	6867      	ldr	r7, [r4, #4]
 80013d6:	3f01      	subs	r7, #1
 80013d8:	d504      	bpl.n	80013e4 <_fwalk_sglue+0x1c>
 80013da:	6824      	ldr	r4, [r4, #0]
 80013dc:	2c00      	cmp	r4, #0
 80013de:	d1f8      	bne.n	80013d2 <_fwalk_sglue+0xa>
 80013e0:	0030      	movs	r0, r6
 80013e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80013e4:	89ab      	ldrh	r3, [r5, #12]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d908      	bls.n	80013fc <_fwalk_sglue+0x34>
 80013ea:	220e      	movs	r2, #14
 80013ec:	5eab      	ldrsh	r3, [r5, r2]
 80013ee:	3301      	adds	r3, #1
 80013f0:	d004      	beq.n	80013fc <_fwalk_sglue+0x34>
 80013f2:	0029      	movs	r1, r5
 80013f4:	9800      	ldr	r0, [sp, #0]
 80013f6:	9b01      	ldr	r3, [sp, #4]
 80013f8:	4798      	blx	r3
 80013fa:	4306      	orrs	r6, r0
 80013fc:	3568      	adds	r5, #104	@ 0x68
 80013fe:	e7ea      	b.n	80013d6 <_fwalk_sglue+0xe>

08001400 <iprintf>:
 8001400:	b40f      	push	{r0, r1, r2, r3}
 8001402:	b507      	push	{r0, r1, r2, lr}
 8001404:	4905      	ldr	r1, [pc, #20]	@ (800141c <iprintf+0x1c>)
 8001406:	ab04      	add	r3, sp, #16
 8001408:	6808      	ldr	r0, [r1, #0]
 800140a:	cb04      	ldmia	r3!, {r2}
 800140c:	6881      	ldr	r1, [r0, #8]
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	f000 fa02 	bl	8001818 <_vfiprintf_r>
 8001414:	b003      	add	sp, #12
 8001416:	bc08      	pop	{r3}
 8001418:	b004      	add	sp, #16
 800141a:	4718      	bx	r3
 800141c:	20000010 	.word	0x20000010

08001420 <__sread>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	000c      	movs	r4, r1
 8001424:	250e      	movs	r5, #14
 8001426:	5f49      	ldrsh	r1, [r1, r5]
 8001428:	f000 f874 	bl	8001514 <_read_r>
 800142c:	2800      	cmp	r0, #0
 800142e:	db03      	blt.n	8001438 <__sread+0x18>
 8001430:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001432:	181b      	adds	r3, r3, r0
 8001434:	6563      	str	r3, [r4, #84]	@ 0x54
 8001436:	bd70      	pop	{r4, r5, r6, pc}
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	4a02      	ldr	r2, [pc, #8]	@ (8001444 <__sread+0x24>)
 800143c:	4013      	ands	r3, r2
 800143e:	81a3      	strh	r3, [r4, #12]
 8001440:	e7f9      	b.n	8001436 <__sread+0x16>
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	ffffefff 	.word	0xffffefff

08001448 <__swrite>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	001f      	movs	r7, r3
 800144c:	898b      	ldrh	r3, [r1, #12]
 800144e:	0005      	movs	r5, r0
 8001450:	000c      	movs	r4, r1
 8001452:	0016      	movs	r6, r2
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	d505      	bpl.n	8001464 <__swrite+0x1c>
 8001458:	230e      	movs	r3, #14
 800145a:	5ec9      	ldrsh	r1, [r1, r3]
 800145c:	2200      	movs	r2, #0
 800145e:	2302      	movs	r3, #2
 8001460:	f000 f844 	bl	80014ec <_lseek_r>
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <__swrite+0x34>)
 8001468:	0028      	movs	r0, r5
 800146a:	4013      	ands	r3, r2
 800146c:	81a3      	strh	r3, [r4, #12]
 800146e:	0032      	movs	r2, r6
 8001470:	230e      	movs	r3, #14
 8001472:	5ee1      	ldrsh	r1, [r4, r3]
 8001474:	003b      	movs	r3, r7
 8001476:	f000 f861 	bl	800153c <_write_r>
 800147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800147c:	ffffefff 	.word	0xffffefff

08001480 <__sseek>:
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	000c      	movs	r4, r1
 8001484:	250e      	movs	r5, #14
 8001486:	5f49      	ldrsh	r1, [r1, r5]
 8001488:	f000 f830 	bl	80014ec <_lseek_r>
 800148c:	89a3      	ldrh	r3, [r4, #12]
 800148e:	1c42      	adds	r2, r0, #1
 8001490:	d103      	bne.n	800149a <__sseek+0x1a>
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <__sseek+0x28>)
 8001494:	4013      	ands	r3, r2
 8001496:	81a3      	strh	r3, [r4, #12]
 8001498:	bd70      	pop	{r4, r5, r6, pc}
 800149a:	2280      	movs	r2, #128	@ 0x80
 800149c:	0152      	lsls	r2, r2, #5
 800149e:	4313      	orrs	r3, r2
 80014a0:	81a3      	strh	r3, [r4, #12]
 80014a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80014a4:	e7f8      	b.n	8001498 <__sseek+0x18>
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	ffffefff 	.word	0xffffefff

080014ac <__sclose>:
 80014ac:	b510      	push	{r4, lr}
 80014ae:	230e      	movs	r3, #14
 80014b0:	5ec9      	ldrsh	r1, [r1, r3]
 80014b2:	f000 f809 	bl	80014c8 <_close_r>
 80014b6:	bd10      	pop	{r4, pc}

080014b8 <memset>:
 80014b8:	0003      	movs	r3, r0
 80014ba:	1882      	adds	r2, r0, r2
 80014bc:	4293      	cmp	r3, r2
 80014be:	d100      	bne.n	80014c2 <memset+0xa>
 80014c0:	4770      	bx	lr
 80014c2:	7019      	strb	r1, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	e7f9      	b.n	80014bc <memset+0x4>

080014c8 <_close_r>:
 80014c8:	2300      	movs	r3, #0
 80014ca:	b570      	push	{r4, r5, r6, lr}
 80014cc:	4d06      	ldr	r5, [pc, #24]	@ (80014e8 <_close_r+0x20>)
 80014ce:	0004      	movs	r4, r0
 80014d0:	0008      	movs	r0, r1
 80014d2:	602b      	str	r3, [r5, #0]
 80014d4:	f7ff f947 	bl	8000766 <_close>
 80014d8:	1c43      	adds	r3, r0, #1
 80014da:	d103      	bne.n	80014e4 <_close_r+0x1c>
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d000      	beq.n	80014e4 <_close_r+0x1c>
 80014e2:	6023      	str	r3, [r4, #0]
 80014e4:	bd70      	pop	{r4, r5, r6, pc}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	2000028c 	.word	0x2000028c

080014ec <_lseek_r>:
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	0004      	movs	r4, r0
 80014f0:	0008      	movs	r0, r1
 80014f2:	0011      	movs	r1, r2
 80014f4:	001a      	movs	r2, r3
 80014f6:	2300      	movs	r3, #0
 80014f8:	4d05      	ldr	r5, [pc, #20]	@ (8001510 <_lseek_r+0x24>)
 80014fa:	602b      	str	r3, [r5, #0]
 80014fc:	f7ff f954 	bl	80007a8 <_lseek>
 8001500:	1c43      	adds	r3, r0, #1
 8001502:	d103      	bne.n	800150c <_lseek_r+0x20>
 8001504:	682b      	ldr	r3, [r5, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d000      	beq.n	800150c <_lseek_r+0x20>
 800150a:	6023      	str	r3, [r4, #0]
 800150c:	bd70      	pop	{r4, r5, r6, pc}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	2000028c 	.word	0x2000028c

08001514 <_read_r>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	0004      	movs	r4, r0
 8001518:	0008      	movs	r0, r1
 800151a:	0011      	movs	r1, r2
 800151c:	001a      	movs	r2, r3
 800151e:	2300      	movs	r3, #0
 8001520:	4d05      	ldr	r5, [pc, #20]	@ (8001538 <_read_r+0x24>)
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	f7ff f8e6 	bl	80006f4 <_read>
 8001528:	1c43      	adds	r3, r0, #1
 800152a:	d103      	bne.n	8001534 <_read_r+0x20>
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d000      	beq.n	8001534 <_read_r+0x20>
 8001532:	6023      	str	r3, [r4, #0]
 8001534:	bd70      	pop	{r4, r5, r6, pc}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	2000028c 	.word	0x2000028c

0800153c <_write_r>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	0004      	movs	r4, r0
 8001540:	0008      	movs	r0, r1
 8001542:	0011      	movs	r1, r2
 8001544:	001a      	movs	r2, r3
 8001546:	2300      	movs	r3, #0
 8001548:	4d05      	ldr	r5, [pc, #20]	@ (8001560 <_write_r+0x24>)
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f7ff f8ef 	bl	800072e <_write>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	d103      	bne.n	800155c <_write_r+0x20>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d000      	beq.n	800155c <_write_r+0x20>
 800155a:	6023      	str	r3, [r4, #0]
 800155c:	bd70      	pop	{r4, r5, r6, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	2000028c 	.word	0x2000028c

08001564 <__errno>:
 8001564:	4b01      	ldr	r3, [pc, #4]	@ (800156c <__errno+0x8>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	4770      	bx	lr
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	20000010 	.word	0x20000010

08001570 <__libc_init_array>:
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	2600      	movs	r6, #0
 8001574:	4c0c      	ldr	r4, [pc, #48]	@ (80015a8 <__libc_init_array+0x38>)
 8001576:	4d0d      	ldr	r5, [pc, #52]	@ (80015ac <__libc_init_array+0x3c>)
 8001578:	1b64      	subs	r4, r4, r5
 800157a:	10a4      	asrs	r4, r4, #2
 800157c:	42a6      	cmp	r6, r4
 800157e:	d109      	bne.n	8001594 <__libc_init_array+0x24>
 8001580:	2600      	movs	r6, #0
 8001582:	f000 fde3 	bl	800214c <_init>
 8001586:	4c0a      	ldr	r4, [pc, #40]	@ (80015b0 <__libc_init_array+0x40>)
 8001588:	4d0a      	ldr	r5, [pc, #40]	@ (80015b4 <__libc_init_array+0x44>)
 800158a:	1b64      	subs	r4, r4, r5
 800158c:	10a4      	asrs	r4, r4, #2
 800158e:	42a6      	cmp	r6, r4
 8001590:	d105      	bne.n	800159e <__libc_init_array+0x2e>
 8001592:	bd70      	pop	{r4, r5, r6, pc}
 8001594:	00b3      	lsls	r3, r6, #2
 8001596:	58eb      	ldr	r3, [r5, r3]
 8001598:	4798      	blx	r3
 800159a:	3601      	adds	r6, #1
 800159c:	e7ee      	b.n	800157c <__libc_init_array+0xc>
 800159e:	00b3      	lsls	r3, r6, #2
 80015a0:	58eb      	ldr	r3, [r5, r3]
 80015a2:	4798      	blx	r3
 80015a4:	3601      	adds	r6, #1
 80015a6:	e7f2      	b.n	800158e <__libc_init_array+0x1e>
 80015a8:	080021b4 	.word	0x080021b4
 80015ac:	080021b4 	.word	0x080021b4
 80015b0:	080021b8 	.word	0x080021b8
 80015b4:	080021b4 	.word	0x080021b4

080015b8 <__retarget_lock_init_recursive>:
 80015b8:	4770      	bx	lr

080015ba <__retarget_lock_acquire_recursive>:
 80015ba:	4770      	bx	lr

080015bc <__retarget_lock_release_recursive>:
 80015bc:	4770      	bx	lr

080015be <memcpy>:
 80015be:	2300      	movs	r3, #0
 80015c0:	b510      	push	{r4, lr}
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d100      	bne.n	80015c8 <memcpy+0xa>
 80015c6:	bd10      	pop	{r4, pc}
 80015c8:	5ccc      	ldrb	r4, [r1, r3]
 80015ca:	54c4      	strb	r4, [r0, r3]
 80015cc:	3301      	adds	r3, #1
 80015ce:	e7f8      	b.n	80015c2 <memcpy+0x4>

080015d0 <_free_r>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	0005      	movs	r5, r0
 80015d4:	1e0c      	subs	r4, r1, #0
 80015d6:	d010      	beq.n	80015fa <_free_r+0x2a>
 80015d8:	3c04      	subs	r4, #4
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da00      	bge.n	80015e2 <_free_r+0x12>
 80015e0:	18e4      	adds	r4, r4, r3
 80015e2:	0028      	movs	r0, r5
 80015e4:	f000 f8e0 	bl	80017a8 <__malloc_lock>
 80015e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <_free_r+0x90>)
 80015ea:	6813      	ldr	r3, [r2, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <_free_r+0x2c>
 80015f0:	6063      	str	r3, [r4, #4]
 80015f2:	6014      	str	r4, [r2, #0]
 80015f4:	0028      	movs	r0, r5
 80015f6:	f000 f8df 	bl	80017b8 <__malloc_unlock>
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
 80015fc:	42a3      	cmp	r3, r4
 80015fe:	d908      	bls.n	8001612 <_free_r+0x42>
 8001600:	6820      	ldr	r0, [r4, #0]
 8001602:	1821      	adds	r1, r4, r0
 8001604:	428b      	cmp	r3, r1
 8001606:	d1f3      	bne.n	80015f0 <_free_r+0x20>
 8001608:	6819      	ldr	r1, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	1809      	adds	r1, r1, r0
 800160e:	6021      	str	r1, [r4, #0]
 8001610:	e7ee      	b.n	80015f0 <_free_r+0x20>
 8001612:	001a      	movs	r2, r3
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <_free_r+0x4e>
 800161a:	42a3      	cmp	r3, r4
 800161c:	d9f9      	bls.n	8001612 <_free_r+0x42>
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	1850      	adds	r0, r2, r1
 8001622:	42a0      	cmp	r0, r4
 8001624:	d10b      	bne.n	800163e <_free_r+0x6e>
 8001626:	6820      	ldr	r0, [r4, #0]
 8001628:	1809      	adds	r1, r1, r0
 800162a:	1850      	adds	r0, r2, r1
 800162c:	6011      	str	r1, [r2, #0]
 800162e:	4283      	cmp	r3, r0
 8001630:	d1e0      	bne.n	80015f4 <_free_r+0x24>
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	1841      	adds	r1, r0, r1
 8001638:	6011      	str	r1, [r2, #0]
 800163a:	6053      	str	r3, [r2, #4]
 800163c:	e7da      	b.n	80015f4 <_free_r+0x24>
 800163e:	42a0      	cmp	r0, r4
 8001640:	d902      	bls.n	8001648 <_free_r+0x78>
 8001642:	230c      	movs	r3, #12
 8001644:	602b      	str	r3, [r5, #0]
 8001646:	e7d5      	b.n	80015f4 <_free_r+0x24>
 8001648:	6820      	ldr	r0, [r4, #0]
 800164a:	1821      	adds	r1, r4, r0
 800164c:	428b      	cmp	r3, r1
 800164e:	d103      	bne.n	8001658 <_free_r+0x88>
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	1809      	adds	r1, r1, r0
 8001656:	6021      	str	r1, [r4, #0]
 8001658:	6063      	str	r3, [r4, #4]
 800165a:	6054      	str	r4, [r2, #4]
 800165c:	e7ca      	b.n	80015f4 <_free_r+0x24>
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	20000298 	.word	0x20000298

08001664 <sbrk_aligned>:
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	4e0f      	ldr	r6, [pc, #60]	@ (80016a4 <sbrk_aligned+0x40>)
 8001668:	000d      	movs	r5, r1
 800166a:	6831      	ldr	r1, [r6, #0]
 800166c:	0004      	movs	r4, r0
 800166e:	2900      	cmp	r1, #0
 8001670:	d102      	bne.n	8001678 <sbrk_aligned+0x14>
 8001672:	f000 fcbd 	bl	8001ff0 <_sbrk_r>
 8001676:	6030      	str	r0, [r6, #0]
 8001678:	0029      	movs	r1, r5
 800167a:	0020      	movs	r0, r4
 800167c:	f000 fcb8 	bl	8001ff0 <_sbrk_r>
 8001680:	1c43      	adds	r3, r0, #1
 8001682:	d103      	bne.n	800168c <sbrk_aligned+0x28>
 8001684:	2501      	movs	r5, #1
 8001686:	426d      	negs	r5, r5
 8001688:	0028      	movs	r0, r5
 800168a:	bd70      	pop	{r4, r5, r6, pc}
 800168c:	2303      	movs	r3, #3
 800168e:	1cc5      	adds	r5, r0, #3
 8001690:	439d      	bics	r5, r3
 8001692:	42a8      	cmp	r0, r5
 8001694:	d0f8      	beq.n	8001688 <sbrk_aligned+0x24>
 8001696:	1a29      	subs	r1, r5, r0
 8001698:	0020      	movs	r0, r4
 800169a:	f000 fca9 	bl	8001ff0 <_sbrk_r>
 800169e:	3001      	adds	r0, #1
 80016a0:	d1f2      	bne.n	8001688 <sbrk_aligned+0x24>
 80016a2:	e7ef      	b.n	8001684 <sbrk_aligned+0x20>
 80016a4:	20000294 	.word	0x20000294

080016a8 <_malloc_r>:
 80016a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016aa:	2203      	movs	r2, #3
 80016ac:	1ccb      	adds	r3, r1, #3
 80016ae:	4393      	bics	r3, r2
 80016b0:	3308      	adds	r3, #8
 80016b2:	0005      	movs	r5, r0
 80016b4:	001f      	movs	r7, r3
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d234      	bcs.n	8001724 <_malloc_r+0x7c>
 80016ba:	270c      	movs	r7, #12
 80016bc:	42b9      	cmp	r1, r7
 80016be:	d833      	bhi.n	8001728 <_malloc_r+0x80>
 80016c0:	0028      	movs	r0, r5
 80016c2:	f000 f871 	bl	80017a8 <__malloc_lock>
 80016c6:	4e37      	ldr	r6, [pc, #220]	@ (80017a4 <_malloc_r+0xfc>)
 80016c8:	6833      	ldr	r3, [r6, #0]
 80016ca:	001c      	movs	r4, r3
 80016cc:	2c00      	cmp	r4, #0
 80016ce:	d12f      	bne.n	8001730 <_malloc_r+0x88>
 80016d0:	0039      	movs	r1, r7
 80016d2:	0028      	movs	r0, r5
 80016d4:	f7ff ffc6 	bl	8001664 <sbrk_aligned>
 80016d8:	0004      	movs	r4, r0
 80016da:	1c43      	adds	r3, r0, #1
 80016dc:	d15f      	bne.n	800179e <_malloc_r+0xf6>
 80016de:	6834      	ldr	r4, [r6, #0]
 80016e0:	9400      	str	r4, [sp, #0]
 80016e2:	9b00      	ldr	r3, [sp, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d14a      	bne.n	800177e <_malloc_r+0xd6>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d052      	beq.n	8001792 <_malloc_r+0xea>
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	0028      	movs	r0, r5
 80016f0:	18e3      	adds	r3, r4, r3
 80016f2:	9900      	ldr	r1, [sp, #0]
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	f000 fc7b 	bl	8001ff0 <_sbrk_r>
 80016fa:	9b01      	ldr	r3, [sp, #4]
 80016fc:	4283      	cmp	r3, r0
 80016fe:	d148      	bne.n	8001792 <_malloc_r+0xea>
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	0028      	movs	r0, r5
 8001704:	1aff      	subs	r7, r7, r3
 8001706:	0039      	movs	r1, r7
 8001708:	f7ff ffac 	bl	8001664 <sbrk_aligned>
 800170c:	3001      	adds	r0, #1
 800170e:	d040      	beq.n	8001792 <_malloc_r+0xea>
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	19db      	adds	r3, r3, r7
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	6833      	ldr	r3, [r6, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	2a00      	cmp	r2, #0
 800171c:	d133      	bne.n	8001786 <_malloc_r+0xde>
 800171e:	9b00      	ldr	r3, [sp, #0]
 8001720:	6033      	str	r3, [r6, #0]
 8001722:	e019      	b.n	8001758 <_malloc_r+0xb0>
 8001724:	2b00      	cmp	r3, #0
 8001726:	dac9      	bge.n	80016bc <_malloc_r+0x14>
 8001728:	230c      	movs	r3, #12
 800172a:	602b      	str	r3, [r5, #0]
 800172c:	2000      	movs	r0, #0
 800172e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001730:	6821      	ldr	r1, [r4, #0]
 8001732:	1bc9      	subs	r1, r1, r7
 8001734:	d420      	bmi.n	8001778 <_malloc_r+0xd0>
 8001736:	290b      	cmp	r1, #11
 8001738:	d90a      	bls.n	8001750 <_malloc_r+0xa8>
 800173a:	19e2      	adds	r2, r4, r7
 800173c:	6027      	str	r7, [r4, #0]
 800173e:	42a3      	cmp	r3, r4
 8001740:	d104      	bne.n	800174c <_malloc_r+0xa4>
 8001742:	6032      	str	r2, [r6, #0]
 8001744:	6863      	ldr	r3, [r4, #4]
 8001746:	6011      	str	r1, [r2, #0]
 8001748:	6053      	str	r3, [r2, #4]
 800174a:	e005      	b.n	8001758 <_malloc_r+0xb0>
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	e7f9      	b.n	8001744 <_malloc_r+0x9c>
 8001750:	6862      	ldr	r2, [r4, #4]
 8001752:	42a3      	cmp	r3, r4
 8001754:	d10e      	bne.n	8001774 <_malloc_r+0xcc>
 8001756:	6032      	str	r2, [r6, #0]
 8001758:	0028      	movs	r0, r5
 800175a:	f000 f82d 	bl	80017b8 <__malloc_unlock>
 800175e:	0020      	movs	r0, r4
 8001760:	2207      	movs	r2, #7
 8001762:	300b      	adds	r0, #11
 8001764:	1d23      	adds	r3, r4, #4
 8001766:	4390      	bics	r0, r2
 8001768:	1ac2      	subs	r2, r0, r3
 800176a:	4298      	cmp	r0, r3
 800176c:	d0df      	beq.n	800172e <_malloc_r+0x86>
 800176e:	1a1b      	subs	r3, r3, r0
 8001770:	50a3      	str	r3, [r4, r2]
 8001772:	e7dc      	b.n	800172e <_malloc_r+0x86>
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	e7ef      	b.n	8001758 <_malloc_r+0xb0>
 8001778:	0023      	movs	r3, r4
 800177a:	6864      	ldr	r4, [r4, #4]
 800177c:	e7a6      	b.n	80016cc <_malloc_r+0x24>
 800177e:	9c00      	ldr	r4, [sp, #0]
 8001780:	6863      	ldr	r3, [r4, #4]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	e7ad      	b.n	80016e2 <_malloc_r+0x3a>
 8001786:	001a      	movs	r2, r3
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	42a3      	cmp	r3, r4
 800178c:	d1fb      	bne.n	8001786 <_malloc_r+0xde>
 800178e:	2300      	movs	r3, #0
 8001790:	e7da      	b.n	8001748 <_malloc_r+0xa0>
 8001792:	230c      	movs	r3, #12
 8001794:	0028      	movs	r0, r5
 8001796:	602b      	str	r3, [r5, #0]
 8001798:	f000 f80e 	bl	80017b8 <__malloc_unlock>
 800179c:	e7c6      	b.n	800172c <_malloc_r+0x84>
 800179e:	6007      	str	r7, [r0, #0]
 80017a0:	e7da      	b.n	8001758 <_malloc_r+0xb0>
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	20000298 	.word	0x20000298

080017a8 <__malloc_lock>:
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <__malloc_lock+0xc>)
 80017ac:	f7ff ff05 	bl	80015ba <__retarget_lock_acquire_recursive>
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	20000290 	.word	0x20000290

080017b8 <__malloc_unlock>:
 80017b8:	b510      	push	{r4, lr}
 80017ba:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <__malloc_unlock+0xc>)
 80017bc:	f7ff fefe 	bl	80015bc <__retarget_lock_release_recursive>
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	20000290 	.word	0x20000290

080017c8 <__sfputc_r>:
 80017c8:	6893      	ldr	r3, [r2, #8]
 80017ca:	b510      	push	{r4, lr}
 80017cc:	3b01      	subs	r3, #1
 80017ce:	6093      	str	r3, [r2, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da04      	bge.n	80017de <__sfputc_r+0x16>
 80017d4:	6994      	ldr	r4, [r2, #24]
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	db07      	blt.n	80017ea <__sfputc_r+0x22>
 80017da:	290a      	cmp	r1, #10
 80017dc:	d005      	beq.n	80017ea <__sfputc_r+0x22>
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	1c58      	adds	r0, r3, #1
 80017e2:	6010      	str	r0, [r2, #0]
 80017e4:	7019      	strb	r1, [r3, #0]
 80017e6:	0008      	movs	r0, r1
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	f000 fb60 	bl	8001eae <__swbuf_r>
 80017ee:	0001      	movs	r1, r0
 80017f0:	e7f9      	b.n	80017e6 <__sfputc_r+0x1e>

080017f2 <__sfputs_r>:
 80017f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f4:	0006      	movs	r6, r0
 80017f6:	000f      	movs	r7, r1
 80017f8:	0014      	movs	r4, r2
 80017fa:	18d5      	adds	r5, r2, r3
 80017fc:	42ac      	cmp	r4, r5
 80017fe:	d101      	bne.n	8001804 <__sfputs_r+0x12>
 8001800:	2000      	movs	r0, #0
 8001802:	e007      	b.n	8001814 <__sfputs_r+0x22>
 8001804:	7821      	ldrb	r1, [r4, #0]
 8001806:	003a      	movs	r2, r7
 8001808:	0030      	movs	r0, r6
 800180a:	f7ff ffdd 	bl	80017c8 <__sfputc_r>
 800180e:	3401      	adds	r4, #1
 8001810:	1c43      	adds	r3, r0, #1
 8001812:	d1f3      	bne.n	80017fc <__sfputs_r+0xa>
 8001814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001818 <_vfiprintf_r>:
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b0a1      	sub	sp, #132	@ 0x84
 800181c:	000f      	movs	r7, r1
 800181e:	0015      	movs	r5, r2
 8001820:	001e      	movs	r6, r3
 8001822:	9003      	str	r0, [sp, #12]
 8001824:	2800      	cmp	r0, #0
 8001826:	d004      	beq.n	8001832 <_vfiprintf_r+0x1a>
 8001828:	6a03      	ldr	r3, [r0, #32]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <_vfiprintf_r+0x1a>
 800182e:	f7ff fdb3 	bl	8001398 <__sinit>
 8001832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001834:	07db      	lsls	r3, r3, #31
 8001836:	d405      	bmi.n	8001844 <_vfiprintf_r+0x2c>
 8001838:	89bb      	ldrh	r3, [r7, #12]
 800183a:	059b      	lsls	r3, r3, #22
 800183c:	d402      	bmi.n	8001844 <_vfiprintf_r+0x2c>
 800183e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001840:	f7ff febb 	bl	80015ba <__retarget_lock_acquire_recursive>
 8001844:	89bb      	ldrh	r3, [r7, #12]
 8001846:	071b      	lsls	r3, r3, #28
 8001848:	d502      	bpl.n	8001850 <_vfiprintf_r+0x38>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d113      	bne.n	8001878 <_vfiprintf_r+0x60>
 8001850:	0039      	movs	r1, r7
 8001852:	9803      	ldr	r0, [sp, #12]
 8001854:	f000 fb6e 	bl	8001f34 <__swsetup_r>
 8001858:	2800      	cmp	r0, #0
 800185a:	d00d      	beq.n	8001878 <_vfiprintf_r+0x60>
 800185c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800185e:	07db      	lsls	r3, r3, #31
 8001860:	d503      	bpl.n	800186a <_vfiprintf_r+0x52>
 8001862:	2001      	movs	r0, #1
 8001864:	4240      	negs	r0, r0
 8001866:	b021      	add	sp, #132	@ 0x84
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186a:	89bb      	ldrh	r3, [r7, #12]
 800186c:	059b      	lsls	r3, r3, #22
 800186e:	d4f8      	bmi.n	8001862 <_vfiprintf_r+0x4a>
 8001870:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001872:	f7ff fea3 	bl	80015bc <__retarget_lock_release_recursive>
 8001876:	e7f4      	b.n	8001862 <_vfiprintf_r+0x4a>
 8001878:	2300      	movs	r3, #0
 800187a:	ac08      	add	r4, sp, #32
 800187c:	6163      	str	r3, [r4, #20]
 800187e:	3320      	adds	r3, #32
 8001880:	7663      	strb	r3, [r4, #25]
 8001882:	3310      	adds	r3, #16
 8001884:	76a3      	strb	r3, [r4, #26]
 8001886:	9607      	str	r6, [sp, #28]
 8001888:	002e      	movs	r6, r5
 800188a:	7833      	ldrb	r3, [r6, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <_vfiprintf_r+0x7c>
 8001890:	2b25      	cmp	r3, #37	@ 0x25
 8001892:	d148      	bne.n	8001926 <_vfiprintf_r+0x10e>
 8001894:	1b73      	subs	r3, r6, r5
 8001896:	9305      	str	r3, [sp, #20]
 8001898:	42ae      	cmp	r6, r5
 800189a:	d00b      	beq.n	80018b4 <_vfiprintf_r+0x9c>
 800189c:	002a      	movs	r2, r5
 800189e:	0039      	movs	r1, r7
 80018a0:	9803      	ldr	r0, [sp, #12]
 80018a2:	f7ff ffa6 	bl	80017f2 <__sfputs_r>
 80018a6:	3001      	adds	r0, #1
 80018a8:	d100      	bne.n	80018ac <_vfiprintf_r+0x94>
 80018aa:	e0ae      	b.n	8001a0a <_vfiprintf_r+0x1f2>
 80018ac:	6963      	ldr	r3, [r4, #20]
 80018ae:	9a05      	ldr	r2, [sp, #20]
 80018b0:	189b      	adds	r3, r3, r2
 80018b2:	6163      	str	r3, [r4, #20]
 80018b4:	7833      	ldrb	r3, [r6, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d100      	bne.n	80018bc <_vfiprintf_r+0xa4>
 80018ba:	e0a6      	b.n	8001a0a <_vfiprintf_r+0x1f2>
 80018bc:	2201      	movs	r2, #1
 80018be:	2300      	movs	r3, #0
 80018c0:	4252      	negs	r2, r2
 80018c2:	6062      	str	r2, [r4, #4]
 80018c4:	a904      	add	r1, sp, #16
 80018c6:	3254      	adds	r2, #84	@ 0x54
 80018c8:	1852      	adds	r2, r2, r1
 80018ca:	1c75      	adds	r5, r6, #1
 80018cc:	6023      	str	r3, [r4, #0]
 80018ce:	60e3      	str	r3, [r4, #12]
 80018d0:	60a3      	str	r3, [r4, #8]
 80018d2:	7013      	strb	r3, [r2, #0]
 80018d4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80018d6:	4b59      	ldr	r3, [pc, #356]	@ (8001a3c <_vfiprintf_r+0x224>)
 80018d8:	2205      	movs	r2, #5
 80018da:	0018      	movs	r0, r3
 80018dc:	7829      	ldrb	r1, [r5, #0]
 80018de:	9305      	str	r3, [sp, #20]
 80018e0:	f000 fb98 	bl	8002014 <memchr>
 80018e4:	1c6e      	adds	r6, r5, #1
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d11f      	bne.n	800192a <_vfiprintf_r+0x112>
 80018ea:	6822      	ldr	r2, [r4, #0]
 80018ec:	06d3      	lsls	r3, r2, #27
 80018ee:	d504      	bpl.n	80018fa <_vfiprintf_r+0xe2>
 80018f0:	2353      	movs	r3, #83	@ 0x53
 80018f2:	a904      	add	r1, sp, #16
 80018f4:	185b      	adds	r3, r3, r1
 80018f6:	2120      	movs	r1, #32
 80018f8:	7019      	strb	r1, [r3, #0]
 80018fa:	0713      	lsls	r3, r2, #28
 80018fc:	d504      	bpl.n	8001908 <_vfiprintf_r+0xf0>
 80018fe:	2353      	movs	r3, #83	@ 0x53
 8001900:	a904      	add	r1, sp, #16
 8001902:	185b      	adds	r3, r3, r1
 8001904:	212b      	movs	r1, #43	@ 0x2b
 8001906:	7019      	strb	r1, [r3, #0]
 8001908:	782b      	ldrb	r3, [r5, #0]
 800190a:	2b2a      	cmp	r3, #42	@ 0x2a
 800190c:	d016      	beq.n	800193c <_vfiprintf_r+0x124>
 800190e:	002e      	movs	r6, r5
 8001910:	2100      	movs	r1, #0
 8001912:	200a      	movs	r0, #10
 8001914:	68e3      	ldr	r3, [r4, #12]
 8001916:	7832      	ldrb	r2, [r6, #0]
 8001918:	1c75      	adds	r5, r6, #1
 800191a:	3a30      	subs	r2, #48	@ 0x30
 800191c:	2a09      	cmp	r2, #9
 800191e:	d950      	bls.n	80019c2 <_vfiprintf_r+0x1aa>
 8001920:	2900      	cmp	r1, #0
 8001922:	d111      	bne.n	8001948 <_vfiprintf_r+0x130>
 8001924:	e017      	b.n	8001956 <_vfiprintf_r+0x13e>
 8001926:	3601      	adds	r6, #1
 8001928:	e7af      	b.n	800188a <_vfiprintf_r+0x72>
 800192a:	9b05      	ldr	r3, [sp, #20]
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	1ac0      	subs	r0, r0, r3
 8001930:	2301      	movs	r3, #1
 8001932:	4083      	lsls	r3, r0
 8001934:	4313      	orrs	r3, r2
 8001936:	0035      	movs	r5, r6
 8001938:	6023      	str	r3, [r4, #0]
 800193a:	e7cc      	b.n	80018d6 <_vfiprintf_r+0xbe>
 800193c:	9b07      	ldr	r3, [sp, #28]
 800193e:	1d19      	adds	r1, r3, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	9107      	str	r1, [sp, #28]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db01      	blt.n	800194c <_vfiprintf_r+0x134>
 8001948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800194a:	e004      	b.n	8001956 <_vfiprintf_r+0x13e>
 800194c:	425b      	negs	r3, r3
 800194e:	60e3      	str	r3, [r4, #12]
 8001950:	2302      	movs	r3, #2
 8001952:	4313      	orrs	r3, r2
 8001954:	6023      	str	r3, [r4, #0]
 8001956:	7833      	ldrb	r3, [r6, #0]
 8001958:	2b2e      	cmp	r3, #46	@ 0x2e
 800195a:	d10c      	bne.n	8001976 <_vfiprintf_r+0x15e>
 800195c:	7873      	ldrb	r3, [r6, #1]
 800195e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001960:	d134      	bne.n	80019cc <_vfiprintf_r+0x1b4>
 8001962:	9b07      	ldr	r3, [sp, #28]
 8001964:	3602      	adds	r6, #2
 8001966:	1d1a      	adds	r2, r3, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	9207      	str	r2, [sp, #28]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da01      	bge.n	8001974 <_vfiprintf_r+0x15c>
 8001970:	2301      	movs	r3, #1
 8001972:	425b      	negs	r3, r3
 8001974:	9309      	str	r3, [sp, #36]	@ 0x24
 8001976:	4d32      	ldr	r5, [pc, #200]	@ (8001a40 <_vfiprintf_r+0x228>)
 8001978:	2203      	movs	r2, #3
 800197a:	0028      	movs	r0, r5
 800197c:	7831      	ldrb	r1, [r6, #0]
 800197e:	f000 fb49 	bl	8002014 <memchr>
 8001982:	2800      	cmp	r0, #0
 8001984:	d006      	beq.n	8001994 <_vfiprintf_r+0x17c>
 8001986:	2340      	movs	r3, #64	@ 0x40
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	4083      	lsls	r3, r0
 800198c:	6822      	ldr	r2, [r4, #0]
 800198e:	3601      	adds	r6, #1
 8001990:	4313      	orrs	r3, r2
 8001992:	6023      	str	r3, [r4, #0]
 8001994:	7831      	ldrb	r1, [r6, #0]
 8001996:	2206      	movs	r2, #6
 8001998:	482a      	ldr	r0, [pc, #168]	@ (8001a44 <_vfiprintf_r+0x22c>)
 800199a:	1c75      	adds	r5, r6, #1
 800199c:	7621      	strb	r1, [r4, #24]
 800199e:	f000 fb39 	bl	8002014 <memchr>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d040      	beq.n	8001a28 <_vfiprintf_r+0x210>
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <_vfiprintf_r+0x230>)
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d122      	bne.n	80019f2 <_vfiprintf_r+0x1da>
 80019ac:	2207      	movs	r2, #7
 80019ae:	9b07      	ldr	r3, [sp, #28]
 80019b0:	3307      	adds	r3, #7
 80019b2:	4393      	bics	r3, r2
 80019b4:	3308      	adds	r3, #8
 80019b6:	9307      	str	r3, [sp, #28]
 80019b8:	6963      	ldr	r3, [r4, #20]
 80019ba:	9a04      	ldr	r2, [sp, #16]
 80019bc:	189b      	adds	r3, r3, r2
 80019be:	6163      	str	r3, [r4, #20]
 80019c0:	e762      	b.n	8001888 <_vfiprintf_r+0x70>
 80019c2:	4343      	muls	r3, r0
 80019c4:	002e      	movs	r6, r5
 80019c6:	2101      	movs	r1, #1
 80019c8:	189b      	adds	r3, r3, r2
 80019ca:	e7a4      	b.n	8001916 <_vfiprintf_r+0xfe>
 80019cc:	2300      	movs	r3, #0
 80019ce:	200a      	movs	r0, #10
 80019d0:	0019      	movs	r1, r3
 80019d2:	3601      	adds	r6, #1
 80019d4:	6063      	str	r3, [r4, #4]
 80019d6:	7832      	ldrb	r2, [r6, #0]
 80019d8:	1c75      	adds	r5, r6, #1
 80019da:	3a30      	subs	r2, #48	@ 0x30
 80019dc:	2a09      	cmp	r2, #9
 80019de:	d903      	bls.n	80019e8 <_vfiprintf_r+0x1d0>
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0c8      	beq.n	8001976 <_vfiprintf_r+0x15e>
 80019e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80019e6:	e7c6      	b.n	8001976 <_vfiprintf_r+0x15e>
 80019e8:	4341      	muls	r1, r0
 80019ea:	002e      	movs	r6, r5
 80019ec:	2301      	movs	r3, #1
 80019ee:	1889      	adds	r1, r1, r2
 80019f0:	e7f1      	b.n	80019d6 <_vfiprintf_r+0x1be>
 80019f2:	aa07      	add	r2, sp, #28
 80019f4:	9200      	str	r2, [sp, #0]
 80019f6:	0021      	movs	r1, r4
 80019f8:	003a      	movs	r2, r7
 80019fa:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <_vfiprintf_r+0x234>)
 80019fc:	9803      	ldr	r0, [sp, #12]
 80019fe:	e000      	b.n	8001a02 <_vfiprintf_r+0x1ea>
 8001a00:	bf00      	nop
 8001a02:	9004      	str	r0, [sp, #16]
 8001a04:	9b04      	ldr	r3, [sp, #16]
 8001a06:	3301      	adds	r3, #1
 8001a08:	d1d6      	bne.n	80019b8 <_vfiprintf_r+0x1a0>
 8001a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a0c:	07db      	lsls	r3, r3, #31
 8001a0e:	d405      	bmi.n	8001a1c <_vfiprintf_r+0x204>
 8001a10:	89bb      	ldrh	r3, [r7, #12]
 8001a12:	059b      	lsls	r3, r3, #22
 8001a14:	d402      	bmi.n	8001a1c <_vfiprintf_r+0x204>
 8001a16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001a18:	f7ff fdd0 	bl	80015bc <__retarget_lock_release_recursive>
 8001a1c:	89bb      	ldrh	r3, [r7, #12]
 8001a1e:	065b      	lsls	r3, r3, #25
 8001a20:	d500      	bpl.n	8001a24 <_vfiprintf_r+0x20c>
 8001a22:	e71e      	b.n	8001862 <_vfiprintf_r+0x4a>
 8001a24:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001a26:	e71e      	b.n	8001866 <_vfiprintf_r+0x4e>
 8001a28:	aa07      	add	r2, sp, #28
 8001a2a:	9200      	str	r2, [sp, #0]
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	003a      	movs	r2, r7
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <_vfiprintf_r+0x234>)
 8001a32:	9803      	ldr	r0, [sp, #12]
 8001a34:	f000 f87c 	bl	8001b30 <_printf_i>
 8001a38:	e7e3      	b.n	8001a02 <_vfiprintf_r+0x1ea>
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	0800217e 	.word	0x0800217e
 8001a40:	08002184 	.word	0x08002184
 8001a44:	08002188 	.word	0x08002188
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	080017f3 	.word	0x080017f3

08001a50 <_printf_common>:
 8001a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a52:	0016      	movs	r6, r2
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	688a      	ldr	r2, [r1, #8]
 8001a58:	690b      	ldr	r3, [r1, #16]
 8001a5a:	000c      	movs	r4, r1
 8001a5c:	9000      	str	r0, [sp, #0]
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	da00      	bge.n	8001a64 <_printf_common+0x14>
 8001a62:	0013      	movs	r3, r2
 8001a64:	0022      	movs	r2, r4
 8001a66:	6033      	str	r3, [r6, #0]
 8001a68:	3243      	adds	r2, #67	@ 0x43
 8001a6a:	7812      	ldrb	r2, [r2, #0]
 8001a6c:	2a00      	cmp	r2, #0
 8001a6e:	d001      	beq.n	8001a74 <_printf_common+0x24>
 8001a70:	3301      	adds	r3, #1
 8001a72:	6033      	str	r3, [r6, #0]
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	069b      	lsls	r3, r3, #26
 8001a78:	d502      	bpl.n	8001a80 <_printf_common+0x30>
 8001a7a:	6833      	ldr	r3, [r6, #0]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	6033      	str	r3, [r6, #0]
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	2306      	movs	r3, #6
 8001a84:	0015      	movs	r5, r2
 8001a86:	401d      	ands	r5, r3
 8001a88:	421a      	tst	r2, r3
 8001a8a:	d027      	beq.n	8001adc <_printf_common+0x8c>
 8001a8c:	0023      	movs	r3, r4
 8001a8e:	3343      	adds	r3, #67	@ 0x43
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	1e5a      	subs	r2, r3, #1
 8001a94:	4193      	sbcs	r3, r2
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	0692      	lsls	r2, r2, #26
 8001a9a:	d430      	bmi.n	8001afe <_printf_common+0xae>
 8001a9c:	0022      	movs	r2, r4
 8001a9e:	9901      	ldr	r1, [sp, #4]
 8001aa0:	9800      	ldr	r0, [sp, #0]
 8001aa2:	9d08      	ldr	r5, [sp, #32]
 8001aa4:	3243      	adds	r2, #67	@ 0x43
 8001aa6:	47a8      	blx	r5
 8001aa8:	3001      	adds	r0, #1
 8001aaa:	d025      	beq.n	8001af8 <_printf_common+0xa8>
 8001aac:	2206      	movs	r2, #6
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d105      	bne.n	8001ac4 <_printf_common+0x74>
 8001ab8:	6833      	ldr	r3, [r6, #0]
 8001aba:	68e5      	ldr	r5, [r4, #12]
 8001abc:	1aed      	subs	r5, r5, r3
 8001abe:	43eb      	mvns	r3, r5
 8001ac0:	17db      	asrs	r3, r3, #31
 8001ac2:	401d      	ands	r5, r3
 8001ac4:	68a3      	ldr	r3, [r4, #8]
 8001ac6:	6922      	ldr	r2, [r4, #16]
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	dd01      	ble.n	8001ad0 <_printf_common+0x80>
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	18ed      	adds	r5, r5, r3
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	42b5      	cmp	r5, r6
 8001ad4:	d120      	bne.n	8001b18 <_printf_common+0xc8>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	e010      	b.n	8001afc <_printf_common+0xac>
 8001ada:	3501      	adds	r5, #1
 8001adc:	68e3      	ldr	r3, [r4, #12]
 8001ade:	6832      	ldr	r2, [r6, #0]
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	42ab      	cmp	r3, r5
 8001ae4:	ddd2      	ble.n	8001a8c <_printf_common+0x3c>
 8001ae6:	0022      	movs	r2, r4
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9901      	ldr	r1, [sp, #4]
 8001aec:	9800      	ldr	r0, [sp, #0]
 8001aee:	9f08      	ldr	r7, [sp, #32]
 8001af0:	3219      	adds	r2, #25
 8001af2:	47b8      	blx	r7
 8001af4:	3001      	adds	r0, #1
 8001af6:	d1f0      	bne.n	8001ada <_printf_common+0x8a>
 8001af8:	2001      	movs	r0, #1
 8001afa:	4240      	negs	r0, r0
 8001afc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001afe:	2030      	movs	r0, #48	@ 0x30
 8001b00:	18e1      	adds	r1, r4, r3
 8001b02:	3143      	adds	r1, #67	@ 0x43
 8001b04:	7008      	strb	r0, [r1, #0]
 8001b06:	0021      	movs	r1, r4
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	3145      	adds	r1, #69	@ 0x45
 8001b0c:	7809      	ldrb	r1, [r1, #0]
 8001b0e:	18a2      	adds	r2, r4, r2
 8001b10:	3243      	adds	r2, #67	@ 0x43
 8001b12:	3302      	adds	r3, #2
 8001b14:	7011      	strb	r1, [r2, #0]
 8001b16:	e7c1      	b.n	8001a9c <_printf_common+0x4c>
 8001b18:	0022      	movs	r2, r4
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	9901      	ldr	r1, [sp, #4]
 8001b1e:	9800      	ldr	r0, [sp, #0]
 8001b20:	9f08      	ldr	r7, [sp, #32]
 8001b22:	321a      	adds	r2, #26
 8001b24:	47b8      	blx	r7
 8001b26:	3001      	adds	r0, #1
 8001b28:	d0e6      	beq.n	8001af8 <_printf_common+0xa8>
 8001b2a:	3601      	adds	r6, #1
 8001b2c:	e7d1      	b.n	8001ad2 <_printf_common+0x82>
	...

08001b30 <_printf_i>:
 8001b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b32:	b08b      	sub	sp, #44	@ 0x2c
 8001b34:	9206      	str	r2, [sp, #24]
 8001b36:	000a      	movs	r2, r1
 8001b38:	3243      	adds	r2, #67	@ 0x43
 8001b3a:	9307      	str	r3, [sp, #28]
 8001b3c:	9005      	str	r0, [sp, #20]
 8001b3e:	9203      	str	r2, [sp, #12]
 8001b40:	7e0a      	ldrb	r2, [r1, #24]
 8001b42:	000c      	movs	r4, r1
 8001b44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001b46:	2a78      	cmp	r2, #120	@ 0x78
 8001b48:	d809      	bhi.n	8001b5e <_printf_i+0x2e>
 8001b4a:	2a62      	cmp	r2, #98	@ 0x62
 8001b4c:	d80b      	bhi.n	8001b66 <_printf_i+0x36>
 8001b4e:	2a00      	cmp	r2, #0
 8001b50:	d100      	bne.n	8001b54 <_printf_i+0x24>
 8001b52:	e0bc      	b.n	8001cce <_printf_i+0x19e>
 8001b54:	497b      	ldr	r1, [pc, #492]	@ (8001d44 <_printf_i+0x214>)
 8001b56:	9104      	str	r1, [sp, #16]
 8001b58:	2a58      	cmp	r2, #88	@ 0x58
 8001b5a:	d100      	bne.n	8001b5e <_printf_i+0x2e>
 8001b5c:	e090      	b.n	8001c80 <_printf_i+0x150>
 8001b5e:	0025      	movs	r5, r4
 8001b60:	3542      	adds	r5, #66	@ 0x42
 8001b62:	702a      	strb	r2, [r5, #0]
 8001b64:	e022      	b.n	8001bac <_printf_i+0x7c>
 8001b66:	0010      	movs	r0, r2
 8001b68:	3863      	subs	r0, #99	@ 0x63
 8001b6a:	2815      	cmp	r0, #21
 8001b6c:	d8f7      	bhi.n	8001b5e <_printf_i+0x2e>
 8001b6e:	f7fe fad3 	bl	8000118 <__gnu_thumb1_case_shi>
 8001b72:	0016      	.short	0x0016
 8001b74:	fff6001f 	.word	0xfff6001f
 8001b78:	fff6fff6 	.word	0xfff6fff6
 8001b7c:	001ffff6 	.word	0x001ffff6
 8001b80:	fff6fff6 	.word	0xfff6fff6
 8001b84:	fff6fff6 	.word	0xfff6fff6
 8001b88:	003600a1 	.word	0x003600a1
 8001b8c:	fff60080 	.word	0xfff60080
 8001b90:	00b2fff6 	.word	0x00b2fff6
 8001b94:	0036fff6 	.word	0x0036fff6
 8001b98:	fff6fff6 	.word	0xfff6fff6
 8001b9c:	0084      	.short	0x0084
 8001b9e:	0025      	movs	r5, r4
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	3542      	adds	r5, #66	@ 0x42
 8001ba4:	1d11      	adds	r1, r2, #4
 8001ba6:	6019      	str	r1, [r3, #0]
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	702b      	strb	r3, [r5, #0]
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0a0      	b.n	8001cf2 <_printf_i+0x1c2>
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	6809      	ldr	r1, [r1, #0]
 8001bb4:	1d02      	adds	r2, r0, #4
 8001bb6:	060d      	lsls	r5, r1, #24
 8001bb8:	d50b      	bpl.n	8001bd2 <_printf_i+0xa2>
 8001bba:	6806      	ldr	r6, [r0, #0]
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	2e00      	cmp	r6, #0
 8001bc0:	da03      	bge.n	8001bca <_printf_i+0x9a>
 8001bc2:	232d      	movs	r3, #45	@ 0x2d
 8001bc4:	9a03      	ldr	r2, [sp, #12]
 8001bc6:	4276      	negs	r6, r6
 8001bc8:	7013      	strb	r3, [r2, #0]
 8001bca:	4b5e      	ldr	r3, [pc, #376]	@ (8001d44 <_printf_i+0x214>)
 8001bcc:	270a      	movs	r7, #10
 8001bce:	9304      	str	r3, [sp, #16]
 8001bd0:	e018      	b.n	8001c04 <_printf_i+0xd4>
 8001bd2:	6806      	ldr	r6, [r0, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	0649      	lsls	r1, r1, #25
 8001bd8:	d5f1      	bpl.n	8001bbe <_printf_i+0x8e>
 8001bda:	b236      	sxth	r6, r6
 8001bdc:	e7ef      	b.n	8001bbe <_printf_i+0x8e>
 8001bde:	6808      	ldr	r0, [r1, #0]
 8001be0:	6819      	ldr	r1, [r3, #0]
 8001be2:	c940      	ldmia	r1!, {r6}
 8001be4:	0605      	lsls	r5, r0, #24
 8001be6:	d402      	bmi.n	8001bee <_printf_i+0xbe>
 8001be8:	0640      	lsls	r0, r0, #25
 8001bea:	d500      	bpl.n	8001bee <_printf_i+0xbe>
 8001bec:	b2b6      	uxth	r6, r6
 8001bee:	6019      	str	r1, [r3, #0]
 8001bf0:	4b54      	ldr	r3, [pc, #336]	@ (8001d44 <_printf_i+0x214>)
 8001bf2:	270a      	movs	r7, #10
 8001bf4:	9304      	str	r3, [sp, #16]
 8001bf6:	2a6f      	cmp	r2, #111	@ 0x6f
 8001bf8:	d100      	bne.n	8001bfc <_printf_i+0xcc>
 8001bfa:	3f02      	subs	r7, #2
 8001bfc:	0023      	movs	r3, r4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	3343      	adds	r3, #67	@ 0x43
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	6863      	ldr	r3, [r4, #4]
 8001c06:	60a3      	str	r3, [r4, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db03      	blt.n	8001c14 <_printf_i+0xe4>
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	6822      	ldr	r2, [r4, #0]
 8001c10:	438a      	bics	r2, r1
 8001c12:	6022      	str	r2, [r4, #0]
 8001c14:	2e00      	cmp	r6, #0
 8001c16:	d102      	bne.n	8001c1e <_printf_i+0xee>
 8001c18:	9d03      	ldr	r5, [sp, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00c      	beq.n	8001c38 <_printf_i+0x108>
 8001c1e:	9d03      	ldr	r5, [sp, #12]
 8001c20:	0030      	movs	r0, r6
 8001c22:	0039      	movs	r1, r7
 8001c24:	f7fe fb08 	bl	8000238 <__aeabi_uidivmod>
 8001c28:	9b04      	ldr	r3, [sp, #16]
 8001c2a:	3d01      	subs	r5, #1
 8001c2c:	5c5b      	ldrb	r3, [r3, r1]
 8001c2e:	702b      	strb	r3, [r5, #0]
 8001c30:	0033      	movs	r3, r6
 8001c32:	0006      	movs	r6, r0
 8001c34:	429f      	cmp	r7, r3
 8001c36:	d9f3      	bls.n	8001c20 <_printf_i+0xf0>
 8001c38:	2f08      	cmp	r7, #8
 8001c3a:	d109      	bne.n	8001c50 <_printf_i+0x120>
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	07db      	lsls	r3, r3, #31
 8001c40:	d506      	bpl.n	8001c50 <_printf_i+0x120>
 8001c42:	6862      	ldr	r2, [r4, #4]
 8001c44:	6923      	ldr	r3, [r4, #16]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dc02      	bgt.n	8001c50 <_printf_i+0x120>
 8001c4a:	2330      	movs	r3, #48	@ 0x30
 8001c4c:	3d01      	subs	r5, #1
 8001c4e:	702b      	strb	r3, [r5, #0]
 8001c50:	9b03      	ldr	r3, [sp, #12]
 8001c52:	1b5b      	subs	r3, r3, r5
 8001c54:	6123      	str	r3, [r4, #16]
 8001c56:	9b07      	ldr	r3, [sp, #28]
 8001c58:	0021      	movs	r1, r4
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	9805      	ldr	r0, [sp, #20]
 8001c5e:	9b06      	ldr	r3, [sp, #24]
 8001c60:	aa09      	add	r2, sp, #36	@ 0x24
 8001c62:	f7ff fef5 	bl	8001a50 <_printf_common>
 8001c66:	3001      	adds	r0, #1
 8001c68:	d148      	bne.n	8001cfc <_printf_i+0x1cc>
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	4240      	negs	r0, r0
 8001c6e:	b00b      	add	sp, #44	@ 0x2c
 8001c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c72:	2220      	movs	r2, #32
 8001c74:	6809      	ldr	r1, [r1, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	6022      	str	r2, [r4, #0]
 8001c7a:	2278      	movs	r2, #120	@ 0x78
 8001c7c:	4932      	ldr	r1, [pc, #200]	@ (8001d48 <_printf_i+0x218>)
 8001c7e:	9104      	str	r1, [sp, #16]
 8001c80:	0021      	movs	r1, r4
 8001c82:	3145      	adds	r1, #69	@ 0x45
 8001c84:	700a      	strb	r2, [r1, #0]
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	6822      	ldr	r2, [r4, #0]
 8001c8a:	c940      	ldmia	r1!, {r6}
 8001c8c:	0610      	lsls	r0, r2, #24
 8001c8e:	d402      	bmi.n	8001c96 <_printf_i+0x166>
 8001c90:	0650      	lsls	r0, r2, #25
 8001c92:	d500      	bpl.n	8001c96 <_printf_i+0x166>
 8001c94:	b2b6      	uxth	r6, r6
 8001c96:	6019      	str	r1, [r3, #0]
 8001c98:	07d3      	lsls	r3, r2, #31
 8001c9a:	d502      	bpl.n	8001ca2 <_printf_i+0x172>
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	2e00      	cmp	r6, #0
 8001ca4:	d001      	beq.n	8001caa <_printf_i+0x17a>
 8001ca6:	2710      	movs	r7, #16
 8001ca8:	e7a8      	b.n	8001bfc <_printf_i+0xcc>
 8001caa:	2220      	movs	r2, #32
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	4393      	bics	r3, r2
 8001cb0:	6023      	str	r3, [r4, #0]
 8001cb2:	e7f8      	b.n	8001ca6 <_printf_i+0x176>
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	680d      	ldr	r5, [r1, #0]
 8001cb8:	1d10      	adds	r0, r2, #4
 8001cba:	6949      	ldr	r1, [r1, #20]
 8001cbc:	6018      	str	r0, [r3, #0]
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	062e      	lsls	r6, r5, #24
 8001cc2:	d501      	bpl.n	8001cc8 <_printf_i+0x198>
 8001cc4:	6019      	str	r1, [r3, #0]
 8001cc6:	e002      	b.n	8001cce <_printf_i+0x19e>
 8001cc8:	066d      	lsls	r5, r5, #25
 8001cca:	d5fb      	bpl.n	8001cc4 <_printf_i+0x194>
 8001ccc:	8019      	strh	r1, [r3, #0]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9d03      	ldr	r5, [sp, #12]
 8001cd2:	6123      	str	r3, [r4, #16]
 8001cd4:	e7bf      	b.n	8001c56 <_printf_i+0x126>
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	1d11      	adds	r1, r2, #4
 8001cda:	6019      	str	r1, [r3, #0]
 8001cdc:	6815      	ldr	r5, [r2, #0]
 8001cde:	2100      	movs	r1, #0
 8001ce0:	0028      	movs	r0, r5
 8001ce2:	6862      	ldr	r2, [r4, #4]
 8001ce4:	f000 f996 	bl	8002014 <memchr>
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	d001      	beq.n	8001cf0 <_printf_i+0x1c0>
 8001cec:	1b40      	subs	r0, r0, r5
 8001cee:	6060      	str	r0, [r4, #4]
 8001cf0:	6863      	ldr	r3, [r4, #4]
 8001cf2:	6123      	str	r3, [r4, #16]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9a03      	ldr	r2, [sp, #12]
 8001cf8:	7013      	strb	r3, [r2, #0]
 8001cfa:	e7ac      	b.n	8001c56 <_printf_i+0x126>
 8001cfc:	002a      	movs	r2, r5
 8001cfe:	6923      	ldr	r3, [r4, #16]
 8001d00:	9906      	ldr	r1, [sp, #24]
 8001d02:	9805      	ldr	r0, [sp, #20]
 8001d04:	9d07      	ldr	r5, [sp, #28]
 8001d06:	47a8      	blx	r5
 8001d08:	3001      	adds	r0, #1
 8001d0a:	d0ae      	beq.n	8001c6a <_printf_i+0x13a>
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	079b      	lsls	r3, r3, #30
 8001d10:	d415      	bmi.n	8001d3e <_printf_i+0x20e>
 8001d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d14:	68e0      	ldr	r0, [r4, #12]
 8001d16:	4298      	cmp	r0, r3
 8001d18:	daa9      	bge.n	8001c6e <_printf_i+0x13e>
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	e7a7      	b.n	8001c6e <_printf_i+0x13e>
 8001d1e:	0022      	movs	r2, r4
 8001d20:	2301      	movs	r3, #1
 8001d22:	9906      	ldr	r1, [sp, #24]
 8001d24:	9805      	ldr	r0, [sp, #20]
 8001d26:	9e07      	ldr	r6, [sp, #28]
 8001d28:	3219      	adds	r2, #25
 8001d2a:	47b0      	blx	r6
 8001d2c:	3001      	adds	r0, #1
 8001d2e:	d09c      	beq.n	8001c6a <_printf_i+0x13a>
 8001d30:	3501      	adds	r5, #1
 8001d32:	68e3      	ldr	r3, [r4, #12]
 8001d34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	42ab      	cmp	r3, r5
 8001d3a:	dcf0      	bgt.n	8001d1e <_printf_i+0x1ee>
 8001d3c:	e7e9      	b.n	8001d12 <_printf_i+0x1e2>
 8001d3e:	2500      	movs	r5, #0
 8001d40:	e7f7      	b.n	8001d32 <_printf_i+0x202>
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	0800218f 	.word	0x0800218f
 8001d48:	080021a0 	.word	0x080021a0

08001d4c <__sflush_r>:
 8001d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d4e:	220c      	movs	r2, #12
 8001d50:	5e8b      	ldrsh	r3, [r1, r2]
 8001d52:	0005      	movs	r5, r0
 8001d54:	000c      	movs	r4, r1
 8001d56:	071a      	lsls	r2, r3, #28
 8001d58:	d456      	bmi.n	8001e08 <__sflush_r+0xbc>
 8001d5a:	684a      	ldr	r2, [r1, #4]
 8001d5c:	2a00      	cmp	r2, #0
 8001d5e:	dc02      	bgt.n	8001d66 <__sflush_r+0x1a>
 8001d60:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	dd4e      	ble.n	8001e04 <__sflush_r+0xb8>
 8001d66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8001d68:	2f00      	cmp	r7, #0
 8001d6a:	d04b      	beq.n	8001e04 <__sflush_r+0xb8>
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2080      	movs	r0, #128	@ 0x80
 8001d70:	682e      	ldr	r6, [r5, #0]
 8001d72:	602a      	str	r2, [r5, #0]
 8001d74:	001a      	movs	r2, r3
 8001d76:	0140      	lsls	r0, r0, #5
 8001d78:	6a21      	ldr	r1, [r4, #32]
 8001d7a:	4002      	ands	r2, r0
 8001d7c:	4203      	tst	r3, r0
 8001d7e:	d033      	beq.n	8001de8 <__sflush_r+0x9c>
 8001d80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d82:	89a3      	ldrh	r3, [r4, #12]
 8001d84:	075b      	lsls	r3, r3, #29
 8001d86:	d506      	bpl.n	8001d96 <__sflush_r+0x4a>
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	1ad2      	subs	r2, r2, r3
 8001d8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <__sflush_r+0x4a>
 8001d92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d94:	1ad2      	subs	r2, r2, r3
 8001d96:	2300      	movs	r3, #0
 8001d98:	0028      	movs	r0, r5
 8001d9a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8001d9c:	6a21      	ldr	r1, [r4, #32]
 8001d9e:	47b8      	blx	r7
 8001da0:	89a2      	ldrh	r2, [r4, #12]
 8001da2:	1c43      	adds	r3, r0, #1
 8001da4:	d106      	bne.n	8001db4 <__sflush_r+0x68>
 8001da6:	6829      	ldr	r1, [r5, #0]
 8001da8:	291d      	cmp	r1, #29
 8001daa:	d846      	bhi.n	8001e3a <__sflush_r+0xee>
 8001dac:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <__sflush_r+0x108>)
 8001dae:	410b      	asrs	r3, r1
 8001db0:	07db      	lsls	r3, r3, #31
 8001db2:	d442      	bmi.n	8001e3a <__sflush_r+0xee>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6063      	str	r3, [r4, #4]
 8001db8:	6923      	ldr	r3, [r4, #16]
 8001dba:	6023      	str	r3, [r4, #0]
 8001dbc:	04d2      	lsls	r2, r2, #19
 8001dbe:	d505      	bpl.n	8001dcc <__sflush_r+0x80>
 8001dc0:	1c43      	adds	r3, r0, #1
 8001dc2:	d102      	bne.n	8001dca <__sflush_r+0x7e>
 8001dc4:	682b      	ldr	r3, [r5, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d100      	bne.n	8001dcc <__sflush_r+0x80>
 8001dca:	6560      	str	r0, [r4, #84]	@ 0x54
 8001dcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dce:	602e      	str	r6, [r5, #0]
 8001dd0:	2900      	cmp	r1, #0
 8001dd2:	d017      	beq.n	8001e04 <__sflush_r+0xb8>
 8001dd4:	0023      	movs	r3, r4
 8001dd6:	3344      	adds	r3, #68	@ 0x44
 8001dd8:	4299      	cmp	r1, r3
 8001dda:	d002      	beq.n	8001de2 <__sflush_r+0x96>
 8001ddc:	0028      	movs	r0, r5
 8001dde:	f7ff fbf7 	bl	80015d0 <_free_r>
 8001de2:	2300      	movs	r3, #0
 8001de4:	6363      	str	r3, [r4, #52]	@ 0x34
 8001de6:	e00d      	b.n	8001e04 <__sflush_r+0xb8>
 8001de8:	2301      	movs	r3, #1
 8001dea:	0028      	movs	r0, r5
 8001dec:	47b8      	blx	r7
 8001dee:	0002      	movs	r2, r0
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d1c6      	bne.n	8001d82 <__sflush_r+0x36>
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0c3      	beq.n	8001d82 <__sflush_r+0x36>
 8001dfa:	2b1d      	cmp	r3, #29
 8001dfc:	d001      	beq.n	8001e02 <__sflush_r+0xb6>
 8001dfe:	2b16      	cmp	r3, #22
 8001e00:	d11a      	bne.n	8001e38 <__sflush_r+0xec>
 8001e02:	602e      	str	r6, [r5, #0]
 8001e04:	2000      	movs	r0, #0
 8001e06:	e01e      	b.n	8001e46 <__sflush_r+0xfa>
 8001e08:	690e      	ldr	r6, [r1, #16]
 8001e0a:	2e00      	cmp	r6, #0
 8001e0c:	d0fa      	beq.n	8001e04 <__sflush_r+0xb8>
 8001e0e:	680f      	ldr	r7, [r1, #0]
 8001e10:	600e      	str	r6, [r1, #0]
 8001e12:	1bba      	subs	r2, r7, r6
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	079b      	lsls	r3, r3, #30
 8001e1a:	d100      	bne.n	8001e1e <__sflush_r+0xd2>
 8001e1c:	694a      	ldr	r2, [r1, #20]
 8001e1e:	60a2      	str	r2, [r4, #8]
 8001e20:	9b01      	ldr	r3, [sp, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	ddee      	ble.n	8001e04 <__sflush_r+0xb8>
 8001e26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e28:	0032      	movs	r2, r6
 8001e2a:	001f      	movs	r7, r3
 8001e2c:	0028      	movs	r0, r5
 8001e2e:	9b01      	ldr	r3, [sp, #4]
 8001e30:	6a21      	ldr	r1, [r4, #32]
 8001e32:	47b8      	blx	r7
 8001e34:	2800      	cmp	r0, #0
 8001e36:	dc07      	bgt.n	8001e48 <__sflush_r+0xfc>
 8001e38:	89a2      	ldrh	r2, [r4, #12]
 8001e3a:	2340      	movs	r3, #64	@ 0x40
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	81a3      	strh	r3, [r4, #12]
 8001e44:	4240      	negs	r0, r0
 8001e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e48:	9b01      	ldr	r3, [sp, #4]
 8001e4a:	1836      	adds	r6, r6, r0
 8001e4c:	1a1b      	subs	r3, r3, r0
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	e7e6      	b.n	8001e20 <__sflush_r+0xd4>
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	dfbffffe 	.word	0xdfbffffe

08001e58 <_fflush_r>:
 8001e58:	690b      	ldr	r3, [r1, #16]
 8001e5a:	b570      	push	{r4, r5, r6, lr}
 8001e5c:	0005      	movs	r5, r0
 8001e5e:	000c      	movs	r4, r1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_fflush_r+0x12>
 8001e64:	2500      	movs	r5, #0
 8001e66:	0028      	movs	r0, r5
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	d004      	beq.n	8001e78 <_fflush_r+0x20>
 8001e6e:	6a03      	ldr	r3, [r0, #32]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <_fflush_r+0x20>
 8001e74:	f7ff fa90 	bl	8001398 <__sinit>
 8001e78:	220c      	movs	r2, #12
 8001e7a:	5ea3      	ldrsh	r3, [r4, r2]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f1      	beq.n	8001e64 <_fflush_r+0xc>
 8001e80:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e82:	07d2      	lsls	r2, r2, #31
 8001e84:	d404      	bmi.n	8001e90 <_fflush_r+0x38>
 8001e86:	059b      	lsls	r3, r3, #22
 8001e88:	d402      	bmi.n	8001e90 <_fflush_r+0x38>
 8001e8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e8c:	f7ff fb95 	bl	80015ba <__retarget_lock_acquire_recursive>
 8001e90:	0028      	movs	r0, r5
 8001e92:	0021      	movs	r1, r4
 8001e94:	f7ff ff5a 	bl	8001d4c <__sflush_r>
 8001e98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e9a:	0005      	movs	r5, r0
 8001e9c:	07db      	lsls	r3, r3, #31
 8001e9e:	d4e2      	bmi.n	8001e66 <_fflush_r+0xe>
 8001ea0:	89a3      	ldrh	r3, [r4, #12]
 8001ea2:	059b      	lsls	r3, r3, #22
 8001ea4:	d4df      	bmi.n	8001e66 <_fflush_r+0xe>
 8001ea6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ea8:	f7ff fb88 	bl	80015bc <__retarget_lock_release_recursive>
 8001eac:	e7db      	b.n	8001e66 <_fflush_r+0xe>

08001eae <__swbuf_r>:
 8001eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb0:	0006      	movs	r6, r0
 8001eb2:	000d      	movs	r5, r1
 8001eb4:	0014      	movs	r4, r2
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	d004      	beq.n	8001ec4 <__swbuf_r+0x16>
 8001eba:	6a03      	ldr	r3, [r0, #32]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <__swbuf_r+0x16>
 8001ec0:	f7ff fa6a 	bl	8001398 <__sinit>
 8001ec4:	69a3      	ldr	r3, [r4, #24]
 8001ec6:	60a3      	str	r3, [r4, #8]
 8001ec8:	89a3      	ldrh	r3, [r4, #12]
 8001eca:	071b      	lsls	r3, r3, #28
 8001ecc:	d502      	bpl.n	8001ed4 <__swbuf_r+0x26>
 8001ece:	6923      	ldr	r3, [r4, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <__swbuf_r+0x3a>
 8001ed4:	0021      	movs	r1, r4
 8001ed6:	0030      	movs	r0, r6
 8001ed8:	f000 f82c 	bl	8001f34 <__swsetup_r>
 8001edc:	2800      	cmp	r0, #0
 8001ede:	d003      	beq.n	8001ee8 <__swbuf_r+0x3a>
 8001ee0:	2501      	movs	r5, #1
 8001ee2:	426d      	negs	r5, r5
 8001ee4:	0028      	movs	r0, r5
 8001ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee8:	6923      	ldr	r3, [r4, #16]
 8001eea:	6820      	ldr	r0, [r4, #0]
 8001eec:	b2ef      	uxtb	r7, r5
 8001eee:	1ac0      	subs	r0, r0, r3
 8001ef0:	6963      	ldr	r3, [r4, #20]
 8001ef2:	b2ed      	uxtb	r5, r5
 8001ef4:	4283      	cmp	r3, r0
 8001ef6:	dc05      	bgt.n	8001f04 <__swbuf_r+0x56>
 8001ef8:	0021      	movs	r1, r4
 8001efa:	0030      	movs	r0, r6
 8001efc:	f7ff ffac 	bl	8001e58 <_fflush_r>
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d1ed      	bne.n	8001ee0 <__swbuf_r+0x32>
 8001f04:	68a3      	ldr	r3, [r4, #8]
 8001f06:	3001      	adds	r0, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60a3      	str	r3, [r4, #8]
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	6022      	str	r2, [r4, #0]
 8001f12:	701f      	strb	r7, [r3, #0]
 8001f14:	6963      	ldr	r3, [r4, #20]
 8001f16:	4283      	cmp	r3, r0
 8001f18:	d004      	beq.n	8001f24 <__swbuf_r+0x76>
 8001f1a:	89a3      	ldrh	r3, [r4, #12]
 8001f1c:	07db      	lsls	r3, r3, #31
 8001f1e:	d5e1      	bpl.n	8001ee4 <__swbuf_r+0x36>
 8001f20:	2d0a      	cmp	r5, #10
 8001f22:	d1df      	bne.n	8001ee4 <__swbuf_r+0x36>
 8001f24:	0021      	movs	r1, r4
 8001f26:	0030      	movs	r0, r6
 8001f28:	f7ff ff96 	bl	8001e58 <_fflush_r>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d0d9      	beq.n	8001ee4 <__swbuf_r+0x36>
 8001f30:	e7d6      	b.n	8001ee0 <__swbuf_r+0x32>
	...

08001f34 <__swsetup_r>:
 8001f34:	4b2d      	ldr	r3, [pc, #180]	@ (8001fec <__swsetup_r+0xb8>)
 8001f36:	b570      	push	{r4, r5, r6, lr}
 8001f38:	0005      	movs	r5, r0
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	000c      	movs	r4, r1
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d004      	beq.n	8001f4c <__swsetup_r+0x18>
 8001f42:	6a03      	ldr	r3, [r0, #32]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <__swsetup_r+0x18>
 8001f48:	f7ff fa26 	bl	8001398 <__sinit>
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	5ee2      	ldrsh	r2, [r4, r3]
 8001f50:	0713      	lsls	r3, r2, #28
 8001f52:	d423      	bmi.n	8001f9c <__swsetup_r+0x68>
 8001f54:	06d3      	lsls	r3, r2, #27
 8001f56:	d407      	bmi.n	8001f68 <__swsetup_r+0x34>
 8001f58:	2309      	movs	r3, #9
 8001f5a:	602b      	str	r3, [r5, #0]
 8001f5c:	2340      	movs	r3, #64	@ 0x40
 8001f5e:	2001      	movs	r0, #1
 8001f60:	4313      	orrs	r3, r2
 8001f62:	81a3      	strh	r3, [r4, #12]
 8001f64:	4240      	negs	r0, r0
 8001f66:	e03a      	b.n	8001fde <__swsetup_r+0xaa>
 8001f68:	0752      	lsls	r2, r2, #29
 8001f6a:	d513      	bpl.n	8001f94 <__swsetup_r+0x60>
 8001f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f6e:	2900      	cmp	r1, #0
 8001f70:	d008      	beq.n	8001f84 <__swsetup_r+0x50>
 8001f72:	0023      	movs	r3, r4
 8001f74:	3344      	adds	r3, #68	@ 0x44
 8001f76:	4299      	cmp	r1, r3
 8001f78:	d002      	beq.n	8001f80 <__swsetup_r+0x4c>
 8001f7a:	0028      	movs	r0, r5
 8001f7c:	f7ff fb28 	bl	80015d0 <_free_r>
 8001f80:	2300      	movs	r3, #0
 8001f82:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f84:	2224      	movs	r2, #36	@ 0x24
 8001f86:	89a3      	ldrh	r3, [r4, #12]
 8001f88:	4393      	bics	r3, r2
 8001f8a:	81a3      	strh	r3, [r4, #12]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	6063      	str	r3, [r4, #4]
 8001f90:	6923      	ldr	r3, [r4, #16]
 8001f92:	6023      	str	r3, [r4, #0]
 8001f94:	2308      	movs	r3, #8
 8001f96:	89a2      	ldrh	r2, [r4, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	81a3      	strh	r3, [r4, #12]
 8001f9c:	6923      	ldr	r3, [r4, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10b      	bne.n	8001fba <__swsetup_r+0x86>
 8001fa2:	21a0      	movs	r1, #160	@ 0xa0
 8001fa4:	2280      	movs	r2, #128	@ 0x80
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	0089      	lsls	r1, r1, #2
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	400b      	ands	r3, r1
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d003      	beq.n	8001fba <__swsetup_r+0x86>
 8001fb2:	0021      	movs	r1, r4
 8001fb4:	0028      	movs	r0, r5
 8001fb6:	f000 f863 	bl	8002080 <__smakebuf_r>
 8001fba:	230c      	movs	r3, #12
 8001fbc:	5ee2      	ldrsh	r2, [r4, r3]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	420a      	tst	r2, r1
 8001fc6:	d00b      	beq.n	8001fe0 <__swsetup_r+0xac>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60a3      	str	r3, [r4, #8]
 8001fcc:	6963      	ldr	r3, [r4, #20]
 8001fce:	425b      	negs	r3, r3
 8001fd0:	61a3      	str	r3, [r4, #24]
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	6923      	ldr	r3, [r4, #16]
 8001fd6:	4283      	cmp	r3, r0
 8001fd8:	d101      	bne.n	8001fde <__swsetup_r+0xaa>
 8001fda:	0613      	lsls	r3, r2, #24
 8001fdc:	d4be      	bmi.n	8001f5c <__swsetup_r+0x28>
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
 8001fe0:	0791      	lsls	r1, r2, #30
 8001fe2:	d400      	bmi.n	8001fe6 <__swsetup_r+0xb2>
 8001fe4:	6963      	ldr	r3, [r4, #20]
 8001fe6:	60a3      	str	r3, [r4, #8]
 8001fe8:	e7f3      	b.n	8001fd2 <__swsetup_r+0x9e>
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	20000010 	.word	0x20000010

08001ff0 <_sbrk_r>:
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	b570      	push	{r4, r5, r6, lr}
 8001ff4:	4d06      	ldr	r5, [pc, #24]	@ (8002010 <_sbrk_r+0x20>)
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	0008      	movs	r0, r1
 8001ffa:	602b      	str	r3, [r5, #0]
 8001ffc:	f7fe fbe0 	bl	80007c0 <_sbrk>
 8002000:	1c43      	adds	r3, r0, #1
 8002002:	d103      	bne.n	800200c <_sbrk_r+0x1c>
 8002004:	682b      	ldr	r3, [r5, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d000      	beq.n	800200c <_sbrk_r+0x1c>
 800200a:	6023      	str	r3, [r4, #0]
 800200c:	bd70      	pop	{r4, r5, r6, pc}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	2000028c 	.word	0x2000028c

08002014 <memchr>:
 8002014:	b2c9      	uxtb	r1, r1
 8002016:	1882      	adds	r2, r0, r2
 8002018:	4290      	cmp	r0, r2
 800201a:	d101      	bne.n	8002020 <memchr+0xc>
 800201c:	2000      	movs	r0, #0
 800201e:	4770      	bx	lr
 8002020:	7803      	ldrb	r3, [r0, #0]
 8002022:	428b      	cmp	r3, r1
 8002024:	d0fb      	beq.n	800201e <memchr+0xa>
 8002026:	3001      	adds	r0, #1
 8002028:	e7f6      	b.n	8002018 <memchr+0x4>
	...

0800202c <__swhatbuf_r>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	000e      	movs	r6, r1
 8002030:	001d      	movs	r5, r3
 8002032:	230e      	movs	r3, #14
 8002034:	5ec9      	ldrsh	r1, [r1, r3]
 8002036:	0014      	movs	r4, r2
 8002038:	b096      	sub	sp, #88	@ 0x58
 800203a:	2900      	cmp	r1, #0
 800203c:	da0c      	bge.n	8002058 <__swhatbuf_r+0x2c>
 800203e:	89b2      	ldrh	r2, [r6, #12]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	0011      	movs	r1, r2
 8002044:	4019      	ands	r1, r3
 8002046:	421a      	tst	r2, r3
 8002048:	d114      	bne.n	8002074 <__swhatbuf_r+0x48>
 800204a:	2380      	movs	r3, #128	@ 0x80
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	2000      	movs	r0, #0
 8002050:	6029      	str	r1, [r5, #0]
 8002052:	6023      	str	r3, [r4, #0]
 8002054:	b016      	add	sp, #88	@ 0x58
 8002056:	bd70      	pop	{r4, r5, r6, pc}
 8002058:	466a      	mov	r2, sp
 800205a:	f000 f853 	bl	8002104 <_fstat_r>
 800205e:	2800      	cmp	r0, #0
 8002060:	dbed      	blt.n	800203e <__swhatbuf_r+0x12>
 8002062:	23f0      	movs	r3, #240	@ 0xf0
 8002064:	9901      	ldr	r1, [sp, #4]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	4019      	ands	r1, r3
 800206a:	4b04      	ldr	r3, [pc, #16]	@ (800207c <__swhatbuf_r+0x50>)
 800206c:	18c9      	adds	r1, r1, r3
 800206e:	424b      	negs	r3, r1
 8002070:	4159      	adcs	r1, r3
 8002072:	e7ea      	b.n	800204a <__swhatbuf_r+0x1e>
 8002074:	2100      	movs	r1, #0
 8002076:	2340      	movs	r3, #64	@ 0x40
 8002078:	e7e9      	b.n	800204e <__swhatbuf_r+0x22>
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	ffffe000 	.word	0xffffe000

08002080 <__smakebuf_r>:
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	2602      	movs	r6, #2
 8002084:	898b      	ldrh	r3, [r1, #12]
 8002086:	0005      	movs	r5, r0
 8002088:	000c      	movs	r4, r1
 800208a:	b085      	sub	sp, #20
 800208c:	4233      	tst	r3, r6
 800208e:	d007      	beq.n	80020a0 <__smakebuf_r+0x20>
 8002090:	0023      	movs	r3, r4
 8002092:	3347      	adds	r3, #71	@ 0x47
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	6123      	str	r3, [r4, #16]
 8002098:	2301      	movs	r3, #1
 800209a:	6163      	str	r3, [r4, #20]
 800209c:	b005      	add	sp, #20
 800209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a0:	ab03      	add	r3, sp, #12
 80020a2:	aa02      	add	r2, sp, #8
 80020a4:	f7ff ffc2 	bl	800202c <__swhatbuf_r>
 80020a8:	9f02      	ldr	r7, [sp, #8]
 80020aa:	9001      	str	r0, [sp, #4]
 80020ac:	0039      	movs	r1, r7
 80020ae:	0028      	movs	r0, r5
 80020b0:	f7ff fafa 	bl	80016a8 <_malloc_r>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d108      	bne.n	80020ca <__smakebuf_r+0x4a>
 80020b8:	220c      	movs	r2, #12
 80020ba:	5ea3      	ldrsh	r3, [r4, r2]
 80020bc:	059a      	lsls	r2, r3, #22
 80020be:	d4ed      	bmi.n	800209c <__smakebuf_r+0x1c>
 80020c0:	2203      	movs	r2, #3
 80020c2:	4393      	bics	r3, r2
 80020c4:	431e      	orrs	r6, r3
 80020c6:	81a6      	strh	r6, [r4, #12]
 80020c8:	e7e2      	b.n	8002090 <__smakebuf_r+0x10>
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	89a2      	ldrh	r2, [r4, #12]
 80020ce:	6020      	str	r0, [r4, #0]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	81a3      	strh	r3, [r4, #12]
 80020d4:	9b03      	ldr	r3, [sp, #12]
 80020d6:	6120      	str	r0, [r4, #16]
 80020d8:	6167      	str	r7, [r4, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00c      	beq.n	80020f8 <__smakebuf_r+0x78>
 80020de:	0028      	movs	r0, r5
 80020e0:	230e      	movs	r3, #14
 80020e2:	5ee1      	ldrsh	r1, [r4, r3]
 80020e4:	f000 f820 	bl	8002128 <_isatty_r>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d005      	beq.n	80020f8 <__smakebuf_r+0x78>
 80020ec:	2303      	movs	r3, #3
 80020ee:	89a2      	ldrh	r2, [r4, #12]
 80020f0:	439a      	bics	r2, r3
 80020f2:	3b02      	subs	r3, #2
 80020f4:	4313      	orrs	r3, r2
 80020f6:	81a3      	strh	r3, [r4, #12]
 80020f8:	89a3      	ldrh	r3, [r4, #12]
 80020fa:	9a01      	ldr	r2, [sp, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	81a3      	strh	r3, [r4, #12]
 8002100:	e7cc      	b.n	800209c <__smakebuf_r+0x1c>
	...

08002104 <_fstat_r>:
 8002104:	2300      	movs	r3, #0
 8002106:	b570      	push	{r4, r5, r6, lr}
 8002108:	4d06      	ldr	r5, [pc, #24]	@ (8002124 <_fstat_r+0x20>)
 800210a:	0004      	movs	r4, r0
 800210c:	0008      	movs	r0, r1
 800210e:	0011      	movs	r1, r2
 8002110:	602b      	str	r3, [r5, #0]
 8002112:	f7fe fb32 	bl	800077a <_fstat>
 8002116:	1c43      	adds	r3, r0, #1
 8002118:	d103      	bne.n	8002122 <_fstat_r+0x1e>
 800211a:	682b      	ldr	r3, [r5, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d000      	beq.n	8002122 <_fstat_r+0x1e>
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	2000028c 	.word	0x2000028c

08002128 <_isatty_r>:
 8002128:	2300      	movs	r3, #0
 800212a:	b570      	push	{r4, r5, r6, lr}
 800212c:	4d06      	ldr	r5, [pc, #24]	@ (8002148 <_isatty_r+0x20>)
 800212e:	0004      	movs	r4, r0
 8002130:	0008      	movs	r0, r1
 8002132:	602b      	str	r3, [r5, #0]
 8002134:	f7fe fb2f 	bl	8000796 <_isatty>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d103      	bne.n	8002144 <_isatty_r+0x1c>
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d000      	beq.n	8002144 <_isatty_r+0x1c>
 8002142:	6023      	str	r3, [r4, #0]
 8002144:	bd70      	pop	{r4, r5, r6, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	2000028c 	.word	0x2000028c

0800214c <_init>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002152:	bc08      	pop	{r3}
 8002154:	469e      	mov	lr, r3
 8002156:	4770      	bx	lr

08002158 <_fini>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr
