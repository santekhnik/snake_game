
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d28  08003d28  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d28  08003d28  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d28  08003d28  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d28  08003d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d2c  08003d2c  00004d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003d30  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08003d8c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003d8c  0000529c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009494  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9b  00000000  00000000  0000e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  000100b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058e  00000000  00000000  00010800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ec2  00000000  00000000  00010d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad64  00000000  00000000  00022c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069013  00000000  00000000  0002d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000969c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf8  00000000  00000000  00096a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00098704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c90 	.word	0x08003c90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003c90 	.word	0x08003c90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <simulate_snake_game>:
void simulate_snake_game();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void simulate_snake_game() {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af02      	add	r7, sp, #8
    uint8_t snake_x = 10, snake_y = 15;
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	220a      	movs	r2, #10
 800024e:	701a      	strb	r2, [r3, #0]
 8000250:	1dbb      	adds	r3, r7, #6
 8000252:	220f      	movs	r2, #15
 8000254:	701a      	strb	r2, [r3, #0]
    uint8_t frog_x = 20, frog_y = 25;
 8000256:	1d7b      	adds	r3, r7, #5
 8000258:	2214      	movs	r2, #20
 800025a:	701a      	strb	r2, [r3, #0]
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2219      	movs	r2, #25
 8000260:	701a      	strb	r2, [r3, #0]
    uint8_t payload[2] = {snake_x, snake_y};
 8000262:	003b      	movs	r3, r7
 8000264:	1dfa      	adds	r2, r7, #7
 8000266:	7812      	ldrb	r2, [r2, #0]
 8000268:	701a      	strb	r2, [r3, #0]
 800026a:	003b      	movs	r3, r7
 800026c:	1dba      	adds	r2, r7, #6
 800026e:	7812      	ldrb	r2, [r2, #0]
 8000270:	705a      	strb	r2, [r3, #1]

    uint8_t frame_length = encode_frame_snake(payload, 2, frame, 0x02, frog_x, frog_y);
 8000272:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <simulate_snake_game+0x68>)
 8000274:	0038      	movs	r0, r7
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	1d7b      	adds	r3, r7, #5
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2302      	movs	r3, #2
 8000284:	2102      	movs	r1, #2
 8000286:	f000 fa67 	bl	8000758 <encode_frame_snake>
 800028a:	0003      	movs	r3, r0
 800028c:	001a      	movs	r2, r3
 800028e:	1cfb      	adds	r3, r7, #3
 8000290:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, frame, frame_length, 100);
 8000292:	1cfb      	adds	r3, r7, #3
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b29a      	uxth	r2, r3
 8000298:	4904      	ldr	r1, [pc, #16]	@ (80002ac <simulate_snake_game+0x68>)
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <simulate_snake_game+0x6c>)
 800029c:	2364      	movs	r3, #100	@ 0x64
 800029e:	f001 fed3 	bl	8002048 <HAL_UART_Transmit>
}
 80002a2:	46c0      	nop			@ (mov r8, r8)
 80002a4:	46bd      	mov	sp, r7
 80002a6:	b002      	add	sp, #8
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)
 80002ac:	20000144 	.word	0x20000144
 80002b0:	20000078 	.word	0x20000078

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 fc50 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f814 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f8c0 	bl	8000444 <MX_GPIO_Init>
  MX_DMA_Init();
 80002c4:	f000 f8a0 	bl	8000408 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80002c8:	f000 f86e 	bl	80003a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,frame,sizeof(frame));
 80002cc:	4904      	ldr	r1, [pc, #16]	@ (80002e0 <main+0x2c>)
 80002ce:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <main+0x30>)
 80002d0:	2205      	movs	r2, #5
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 ff57 	bl	8002186 <HAL_UART_Receive_DMA>
  simulate_snake_game();
 80002d8:	f7ff ffb4 	bl	8000244 <simulate_snake_game>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	46c0      	nop			@ (mov r8, r8)
 80002de:	e7fd      	b.n	80002dc <main+0x28>
 80002e0:	20000144 	.word	0x20000144
 80002e4:	20000078 	.word	0x20000078

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b097      	sub	sp, #92	@ 0x5c
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2428      	movs	r4, #40	@ 0x28
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2330      	movs	r3, #48	@ 0x30
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f003 f84d 	bl	8003398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	2318      	movs	r3, #24
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	0018      	movs	r0, r3
 8000304:	2310      	movs	r3, #16
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f003 f845 	bl	8003398 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	0018      	movs	r0, r3
 8000312:	2314      	movs	r3, #20
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f003 f83e 	bl	8003398 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031c:	0021      	movs	r1, r4
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2201      	movs	r2, #1
 8000322:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2201      	movs	r2, #1
 8000328:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2202      	movs	r2, #2
 800032e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2280      	movs	r2, #128	@ 0x80
 8000334:	0252      	lsls	r2, r2, #9
 8000336:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2280      	movs	r2, #128	@ 0x80
 800033c:	0352      	lsls	r2, r2, #13
 800033e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000346:	187b      	adds	r3, r7, r1
 8000348:	0018      	movs	r0, r3
 800034a:	f001 f8ed 	bl	8001528 <HAL_RCC_OscConfig>
 800034e:	1e03      	subs	r3, r0, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000352:	f000 f905 	bl	8000560 <Error_Handler>
  }


  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	2118      	movs	r1, #24
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2207      	movs	r2, #7
 800035c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2202      	movs	r2, #2
 8000362:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2101      	movs	r1, #1
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fbf1 	bl	8001b5c <HAL_RCC_ClockConfig>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800037e:	f000 f8ef 	bl	8000560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2201      	movs	r2, #1
 8000386:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	0018      	movs	r0, r3
 8000392:	f001 fd27 	bl	8001de4 <HAL_RCCEx_PeriphCLKConfig>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800039a:	f000 f8e1 	bl	8000560 <Error_Handler>
  }
}
 800039e:	46c0      	nop			@ (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	b017      	add	sp, #92	@ 0x5c
 80003a4:	bd90      	pop	{r4, r7, pc}
	...

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	@ (8000404 <MX_USART1_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003b2:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003b4:	2296      	movs	r2, #150	@ 0x96
 80003b6:	0192      	lsls	r2, r2, #6
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <MX_USART1_UART_Init+0x58>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fdd7 	bl	8001fa0 <HAL_UART_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f8b3 	bl	8000560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000078 	.word	0x20000078
 8000404:	40013800 	.word	0x40013800

08000408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_DMA_Init+0x38>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <MX_DMA_Init+0x38>)
 8000414:	2101      	movs	r1, #1
 8000416:	430a      	orrs	r2, r1
 8000418:	615a      	str	r2, [r3, #20]
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_DMA_Init+0x38>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	2201      	movs	r2, #1
 8000420:	4013      	ands	r3, r2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	200a      	movs	r0, #10
 800042c:	f000 fca6 	bl	8000d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000430:	200a      	movs	r0, #10
 8000432:	f000 fcb8 	bl	8000da6 <HAL_NVIC_EnableIRQ>

}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	40021000 	.word	0x40021000

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b089      	sub	sp, #36	@ 0x24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	240c      	movs	r4, #12
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2314      	movs	r3, #20
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 ff9f 	bl	8003398 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b24      	ldr	r3, [pc, #144]	@ (80004ec <MX_GPIO_Init+0xa8>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b23      	ldr	r3, [pc, #140]	@ (80004ec <MX_GPIO_Init+0xa8>)
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	03c9      	lsls	r1, r1, #15
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b20      	ldr	r3, [pc, #128]	@ (80004ec <MX_GPIO_Init+0xa8>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	03db      	lsls	r3, r3, #15
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000476:	4b1d      	ldr	r3, [pc, #116]	@ (80004ec <MX_GPIO_Init+0xa8>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <MX_GPIO_Init+0xa8>)
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	0309      	lsls	r1, r1, #12
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b19      	ldr	r3, [pc, #100]	@ (80004ec <MX_GPIO_Init+0xa8>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	031b      	lsls	r3, r3, #12
 800048c:	4013      	ands	r3, r2
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <MX_GPIO_Init+0xa8>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <MX_GPIO_Init+0xa8>)
 8000498:	2180      	movs	r1, #128	@ 0x80
 800049a:	0289      	lsls	r1, r1, #10
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <MX_GPIO_Init+0xa8>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	@ 0x80
 80004a6:	029b      	lsls	r3, r3, #10
 80004a8:	4013      	ands	r3, r2
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80004ae:	23c0      	movs	r3, #192	@ 0xc0
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	480f      	ldr	r0, [pc, #60]	@ (80004f0 <MX_GPIO_Init+0xac>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	0019      	movs	r1, r3
 80004b8:	f001 f818 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	22c0      	movs	r2, #192	@ 0xc0
 80004c0:	0092      	lsls	r2, r2, #2
 80004c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2201      	movs	r2, #1
 80004c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <MX_GPIO_Init+0xac>)
 80004da:	0019      	movs	r1, r3
 80004dc:	0010      	movs	r0, r2
 80004de:	f000 fe95 	bl	800120c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b009      	add	sp, #36	@ 0x24
 80004e8:	bd90      	pop	{r4, r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	40021000 	.word	0x40021000
 80004f0:	48000800 	.word	0x48000800

080004f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b08d      	sub	sp, #52	@ 0x34
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <HAL_UART_RxCpltCallback+0x5c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d120      	bne.n	8000548 <HAL_UART_RxCpltCallback+0x54>
        int result = decode_frame(frame, sizeof(frame));
 8000506:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <HAL_UART_RxCpltCallback+0x60>)
 8000508:	2105      	movs	r1, #5
 800050a:	0018      	movs	r0, r3
 800050c:	f000 f998 	bl	8000840 <decode_frame>
 8000510:	0003      	movs	r3, r0
 8000512:	62fb      	str	r3, [r7, #44]	@ 0x2c


        char response[30];
        snprintf(response, sizeof(response), "Decode result: %d\n", result);
 8000514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000516:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <HAL_UART_RxCpltCallback+0x64>)
 8000518:	240c      	movs	r4, #12
 800051a:	1938      	adds	r0, r7, r4
 800051c:	211e      	movs	r1, #30
 800051e:	f002 ff05 	bl	800332c <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), 100);
 8000522:	193b      	adds	r3, r7, r4
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff fdef 	bl	8000108 <strlen>
 800052a:	0003      	movs	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	1939      	adds	r1, r7, r4
 8000530:	480a      	ldr	r0, [pc, #40]	@ (800055c <HAL_UART_RxCpltCallback+0x68>)
 8000532:	2364      	movs	r3, #100	@ 0x64
 8000534:	f001 fd88 	bl	8002048 <HAL_UART_Transmit>
        simulate_snake_game();
 8000538:	f7ff fe84 	bl	8000244 <simulate_snake_game>

        HAL_UART_Receive_DMA(&huart1, frame, sizeof(frame));
 800053c:	4905      	ldr	r1, [pc, #20]	@ (8000554 <HAL_UART_RxCpltCallback+0x60>)
 800053e:	4b07      	ldr	r3, [pc, #28]	@ (800055c <HAL_UART_RxCpltCallback+0x68>)
 8000540:	2205      	movs	r2, #5
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fe1f 	bl	8002186 <HAL_UART_Receive_DMA>
    }
}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b00d      	add	sp, #52	@ 0x34
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	40013800 	.word	0x40013800
 8000554:	20000144 	.word	0x20000144
 8000558:	08003ca8 	.word	0x08003ca8
 800055c:	20000078 	.word	0x20000078

08000560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	e7fd      	b.n	8000568 <Error_Handler+0x8>

0800056c <crc16_ccitt_snake>:



// Функція обчислення CRC-16-CCITT для пакету змійки (поліном 0x1021, початкове значення 0xFFFF)
// Обчислення CRC-16-CCITT для пакету змійки
uint16_t crc16_ccitt_snake(const uint8_t *data, uint16_t len, uint8_t cmd, uint8_t frog_x, uint8_t frog_y) {
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	000c      	movs	r4, r1
 8000576:	0010      	movs	r0, r2
 8000578:	0019      	movs	r1, r3
 800057a:	1cbb      	adds	r3, r7, #2
 800057c:	1c22      	adds	r2, r4, #0
 800057e:	801a      	strh	r2, [r3, #0]
 8000580:	1c7b      	adds	r3, r7, #1
 8000582:	1c02      	adds	r2, r0, #0
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	003b      	movs	r3, r7
 8000588:	1c0a      	adds	r2, r1, #0
 800058a:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 800058c:	210e      	movs	r1, #14
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2201      	movs	r2, #1
 8000592:	4252      	negs	r2, r2
 8000594:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);
 8000596:	1c7b      	adds	r3, r7, #1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b21b      	sxth	r3, r3
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	b21a      	sxth	r2, r3
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2000      	movs	r0, #0
 80005a4:	5e1b      	ldrsh	r3, [r3, r0]
 80005a6:	4053      	eors	r3, r2
 80005a8:	b21a      	sxth	r2, r3
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	801a      	strh	r2, [r3, #0]
    crc ^= (((uint16_t)frog_x << 8) | frog_y);
 80005ae:	003b      	movs	r3, r7
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	021b      	lsls	r3, r3, #8
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	2320      	movs	r3, #32
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b21b      	sxth	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2000      	movs	r0, #0
 80005c8:	5e1b      	ldrsh	r3, [r3, r0]
 80005ca:	4053      	eors	r3, r2
 80005cc:	b21a      	sxth	r2, r3
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 80005d2:	230c      	movs	r3, #12
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
 80005da:	e03d      	b.n	8000658 <crc16_ccitt_snake+0xec>
        crc ^= ((uint16_t)data[i] << 8);
 80005dc:	230c      	movs	r3, #12
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	18d3      	adds	r3, r2, r3
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	021b      	lsls	r3, r3, #8
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	210e      	movs	r1, #14
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2000      	movs	r0, #0
 80005f4:	5e1b      	ldrsh	r3, [r3, r0]
 80005f6:	4053      	eors	r3, r2
 80005f8:	b21a      	sxth	r2, r3
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 80005fe:	230b      	movs	r3, #11
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	e01c      	b.n	8000642 <crc16_ccitt_snake+0xd6>
            if (crc & 0x8000)
 8000608:	210e      	movs	r1, #14
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	5e9b      	ldrsh	r3, [r3, r2]
 8000610:	2b00      	cmp	r3, #0
 8000612:	da0a      	bge.n	800062a <crc16_ccitt_snake+0xbe>
                crc = (crc << 1) ^ 0x1021;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2200      	movs	r2, #0
 8000618:	5e9b      	ldrsh	r3, [r3, r2]
 800061a:	18db      	adds	r3, r3, r3
 800061c:	b21b      	sxth	r3, r3
 800061e:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <crc16_ccitt_snake+0x108>)
 8000620:	4053      	eors	r3, r2
 8000622:	b21a      	sxth	r2, r3
 8000624:	187b      	adds	r3, r7, r1
 8000626:	801a      	strh	r2, [r3, #0]
 8000628:	e005      	b.n	8000636 <crc16_ccitt_snake+0xca>
            else
                crc <<= 1;
 800062a:	230e      	movs	r3, #14
 800062c:	18fa      	adds	r2, r7, r3
 800062e:	18fb      	adds	r3, r7, r3
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	18db      	adds	r3, r3, r3
 8000634:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000636:	210b      	movs	r1, #11
 8000638:	187b      	adds	r3, r7, r1
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	187b      	adds	r3, r7, r1
 800063e:	3201      	adds	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	230b      	movs	r3, #11
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b07      	cmp	r3, #7
 800064a:	d9dd      	bls.n	8000608 <crc16_ccitt_snake+0x9c>
    for (uint16_t i = 0; i < len; i++) {
 800064c:	210c      	movs	r1, #12
 800064e:	187b      	adds	r3, r7, r1
 8000650:	881a      	ldrh	r2, [r3, #0]
 8000652:	187b      	adds	r3, r7, r1
 8000654:	3201      	adds	r2, #1
 8000656:	801a      	strh	r2, [r3, #0]
 8000658:	230c      	movs	r3, #12
 800065a:	18fa      	adds	r2, r7, r3
 800065c:	1cbb      	adds	r3, r7, #2
 800065e:	8812      	ldrh	r2, [r2, #0]
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d3ba      	bcc.n	80005dc <crc16_ccitt_snake+0x70>
        }
    }
    return crc;
 8000666:	230e      	movs	r3, #14
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	881b      	ldrh	r3, [r3, #0]
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	b005      	add	sp, #20
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	00001021 	.word	0x00001021

08000678 <crc16_ccitt>:
// Функція обчислення CRC-16-CCITT (поліном 0x1021, початкове значення 0xFFFF)
uint16_t crc16_ccitt(const uint8_t *data, uint16_t len, uint8_t cmd) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	0008      	movs	r0, r1
 8000682:	0011      	movs	r1, r2
 8000684:	1cbb      	adds	r3, r7, #2
 8000686:	1c02      	adds	r2, r0, #0
 8000688:	801a      	strh	r2, [r3, #0]
 800068a:	1c7b      	adds	r3, r7, #1
 800068c:	1c0a      	adds	r2, r1, #0
 800068e:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;									//початкове значення
 8000690:	210e      	movs	r1, #14
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2201      	movs	r2, #1
 8000696:	4252      	negs	r2, r2
 8000698:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);							//команда cmd
 800069a:	1c7b      	adds	r3, r7, #1
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b21b      	sxth	r3, r3
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2000      	movs	r0, #0
 80006a8:	5e1b      	ldrsh	r3, [r3, r0]
 80006aa:	4053      	eors	r3, r2
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 80006b2:	230c      	movs	r3, #12
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	2200      	movs	r2, #0
 80006b8:	801a      	strh	r2, [r3, #0]
 80006ba:	e03d      	b.n	8000738 <crc16_ccitt+0xc0>
        crc ^= ((uint16_t)data[i] << 8);
 80006bc:	230c      	movs	r3, #12
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	18d3      	adds	r3, r2, r3
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	210e      	movs	r1, #14
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2000      	movs	r0, #0
 80006d4:	5e1b      	ldrsh	r3, [r3, r0]
 80006d6:	4053      	eors	r3, r2
 80006d8:	b21a      	sxth	r2, r3
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 80006de:	230b      	movs	r3, #11
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
 80006e6:	e01c      	b.n	8000722 <crc16_ccitt+0xaa>
            if (crc & 0x8000)
 80006e8:	210e      	movs	r1, #14
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	5e9b      	ldrsh	r3, [r3, r2]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da0a      	bge.n	800070a <crc16_ccitt+0x92>
                crc = (crc << 1) ^ 0x1021;					//поліном
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	5e9b      	ldrsh	r3, [r3, r2]
 80006fa:	18db      	adds	r3, r3, r3
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4a15      	ldr	r2, [pc, #84]	@ (8000754 <crc16_ccitt+0xdc>)
 8000700:	4053      	eors	r3, r2
 8000702:	b21a      	sxth	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	801a      	strh	r2, [r3, #0]
 8000708:	e005      	b.n	8000716 <crc16_ccitt+0x9e>
            else
                crc <<= 1;
 800070a:	230e      	movs	r3, #14
 800070c:	18fa      	adds	r2, r7, r3
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	18db      	adds	r3, r3, r3
 8000714:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000716:	210b      	movs	r1, #11
 8000718:	187b      	adds	r3, r7, r1
 800071a:	781a      	ldrb	r2, [r3, #0]
 800071c:	187b      	adds	r3, r7, r1
 800071e:	3201      	adds	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	230b      	movs	r3, #11
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b07      	cmp	r3, #7
 800072a:	d9dd      	bls.n	80006e8 <crc16_ccitt+0x70>
    for (uint16_t i = 0; i < len; i++) {
 800072c:	210c      	movs	r1, #12
 800072e:	187b      	adds	r3, r7, r1
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	187b      	adds	r3, r7, r1
 8000734:	3201      	adds	r2, #1
 8000736:	801a      	strh	r2, [r3, #0]
 8000738:	230c      	movs	r3, #12
 800073a:	18fa      	adds	r2, r7, r3
 800073c:	1cbb      	adds	r3, r7, #2
 800073e:	8812      	ldrh	r2, [r2, #0]
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3ba      	bcc.n	80006bc <crc16_ccitt+0x44>
        }
    }
    return crc;
 8000746:	230e      	movs	r3, #14
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	881b      	ldrh	r3, [r3, #0]
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	b004      	add	sp, #16
 8000752:	bd80      	pop	{r7, pc}
 8000754:	00001021 	.word	0x00001021

08000758 <encode_frame_snake>:

//функція кодування пакету змії
uint16_t encode_frame_snake(const uint8_t *payload, uint8_t payload_len, uint8_t *frame, uint8_t cmd_byte, uint8_t frog_x, uint8_t frog_y) {
 8000758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075a:	b089      	sub	sp, #36	@ 0x24
 800075c:	af02      	add	r7, sp, #8
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	0008      	movs	r0, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	0019      	movs	r1, r3
 8000766:	240b      	movs	r4, #11
 8000768:	193b      	adds	r3, r7, r4
 800076a:	1c02      	adds	r2, r0, #0
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	200a      	movs	r0, #10
 8000770:	183b      	adds	r3, r7, r0
 8000772:	1c0a      	adds	r2, r1, #0
 8000774:	701a      	strb	r2, [r3, #0]
    frame[0] = START_BYTE;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	227e      	movs	r2, #126	@ 0x7e
 800077a:	701a      	strb	r2, [r3, #0]
    frame[1] = cmd_byte;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3301      	adds	r3, #1
 8000780:	183a      	adds	r2, r7, r0
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	701a      	strb	r2, [r3, #0]
    frame[2] = payload_len;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3302      	adds	r3, #2
 800078a:	193a      	adds	r2, r7, r4
 800078c:	7812      	ldrb	r2, [r2, #0]
 800078e:	701a      	strb	r2, [r3, #0]
    memcpy(&frame[3], payload, payload_len);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	1cd8      	adds	r0, r3, #3
 8000794:	0026      	movs	r6, r4
 8000796:	19bb      	adds	r3, r7, r6
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0019      	movs	r1, r3
 800079e:	f002 fe2f 	bl	8003400 <memcpy>
    frame[3 + payload_len] = frog_x;
 80007a2:	19bb      	adds	r3, r7, r6
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	3303      	adds	r3, #3
 80007a8:	001a      	movs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	189a      	adds	r2, r3, r2
 80007ae:	2528      	movs	r5, #40	@ 0x28
 80007b0:	2008      	movs	r0, #8
 80007b2:	182b      	adds	r3, r5, r0
 80007b4:	19db      	adds	r3, r3, r7
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	7013      	strb	r3, [r2, #0]
    frame[4 + payload_len] = frog_y;
 80007ba:	19bb      	adds	r3, r7, r6
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	3304      	adds	r3, #4
 80007c0:	001a      	movs	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	189b      	adds	r3, r3, r2
 80007c6:	222c      	movs	r2, #44	@ 0x2c
 80007c8:	1812      	adds	r2, r2, r0
 80007ca:	19d2      	adds	r2, r2, r7
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	701a      	strb	r2, [r3, #0]

    uint16_t crc = crc16_ccitt_snake(payload, payload_len, cmd_byte, frog_x, frog_y);
 80007d0:	19bb      	adds	r3, r7, r6
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b299      	uxth	r1, r3
 80007d6:	2316      	movs	r3, #22
 80007d8:	18fc      	adds	r4, r7, r3
 80007da:	0002      	movs	r2, r0
 80007dc:	182b      	adds	r3, r5, r0
 80007de:	19db      	adds	r3, r3, r7
 80007e0:	781d      	ldrb	r5, [r3, #0]
 80007e2:	200a      	movs	r0, #10
 80007e4:	183b      	adds	r3, r7, r0
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	469c      	mov	ip, r3
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	232c      	movs	r3, #44	@ 0x2c
 80007ee:	189b      	adds	r3, r3, r2
 80007f0:	19db      	adds	r3, r3, r7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	002b      	movs	r3, r5
 80007f8:	4662      	mov	r2, ip
 80007fa:	f7ff feb7 	bl	800056c <crc16_ccitt_snake>
 80007fe:	0003      	movs	r3, r0
 8000800:	8023      	strh	r3, [r4, #0]
    frame[5 + payload_len] = (crc >> 8) & 0xFF;
 8000802:	2016      	movs	r0, #22
 8000804:	183b      	adds	r3, r7, r0
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b29a      	uxth	r2, r3
 800080c:	19bb      	adds	r3, r7, r6
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3305      	adds	r3, #5
 8000812:	0019      	movs	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	185b      	adds	r3, r3, r1
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	701a      	strb	r2, [r3, #0]
    frame[6 + payload_len] = crc & 0xFF;
 800081c:	19bb      	adds	r3, r7, r6
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3306      	adds	r3, #6
 8000822:	001a      	movs	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	189b      	adds	r3, r3, r2
 8000828:	183a      	adds	r2, r7, r0
 800082a:	8812      	ldrh	r2, [r2, #0]
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]

    // Загальна довжина пакету = 1 (START) + 1 (CMD) + 1 (payload_len) + payload_len + 1 (frog_x) + 1 (frog_y) + 2 (CRC) = payload_len + 7
    return (uint8_t)(payload_len + 7);
 8000830:	19bb      	adds	r3, r7, r6
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3307      	adds	r3, #7
 8000836:	b2db      	uxtb	r3, r3
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b007      	add	sp, #28
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000840 <decode_frame>:
    frame[3 + payload_len] = (crc >> 8) & 0xFF; 			// crc high
    frame[4 + payload_len] = crc & 0xFF;        			// crc low
    return 5;
}

int decode_frame(const uint8_t *frame, uint8_t frame_len) {
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	000a      	movs	r2, r1
 800084a:	1cfb      	adds	r3, r7, #3
 800084c:	701a      	strb	r2, [r3, #0]

    if (frame_len < 5)
 800084e:	1cfb      	adds	r3, r7, #3
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d802      	bhi.n	800085c <decode_frame+0x1c>
        return -1; 											// Кадр занадто короткий
 8000856:	2301      	movs	r3, #1
 8000858:	425b      	negs	r3, r3
 800085a:	e03f      	b.n	80008dc <decode_frame+0x9c>
    if (frame[0] != START_BYTE)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b7e      	cmp	r3, #126	@ 0x7e
 8000862:	d002      	beq.n	800086a <decode_frame+0x2a>
        return -2; 											// Невірний стартовий байт
 8000864:	2302      	movs	r3, #2
 8000866:	425b      	negs	r3, r3
 8000868:	e038      	b.n	80008dc <decode_frame+0x9c>
    uint8_t cmd_byte = frame[1];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	1c5a      	adds	r2, r3, #1
 800086e:	230f      	movs	r3, #15
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	7812      	ldrb	r2, [r2, #0]
 8000874:	701a      	strb	r2, [r3, #0]
    uint8_t payload = frame[2];
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	1c9a      	adds	r2, r3, #2
 800087a:	230e      	movs	r3, #14
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	7812      	ldrb	r2, [r2, #0]
 8000880:	701a      	strb	r2, [r3, #0]
    if (frame_len != 5)
 8000882:	1cfb      	adds	r3, r7, #3
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b05      	cmp	r3, #5
 8000888:	d002      	beq.n	8000890 <decode_frame+0x50>
        return -3; 													// Невідповідність довжини кадру
 800088a:	2303      	movs	r3, #3
 800088c:	425b      	negs	r3, r3
 800088e:	e025      	b.n	80008dc <decode_frame+0x9c>
    uint16_t received_crc = (frame[3] << 8) | frame[4];				// Отримання переданого CRC
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3303      	adds	r3, #3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b21b      	sxth	r3, r3
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3304      	adds	r3, #4
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	250c      	movs	r5, #12
 80008aa:	197b      	adds	r3, r7, r5
 80008ac:	801a      	strh	r2, [r3, #0]
    uint16_t computed_crc = crc16_ccitt(&frame[3], 5, cmd_byte);    // Обчислення CRC на основі PAYLOAD
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1cd8      	adds	r0, r3, #3
 80008b2:	260a      	movs	r6, #10
 80008b4:	19bc      	adds	r4, r7, r6
 80008b6:	230f      	movs	r3, #15
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	001a      	movs	r2, r3
 80008be:	2105      	movs	r1, #5
 80008c0:	f7ff feda 	bl	8000678 <crc16_ccitt>
 80008c4:	0003      	movs	r3, r0
 80008c6:	8023      	strh	r3, [r4, #0]
    return (received_crc == computed_crc) ? 0 : -4;
 80008c8:	197a      	adds	r2, r7, r5
 80008ca:	19bb      	adds	r3, r7, r6
 80008cc:	8812      	ldrh	r2, [r2, #0]
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d101      	bne.n	80008d8 <decode_frame+0x98>
 80008d4:	2300      	movs	r3, #0
 80008d6:	e001      	b.n	80008dc <decode_frame+0x9c>
 80008d8:	2304      	movs	r3, #4
 80008da:	425b      	negs	r3, r3
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b005      	add	sp, #20
 80008e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <HAL_MspInit+0x44>)
 80008ec:	699a      	ldr	r2, [r3, #24]
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_MspInit+0x44>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	619a      	str	r2, [r3, #24]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <HAL_MspInit+0x44>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	2201      	movs	r2, #1
 80008fc:	4013      	ands	r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x44>)
 8000904:	69da      	ldr	r2, [r3, #28]
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_MspInit+0x44>)
 8000908:	2180      	movs	r1, #128	@ 0x80
 800090a:	0549      	lsls	r1, r1, #21
 800090c:	430a      	orrs	r2, r1
 800090e:	61da      	str	r2, [r3, #28]
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_MspInit+0x44>)
 8000912:	69da      	ldr	r2, [r3, #28]
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	055b      	lsls	r3, r3, #21
 8000918:	4013      	ands	r3, r2
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b08b      	sub	sp, #44	@ 0x2c
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	2414      	movs	r4, #20
 8000936:	193b      	adds	r3, r7, r4
 8000938:	0018      	movs	r0, r3
 800093a:	2314      	movs	r3, #20
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f002 fd2a 	bl	8003398 <memset>
  if(huart->Instance==USART1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a34      	ldr	r2, [pc, #208]	@ (8000a1c <HAL_UART_MspInit+0xf0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d161      	bne.n	8000a12 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094e:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <HAL_UART_MspInit+0xf4>)
 8000950:	699a      	ldr	r2, [r3, #24]
 8000952:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <HAL_UART_MspInit+0xf4>)
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	01c9      	lsls	r1, r1, #7
 8000958:	430a      	orrs	r2, r1
 800095a:	619a      	str	r2, [r3, #24]
 800095c:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <HAL_UART_MspInit+0xf4>)
 800095e:	699a      	ldr	r2, [r3, #24]
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	01db      	lsls	r3, r3, #7
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <HAL_UART_MspInit+0xf4>)
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <HAL_UART_MspInit+0xf4>)
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	0289      	lsls	r1, r1, #10
 8000974:	430a      	orrs	r2, r1
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <HAL_UART_MspInit+0xf4>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	029b      	lsls	r3, r3, #10
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	22c0      	movs	r2, #192	@ 0xc0
 800098a:	00d2      	lsls	r2, r2, #3
 800098c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	0021      	movs	r1, r4
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2202      	movs	r2, #2
 8000994:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2203      	movs	r2, #3
 80009a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2201      	movs	r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	187a      	adds	r2, r7, r1
 80009aa:	2390      	movs	r3, #144	@ 0x90
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fc2b 	bl	800120c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a28 <HAL_UART_MspInit+0xfc>)
 80009ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009dc:	2220      	movs	r2, #32
 80009de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009e0:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 f9f9 	bl	8000de0 <HAL_DMA_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80009f2:	f7ff fdb5 	bl	8000560 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009fa:	675a      	str	r2, [r3, #116]	@ 0x74
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <HAL_UART_MspInit+0xf8>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	201b      	movs	r0, #27
 8000a08:	f000 f9b8 	bl	8000d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a0c:	201b      	movs	r0, #27
 8000a0e:	f000 f9ca 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b00b      	add	sp, #44	@ 0x2c
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	20000100 	.word	0x20000100
 8000a28:	40020030 	.word	0x40020030

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f8ca 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a64:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fae5 	bl	8001036 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	20000100 	.word	0x20000100

08000a78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <USART1_IRQHandler+0x14>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 fbd8 	bl	8002234 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	20000078 	.word	0x20000078

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f002 fc72 	bl	80033a8 <__errno>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	425b      	negs	r3, r3
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	18d2      	adds	r2, r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <_sbrk+0x64>)
 8000ae0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b006      	add	sp, #24
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20002000 	.word	0x20002000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	2000014c 	.word	0x2000014c
 8000af8:	200002a0 	.word	0x200002a0

08000afc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff fff6 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	@ (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	@ (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b36:	f002 fc3d 	bl	80033b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff fbbb 	bl	80002b4 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b4c:	08003d30 	.word	0x08003d30
  ldr r2, =_sbss
 8000b50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b54:	2000029c 	.word	0x2000029c

08000b58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_COMP_IRQHandler>
	...

08000b5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <HAL_Init+0x24>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_Init+0x24>)
 8000b66:	2110      	movs	r1, #16
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f809 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b72:	f7ff feb7 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <HAL_InitTick+0x5c>)
 8000b8e:	681c      	ldr	r4, [r3, #0]
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_InitTick+0x60>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	0019      	movs	r1, r3
 8000b96:	23fa      	movs	r3, #250	@ 0xfa
 8000b98:	0098      	lsls	r0, r3, #2
 8000b9a:	f7ff fac7 	bl	800012c <__udivsi3>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f7ff fac2 	bl	800012c <__udivsi3>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 f90b 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e00f      	b.n	8000bd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d80b      	bhi.n	8000bd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f8d8 	bl	8000d7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_InitTick+0x64>)
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b003      	add	sp, #12
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_IncTick+0x1c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	18d2      	adds	r2, r2, r3
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bfe:	601a      	str	r2, [r3, #0]
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000150 	.word	0x20000150

08000c10 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b02      	ldr	r3, [pc, #8]	@ (8000c20 <HAL_GetTick+0x10>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	20000150 	.word	0x20000150

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c36:	d809      	bhi.n	8000c4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	231f      	movs	r3, #31
 8000c40:	401a      	ands	r2, r3
 8000c42:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_EnableIRQ+0x30>)
 8000c44:	2101      	movs	r1, #1
 8000c46:	4091      	lsls	r1, r2
 8000c48:	000a      	movs	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
  }
}
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b002      	add	sp, #8
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0002      	movs	r2, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c6c:	d828      	bhi.n	8000cc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d2c <__NVIC_SetPriority+0xd4>)
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	33c0      	adds	r3, #192	@ 0xc0
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	589b      	ldr	r3, [r3, r2]
 8000c7e:	1dfa      	adds	r2, r7, #7
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	0011      	movs	r1, r2
 8000c84:	2203      	movs	r2, #3
 8000c86:	400a      	ands	r2, r1
 8000c88:	00d2      	lsls	r2, r2, #3
 8000c8a:	21ff      	movs	r1, #255	@ 0xff
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	000a      	movs	r2, r1
 8000c90:	43d2      	mvns	r2, r2
 8000c92:	401a      	ands	r2, r3
 8000c94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	019b      	lsls	r3, r3, #6
 8000c9a:	22ff      	movs	r2, #255	@ 0xff
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	4003      	ands	r3, r0
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cac:	481f      	ldr	r0, [pc, #124]	@ (8000d2c <__NVIC_SetPriority+0xd4>)
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	33c0      	adds	r3, #192	@ 0xc0
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cbe:	e031      	b.n	8000d24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <__NVIC_SetPriority+0xd8>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	230f      	movs	r3, #15
 8000cca:	400b      	ands	r3, r1
 8000ccc:	3b08      	subs	r3, #8
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3306      	adds	r3, #6
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	18d3      	adds	r3, r2, r3
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1dfa      	adds	r2, r7, #7
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	0011      	movs	r1, r2
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	21ff      	movs	r1, #255	@ 0xff
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	401a      	ands	r2, r3
 8000cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	22ff      	movs	r2, #255	@ 0xff
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	2303      	movs	r3, #3
 8000d02:	4003      	ands	r3, r0
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <__NVIC_SetPriority+0xd8>)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	001c      	movs	r4, r3
 8000d10:	230f      	movs	r3, #15
 8000d12:	4023      	ands	r3, r4
 8000d14:	3b08      	subs	r3, #8
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	3306      	adds	r3, #6
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	18c3      	adds	r3, r0, r3
 8000d20:	3304      	adds	r3, #4
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b003      	add	sp, #12
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1e5a      	subs	r2, r3, #1
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	045b      	lsls	r3, r3, #17
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d301      	bcc.n	8000d4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e010      	b.n	8000d6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <SysTick_Config+0x44>)
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d54:	2301      	movs	r3, #1
 8000d56:	425b      	negs	r3, r3
 8000d58:	2103      	movs	r1, #3
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff ff7c 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <SysTick_Config+0x44>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <SysTick_Config+0x44>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	210f      	movs	r1, #15
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	1c02      	adds	r2, r0, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	0002      	movs	r2, r0
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ff33 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ffaf 	bl	8000d34 <SysTick_Config>
 8000dd6:	0003      	movs	r3, r0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e036      	b.n	8000e64 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2221      	movs	r2, #33	@ 0x21
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <HAL_DMA_Init+0x8c>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69db      	ldr	r3, [r3, #28]
 8000e34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 f9c4 	bl	80011d4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2221      	movs	r2, #33	@ 0x21
 8000e56:	2101      	movs	r1, #1
 8000e58:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	2100      	movs	r1, #0
 8000e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b004      	add	sp, #16
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	ffffc00f 	.word	0xffffc00f

08000e70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7e:	2317      	movs	r3, #23
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2220      	movs	r2, #32
 8000e8a:	5c9b      	ldrb	r3, [r3, r2]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d101      	bne.n	8000e94 <HAL_DMA_Start_IT+0x24>
 8000e90:	2302      	movs	r3, #2
 8000e92:	e04f      	b.n	8000f34 <HAL_DMA_Start_IT+0xc4>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2220      	movs	r2, #32
 8000e98:	2101      	movs	r1, #1
 8000e9a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2221      	movs	r2, #33	@ 0x21
 8000ea0:	5c9b      	ldrb	r3, [r3, r2]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d13a      	bne.n	8000f1e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2221      	movs	r2, #33	@ 0x21
 8000eac:	2102      	movs	r1, #2
 8000eae:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	438a      	bics	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f000 f954 	bl	800117a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d008      	beq.n	8000eec <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	210e      	movs	r1, #14
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e00f      	b.n	8000f0c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	210a      	movs	r1, #10
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2104      	movs	r1, #4
 8000f08:	438a      	bics	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e007      	b.n	8000f2e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f26:	2317      	movs	r3, #23
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000f2e:	2317      	movs	r3, #23
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	781b      	ldrb	r3, [r3, #0]
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b006      	add	sp, #24
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2221      	movs	r2, #33	@ 0x21
 8000f48:	5c9b      	ldrb	r3, [r3, r2]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d008      	beq.n	8000f62 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2204      	movs	r2, #4
 8000f54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e020      	b.n	8000fa4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	210e      	movs	r1, #14
 8000f6e:	438a      	bics	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	438a      	bics	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	000a      	movs	r2, r1
 8000f90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2221      	movs	r2, #33	@ 0x21
 8000f96:	2101      	movs	r1, #1
 8000f98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb4:	210f      	movs	r1, #15
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2221      	movs	r2, #33	@ 0x21
 8000fc0:	5c9b      	ldrb	r3, [r3, r2]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d006      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e028      	b.n	8001028 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	210e      	movs	r1, #14
 8000fe2:	438a      	bics	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ffe:	2101      	movs	r1, #1
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2221      	movs	r2, #33	@ 0x21
 800100a:	2101      	movs	r1, #1
 800100c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	0010      	movs	r0, r2
 8001026:	4798      	blx	r3
    }
  }
  return status;
 8001028:	230f      	movs	r3, #15
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	781b      	ldrb	r3, [r3, #0]
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	2204      	movs	r2, #4
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	d024      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x72>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2204      	movs	r2, #4
 8001062:	4013      	ands	r3, r2
 8001064:	d020      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2220      	movs	r2, #32
 800106e:	4013      	ands	r3, r2
 8001070:	d107      	bne.n	8001082 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2104      	movs	r1, #4
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800108a:	2104      	movs	r1, #4
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001096:	2b00      	cmp	r3, #0
 8001098:	d100      	bne.n	800109c <HAL_DMA_IRQHandler+0x66>
 800109a:	e06a      	b.n	8001172 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	0010      	movs	r0, r2
 80010a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010a6:	e064      	b.n	8001172 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	2202      	movs	r2, #2
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4013      	ands	r3, r2
 80010b6:	d02b      	beq.n	8001110 <HAL_DMA_IRQHandler+0xda>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d027      	beq.n	8001110 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2220      	movs	r2, #32
 80010c8:	4013      	ands	r3, r2
 80010ca:	d10b      	bne.n	80010e4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	210a      	movs	r1, #10
 80010d8:	438a      	bics	r2, r1
 80010da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2221      	movs	r2, #33	@ 0x21
 80010e0:	2101      	movs	r1, #1
 80010e2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010ec:	2102      	movs	r1, #2
 80010ee:	4091      	lsls	r1, r2
 80010f0:	000a      	movs	r2, r1
 80010f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2220      	movs	r2, #32
 80010f8:	2100      	movs	r1, #0
 80010fa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001100:	2b00      	cmp	r3, #0
 8001102:	d036      	beq.n	8001172 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	0010      	movs	r0, r2
 800110c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800110e:	e030      	b.n	8001172 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	2208      	movs	r2, #8
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	d028      	beq.n	8001172 <HAL_DMA_IRQHandler+0x13c>
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2208      	movs	r2, #8
 8001124:	4013      	ands	r3, r2
 8001126:	d024      	beq.n	8001172 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	210e      	movs	r1, #14
 8001134:	438a      	bics	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001140:	2101      	movs	r1, #1
 8001142:	4091      	lsls	r1, r2
 8001144:	000a      	movs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2221      	movs	r2, #33	@ 0x21
 8001152:	2101      	movs	r1, #1
 8001154:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	0010      	movs	r0, r2
 800116e:	4798      	blx	r3
    }
  }
}
 8001170:	e7ff      	b.n	8001172 <HAL_DMA_IRQHandler+0x13c>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}

0800117a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001190:	2101      	movs	r1, #1
 8001192:	4091      	lsls	r1, r2
 8001194:	000a      	movs	r2, r1
 8001196:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b10      	cmp	r3, #16
 80011a6:	d108      	bne.n	80011ba <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011b8:	e007      	b.n	80011ca <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	60da      	str	r2, [r3, #12]
}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <DMA_CalcBaseAndBitshift+0x30>)
 80011e2:	4694      	mov	ip, r2
 80011e4:	4463      	add	r3, ip
 80011e6:	2114      	movs	r1, #20
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7fe ff9f 	bl	800012c <__udivsi3>
 80011ee:	0003      	movs	r3, r0
 80011f0:	009a      	lsls	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a03      	ldr	r2, [pc, #12]	@ (8001208 <DMA_CalcBaseAndBitshift+0x34>)
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}
 8001204:	bffdfff8 	.word	0xbffdfff8
 8001208:	40020000 	.word	0x40020000

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e14f      	b.n	80014bc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4091      	lsls	r1, r2
 8001226:	000a      	movs	r2, r1
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d100      	bne.n	8001234 <HAL_GPIO_Init+0x28>
 8001232:	e140      	b.n	80014b6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	43da      	mvns	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	2201      	movs	r2, #1
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2203      	movs	r2, #3
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d017      	beq.n	80012ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2203      	movs	r2, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d123      	bne.n	800133e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	58d3      	ldr	r3, [r2, r3]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2207      	movs	r2, #7
 8001308:	4013      	ands	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2107      	movs	r1, #7
 8001322:	400b      	ands	r3, r1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	6939      	ldr	r1, [r7, #16]
 800133c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	401a      	ands	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	23c0      	movs	r3, #192	@ 0xc0
 8001378:	029b      	lsls	r3, r3, #10
 800137a:	4013      	ands	r3, r2
 800137c:	d100      	bne.n	8001380 <HAL_GPIO_Init+0x174>
 800137e:	e09a      	b.n	80014b6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001380:	4b54      	ldr	r3, [pc, #336]	@ (80014d4 <HAL_GPIO_Init+0x2c8>)
 8001382:	699a      	ldr	r2, [r3, #24]
 8001384:	4b53      	ldr	r3, [pc, #332]	@ (80014d4 <HAL_GPIO_Init+0x2c8>)
 8001386:	2101      	movs	r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	619a      	str	r2, [r3, #24]
 800138c:	4b51      	ldr	r3, [pc, #324]	@ (80014d4 <HAL_GPIO_Init+0x2c8>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001398:	4a4f      	ldr	r2, [pc, #316]	@ (80014d8 <HAL_GPIO_Init+0x2cc>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	589b      	ldr	r3, [r3, r2]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2203      	movs	r2, #3
 80013aa:	4013      	ands	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	2390      	movs	r3, #144	@ 0x90
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d013      	beq.n	80013ee <HAL_GPIO_Init+0x1e2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a44      	ldr	r2, [pc, #272]	@ (80014dc <HAL_GPIO_Init+0x2d0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00d      	beq.n	80013ea <HAL_GPIO_Init+0x1de>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a43      	ldr	r2, [pc, #268]	@ (80014e0 <HAL_GPIO_Init+0x2d4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x1da>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a42      	ldr	r2, [pc, #264]	@ (80014e4 <HAL_GPIO_Init+0x2d8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_GPIO_Init+0x1d6>
 80013de:	2303      	movs	r3, #3
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x1e4>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x1e4>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x1e4>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x1e4>
 80013ee:	2300      	movs	r3, #0
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	2103      	movs	r1, #3
 80013f4:	400a      	ands	r2, r1
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	@ (80014d8 <HAL_GPIO_Init+0x2cc>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <HAL_GPIO_Init+0x2dc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	035b      	lsls	r3, r3, #13
 8001426:	4013      	ands	r3, r2
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_GPIO_Init+0x2dc>)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_GPIO_Init+0x2dc>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	039b      	lsls	r3, r3, #14
 8001450:	4013      	ands	r3, r2
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800145c:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <HAL_GPIO_Init+0x2dc>)
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001462:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <HAL_GPIO_Init+0x2dc>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_GPIO_Init+0x2dc>)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <HAL_GPIO_Init+0x2dc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	025b      	lsls	r3, r3, #9
 80014a4:	4013      	ands	r3, r2
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <HAL_GPIO_Init+0x2dc>)
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	1e13      	subs	r3, r2, #0
 80014c6:	d000      	beq.n	80014ca <HAL_GPIO_Init+0x2be>
 80014c8:	e6a8      	b.n	800121c <HAL_GPIO_Init+0x10>
  } 
}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	46c0      	nop			@ (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b006      	add	sp, #24
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	48000400 	.word	0x48000400
 80014e0:	48000800 	.word	0x48000800
 80014e4:	48000c00 	.word	0x48000c00
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	0008      	movs	r0, r1
 80014f6:	0011      	movs	r1, r2
 80014f8:	1cbb      	adds	r3, r7, #2
 80014fa:	1c02      	adds	r2, r0, #0
 80014fc:	801a      	strh	r2, [r3, #0]
 80014fe:	1c7b      	adds	r3, r7, #1
 8001500:	1c0a      	adds	r2, r1, #0
 8001502:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001504:	1c7b      	adds	r3, r7, #1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800150c:	1cbb      	adds	r3, r7, #2
 800150e:	881a      	ldrh	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001516:	1cbb      	adds	r3, r7, #2
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e301      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2201      	movs	r2, #1
 8001540:	4013      	ands	r3, r2
 8001542:	d100      	bne.n	8001546 <HAL_RCC_OscConfig+0x1e>
 8001544:	e08d      	b.n	8001662 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001546:	4bc3      	ldr	r3, [pc, #780]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	220c      	movs	r2, #12
 800154c:	4013      	ands	r3, r2
 800154e:	2b04      	cmp	r3, #4
 8001550:	d00e      	beq.n	8001570 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001552:	4bc0      	ldr	r3, [pc, #768]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	220c      	movs	r2, #12
 8001558:	4013      	ands	r3, r2
 800155a:	2b08      	cmp	r3, #8
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x64>
 800155e:	4bbd      	ldr	r3, [pc, #756]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	2380      	movs	r3, #128	@ 0x80
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	401a      	ands	r2, r3
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	429a      	cmp	r2, r3
 800156e:	d10d      	bne.n	800158c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	4bb8      	ldr	r3, [pc, #736]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	@ 0x80
 8001576:	029b      	lsls	r3, r3, #10
 8001578:	4013      	ands	r3, r2
 800157a:	d100      	bne.n	800157e <HAL_RCC_OscConfig+0x56>
 800157c:	e070      	b.n	8001660 <HAL_RCC_OscConfig+0x138>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d000      	beq.n	8001588 <HAL_RCC_OscConfig+0x60>
 8001586:	e06b      	b.n	8001660 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e2d8      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_OscConfig+0x7c>
 8001594:	4baf      	ldr	r3, [pc, #700]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4bae      	ldr	r3, [pc, #696]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	0249      	lsls	r1, r1, #9
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e02f      	b.n	8001604 <HAL_RCC_OscConfig+0xdc>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x9e>
 80015ac:	4ba9      	ldr	r3, [pc, #676]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4ba8      	ldr	r3, [pc, #672]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015b2:	49a9      	ldr	r1, [pc, #676]	@ (8001858 <HAL_RCC_OscConfig+0x330>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	4ba6      	ldr	r3, [pc, #664]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4ba5      	ldr	r3, [pc, #660]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015be:	49a7      	ldr	r1, [pc, #668]	@ (800185c <HAL_RCC_OscConfig+0x334>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e01e      	b.n	8001604 <HAL_RCC_OscConfig+0xdc>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d10e      	bne.n	80015ec <HAL_RCC_OscConfig+0xc4>
 80015ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4ba0      	ldr	r3, [pc, #640]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015d4:	2180      	movs	r1, #128	@ 0x80
 80015d6:	02c9      	lsls	r1, r1, #11
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b9c      	ldr	r3, [pc, #624]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	0249      	lsls	r1, r1, #9
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xdc>
 80015ec:	4b99      	ldr	r3, [pc, #612]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b98      	ldr	r3, [pc, #608]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	4999      	ldr	r1, [pc, #612]	@ (8001858 <HAL_RCC_OscConfig+0x330>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	4b96      	ldr	r3, [pc, #600]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b95      	ldr	r3, [pc, #596]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	4997      	ldr	r1, [pc, #604]	@ (800185c <HAL_RCC_OscConfig+0x334>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d014      	beq.n	8001636 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb00 	bl	8000c10 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff fafb 	bl	8000c10 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	@ 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e28a      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001628:	4b8a      	ldr	r3, [pc, #552]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0xee>
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff faeb 	bl	8000c10 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001640:	f7ff fae6 	bl	8000c10 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b64      	cmp	r3, #100	@ 0x64
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e275      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001652:	4b80      	ldr	r3, [pc, #512]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x118>
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d100      	bne.n	800166e <HAL_RCC_OscConfig+0x146>
 800166c:	e069      	b.n	8001742 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166e:	4b79      	ldr	r3, [pc, #484]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	220c      	movs	r2, #12
 8001674:	4013      	ands	r3, r2
 8001676:	d00b      	beq.n	8001690 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001678:	4b76      	ldr	r3, [pc, #472]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	220c      	movs	r2, #12
 800167e:	4013      	ands	r3, r2
 8001680:	2b08      	cmp	r3, #8
 8001682:	d11c      	bne.n	80016be <HAL_RCC_OscConfig+0x196>
 8001684:	4b73      	ldr	r3, [pc, #460]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	025b      	lsls	r3, r3, #9
 800168c:	4013      	ands	r3, r2
 800168e:	d116      	bne.n	80016be <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001690:	4b70      	ldr	r3, [pc, #448]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e24b      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	22f8      	movs	r2, #248	@ 0xf8
 80016ac:	4393      	bics	r3, r2
 80016ae:	0019      	movs	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	00da      	lsls	r2, r3, #3
 80016b6:	4b67      	ldr	r3, [pc, #412]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016bc:	e041      	b.n	8001742 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d024      	beq.n	8001710 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c6:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b62      	ldr	r3, [pc, #392]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	2101      	movs	r1, #1
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fa9d 	bl	8000c10 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fa98 	bl	8000c10 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e227      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	4b59      	ldr	r3, [pc, #356]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2202      	movs	r2, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d0f1      	beq.n	80016dc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b56      	ldr	r3, [pc, #344]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	22f8      	movs	r2, #248	@ 0xf8
 80016fe:	4393      	bics	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00da      	lsls	r2, r3, #3
 8001708:	4b52      	ldr	r3, [pc, #328]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e018      	b.n	8001742 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001710:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b4f      	ldr	r3, [pc, #316]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001716:	2101      	movs	r1, #1
 8001718:	438a      	bics	r2, r1
 800171a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fa78 	bl	8000c10 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fa73 	bl	8000c10 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e202      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001738:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d1f1      	bne.n	8001726 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2208      	movs	r2, #8
 8001748:	4013      	ands	r3, r2
 800174a:	d036      	beq.n	80017ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d019      	beq.n	8001788 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001754:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001758:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800175a:	2101      	movs	r1, #1
 800175c:	430a      	orrs	r2, r1
 800175e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff fa56 	bl	8000c10 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fa51 	bl	8000c10 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1e0      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800177c:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d0f1      	beq.n	800176a <HAL_RCC_OscConfig+0x242>
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001788:	4b32      	ldr	r3, [pc, #200]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800178a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800178c:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800178e:	2101      	movs	r1, #1
 8001790:	438a      	bics	r2, r1
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fa3c 	bl	8000c10 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fa37 	bl	8000c10 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1c6      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d100      	bne.n	80017c6 <HAL_RCC_OscConfig+0x29e>
 80017c4:	e0b4      	b.n	8001930 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c6:	201f      	movs	r0, #31
 80017c8:	183b      	adds	r3, r7, r0
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ce:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	2380      	movs	r3, #128	@ 0x80
 80017d4:	055b      	lsls	r3, r3, #21
 80017d6:	4013      	ands	r3, r2
 80017d8:	d110      	bne.n	80017fc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	2180      	movs	r1, #128	@ 0x80
 80017e2:	0549      	lsls	r1, r1, #21
 80017e4:	430a      	orrs	r2, r1
 80017e6:	61da      	str	r2, [r3, #28]
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	055b      	lsls	r3, r3, #21
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017f6:	183b      	adds	r3, r7, r0
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_RCC_OscConfig+0x338>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4013      	ands	r3, r2
 8001806:	d11a      	bne.n	800183e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_RCC_OscConfig+0x338>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <HAL_RCC_OscConfig+0x338>)
 800180e:	2180      	movs	r1, #128	@ 0x80
 8001810:	0049      	lsls	r1, r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff f9fb 	bl	8000c10 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7ff f9f6 	bl	8000c10 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	@ 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e185      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_RCC_OscConfig+0x338>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4013      	ands	r3, r2
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d10e      	bne.n	8001864 <HAL_RCC_OscConfig+0x33c>
 8001846:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 8001848:	6a1a      	ldr	r2, [r3, #32]
 800184a:	4b02      	ldr	r3, [pc, #8]	@ (8001854 <HAL_RCC_OscConfig+0x32c>)
 800184c:	2101      	movs	r1, #1
 800184e:	430a      	orrs	r2, r1
 8001850:	621a      	str	r2, [r3, #32]
 8001852:	e035      	b.n	80018c0 <HAL_RCC_OscConfig+0x398>
 8001854:	40021000 	.word	0x40021000
 8001858:	fffeffff 	.word	0xfffeffff
 800185c:	fffbffff 	.word	0xfffbffff
 8001860:	40007000 	.word	0x40007000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_OscConfig+0x35e>
 800186c:	4bb6      	ldr	r3, [pc, #728]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4bb5      	ldr	r3, [pc, #724]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001872:	2101      	movs	r1, #1
 8001874:	438a      	bics	r2, r1
 8001876:	621a      	str	r2, [r3, #32]
 8001878:	4bb3      	ldr	r3, [pc, #716]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 800187a:	6a1a      	ldr	r2, [r3, #32]
 800187c:	4bb2      	ldr	r3, [pc, #712]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 800187e:	2104      	movs	r1, #4
 8001880:	438a      	bics	r2, r1
 8001882:	621a      	str	r2, [r3, #32]
 8001884:	e01c      	b.n	80018c0 <HAL_RCC_OscConfig+0x398>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x380>
 800188e:	4bae      	ldr	r3, [pc, #696]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	4bad      	ldr	r3, [pc, #692]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001894:	2104      	movs	r1, #4
 8001896:	430a      	orrs	r2, r1
 8001898:	621a      	str	r2, [r3, #32]
 800189a:	4bab      	ldr	r3, [pc, #684]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 800189c:	6a1a      	ldr	r2, [r3, #32]
 800189e:	4baa      	ldr	r3, [pc, #680]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	621a      	str	r2, [r3, #32]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x398>
 80018a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80018aa:	6a1a      	ldr	r2, [r3, #32]
 80018ac:	4ba6      	ldr	r3, [pc, #664]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	438a      	bics	r2, r1
 80018b2:	621a      	str	r2, [r3, #32]
 80018b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80018b6:	6a1a      	ldr	r2, [r3, #32]
 80018b8:	4ba3      	ldr	r3, [pc, #652]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80018ba:	2104      	movs	r1, #4
 80018bc:	438a      	bics	r2, r1
 80018be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d014      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff f9a2 	bl	8000c10 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f99d 	bl	8000c10 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a9b      	ldr	r2, [pc, #620]	@ (8001b4c <HAL_RCC_OscConfig+0x624>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e12b      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	4b98      	ldr	r3, [pc, #608]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	2202      	movs	r2, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3aa>
 80018f0:	e013      	b.n	800191a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f98d 	bl	8000c10 <HAL_GetTick>
 80018f6:	0003      	movs	r3, r0
 80018f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	e009      	b.n	8001910 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff f988 	bl	8000c10 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	4a91      	ldr	r2, [pc, #580]	@ (8001b4c <HAL_RCC_OscConfig+0x624>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e116      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001910:	4b8d      	ldr	r3, [pc, #564]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	2202      	movs	r2, #2
 8001916:	4013      	ands	r3, r2
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191a:	231f      	movs	r3, #31
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b88      	ldr	r3, [pc, #544]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001926:	69da      	ldr	r2, [r3, #28]
 8001928:	4b87      	ldr	r3, [pc, #540]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 800192a:	4989      	ldr	r1, [pc, #548]	@ (8001b50 <HAL_RCC_OscConfig+0x628>)
 800192c:	400a      	ands	r2, r1
 800192e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2210      	movs	r2, #16
 8001936:	4013      	ands	r3, r2
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d12a      	bne.n	8001998 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001942:	4b81      	ldr	r3, [pc, #516]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001946:	4b80      	ldr	r3, [pc, #512]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001948:	2104      	movs	r1, #4
 800194a:	430a      	orrs	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800194e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001952:	4b7d      	ldr	r3, [pc, #500]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001954:	2101      	movs	r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7ff f959 	bl	8000c10 <HAL_GetTick>
 800195e:	0003      	movs	r3, r0
 8001960:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001964:	f7ff f954 	bl	8000c10 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0e3      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001976:	4b74      	ldr	r3, [pc, #464]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800197a:	2202      	movs	r2, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d0f1      	beq.n	8001964 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001980:	4b71      	ldr	r3, [pc, #452]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001984:	22f8      	movs	r2, #248	@ 0xf8
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	00da      	lsls	r2, r3, #3
 8001990:	4b6d      	ldr	r3, [pc, #436]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001992:	430a      	orrs	r2, r1
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
 8001996:	e034      	b.n	8001a02 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	3305      	adds	r3, #5
 800199e:	d111      	bne.n	80019c4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019a0:	4b69      	ldr	r3, [pc, #420]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019a6:	2104      	movs	r1, #4
 80019a8:	438a      	bics	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019ac:	4b66      	ldr	r3, [pc, #408]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b0:	22f8      	movs	r2, #248	@ 0xf8
 80019b2:	4393      	bics	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	00da      	lsls	r2, r3, #3
 80019bc:	4b62      	ldr	r3, [pc, #392]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019be:	430a      	orrs	r2, r1
 80019c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c2:	e01e      	b.n	8001a02 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019c4:	4b60      	ldr	r3, [pc, #384]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019ca:	2104      	movs	r1, #4
 80019cc:	430a      	orrs	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff f918 	bl	8000c10 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019e6:	f7ff f913 	bl	8000c10 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0a2      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019f8:	4b53      	ldr	r3, [pc, #332]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	2202      	movs	r2, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d1f1      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d100      	bne.n	8001a0c <HAL_RCC_OscConfig+0x4e4>
 8001a0a:	e097      	b.n	8001b3c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	220c      	movs	r2, #12
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d100      	bne.n	8001a1a <HAL_RCC_OscConfig+0x4f2>
 8001a18:	e06b      	b.n	8001af2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d14c      	bne.n	8001abc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b49      	ldr	r3, [pc, #292]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b48      	ldr	r3, [pc, #288]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a28:	494a      	ldr	r1, [pc, #296]	@ (8001b54 <HAL_RCC_OscConfig+0x62c>)
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f8ef 	bl	8000c10 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f8ea 	bl	8000c10 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e079      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	@ 0x80
 8001a50:	049b      	lsls	r3, r3, #18
 8001a52:	4013      	ands	r3, r2
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a56:	4b3c      	ldr	r3, [pc, #240]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	4393      	bics	r3, r2
 8001a5e:	0019      	movs	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a64:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a66:	430a      	orrs	r2, r1
 8001a68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a6a:	4b37      	ldr	r3, [pc, #220]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b58 <HAL_RCC_OscConfig+0x630>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	4b32      	ldr	r3, [pc, #200]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a84:	4b30      	ldr	r3, [pc, #192]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	0449      	lsls	r1, r1, #17
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff f8bd 	bl	8000c10 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f8b8 	bl	8000c10 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e047      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aae:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	049b      	lsls	r3, r3, #18
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x574>
 8001aba:	e03f      	b.n	8001b3c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001ac2:	4924      	ldr	r1, [pc, #144]	@ (8001b54 <HAL_RCC_OscConfig+0x62c>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f8a2 	bl	8000c10 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff f89d 	bl	8000c10 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e02c      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	049b      	lsls	r3, r3, #18
 8001aec:	4013      	ands	r3, r2
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x5aa>
 8001af0:	e024      	b.n	8001b3c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e01f      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001afe:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_RCC_OscConfig+0x620>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	025b      	lsls	r3, r3, #9
 8001b10:	401a      	ands	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d10e      	bne.n	8001b38 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	23f0      	movs	r3, #240	@ 0xf0
 8001b2c:	039b      	lsls	r3, r3, #14
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b008      	add	sp, #32
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	00001388 	.word	0x00001388
 8001b50:	efffffff 	.word	0xefffffff
 8001b54:	feffffff 	.word	0xfeffffff
 8001b58:	ffc2ffff 	.word	0xffc2ffff

08001b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b3      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d911      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b58      	ldr	r3, [pc, #352]	@ (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4393      	bics	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	4b55      	ldr	r3, [pc, #340]	@ (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b90:	4b53      	ldr	r3, [pc, #332]	@ (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e09a      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d015      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d006      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001bbc:	21e0      	movs	r1, #224	@ 0xe0
 8001bbe:	00c9      	lsls	r1, r1, #3
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b47      	ldr	r3, [pc, #284]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	22f0      	movs	r2, #240	@ 0xf0
 8001bca:	4393      	bics	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	4b44      	ldr	r3, [pc, #272]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	d040      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d114      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e06e      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c02:	4b38      	ldr	r3, [pc, #224]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	049b      	lsls	r3, r3, #18
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e062      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e05b      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c20:	4b30      	ldr	r3, [pc, #192]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2203      	movs	r2, #3
 8001c26:	4393      	bics	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c34:	f7fe ffec 	bl	8000c10 <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3c:	e009      	b.n	8001c52 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3e:	f7fe ffe7 	bl	8000c10 <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	4a27      	ldr	r2, [pc, #156]	@ (8001ce8 <HAL_RCC_ClockConfig+0x18c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e042      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	220c      	movs	r2, #12
 8001c58:	401a      	ands	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1ec      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d211      	bcs.n	8001c96 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4393      	bics	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c84:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <HAL_RCC_ClockConfig+0x184>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e020      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca0:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4a11      	ldr	r2, [pc, #68]	@ (8001cec <HAL_RCC_ClockConfig+0x190>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cb4:	f000 f820 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001cb8:	0001      	movs	r1, r0
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_RCC_ClockConfig+0x188>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <HAL_RCC_ClockConfig+0x194>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	000a      	movs	r2, r1
 8001cca:	40da      	lsrs	r2, r3
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_RCC_ClockConfig+0x198>)
 8001cce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	f7fe ff57 	bl	8000b84 <HAL_InitTick>
  
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40022000 	.word	0x40022000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	00001388 	.word	0x00001388
 8001cec:	fffff8ff 	.word	0xfffff8ff
 8001cf0:	08003cbc 	.word	0x08003cbc
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x30>
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x36>
 8001d26:	e02c      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d2a:	613b      	str	r3, [r7, #16]
      break;
 8001d2c:	e02c      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	220f      	movs	r2, #15
 8001d34:	4013      	ands	r3, r2
 8001d36:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d40:	220f      	movs	r2, #15
 8001d42:	4013      	ands	r3, r2
 8001d44:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	025b      	lsls	r3, r3, #9
 8001d50:	4013      	ands	r3, r2
 8001d52:	d009      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	4810      	ldr	r0, [pc, #64]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d58:	f7fe f9e8 	bl	800012c <__udivsi3>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	001a      	movs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4353      	muls	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e009      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	000a      	movs	r2, r1
 8001d6c:	0152      	lsls	r2, r2, #5
 8001d6e:	1a52      	subs	r2, r2, r1
 8001d70:	0193      	lsls	r3, r2, #6
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	185b      	adds	r3, r3, r1
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
      break;
 8001d80:	e002      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d84:	613b      	str	r3, [r7, #16]
      break;
 8001d86:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d88:	693b      	ldr	r3, [r7, #16]
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b006      	add	sp, #24
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)
 8001d94:	40021000 	.word	0x40021000
 8001d98:	007a1200 	.word	0x007a1200
 8001d9c:	08003cd4 	.word	0x08003cd4
 8001da0:	08003ce4 	.word	0x08003ce4

08001da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b02      	ldr	r3, [pc, #8]	@ (8001db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001dbc:	f7ff fff2 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4013      	ands	r3, r2
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	40d9      	lsrs	r1, r3
 8001dd2:	000b      	movs	r3, r1
}    
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			@ (mov r8, r8)
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08003ccc 	.word	0x08003ccc

08001de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	025b      	lsls	r3, r3, #9
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d100      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e00:	e08e      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2017      	movs	r0, #23
 8001e04:	183b      	adds	r3, r7, r0
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	055b      	lsls	r3, r3, #21
 8001e12:	4013      	ands	r3, r2
 8001e14:	d110      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b5c      	ldr	r3, [pc, #368]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	0549      	lsls	r1, r1, #21
 8001e20:	430a      	orrs	r2, r1
 8001e22:	61da      	str	r2, [r3, #28]
 8001e24:	4b58      	ldr	r3, [pc, #352]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e32:	183b      	adds	r3, r7, r0
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	4b54      	ldr	r3, [pc, #336]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d11a      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e44:	4b51      	ldr	r3, [pc, #324]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b50      	ldr	r3, [pc, #320]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e4a:	2180      	movs	r1, #128	@ 0x80
 8001e4c:	0049      	lsls	r1, r1, #1
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e52:	f7fe fedd 	bl	8000c10 <HAL_GetTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	e008      	b.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5c:	f7fe fed8 	bl	8000c10 <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e087      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6e:	4b47      	ldr	r3, [pc, #284]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e7a:	4b43      	ldr	r3, [pc, #268]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	23c0      	movs	r3, #192	@ 0xc0
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d034      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	23c0      	movs	r3, #192	@ 0xc0
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d02c      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ea6:	4b38      	ldr	r3, [pc, #224]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ea8:	6a1a      	ldr	r2, [r3, #32]
 8001eaa:	4b37      	ldr	r3, [pc, #220]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	0249      	lsls	r1, r1, #9
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb4:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	4b33      	ldr	r3, [pc, #204]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eba:	4936      	ldr	r1, [pc, #216]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ec0:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe fe9f 	bl	8000c10 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed6:	e009      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f7fe fe9a 	bl	8000c10 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e048      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a25      	ldr	r2, [pc, #148]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f14:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f1a:	4920      	ldr	r1, [pc, #128]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2a:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	2203      	movs	r2, #3
 8001f30:	4393      	bics	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2220      	movs	r2, #32
 8001f44:	4013      	ands	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f48:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	4393      	bics	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4013      	ands	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f68:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	4393      	bics	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	fffffcff 	.word	0xfffffcff
 8001f94:	fffeffff 	.word	0xfffeffff
 8001f98:	00001388 	.word	0x00001388
 8001f9c:	efffffff 	.word	0xefffffff

08001fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e044      	b.n	800203c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2278      	movs	r2, #120	@ 0x78
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7fe fcb1 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2224      	movs	r2, #36	@ 0x24
 8001fce:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2101      	movs	r1, #1
 8001fdc:	438a      	bics	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 fd66 	bl	8002abc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 fc22 	bl	800283c <UART_SetConfig>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e01c      	b.n	800203c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	490d      	ldr	r1, [pc, #52]	@ (8002044 <HAL_UART_Init+0xa4>)
 800200e:	400a      	ands	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	212a      	movs	r1, #42	@ 0x2a
 800201e:	438a      	bics	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f000 fdf5 	bl	8002c24 <UART_CheckIdleState>
 800203a:	0003      	movs	r3, r0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}
 8002044:	ffffb7ff 	.word	0xffffb7ff

08002048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800205c:	2b20      	cmp	r3, #32
 800205e:	d000      	beq.n	8002062 <HAL_UART_Transmit+0x1a>
 8002060:	e08c      	b.n	800217c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_UART_Transmit+0x28>
 8002068:	1dbb      	adds	r3, r7, #6
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e084      	b.n	800217e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	015b      	lsls	r3, r3, #5
 800207c:	429a      	cmp	r2, r3
 800207e:	d109      	bne.n	8002094 <HAL_UART_Transmit+0x4c>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	d001      	beq.n	8002094 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e074      	b.n	800217e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2284      	movs	r2, #132	@ 0x84
 8002098:	2100      	movs	r1, #0
 800209a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2221      	movs	r2, #33	@ 0x21
 80020a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020a2:	f7fe fdb5 	bl	8000c10 <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1dba      	adds	r2, r7, #6
 80020ae:	2150      	movs	r1, #80	@ 0x50
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1dba      	adds	r2, r7, #6
 80020b8:	2152      	movs	r1, #82	@ 0x52
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	015b      	lsls	r3, r3, #5
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d108      	bne.n	80020dc <HAL_UART_Transmit+0x94>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d104      	bne.n	80020dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	e003      	b.n	80020e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020e4:	e02f      	b.n	8002146 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	0013      	movs	r3, r2
 80020f0:	2200      	movs	r2, #0
 80020f2:	2180      	movs	r1, #128	@ 0x80
 80020f4:	f000 fe3e 	bl	8002d74 <UART_WaitOnFlagUntilTimeout>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d004      	beq.n	8002106 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e03b      	b.n	800217e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	05d2      	lsls	r2, r2, #23
 8002116:	0dd2      	lsrs	r2, r2, #23
 8002118:	b292      	uxth	r2, r2
 800211a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	3302      	adds	r3, #2
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e007      	b.n	8002134 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2252      	movs	r2, #82	@ 0x52
 8002138:	5a9b      	ldrh	r3, [r3, r2]
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b299      	uxth	r1, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2252      	movs	r2, #82	@ 0x52
 8002144:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2252      	movs	r2, #82	@ 0x52
 800214a:	5a9b      	ldrh	r3, [r3, r2]
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1c9      	bne.n	80020e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	0013      	movs	r3, r2
 800215c:	2200      	movs	r2, #0
 800215e:	2140      	movs	r1, #64	@ 0x40
 8002160:	f000 fe08 	bl	8002d74 <UART_WaitOnFlagUntilTimeout>
 8002164:	1e03      	subs	r3, r0, #0
 8002166:	d004      	beq.n	8002172 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e005      	b.n	800217e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2220      	movs	r2, #32
 8002176:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800217c:	2302      	movs	r3, #2
  }
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b008      	add	sp, #32
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	1dbb      	adds	r3, r7, #6
 8002192:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	589b      	ldr	r3, [r3, r2]
 800219a:	2b20      	cmp	r3, #32
 800219c:	d145      	bne.n	800222a <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_UART_Receive_DMA+0x26>
 80021a4:	1dbb      	adds	r3, r7, #6
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e03d      	b.n	800222c <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d109      	bne.n	80021d0 <HAL_UART_Receive_DMA+0x4a>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d001      	beq.n	80021d0 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e02d      	b.n	800222c <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	4013      	ands	r3, r2
 80021e2:	d019      	beq.n	8002218 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e4:	f3ef 8310 	mrs	r3, PRIMASK
 80021e8:	613b      	str	r3, [r7, #16]
  return(result);
 80021ea:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f383 8810 	msr	PRIMASK, r3
}
 80021f8:	46c0      	nop			@ (mov r8, r8)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2180      	movs	r1, #128	@ 0x80
 8002206:	04c9      	lsls	r1, r1, #19
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f383 8810 	msr	PRIMASK, r3
}
 8002216:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002218:	1dbb      	adds	r3, r7, #6
 800221a:	881a      	ldrh	r2, [r3, #0]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fe17 	bl	8002e54 <UART_Start_Receive_DMA>
 8002226:	0003      	movs	r3, r0
 8002228:	e000      	b.n	800222c <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
  }
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b008      	add	sp, #32
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b0ab      	sub	sp, #172	@ 0xac
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	22a4      	movs	r2, #164	@ 0xa4
 8002244:	18b9      	adds	r1, r7, r2
 8002246:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	20a0      	movs	r0, #160	@ 0xa0
 8002250:	1839      	adds	r1, r7, r0
 8002252:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	219c      	movs	r1, #156	@ 0x9c
 800225c:	1879      	adds	r1, r7, r1
 800225e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002260:	0011      	movs	r1, r2
 8002262:	18bb      	adds	r3, r7, r2
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a99      	ldr	r2, [pc, #612]	@ (80024cc <HAL_UART_IRQHandler+0x298>)
 8002268:	4013      	ands	r3, r2
 800226a:	2298      	movs	r2, #152	@ 0x98
 800226c:	18bc      	adds	r4, r7, r2
 800226e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002270:	18bb      	adds	r3, r7, r2
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d114      	bne.n	80022a2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002278:	187b      	adds	r3, r7, r1
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2220      	movs	r2, #32
 800227e:	4013      	ands	r3, r2
 8002280:	d00f      	beq.n	80022a2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002282:	183b      	adds	r3, r7, r0
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2220      	movs	r2, #32
 8002288:	4013      	ands	r3, r2
 800228a:	d00a      	beq.n	80022a2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002290:	2b00      	cmp	r3, #0
 8002292:	d100      	bne.n	8002296 <HAL_UART_IRQHandler+0x62>
 8002294:	e29e      	b.n	80027d4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	0010      	movs	r0, r2
 800229e:	4798      	blx	r3
      }
      return;
 80022a0:	e298      	b.n	80027d4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80022a2:	2398      	movs	r3, #152	@ 0x98
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d100      	bne.n	80022ae <HAL_UART_IRQHandler+0x7a>
 80022ac:	e114      	b.n	80024d8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80022ae:	239c      	movs	r3, #156	@ 0x9c
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80022ba:	23a0      	movs	r3, #160	@ 0xa0
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a83      	ldr	r2, [pc, #524]	@ (80024d0 <HAL_UART_IRQHandler+0x29c>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	d100      	bne.n	80022c8 <HAL_UART_IRQHandler+0x94>
 80022c6:	e107      	b.n	80024d8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80022c8:	23a4      	movs	r3, #164	@ 0xa4
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d012      	beq.n	80022fa <HAL_UART_IRQHandler+0xc6>
 80022d4:	23a0      	movs	r3, #160	@ 0xa0
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4013      	ands	r3, r2
 80022e0:	d00b      	beq.n	80022fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2201      	movs	r2, #1
 80022e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2284      	movs	r2, #132	@ 0x84
 80022ee:	589b      	ldr	r3, [r3, r2]
 80022f0:	2201      	movs	r2, #1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2184      	movs	r1, #132	@ 0x84
 80022f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022fa:	23a4      	movs	r3, #164	@ 0xa4
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2202      	movs	r2, #2
 8002302:	4013      	ands	r3, r2
 8002304:	d011      	beq.n	800232a <HAL_UART_IRQHandler+0xf6>
 8002306:	239c      	movs	r3, #156	@ 0x9c
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	d00b      	beq.n	800232a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2202      	movs	r2, #2
 8002318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2284      	movs	r2, #132	@ 0x84
 800231e:	589b      	ldr	r3, [r3, r2]
 8002320:	2204      	movs	r2, #4
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2184      	movs	r1, #132	@ 0x84
 8002328:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800232a:	23a4      	movs	r3, #164	@ 0xa4
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2204      	movs	r2, #4
 8002332:	4013      	ands	r3, r2
 8002334:	d011      	beq.n	800235a <HAL_UART_IRQHandler+0x126>
 8002336:	239c      	movs	r3, #156	@ 0x9c
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2201      	movs	r2, #1
 800233e:	4013      	ands	r3, r2
 8002340:	d00b      	beq.n	800235a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2284      	movs	r2, #132	@ 0x84
 800234e:	589b      	ldr	r3, [r3, r2]
 8002350:	2202      	movs	r2, #2
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2184      	movs	r1, #132	@ 0x84
 8002358:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800235a:	23a4      	movs	r3, #164	@ 0xa4
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2208      	movs	r2, #8
 8002362:	4013      	ands	r3, r2
 8002364:	d017      	beq.n	8002396 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002366:	23a0      	movs	r3, #160	@ 0xa0
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2220      	movs	r2, #32
 800236e:	4013      	ands	r3, r2
 8002370:	d105      	bne.n	800237e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002372:	239c      	movs	r3, #156	@ 0x9c
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2201      	movs	r2, #1
 800237a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800237c:	d00b      	beq.n	8002396 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2208      	movs	r2, #8
 8002384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2284      	movs	r2, #132	@ 0x84
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	2208      	movs	r2, #8
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2184      	movs	r1, #132	@ 0x84
 8002394:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002396:	23a4      	movs	r3, #164	@ 0xa4
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4013      	ands	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_UART_IRQHandler+0x198>
 80023a4:	23a0      	movs	r3, #160	@ 0xa0
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	04db      	lsls	r3, r3, #19
 80023ae:	4013      	ands	r3, r2
 80023b0:	d00c      	beq.n	80023cc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2280      	movs	r2, #128	@ 0x80
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2284      	movs	r2, #132	@ 0x84
 80023c0:	589b      	ldr	r3, [r3, r2]
 80023c2:	2220      	movs	r2, #32
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2184      	movs	r1, #132	@ 0x84
 80023ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2284      	movs	r2, #132	@ 0x84
 80023d0:	589b      	ldr	r3, [r3, r2]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d100      	bne.n	80023d8 <HAL_UART_IRQHandler+0x1a4>
 80023d6:	e1ff      	b.n	80027d8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80023d8:	23a4      	movs	r3, #164	@ 0xa4
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2220      	movs	r2, #32
 80023e0:	4013      	ands	r3, r2
 80023e2:	d00e      	beq.n	8002402 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023e4:	23a0      	movs	r3, #160	@ 0xa0
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2220      	movs	r2, #32
 80023ec:	4013      	ands	r3, r2
 80023ee:	d008      	beq.n	8002402 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	0010      	movs	r0, r2
 8002400:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2284      	movs	r2, #132	@ 0x84
 8002406:	589b      	ldr	r3, [r3, r2]
 8002408:	2194      	movs	r1, #148	@ 0x94
 800240a:	187a      	adds	r2, r7, r1
 800240c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2240      	movs	r2, #64	@ 0x40
 8002416:	4013      	ands	r3, r2
 8002418:	2b40      	cmp	r3, #64	@ 0x40
 800241a:	d004      	beq.n	8002426 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800241c:	187b      	adds	r3, r7, r1
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2228      	movs	r2, #40	@ 0x28
 8002422:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002424:	d047      	beq.n	80024b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f000 fdd7 	bl	8002fdc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2240      	movs	r2, #64	@ 0x40
 8002436:	4013      	ands	r3, r2
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d137      	bne.n	80024ac <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243c:	f3ef 8310 	mrs	r3, PRIMASK
 8002440:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002444:	2090      	movs	r0, #144	@ 0x90
 8002446:	183a      	adds	r2, r7, r0
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	2301      	movs	r3, #1
 800244c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002450:	f383 8810 	msr	PRIMASK, r3
}
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2140      	movs	r1, #64	@ 0x40
 8002462:	438a      	bics	r2, r1
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	183b      	adds	r3, r7, r0
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800246e:	f383 8810 	msr	PRIMASK, r3
}
 8002472:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002480:	4a14      	ldr	r2, [pc, #80]	@ (80024d4 <HAL_UART_IRQHandler+0x2a0>)
 8002482:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002488:	0018      	movs	r0, r3
 800248a:	f7fe fd8f 	bl	8000fac <HAL_DMA_Abort_IT>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d01a      	beq.n	80024c8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249c:	0018      	movs	r0, r3
 800249e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a0:	e012      	b.n	80024c8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f9b5 	bl	8002814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024aa:	e00d      	b.n	80024c8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f9b0 	bl	8002814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b4:	e008      	b.n	80024c8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 f9ab 	bl	8002814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2284      	movs	r2, #132	@ 0x84
 80024c2:	2100      	movs	r1, #0
 80024c4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80024c6:	e187      	b.n	80027d8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	46c0      	nop			@ (mov r8, r8)
    return;
 80024ca:	e185      	b.n	80027d8 <HAL_UART_IRQHandler+0x5a4>
 80024cc:	0000080f 	.word	0x0000080f
 80024d0:	04000120 	.word	0x04000120
 80024d4:	08003297 	.word	0x08003297

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d000      	beq.n	80024e2 <HAL_UART_IRQHandler+0x2ae>
 80024e0:	e139      	b.n	8002756 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80024e2:	23a4      	movs	r3, #164	@ 0xa4
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	4013      	ands	r3, r2
 80024ec:	d100      	bne.n	80024f0 <HAL_UART_IRQHandler+0x2bc>
 80024ee:	e132      	b.n	8002756 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80024f0:	23a0      	movs	r3, #160	@ 0xa0
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2210      	movs	r2, #16
 80024f8:	4013      	ands	r3, r2
 80024fa:	d100      	bne.n	80024fe <HAL_UART_IRQHandler+0x2ca>
 80024fc:	e12b      	b.n	8002756 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2210      	movs	r2, #16
 8002504:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2240      	movs	r2, #64	@ 0x40
 800250e:	4013      	ands	r3, r2
 8002510:	2b40      	cmp	r3, #64	@ 0x40
 8002512:	d000      	beq.n	8002516 <HAL_UART_IRQHandler+0x2e2>
 8002514:	e09f      	b.n	8002656 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	217e      	movs	r1, #126	@ 0x7e
 8002520:	187b      	adds	r3, r7, r1
 8002522:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002524:	187b      	adds	r3, r7, r1
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d100      	bne.n	800252e <HAL_UART_IRQHandler+0x2fa>
 800252c:	e156      	b.n	80027dc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2258      	movs	r2, #88	@ 0x58
 8002532:	5a9b      	ldrh	r3, [r3, r2]
 8002534:	187a      	adds	r2, r7, r1
 8002536:	8812      	ldrh	r2, [r2, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d300      	bcc.n	800253e <HAL_UART_IRQHandler+0x30a>
 800253c:	e14e      	b.n	80027dc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	187a      	adds	r2, r7, r1
 8002542:	215a      	movs	r1, #90	@ 0x5a
 8002544:	8812      	ldrh	r2, [r2, #0]
 8002546:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b20      	cmp	r3, #32
 8002550:	d06f      	beq.n	8002632 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002552:	f3ef 8310 	mrs	r3, PRIMASK
 8002556:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800255a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800255c:	2301      	movs	r3, #1
 800255e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002562:	f383 8810 	msr	PRIMASK, r3
}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	499e      	ldr	r1, [pc, #632]	@ (80027ec <HAL_UART_IRQHandler+0x5b8>)
 8002574:	400a      	ands	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257e:	f383 8810 	msr	PRIMASK, r3
}
 8002582:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002584:	f3ef 8310 	mrs	r3, PRIMASK
 8002588:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800258a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258c:	677b      	str	r3, [r7, #116]	@ 0x74
 800258e:	2301      	movs	r3, #1
 8002590:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002594:	f383 8810 	msr	PRIMASK, r3
}
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	438a      	bics	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ac:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b0:	f383 8810 	msr	PRIMASK, r3
}
 80025b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80025bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025be:	673b      	str	r3, [r7, #112]	@ 0x70
 80025c0:	2301      	movs	r3, #1
 80025c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025c6:	f383 8810 	msr	PRIMASK, r3
}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2140      	movs	r1, #64	@ 0x40
 80025d8:	438a      	bics	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025de:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025e2:	f383 8810 	msr	PRIMASK, r3
}
 80025e6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2280      	movs	r2, #128	@ 0x80
 80025ec:	2120      	movs	r1, #32
 80025ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025f6:	f3ef 8310 	mrs	r3, PRIMASK
 80025fa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80025fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002600:	2301      	movs	r3, #1
 8002602:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002606:	f383 8810 	msr	PRIMASK, r3
}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2110      	movs	r1, #16
 8002618:	438a      	bics	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800261e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002622:	f383 8810 	msr	PRIMASK, r3
}
 8002626:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262c:	0018      	movs	r0, r3
 800262e:	f7fe fc85 	bl	8000f3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2258      	movs	r2, #88	@ 0x58
 800263c:	5a9a      	ldrh	r2, [r3, r2]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	215a      	movs	r1, #90	@ 0x5a
 8002642:	5a5b      	ldrh	r3, [r3, r1]
 8002644:	b29b      	uxth	r3, r3
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	0011      	movs	r1, r2
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f8e8 	bl	8002824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002654:	e0c2      	b.n	80027dc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2258      	movs	r2, #88	@ 0x58
 800265a:	5a99      	ldrh	r1, [r3, r2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	225a      	movs	r2, #90	@ 0x5a
 8002660:	5a9b      	ldrh	r3, [r3, r2]
 8002662:	b29a      	uxth	r2, r3
 8002664:	208e      	movs	r0, #142	@ 0x8e
 8002666:	183b      	adds	r3, r7, r0
 8002668:	1a8a      	subs	r2, r1, r2
 800266a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	225a      	movs	r2, #90	@ 0x5a
 8002670:	5a9b      	ldrh	r3, [r3, r2]
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d100      	bne.n	800267a <HAL_UART_IRQHandler+0x446>
 8002678:	e0b2      	b.n	80027e0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800267a:	183b      	adds	r3, r7, r0
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d100      	bne.n	8002684 <HAL_UART_IRQHandler+0x450>
 8002682:	e0ad      	b.n	80027e0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002684:	f3ef 8310 	mrs	r3, PRIMASK
 8002688:	60fb      	str	r3, [r7, #12]
  return(result);
 800268a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800268c:	2488      	movs	r4, #136	@ 0x88
 800268e:	193a      	adds	r2, r7, r4
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f383 8810 	msr	PRIMASK, r3
}
 800269c:	46c0      	nop			@ (mov r8, r8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4951      	ldr	r1, [pc, #324]	@ (80027f0 <HAL_UART_IRQHandler+0x5bc>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f383 8810 	msr	PRIMASK, r3
}
 80026ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026bc:	f3ef 8310 	mrs	r3, PRIMASK
 80026c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80026c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c4:	2484      	movs	r4, #132	@ 0x84
 80026c6:	193a      	adds	r2, r7, r4
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	2301      	movs	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f383 8810 	msr	PRIMASK, r3
}
 80026d4:	46c0      	nop			@ (mov r8, r8)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2101      	movs	r1, #1
 80026e2:	438a      	bics	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f383 8810 	msr	PRIMASK, r3
}
 80026f2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	2120      	movs	r1, #32
 80026fa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002708:	f3ef 8310 	mrs	r3, PRIMASK
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002710:	2480      	movs	r4, #128	@ 0x80
 8002712:	193a      	adds	r2, r7, r4
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	2301      	movs	r3, #1
 8002718:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271c:	f383 8810 	msr	PRIMASK, r3
}
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2110      	movs	r1, #16
 800272e:	438a      	bics	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	193b      	adds	r3, r7, r4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002746:	183b      	adds	r3, r7, r0
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f000 f868 	bl	8002824 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002754:	e044      	b.n	80027e0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002756:	23a4      	movs	r3, #164	@ 0xa4
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	035b      	lsls	r3, r3, #13
 8002760:	4013      	ands	r3, r2
 8002762:	d010      	beq.n	8002786 <HAL_UART_IRQHandler+0x552>
 8002764:	239c      	movs	r3, #156	@ 0x9c
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	03db      	lsls	r3, r3, #15
 800276e:	4013      	ands	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	0352      	lsls	r2, r2, #13
 800277a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fdcb 	bl	800331a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002784:	e02f      	b.n	80027e6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002786:	23a4      	movs	r3, #164	@ 0xa4
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2280      	movs	r2, #128	@ 0x80
 800278e:	4013      	ands	r3, r2
 8002790:	d00f      	beq.n	80027b2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002792:	23a0      	movs	r3, #160	@ 0xa0
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2280      	movs	r2, #128	@ 0x80
 800279a:	4013      	ands	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01e      	beq.n	80027e4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	0010      	movs	r0, r2
 80027ae:	4798      	blx	r3
    }
    return;
 80027b0:	e018      	b.n	80027e4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80027b2:	23a4      	movs	r3, #164	@ 0xa4
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2240      	movs	r2, #64	@ 0x40
 80027ba:	4013      	ands	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_UART_IRQHandler+0x5b2>
 80027be:	23a0      	movs	r3, #160	@ 0xa0
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2240      	movs	r2, #64	@ 0x40
 80027c6:	4013      	ands	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 fd79 	bl	80032c4 <UART_EndTransmit_IT>
    return;
 80027d2:	e008      	b.n	80027e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80027d4:	46c0      	nop			@ (mov r8, r8)
 80027d6:	e006      	b.n	80027e6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80027d8:	46c0      	nop			@ (mov r8, r8)
 80027da:	e004      	b.n	80027e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	e002      	b.n	80027e6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	e000      	b.n	80027e6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80027e4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b02b      	add	sp, #172	@ 0xac
 80027ea:	bd90      	pop	{r4, r7, pc}
 80027ec:	fffffeff 	.word	0xfffffeff
 80027f0:	fffffedf 	.word	0xfffffedf

080027f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800280c:	46c0      	nop			@ (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800281c:	46c0      	nop			@ (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	000a      	movs	r2, r1
 800282e:	1cbb      	adds	r3, r7, #2
 8002830:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b002      	add	sp, #8
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002844:	231e      	movs	r3, #30
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a8d      	ldr	r2, [pc, #564]	@ (8002aa0 <UART_SetConfig+0x264>)
 800286c:	4013      	ands	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a88      	ldr	r2, [pc, #544]	@ (8002aa4 <UART_SetConfig+0x268>)
 8002882:	4013      	ands	r3, r2
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a7f      	ldr	r2, [pc, #508]	@ (8002aa8 <UART_SetConfig+0x26c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a7b      	ldr	r2, [pc, #492]	@ (8002aac <UART_SetConfig+0x270>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d127      	bne.n	8002912 <UART_SetConfig+0xd6>
 80028c2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab0 <UART_SetConfig+0x274>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	2203      	movs	r2, #3
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d00d      	beq.n	80028ea <UART_SetConfig+0xae>
 80028ce:	d81b      	bhi.n	8002908 <UART_SetConfig+0xcc>
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d014      	beq.n	80028fe <UART_SetConfig+0xc2>
 80028d4:	d818      	bhi.n	8002908 <UART_SetConfig+0xcc>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <UART_SetConfig+0xa4>
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d00a      	beq.n	80028f4 <UART_SetConfig+0xb8>
 80028de:	e013      	b.n	8002908 <UART_SetConfig+0xcc>
 80028e0:	231f      	movs	r3, #31
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e021      	b.n	800292e <UART_SetConfig+0xf2>
 80028ea:	231f      	movs	r3, #31
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e01c      	b.n	800292e <UART_SetConfig+0xf2>
 80028f4:	231f      	movs	r3, #31
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2204      	movs	r2, #4
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e017      	b.n	800292e <UART_SetConfig+0xf2>
 80028fe:	231f      	movs	r3, #31
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2208      	movs	r2, #8
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e012      	b.n	800292e <UART_SetConfig+0xf2>
 8002908:	231f      	movs	r3, #31
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2210      	movs	r2, #16
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	e00d      	b.n	800292e <UART_SetConfig+0xf2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a67      	ldr	r2, [pc, #412]	@ (8002ab4 <UART_SetConfig+0x278>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d104      	bne.n	8002926 <UART_SetConfig+0xea>
 800291c:	231f      	movs	r3, #31
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e003      	b.n	800292e <UART_SetConfig+0xf2>
 8002926:	231f      	movs	r3, #31
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2210      	movs	r2, #16
 800292c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	2380      	movs	r3, #128	@ 0x80
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	429a      	cmp	r2, r3
 8002938:	d15c      	bne.n	80029f4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800293a:	231f      	movs	r3, #31
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d015      	beq.n	8002970 <UART_SetConfig+0x134>
 8002944:	dc18      	bgt.n	8002978 <UART_SetConfig+0x13c>
 8002946:	2b04      	cmp	r3, #4
 8002948:	d00d      	beq.n	8002966 <UART_SetConfig+0x12a>
 800294a:	dc15      	bgt.n	8002978 <UART_SetConfig+0x13c>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <UART_SetConfig+0x11a>
 8002950:	2b02      	cmp	r3, #2
 8002952:	d005      	beq.n	8002960 <UART_SetConfig+0x124>
 8002954:	e010      	b.n	8002978 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002956:	f7ff fa2f 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 800295a:	0003      	movs	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
        break;
 800295e:	e012      	b.n	8002986 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002960:	4b55      	ldr	r3, [pc, #340]	@ (8002ab8 <UART_SetConfig+0x27c>)
 8002962:	61bb      	str	r3, [r7, #24]
        break;
 8002964:	e00f      	b.n	8002986 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002966:	f7ff f9c7 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 800296a:	0003      	movs	r3, r0
 800296c:	61bb      	str	r3, [r7, #24]
        break;
 800296e:	e00a      	b.n	8002986 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	61bb      	str	r3, [r7, #24]
        break;
 8002976:	e006      	b.n	8002986 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800297c:	231e      	movs	r3, #30
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
        break;
 8002984:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d100      	bne.n	800298e <UART_SetConfig+0x152>
 800298c:	e07a      	b.n	8002a84 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	005a      	lsls	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	18d2      	adds	r2, r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0019      	movs	r1, r3
 80029a0:	0010      	movs	r0, r2
 80029a2:	f7fd fbc3 	bl	800012c <__udivsi3>
 80029a6:	0003      	movs	r3, r0
 80029a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d91c      	bls.n	80029ea <UART_SetConfig+0x1ae>
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d217      	bcs.n	80029ea <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	200e      	movs	r0, #14
 80029c0:	183b      	adds	r3, r7, r0
 80029c2:	210f      	movs	r1, #15
 80029c4:	438a      	bics	r2, r1
 80029c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2207      	movs	r2, #7
 80029d0:	4013      	ands	r3, r2
 80029d2:	b299      	uxth	r1, r3
 80029d4:	183b      	adds	r3, r7, r0
 80029d6:	183a      	adds	r2, r7, r0
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	183a      	adds	r2, r7, r0
 80029e4:	8812      	ldrh	r2, [r2, #0]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	e04c      	b.n	8002a84 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80029ea:	231e      	movs	r3, #30
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e047      	b.n	8002a84 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029f4:	231f      	movs	r3, #31
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d015      	beq.n	8002a2a <UART_SetConfig+0x1ee>
 80029fe:	dc18      	bgt.n	8002a32 <UART_SetConfig+0x1f6>
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00d      	beq.n	8002a20 <UART_SetConfig+0x1e4>
 8002a04:	dc15      	bgt.n	8002a32 <UART_SetConfig+0x1f6>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <UART_SetConfig+0x1d4>
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d005      	beq.n	8002a1a <UART_SetConfig+0x1de>
 8002a0e:	e010      	b.n	8002a32 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a10:	f7ff f9d2 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8002a14:	0003      	movs	r3, r0
 8002a16:	61bb      	str	r3, [r7, #24]
        break;
 8002a18:	e012      	b.n	8002a40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a1a:	4b27      	ldr	r3, [pc, #156]	@ (8002ab8 <UART_SetConfig+0x27c>)
 8002a1c:	61bb      	str	r3, [r7, #24]
        break;
 8002a1e:	e00f      	b.n	8002a40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a20:	f7ff f96a 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8002a24:	0003      	movs	r3, r0
 8002a26:	61bb      	str	r3, [r7, #24]
        break;
 8002a28:	e00a      	b.n	8002a40 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	61bb      	str	r3, [r7, #24]
        break;
 8002a30:	e006      	b.n	8002a40 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a36:	231e      	movs	r3, #30
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
        break;
 8002a3e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01e      	beq.n	8002a84 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	085a      	lsrs	r2, r3, #1
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	18d2      	adds	r2, r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0019      	movs	r1, r3
 8002a56:	0010      	movs	r0, r2
 8002a58:	f7fd fb68 	bl	800012c <__udivsi3>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	d90a      	bls.n	8002a7c <UART_SetConfig+0x240>
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	025b      	lsls	r3, r3, #9
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d205      	bcs.n	8002a7c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	e003      	b.n	8002a84 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002a7c:	231e      	movs	r3, #30
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a90:	231e      	movs	r3, #30
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	781b      	ldrb	r3, [r3, #0]
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b008      	add	sp, #32
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	ffff69f3 	.word	0xffff69f3
 8002aa4:	ffffcfff 	.word	0xffffcfff
 8002aa8:	fffff4ff 	.word	0xfffff4ff
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40004400 	.word	0x40004400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2208      	movs	r2, #8
 8002aca:	4013      	ands	r3, r2
 8002acc:	d00b      	beq.n	8002ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <UART_AdvFeatureConfig+0x144>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	2201      	movs	r2, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d00b      	beq.n	8002b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4a43      	ldr	r2, [pc, #268]	@ (8002c04 <UART_AdvFeatureConfig+0x148>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a3b      	ldr	r2, [pc, #236]	@ (8002c08 <UART_AdvFeatureConfig+0x14c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	d00b      	beq.n	8002b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a34      	ldr	r2, [pc, #208]	@ (8002c0c <UART_AdvFeatureConfig+0x150>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	2210      	movs	r2, #16
 8002b52:	4013      	ands	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c10 <UART_AdvFeatureConfig+0x154>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	2220      	movs	r2, #32
 8002b74:	4013      	ands	r3, r2
 8002b76:	d00b      	beq.n	8002b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	4a25      	ldr	r2, [pc, #148]	@ (8002c14 <UART_AdvFeatureConfig+0x158>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	2240      	movs	r2, #64	@ 0x40
 8002b96:	4013      	ands	r3, r2
 8002b98:	d01d      	beq.n	8002bd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c18 <UART_AdvFeatureConfig+0x15c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	035b      	lsls	r3, r3, #13
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d10b      	bne.n	8002bd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	@ (8002c1c <UART_AdvFeatureConfig+0x160>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d00b      	beq.n	8002bf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <UART_AdvFeatureConfig+0x164>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  }
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	ffff7fff 	.word	0xffff7fff
 8002c04:	fffdffff 	.word	0xfffdffff
 8002c08:	fffeffff 	.word	0xfffeffff
 8002c0c:	fffbffff 	.word	0xfffbffff
 8002c10:	ffffefff 	.word	0xffffefff
 8002c14:	ffffdfff 	.word	0xffffdfff
 8002c18:	ffefffff 	.word	0xffefffff
 8002c1c:	ff9fffff 	.word	0xff9fffff
 8002c20:	fff7ffff 	.word	0xfff7ffff

08002c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b092      	sub	sp, #72	@ 0x48
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2284      	movs	r2, #132	@ 0x84
 8002c30:	2100      	movs	r1, #0
 8002c32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c34:	f7fd ffec 	bl	8000c10 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2208      	movs	r2, #8
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d12c      	bne.n	8002ca4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4c:	2280      	movs	r2, #128	@ 0x80
 8002c4e:	0391      	lsls	r1, r2, #14
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4a46      	ldr	r2, [pc, #280]	@ (8002d6c <UART_CheckIdleState+0x148>)
 8002c54:	9200      	str	r2, [sp, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f000 f88c 	bl	8002d74 <UART_WaitOnFlagUntilTimeout>
 8002c5c:	1e03      	subs	r3, r0, #0
 8002c5e:	d021      	beq.n	8002ca4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c60:	f3ef 8310 	mrs	r3, PRIMASK
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	f383 8810 	msr	PRIMASK, r3
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2180      	movs	r1, #128	@ 0x80
 8002c82:	438a      	bics	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8c:	f383 8810 	msr	PRIMASK, r3
}
 8002c90:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2278      	movs	r2, #120	@ 0x78
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e05f      	b.n	8002d64 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d146      	bne.n	8002d40 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb4:	2280      	movs	r2, #128	@ 0x80
 8002cb6:	03d1      	lsls	r1, r2, #15
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4a2c      	ldr	r2, [pc, #176]	@ (8002d6c <UART_CheckIdleState+0x148>)
 8002cbc:	9200      	str	r2, [sp, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f000 f858 	bl	8002d74 <UART_WaitOnFlagUntilTimeout>
 8002cc4:	1e03      	subs	r3, r0, #0
 8002cc6:	d03b      	beq.n	8002d40 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ccc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cce:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f383 8810 	msr	PRIMASK, r3
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4921      	ldr	r1, [pc, #132]	@ (8002d70 <UART_CheckIdleState+0x14c>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f383 8810 	msr	PRIMASK, r3
}
 8002cf8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d00:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d04:	2301      	movs	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f383 8810 	msr	PRIMASK, r3
}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2280      	movs	r2, #128	@ 0x80
 8002d30:	2120      	movs	r1, #32
 8002d32:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2278      	movs	r2, #120	@ 0x78
 8002d38:	2100      	movs	r1, #0
 8002d3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e011      	b.n	8002d64 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2280      	movs	r2, #128	@ 0x80
 8002d4a:	2120      	movs	r1, #32
 8002d4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2278      	movs	r2, #120	@ 0x78
 8002d5e:	2100      	movs	r1, #0
 8002d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b010      	add	sp, #64	@ 0x40
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	01ffffff 	.word	0x01ffffff
 8002d70:	fffffedf 	.word	0xfffffedf

08002d74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d84:	e051      	b.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	d04e      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7fd ff40 	bl	8000c10 <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e051      	b.n	8002e4a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2204      	movs	r2, #4
 8002dae:	4013      	ands	r3, r2
 8002db0:	d03b      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b80      	cmp	r3, #128	@ 0x80
 8002db6:	d038      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b40      	cmp	r3, #64	@ 0x40
 8002dbc:	d035      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d111      	bne.n	8002df0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 f900 	bl	8002fdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2284      	movs	r2, #132	@ 0x84
 8002de0:	2108      	movs	r1, #8
 8002de2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2278      	movs	r2, #120	@ 0x78
 8002de8:	2100      	movs	r1, #0
 8002dea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e02c      	b.n	8002e4a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d112      	bne.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2280      	movs	r2, #128	@ 0x80
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 f8e3 	bl	8002fdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2284      	movs	r2, #132	@ 0x84
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2278      	movs	r2, #120	@ 0x78
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e00f      	b.n	8002e4a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	425a      	negs	r2, r3
 8002e3a:	4153      	adcs	r3, r2
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	001a      	movs	r2, r3
 8002e40:	1dfb      	adds	r3, r7, #7
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d09e      	beq.n	8002d86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b004      	add	sp, #16
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b090      	sub	sp, #64	@ 0x40
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	1dbb      	adds	r3, r7, #6
 8002e60:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1dba      	adds	r2, r7, #6
 8002e6c:	2158      	movs	r1, #88	@ 0x58
 8002e6e:	8812      	ldrh	r2, [r2, #0]
 8002e70:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2284      	movs	r2, #132	@ 0x84
 8002e76:	2100      	movs	r1, #0
 8002e78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2280      	movs	r2, #128	@ 0x80
 8002e7e:	2122      	movs	r1, #34	@ 0x22
 8002e80:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8e:	4a3e      	ldr	r2, [pc, #248]	@ (8002f88 <UART_Start_Receive_DMA+0x134>)
 8002e90:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	4a3d      	ldr	r2, [pc, #244]	@ (8002f8c <UART_Start_Receive_DMA+0x138>)
 8002e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f90 <UART_Start_Receive_DMA+0x13c>)
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3324      	adds	r3, #36	@ 0x24
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	001a      	movs	r2, r3
 8002ebc:	1dbb      	adds	r3, r7, #6
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	f7fd ffd6 	bl	8000e70 <HAL_DMA_Start_IT>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d009      	beq.n	8002edc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2284      	movs	r2, #132	@ 0x84
 8002ecc:	2110      	movs	r1, #16
 8002ece:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2280      	movs	r2, #128	@ 0x80
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e050      	b.n	8002f7e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d019      	beq.n	8002f18 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eee:	2301      	movs	r3, #1
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	46c0      	nop			@ (mov r8, r8)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2180      	movs	r1, #128	@ 0x80
 8002f06:	0049      	lsls	r1, r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f12:	f383 8810 	msr	PRIMASK, r3
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f18:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f1e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f22:	2301      	movs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f50:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f54:	2301      	movs	r3, #1
 8002f56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2140      	movs	r1, #64	@ 0x40
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b010      	add	sp, #64	@ 0x40
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	080030a5 	.word	0x080030a5
 8002f8c:	080031d1 	.word	0x080031d1
 8002f90:	08003213 	.word	0x08003213

08002f94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f383 8810 	msr	PRIMASK, r3
}
 8002fb0:	46c0      	nop			@ (mov r8, r8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	21c0      	movs	r1, #192	@ 0xc0
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b006      	add	sp, #24
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	@ 0x38
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe8:	617b      	str	r3, [r7, #20]
  return(result);
 8002fea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4926      	ldr	r1, [pc, #152]	@ (80030a0 <UART_EndRxTransfer+0xc4>)
 8003006:	400a      	ands	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003016:	f3ef 8310 	mrs	r3, PRIMASK
 800301a:	623b      	str	r3, [r7, #32]
  return(result);
 800301c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003020:	2301      	movs	r3, #1
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	f383 8810 	msr	PRIMASK, r3
}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2101      	movs	r1, #1
 8003038:	438a      	bics	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	f383 8810 	msr	PRIMASK, r3
}
 8003046:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304c:	2b01      	cmp	r3, #1
 800304e:	d118      	bne.n	8003082 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003050:	f3ef 8310 	mrs	r3, PRIMASK
 8003054:	60bb      	str	r3, [r7, #8]
  return(result);
 8003056:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800305a:	2301      	movs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2110      	movs	r1, #16
 8003072:	438a      	bics	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2280      	movs	r2, #128	@ 0x80
 8003086:	2120      	movs	r1, #32
 8003088:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b00e      	add	sp, #56	@ 0x38
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	fffffedf 	.word	0xfffffedf

080030a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b094      	sub	sp, #80	@ 0x50
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d06f      	beq.n	800319a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80030ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030bc:	225a      	movs	r2, #90	@ 0x5a
 80030be:	2100      	movs	r1, #0
 80030c0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c2:	f3ef 8310 	mrs	r3, PRIMASK
 80030c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80030c8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030cc:	2301      	movs	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f383 8810 	msr	PRIMASK, r3
}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	493a      	ldr	r1, [pc, #232]	@ (80031cc <UART_DMAReceiveCplt+0x128>)
 80030e4:	400a      	ands	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f4:	f3ef 8310 	mrs	r3, PRIMASK
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80030fe:	2301      	movs	r3, #1
 8003100:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			@ (mov r8, r8)
 800310a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2101      	movs	r1, #1
 8003116:	438a      	bics	r2, r1
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800311c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003120:	f383 8810 	msr	PRIMASK, r3
}
 8003124:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003126:	f3ef 8310 	mrs	r3, PRIMASK
 800312a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003130:	2301      	movs	r3, #1
 8003132:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003136:	f383 8810 	msr	PRIMASK, r3
}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2140      	movs	r1, #64	@ 0x40
 8003148:	438a      	bics	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800314e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003152:	f383 8810 	msr	PRIMASK, r3
}
 8003156:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800315a:	2280      	movs	r2, #128	@ 0x80
 800315c:	2120      	movs	r1, #32
 800315e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003164:	2b01      	cmp	r3, #1
 8003166:	d118      	bne.n	800319a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003168:	f3ef 8310 	mrs	r3, PRIMASK
 800316c:	60fb      	str	r3, [r7, #12]
  return(result);
 800316e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003172:	2301      	movs	r3, #1
 8003174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f383 8810 	msr	PRIMASK, r3
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2110      	movs	r1, #16
 800318a:	438a      	bics	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800319a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800319c:	2200      	movs	r2, #0
 800319e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d108      	bne.n	80031ba <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031aa:	2258      	movs	r2, #88	@ 0x58
 80031ac:	5a9a      	ldrh	r2, [r3, r2]
 80031ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031b0:	0011      	movs	r1, r2
 80031b2:	0018      	movs	r0, r3
 80031b4:	f7ff fb36 	bl	8002824 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031b8:	e003      	b.n	80031c2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80031ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fd f999 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b014      	add	sp, #80	@ 0x50
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	fffffeff 	.word	0xfffffeff

080031d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10a      	bne.n	8003202 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2258      	movs	r2, #88	@ 0x58
 80031f0:	5a9b      	ldrh	r3, [r3, r2]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	0011      	movs	r1, r2
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7ff fb12 	bl	8002824 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003200:	e003      	b.n	800320a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff fafd 	bl	8002804 <HAL_UART_RxHalfCpltCallback>
}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b004      	add	sp, #16
 8003210:	bd80      	pop	{r7, pc}

08003212 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003224:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2280      	movs	r2, #128	@ 0x80
 800322a:	589b      	ldr	r3, [r3, r2]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	4013      	ands	r3, r2
 8003238:	2b80      	cmp	r3, #128	@ 0x80
 800323a:	d10a      	bne.n	8003252 <UART_DMAError+0x40>
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b21      	cmp	r3, #33	@ 0x21
 8003240:	d107      	bne.n	8003252 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2252      	movs	r2, #82	@ 0x52
 8003246:	2100      	movs	r1, #0
 8003248:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff fea1 	bl	8002f94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2240      	movs	r2, #64	@ 0x40
 800325a:	4013      	ands	r3, r2
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	d10a      	bne.n	8003276 <UART_DMAError+0x64>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b22      	cmp	r3, #34	@ 0x22
 8003264:	d107      	bne.n	8003276 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	225a      	movs	r2, #90	@ 0x5a
 800326a:	2100      	movs	r1, #0
 800326c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff feb3 	bl	8002fdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2284      	movs	r2, #132	@ 0x84
 800327a:	589b      	ldr	r3, [r3, r2]
 800327c:	2210      	movs	r2, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2184      	movs	r1, #132	@ 0x84
 8003284:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	0018      	movs	r0, r3
 800328a:	f7ff fac3 	bl	8002814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800328e:	46c0      	nop			@ (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b006      	add	sp, #24
 8003294:	bd80      	pop	{r7, pc}

08003296 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	225a      	movs	r2, #90	@ 0x5a
 80032a8:	2100      	movs	r1, #0
 80032aa:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2252      	movs	r2, #82	@ 0x52
 80032b0:	2100      	movs	r1, #0
 80032b2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff faac 	bl	8002814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b004      	add	sp, #16
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032cc:	f3ef 8310 	mrs	r3, PRIMASK
 80032d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80032d2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	2301      	movs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f383 8810 	msr	PRIMASK, r3
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2140      	movs	r1, #64	@ 0x40
 80032ee:	438a      	bics	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f383 8810 	msr	PRIMASK, r3
}
 80032fc:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f7ff fa71 	bl	80027f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b006      	add	sp, #24
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <sniprintf>:
 800332c:	b40c      	push	{r2, r3}
 800332e:	b530      	push	{r4, r5, lr}
 8003330:	4b18      	ldr	r3, [pc, #96]	@ (8003394 <sniprintf+0x68>)
 8003332:	000c      	movs	r4, r1
 8003334:	681d      	ldr	r5, [r3, #0]
 8003336:	b09d      	sub	sp, #116	@ 0x74
 8003338:	2900      	cmp	r1, #0
 800333a:	da08      	bge.n	800334e <sniprintf+0x22>
 800333c:	238b      	movs	r3, #139	@ 0x8b
 800333e:	2001      	movs	r0, #1
 8003340:	602b      	str	r3, [r5, #0]
 8003342:	4240      	negs	r0, r0
 8003344:	b01d      	add	sp, #116	@ 0x74
 8003346:	bc30      	pop	{r4, r5}
 8003348:	bc08      	pop	{r3}
 800334a:	b002      	add	sp, #8
 800334c:	4718      	bx	r3
 800334e:	2382      	movs	r3, #130	@ 0x82
 8003350:	466a      	mov	r2, sp
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	8293      	strh	r3, [r2, #20]
 8003356:	2300      	movs	r3, #0
 8003358:	9002      	str	r0, [sp, #8]
 800335a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800335c:	9006      	str	r0, [sp, #24]
 800335e:	4299      	cmp	r1, r3
 8003360:	d000      	beq.n	8003364 <sniprintf+0x38>
 8003362:	1e4b      	subs	r3, r1, #1
 8003364:	9304      	str	r3, [sp, #16]
 8003366:	9307      	str	r3, [sp, #28]
 8003368:	2301      	movs	r3, #1
 800336a:	466a      	mov	r2, sp
 800336c:	425b      	negs	r3, r3
 800336e:	82d3      	strh	r3, [r2, #22]
 8003370:	0028      	movs	r0, r5
 8003372:	ab21      	add	r3, sp, #132	@ 0x84
 8003374:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003376:	a902      	add	r1, sp, #8
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	f000 f9a7 	bl	80036cc <_svfiprintf_r>
 800337e:	1c43      	adds	r3, r0, #1
 8003380:	da01      	bge.n	8003386 <sniprintf+0x5a>
 8003382:	238b      	movs	r3, #139	@ 0x8b
 8003384:	602b      	str	r3, [r5, #0]
 8003386:	2c00      	cmp	r4, #0
 8003388:	d0dc      	beq.n	8003344 <sniprintf+0x18>
 800338a:	2200      	movs	r2, #0
 800338c:	9b02      	ldr	r3, [sp, #8]
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e7d8      	b.n	8003344 <sniprintf+0x18>
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	2000000c 	.word	0x2000000c

08003398 <memset>:
 8003398:	0003      	movs	r3, r0
 800339a:	1882      	adds	r2, r0, r2
 800339c:	4293      	cmp	r3, r2
 800339e:	d100      	bne.n	80033a2 <memset+0xa>
 80033a0:	4770      	bx	lr
 80033a2:	7019      	strb	r1, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	e7f9      	b.n	800339c <memset+0x4>

080033a8 <__errno>:
 80033a8:	4b01      	ldr	r3, [pc, #4]	@ (80033b0 <__errno+0x8>)
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	4770      	bx	lr
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	2000000c 	.word	0x2000000c

080033b4 <__libc_init_array>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	2600      	movs	r6, #0
 80033b8:	4c0c      	ldr	r4, [pc, #48]	@ (80033ec <__libc_init_array+0x38>)
 80033ba:	4d0d      	ldr	r5, [pc, #52]	@ (80033f0 <__libc_init_array+0x3c>)
 80033bc:	1b64      	subs	r4, r4, r5
 80033be:	10a4      	asrs	r4, r4, #2
 80033c0:	42a6      	cmp	r6, r4
 80033c2:	d109      	bne.n	80033d8 <__libc_init_array+0x24>
 80033c4:	2600      	movs	r6, #0
 80033c6:	f000 fc63 	bl	8003c90 <_init>
 80033ca:	4c0a      	ldr	r4, [pc, #40]	@ (80033f4 <__libc_init_array+0x40>)
 80033cc:	4d0a      	ldr	r5, [pc, #40]	@ (80033f8 <__libc_init_array+0x44>)
 80033ce:	1b64      	subs	r4, r4, r5
 80033d0:	10a4      	asrs	r4, r4, #2
 80033d2:	42a6      	cmp	r6, r4
 80033d4:	d105      	bne.n	80033e2 <__libc_init_array+0x2e>
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	00b3      	lsls	r3, r6, #2
 80033da:	58eb      	ldr	r3, [r5, r3]
 80033dc:	4798      	blx	r3
 80033de:	3601      	adds	r6, #1
 80033e0:	e7ee      	b.n	80033c0 <__libc_init_array+0xc>
 80033e2:	00b3      	lsls	r3, r6, #2
 80033e4:	58eb      	ldr	r3, [r5, r3]
 80033e6:	4798      	blx	r3
 80033e8:	3601      	adds	r6, #1
 80033ea:	e7f2      	b.n	80033d2 <__libc_init_array+0x1e>
 80033ec:	08003d28 	.word	0x08003d28
 80033f0:	08003d28 	.word	0x08003d28
 80033f4:	08003d2c 	.word	0x08003d2c
 80033f8:	08003d28 	.word	0x08003d28

080033fc <__retarget_lock_acquire_recursive>:
 80033fc:	4770      	bx	lr

080033fe <__retarget_lock_release_recursive>:
 80033fe:	4770      	bx	lr

08003400 <memcpy>:
 8003400:	2300      	movs	r3, #0
 8003402:	b510      	push	{r4, lr}
 8003404:	429a      	cmp	r2, r3
 8003406:	d100      	bne.n	800340a <memcpy+0xa>
 8003408:	bd10      	pop	{r4, pc}
 800340a:	5ccc      	ldrb	r4, [r1, r3]
 800340c:	54c4      	strb	r4, [r0, r3]
 800340e:	3301      	adds	r3, #1
 8003410:	e7f8      	b.n	8003404 <memcpy+0x4>
	...

08003414 <_free_r>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	0005      	movs	r5, r0
 8003418:	1e0c      	subs	r4, r1, #0
 800341a:	d010      	beq.n	800343e <_free_r+0x2a>
 800341c:	3c04      	subs	r4, #4
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	da00      	bge.n	8003426 <_free_r+0x12>
 8003424:	18e4      	adds	r4, r4, r3
 8003426:	0028      	movs	r0, r5
 8003428:	f000 f8e0 	bl	80035ec <__malloc_lock>
 800342c:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <_free_r+0x90>)
 800342e:	6813      	ldr	r3, [r2, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <_free_r+0x2c>
 8003434:	6063      	str	r3, [r4, #4]
 8003436:	6014      	str	r4, [r2, #0]
 8003438:	0028      	movs	r0, r5
 800343a:	f000 f8df 	bl	80035fc <__malloc_unlock>
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	42a3      	cmp	r3, r4
 8003442:	d908      	bls.n	8003456 <_free_r+0x42>
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	1821      	adds	r1, r4, r0
 8003448:	428b      	cmp	r3, r1
 800344a:	d1f3      	bne.n	8003434 <_free_r+0x20>
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	1809      	adds	r1, r1, r0
 8003452:	6021      	str	r1, [r4, #0]
 8003454:	e7ee      	b.n	8003434 <_free_r+0x20>
 8003456:	001a      	movs	r2, r3
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <_free_r+0x4e>
 800345e:	42a3      	cmp	r3, r4
 8003460:	d9f9      	bls.n	8003456 <_free_r+0x42>
 8003462:	6811      	ldr	r1, [r2, #0]
 8003464:	1850      	adds	r0, r2, r1
 8003466:	42a0      	cmp	r0, r4
 8003468:	d10b      	bne.n	8003482 <_free_r+0x6e>
 800346a:	6820      	ldr	r0, [r4, #0]
 800346c:	1809      	adds	r1, r1, r0
 800346e:	1850      	adds	r0, r2, r1
 8003470:	6011      	str	r1, [r2, #0]
 8003472:	4283      	cmp	r3, r0
 8003474:	d1e0      	bne.n	8003438 <_free_r+0x24>
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	1841      	adds	r1, r0, r1
 800347c:	6011      	str	r1, [r2, #0]
 800347e:	6053      	str	r3, [r2, #4]
 8003480:	e7da      	b.n	8003438 <_free_r+0x24>
 8003482:	42a0      	cmp	r0, r4
 8003484:	d902      	bls.n	800348c <_free_r+0x78>
 8003486:	230c      	movs	r3, #12
 8003488:	602b      	str	r3, [r5, #0]
 800348a:	e7d5      	b.n	8003438 <_free_r+0x24>
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	1821      	adds	r1, r4, r0
 8003490:	428b      	cmp	r3, r1
 8003492:	d103      	bne.n	800349c <_free_r+0x88>
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	1809      	adds	r1, r1, r0
 800349a:	6021      	str	r1, [r4, #0]
 800349c:	6063      	str	r3, [r4, #4]
 800349e:	6054      	str	r4, [r2, #4]
 80034a0:	e7ca      	b.n	8003438 <_free_r+0x24>
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	20000298 	.word	0x20000298

080034a8 <sbrk_aligned>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	4e0f      	ldr	r6, [pc, #60]	@ (80034e8 <sbrk_aligned+0x40>)
 80034ac:	000d      	movs	r5, r1
 80034ae:	6831      	ldr	r1, [r6, #0]
 80034b0:	0004      	movs	r4, r0
 80034b2:	2900      	cmp	r1, #0
 80034b4:	d102      	bne.n	80034bc <sbrk_aligned+0x14>
 80034b6:	f000 fb95 	bl	8003be4 <_sbrk_r>
 80034ba:	6030      	str	r0, [r6, #0]
 80034bc:	0029      	movs	r1, r5
 80034be:	0020      	movs	r0, r4
 80034c0:	f000 fb90 	bl	8003be4 <_sbrk_r>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d103      	bne.n	80034d0 <sbrk_aligned+0x28>
 80034c8:	2501      	movs	r5, #1
 80034ca:	426d      	negs	r5, r5
 80034cc:	0028      	movs	r0, r5
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	2303      	movs	r3, #3
 80034d2:	1cc5      	adds	r5, r0, #3
 80034d4:	439d      	bics	r5, r3
 80034d6:	42a8      	cmp	r0, r5
 80034d8:	d0f8      	beq.n	80034cc <sbrk_aligned+0x24>
 80034da:	1a29      	subs	r1, r5, r0
 80034dc:	0020      	movs	r0, r4
 80034de:	f000 fb81 	bl	8003be4 <_sbrk_r>
 80034e2:	3001      	adds	r0, #1
 80034e4:	d1f2      	bne.n	80034cc <sbrk_aligned+0x24>
 80034e6:	e7ef      	b.n	80034c8 <sbrk_aligned+0x20>
 80034e8:	20000294 	.word	0x20000294

080034ec <_malloc_r>:
 80034ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ee:	2203      	movs	r2, #3
 80034f0:	1ccb      	adds	r3, r1, #3
 80034f2:	4393      	bics	r3, r2
 80034f4:	3308      	adds	r3, #8
 80034f6:	0005      	movs	r5, r0
 80034f8:	001f      	movs	r7, r3
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d234      	bcs.n	8003568 <_malloc_r+0x7c>
 80034fe:	270c      	movs	r7, #12
 8003500:	42b9      	cmp	r1, r7
 8003502:	d833      	bhi.n	800356c <_malloc_r+0x80>
 8003504:	0028      	movs	r0, r5
 8003506:	f000 f871 	bl	80035ec <__malloc_lock>
 800350a:	4e37      	ldr	r6, [pc, #220]	@ (80035e8 <_malloc_r+0xfc>)
 800350c:	6833      	ldr	r3, [r6, #0]
 800350e:	001c      	movs	r4, r3
 8003510:	2c00      	cmp	r4, #0
 8003512:	d12f      	bne.n	8003574 <_malloc_r+0x88>
 8003514:	0039      	movs	r1, r7
 8003516:	0028      	movs	r0, r5
 8003518:	f7ff ffc6 	bl	80034a8 <sbrk_aligned>
 800351c:	0004      	movs	r4, r0
 800351e:	1c43      	adds	r3, r0, #1
 8003520:	d15f      	bne.n	80035e2 <_malloc_r+0xf6>
 8003522:	6834      	ldr	r4, [r6, #0]
 8003524:	9400      	str	r4, [sp, #0]
 8003526:	9b00      	ldr	r3, [sp, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d14a      	bne.n	80035c2 <_malloc_r+0xd6>
 800352c:	2c00      	cmp	r4, #0
 800352e:	d052      	beq.n	80035d6 <_malloc_r+0xea>
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	0028      	movs	r0, r5
 8003534:	18e3      	adds	r3, r4, r3
 8003536:	9900      	ldr	r1, [sp, #0]
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	f000 fb53 	bl	8003be4 <_sbrk_r>
 800353e:	9b01      	ldr	r3, [sp, #4]
 8003540:	4283      	cmp	r3, r0
 8003542:	d148      	bne.n	80035d6 <_malloc_r+0xea>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	0028      	movs	r0, r5
 8003548:	1aff      	subs	r7, r7, r3
 800354a:	0039      	movs	r1, r7
 800354c:	f7ff ffac 	bl	80034a8 <sbrk_aligned>
 8003550:	3001      	adds	r0, #1
 8003552:	d040      	beq.n	80035d6 <_malloc_r+0xea>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	19db      	adds	r3, r3, r7
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	6833      	ldr	r3, [r6, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	2a00      	cmp	r2, #0
 8003560:	d133      	bne.n	80035ca <_malloc_r+0xde>
 8003562:	9b00      	ldr	r3, [sp, #0]
 8003564:	6033      	str	r3, [r6, #0]
 8003566:	e019      	b.n	800359c <_malloc_r+0xb0>
 8003568:	2b00      	cmp	r3, #0
 800356a:	dac9      	bge.n	8003500 <_malloc_r+0x14>
 800356c:	230c      	movs	r3, #12
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	2000      	movs	r0, #0
 8003572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003574:	6821      	ldr	r1, [r4, #0]
 8003576:	1bc9      	subs	r1, r1, r7
 8003578:	d420      	bmi.n	80035bc <_malloc_r+0xd0>
 800357a:	290b      	cmp	r1, #11
 800357c:	d90a      	bls.n	8003594 <_malloc_r+0xa8>
 800357e:	19e2      	adds	r2, r4, r7
 8003580:	6027      	str	r7, [r4, #0]
 8003582:	42a3      	cmp	r3, r4
 8003584:	d104      	bne.n	8003590 <_malloc_r+0xa4>
 8003586:	6032      	str	r2, [r6, #0]
 8003588:	6863      	ldr	r3, [r4, #4]
 800358a:	6011      	str	r1, [r2, #0]
 800358c:	6053      	str	r3, [r2, #4]
 800358e:	e005      	b.n	800359c <_malloc_r+0xb0>
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	e7f9      	b.n	8003588 <_malloc_r+0x9c>
 8003594:	6862      	ldr	r2, [r4, #4]
 8003596:	42a3      	cmp	r3, r4
 8003598:	d10e      	bne.n	80035b8 <_malloc_r+0xcc>
 800359a:	6032      	str	r2, [r6, #0]
 800359c:	0028      	movs	r0, r5
 800359e:	f000 f82d 	bl	80035fc <__malloc_unlock>
 80035a2:	0020      	movs	r0, r4
 80035a4:	2207      	movs	r2, #7
 80035a6:	300b      	adds	r0, #11
 80035a8:	1d23      	adds	r3, r4, #4
 80035aa:	4390      	bics	r0, r2
 80035ac:	1ac2      	subs	r2, r0, r3
 80035ae:	4298      	cmp	r0, r3
 80035b0:	d0df      	beq.n	8003572 <_malloc_r+0x86>
 80035b2:	1a1b      	subs	r3, r3, r0
 80035b4:	50a3      	str	r3, [r4, r2]
 80035b6:	e7dc      	b.n	8003572 <_malloc_r+0x86>
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	e7ef      	b.n	800359c <_malloc_r+0xb0>
 80035bc:	0023      	movs	r3, r4
 80035be:	6864      	ldr	r4, [r4, #4]
 80035c0:	e7a6      	b.n	8003510 <_malloc_r+0x24>
 80035c2:	9c00      	ldr	r4, [sp, #0]
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	e7ad      	b.n	8003526 <_malloc_r+0x3a>
 80035ca:	001a      	movs	r2, r3
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	42a3      	cmp	r3, r4
 80035d0:	d1fb      	bne.n	80035ca <_malloc_r+0xde>
 80035d2:	2300      	movs	r3, #0
 80035d4:	e7da      	b.n	800358c <_malloc_r+0xa0>
 80035d6:	230c      	movs	r3, #12
 80035d8:	0028      	movs	r0, r5
 80035da:	602b      	str	r3, [r5, #0]
 80035dc:	f000 f80e 	bl	80035fc <__malloc_unlock>
 80035e0:	e7c6      	b.n	8003570 <_malloc_r+0x84>
 80035e2:	6007      	str	r7, [r0, #0]
 80035e4:	e7da      	b.n	800359c <_malloc_r+0xb0>
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	20000298 	.word	0x20000298

080035ec <__malloc_lock>:
 80035ec:	b510      	push	{r4, lr}
 80035ee:	4802      	ldr	r0, [pc, #8]	@ (80035f8 <__malloc_lock+0xc>)
 80035f0:	f7ff ff04 	bl	80033fc <__retarget_lock_acquire_recursive>
 80035f4:	bd10      	pop	{r4, pc}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	20000290 	.word	0x20000290

080035fc <__malloc_unlock>:
 80035fc:	b510      	push	{r4, lr}
 80035fe:	4802      	ldr	r0, [pc, #8]	@ (8003608 <__malloc_unlock+0xc>)
 8003600:	f7ff fefd 	bl	80033fe <__retarget_lock_release_recursive>
 8003604:	bd10      	pop	{r4, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	20000290 	.word	0x20000290

0800360c <__ssputs_r>:
 800360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360e:	688e      	ldr	r6, [r1, #8]
 8003610:	b085      	sub	sp, #20
 8003612:	001f      	movs	r7, r3
 8003614:	000c      	movs	r4, r1
 8003616:	680b      	ldr	r3, [r1, #0]
 8003618:	9002      	str	r0, [sp, #8]
 800361a:	9203      	str	r2, [sp, #12]
 800361c:	42be      	cmp	r6, r7
 800361e:	d830      	bhi.n	8003682 <__ssputs_r+0x76>
 8003620:	210c      	movs	r1, #12
 8003622:	5e62      	ldrsh	r2, [r4, r1]
 8003624:	2190      	movs	r1, #144	@ 0x90
 8003626:	00c9      	lsls	r1, r1, #3
 8003628:	420a      	tst	r2, r1
 800362a:	d028      	beq.n	800367e <__ssputs_r+0x72>
 800362c:	2003      	movs	r0, #3
 800362e:	6921      	ldr	r1, [r4, #16]
 8003630:	1a5b      	subs	r3, r3, r1
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	6963      	ldr	r3, [r4, #20]
 8003636:	4343      	muls	r3, r0
 8003638:	9801      	ldr	r0, [sp, #4]
 800363a:	0fdd      	lsrs	r5, r3, #31
 800363c:	18ed      	adds	r5, r5, r3
 800363e:	1c7b      	adds	r3, r7, #1
 8003640:	181b      	adds	r3, r3, r0
 8003642:	106d      	asrs	r5, r5, #1
 8003644:	42ab      	cmp	r3, r5
 8003646:	d900      	bls.n	800364a <__ssputs_r+0x3e>
 8003648:	001d      	movs	r5, r3
 800364a:	0552      	lsls	r2, r2, #21
 800364c:	d528      	bpl.n	80036a0 <__ssputs_r+0x94>
 800364e:	0029      	movs	r1, r5
 8003650:	9802      	ldr	r0, [sp, #8]
 8003652:	f7ff ff4b 	bl	80034ec <_malloc_r>
 8003656:	1e06      	subs	r6, r0, #0
 8003658:	d02c      	beq.n	80036b4 <__ssputs_r+0xa8>
 800365a:	9a01      	ldr	r2, [sp, #4]
 800365c:	6921      	ldr	r1, [r4, #16]
 800365e:	f7ff fecf 	bl	8003400 <memcpy>
 8003662:	89a2      	ldrh	r2, [r4, #12]
 8003664:	4b18      	ldr	r3, [pc, #96]	@ (80036c8 <__ssputs_r+0xbc>)
 8003666:	401a      	ands	r2, r3
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	4313      	orrs	r3, r2
 800366c:	81a3      	strh	r3, [r4, #12]
 800366e:	9b01      	ldr	r3, [sp, #4]
 8003670:	6126      	str	r6, [r4, #16]
 8003672:	18f6      	adds	r6, r6, r3
 8003674:	6026      	str	r6, [r4, #0]
 8003676:	003e      	movs	r6, r7
 8003678:	6165      	str	r5, [r4, #20]
 800367a:	1aed      	subs	r5, r5, r3
 800367c:	60a5      	str	r5, [r4, #8]
 800367e:	42be      	cmp	r6, r7
 8003680:	d900      	bls.n	8003684 <__ssputs_r+0x78>
 8003682:	003e      	movs	r6, r7
 8003684:	0032      	movs	r2, r6
 8003686:	9903      	ldr	r1, [sp, #12]
 8003688:	6820      	ldr	r0, [r4, #0]
 800368a:	f000 fa99 	bl	8003bc0 <memmove>
 800368e:	2000      	movs	r0, #0
 8003690:	68a3      	ldr	r3, [r4, #8]
 8003692:	1b9b      	subs	r3, r3, r6
 8003694:	60a3      	str	r3, [r4, #8]
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	199b      	adds	r3, r3, r6
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	b005      	add	sp, #20
 800369e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a0:	002a      	movs	r2, r5
 80036a2:	9802      	ldr	r0, [sp, #8]
 80036a4:	f000 fabb 	bl	8003c1e <_realloc_r>
 80036a8:	1e06      	subs	r6, r0, #0
 80036aa:	d1e0      	bne.n	800366e <__ssputs_r+0x62>
 80036ac:	6921      	ldr	r1, [r4, #16]
 80036ae:	9802      	ldr	r0, [sp, #8]
 80036b0:	f7ff feb0 	bl	8003414 <_free_r>
 80036b4:	230c      	movs	r3, #12
 80036b6:	2001      	movs	r0, #1
 80036b8:	9a02      	ldr	r2, [sp, #8]
 80036ba:	4240      	negs	r0, r0
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	89a2      	ldrh	r2, [r4, #12]
 80036c0:	3334      	adds	r3, #52	@ 0x34
 80036c2:	4313      	orrs	r3, r2
 80036c4:	81a3      	strh	r3, [r4, #12]
 80036c6:	e7e9      	b.n	800369c <__ssputs_r+0x90>
 80036c8:	fffffb7f 	.word	0xfffffb7f

080036cc <_svfiprintf_r>:
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ce:	b0a1      	sub	sp, #132	@ 0x84
 80036d0:	9003      	str	r0, [sp, #12]
 80036d2:	001d      	movs	r5, r3
 80036d4:	898b      	ldrh	r3, [r1, #12]
 80036d6:	000f      	movs	r7, r1
 80036d8:	0016      	movs	r6, r2
 80036da:	061b      	lsls	r3, r3, #24
 80036dc:	d511      	bpl.n	8003702 <_svfiprintf_r+0x36>
 80036de:	690b      	ldr	r3, [r1, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10e      	bne.n	8003702 <_svfiprintf_r+0x36>
 80036e4:	2140      	movs	r1, #64	@ 0x40
 80036e6:	f7ff ff01 	bl	80034ec <_malloc_r>
 80036ea:	6038      	str	r0, [r7, #0]
 80036ec:	6138      	str	r0, [r7, #16]
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d105      	bne.n	80036fe <_svfiprintf_r+0x32>
 80036f2:	230c      	movs	r3, #12
 80036f4:	9a03      	ldr	r2, [sp, #12]
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	2001      	movs	r0, #1
 80036fa:	4240      	negs	r0, r0
 80036fc:	e0cf      	b.n	800389e <_svfiprintf_r+0x1d2>
 80036fe:	2340      	movs	r3, #64	@ 0x40
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	2300      	movs	r3, #0
 8003704:	ac08      	add	r4, sp, #32
 8003706:	6163      	str	r3, [r4, #20]
 8003708:	3320      	adds	r3, #32
 800370a:	7663      	strb	r3, [r4, #25]
 800370c:	3310      	adds	r3, #16
 800370e:	76a3      	strb	r3, [r4, #26]
 8003710:	9507      	str	r5, [sp, #28]
 8003712:	0035      	movs	r5, r6
 8003714:	782b      	ldrb	r3, [r5, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <_svfiprintf_r+0x52>
 800371a:	2b25      	cmp	r3, #37	@ 0x25
 800371c:	d148      	bne.n	80037b0 <_svfiprintf_r+0xe4>
 800371e:	1bab      	subs	r3, r5, r6
 8003720:	9305      	str	r3, [sp, #20]
 8003722:	42b5      	cmp	r5, r6
 8003724:	d00b      	beq.n	800373e <_svfiprintf_r+0x72>
 8003726:	0032      	movs	r2, r6
 8003728:	0039      	movs	r1, r7
 800372a:	9803      	ldr	r0, [sp, #12]
 800372c:	f7ff ff6e 	bl	800360c <__ssputs_r>
 8003730:	3001      	adds	r0, #1
 8003732:	d100      	bne.n	8003736 <_svfiprintf_r+0x6a>
 8003734:	e0ae      	b.n	8003894 <_svfiprintf_r+0x1c8>
 8003736:	6963      	ldr	r3, [r4, #20]
 8003738:	9a05      	ldr	r2, [sp, #20]
 800373a:	189b      	adds	r3, r3, r2
 800373c:	6163      	str	r3, [r4, #20]
 800373e:	782b      	ldrb	r3, [r5, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d100      	bne.n	8003746 <_svfiprintf_r+0x7a>
 8003744:	e0a6      	b.n	8003894 <_svfiprintf_r+0x1c8>
 8003746:	2201      	movs	r2, #1
 8003748:	2300      	movs	r3, #0
 800374a:	4252      	negs	r2, r2
 800374c:	6062      	str	r2, [r4, #4]
 800374e:	a904      	add	r1, sp, #16
 8003750:	3254      	adds	r2, #84	@ 0x54
 8003752:	1852      	adds	r2, r2, r1
 8003754:	1c6e      	adds	r6, r5, #1
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	60e3      	str	r3, [r4, #12]
 800375a:	60a3      	str	r3, [r4, #8]
 800375c:	7013      	strb	r3, [r2, #0]
 800375e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003760:	4b54      	ldr	r3, [pc, #336]	@ (80038b4 <_svfiprintf_r+0x1e8>)
 8003762:	2205      	movs	r2, #5
 8003764:	0018      	movs	r0, r3
 8003766:	7831      	ldrb	r1, [r6, #0]
 8003768:	9305      	str	r3, [sp, #20]
 800376a:	f000 fa4d 	bl	8003c08 <memchr>
 800376e:	1c75      	adds	r5, r6, #1
 8003770:	2800      	cmp	r0, #0
 8003772:	d11f      	bne.n	80037b4 <_svfiprintf_r+0xe8>
 8003774:	6822      	ldr	r2, [r4, #0]
 8003776:	06d3      	lsls	r3, r2, #27
 8003778:	d504      	bpl.n	8003784 <_svfiprintf_r+0xb8>
 800377a:	2353      	movs	r3, #83	@ 0x53
 800377c:	a904      	add	r1, sp, #16
 800377e:	185b      	adds	r3, r3, r1
 8003780:	2120      	movs	r1, #32
 8003782:	7019      	strb	r1, [r3, #0]
 8003784:	0713      	lsls	r3, r2, #28
 8003786:	d504      	bpl.n	8003792 <_svfiprintf_r+0xc6>
 8003788:	2353      	movs	r3, #83	@ 0x53
 800378a:	a904      	add	r1, sp, #16
 800378c:	185b      	adds	r3, r3, r1
 800378e:	212b      	movs	r1, #43	@ 0x2b
 8003790:	7019      	strb	r1, [r3, #0]
 8003792:	7833      	ldrb	r3, [r6, #0]
 8003794:	2b2a      	cmp	r3, #42	@ 0x2a
 8003796:	d016      	beq.n	80037c6 <_svfiprintf_r+0xfa>
 8003798:	0035      	movs	r5, r6
 800379a:	2100      	movs	r1, #0
 800379c:	200a      	movs	r0, #10
 800379e:	68e3      	ldr	r3, [r4, #12]
 80037a0:	782a      	ldrb	r2, [r5, #0]
 80037a2:	1c6e      	adds	r6, r5, #1
 80037a4:	3a30      	subs	r2, #48	@ 0x30
 80037a6:	2a09      	cmp	r2, #9
 80037a8:	d950      	bls.n	800384c <_svfiprintf_r+0x180>
 80037aa:	2900      	cmp	r1, #0
 80037ac:	d111      	bne.n	80037d2 <_svfiprintf_r+0x106>
 80037ae:	e017      	b.n	80037e0 <_svfiprintf_r+0x114>
 80037b0:	3501      	adds	r5, #1
 80037b2:	e7af      	b.n	8003714 <_svfiprintf_r+0x48>
 80037b4:	9b05      	ldr	r3, [sp, #20]
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	1ac0      	subs	r0, r0, r3
 80037ba:	2301      	movs	r3, #1
 80037bc:	4083      	lsls	r3, r0
 80037be:	4313      	orrs	r3, r2
 80037c0:	002e      	movs	r6, r5
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	e7cc      	b.n	8003760 <_svfiprintf_r+0x94>
 80037c6:	9b07      	ldr	r3, [sp, #28]
 80037c8:	1d19      	adds	r1, r3, #4
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	9107      	str	r1, [sp, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db01      	blt.n	80037d6 <_svfiprintf_r+0x10a>
 80037d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037d4:	e004      	b.n	80037e0 <_svfiprintf_r+0x114>
 80037d6:	425b      	negs	r3, r3
 80037d8:	60e3      	str	r3, [r4, #12]
 80037da:	2302      	movs	r3, #2
 80037dc:	4313      	orrs	r3, r2
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	782b      	ldrb	r3, [r5, #0]
 80037e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80037e4:	d10c      	bne.n	8003800 <_svfiprintf_r+0x134>
 80037e6:	786b      	ldrb	r3, [r5, #1]
 80037e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80037ea:	d134      	bne.n	8003856 <_svfiprintf_r+0x18a>
 80037ec:	9b07      	ldr	r3, [sp, #28]
 80037ee:	3502      	adds	r5, #2
 80037f0:	1d1a      	adds	r2, r3, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	9207      	str	r2, [sp, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da01      	bge.n	80037fe <_svfiprintf_r+0x132>
 80037fa:	2301      	movs	r3, #1
 80037fc:	425b      	negs	r3, r3
 80037fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003800:	4e2d      	ldr	r6, [pc, #180]	@ (80038b8 <_svfiprintf_r+0x1ec>)
 8003802:	2203      	movs	r2, #3
 8003804:	0030      	movs	r0, r6
 8003806:	7829      	ldrb	r1, [r5, #0]
 8003808:	f000 f9fe 	bl	8003c08 <memchr>
 800380c:	2800      	cmp	r0, #0
 800380e:	d006      	beq.n	800381e <_svfiprintf_r+0x152>
 8003810:	2340      	movs	r3, #64	@ 0x40
 8003812:	1b80      	subs	r0, r0, r6
 8003814:	4083      	lsls	r3, r0
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	3501      	adds	r5, #1
 800381a:	4313      	orrs	r3, r2
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	7829      	ldrb	r1, [r5, #0]
 8003820:	2206      	movs	r2, #6
 8003822:	4826      	ldr	r0, [pc, #152]	@ (80038bc <_svfiprintf_r+0x1f0>)
 8003824:	1c6e      	adds	r6, r5, #1
 8003826:	7621      	strb	r1, [r4, #24]
 8003828:	f000 f9ee 	bl	8003c08 <memchr>
 800382c:	2800      	cmp	r0, #0
 800382e:	d038      	beq.n	80038a2 <_svfiprintf_r+0x1d6>
 8003830:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <_svfiprintf_r+0x1f4>)
 8003832:	2b00      	cmp	r3, #0
 8003834:	d122      	bne.n	800387c <_svfiprintf_r+0x1b0>
 8003836:	2207      	movs	r2, #7
 8003838:	9b07      	ldr	r3, [sp, #28]
 800383a:	3307      	adds	r3, #7
 800383c:	4393      	bics	r3, r2
 800383e:	3308      	adds	r3, #8
 8003840:	9307      	str	r3, [sp, #28]
 8003842:	6963      	ldr	r3, [r4, #20]
 8003844:	9a04      	ldr	r2, [sp, #16]
 8003846:	189b      	adds	r3, r3, r2
 8003848:	6163      	str	r3, [r4, #20]
 800384a:	e762      	b.n	8003712 <_svfiprintf_r+0x46>
 800384c:	4343      	muls	r3, r0
 800384e:	0035      	movs	r5, r6
 8003850:	2101      	movs	r1, #1
 8003852:	189b      	adds	r3, r3, r2
 8003854:	e7a4      	b.n	80037a0 <_svfiprintf_r+0xd4>
 8003856:	2300      	movs	r3, #0
 8003858:	200a      	movs	r0, #10
 800385a:	0019      	movs	r1, r3
 800385c:	3501      	adds	r5, #1
 800385e:	6063      	str	r3, [r4, #4]
 8003860:	782a      	ldrb	r2, [r5, #0]
 8003862:	1c6e      	adds	r6, r5, #1
 8003864:	3a30      	subs	r2, #48	@ 0x30
 8003866:	2a09      	cmp	r2, #9
 8003868:	d903      	bls.n	8003872 <_svfiprintf_r+0x1a6>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0c8      	beq.n	8003800 <_svfiprintf_r+0x134>
 800386e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003870:	e7c6      	b.n	8003800 <_svfiprintf_r+0x134>
 8003872:	4341      	muls	r1, r0
 8003874:	0035      	movs	r5, r6
 8003876:	2301      	movs	r3, #1
 8003878:	1889      	adds	r1, r1, r2
 800387a:	e7f1      	b.n	8003860 <_svfiprintf_r+0x194>
 800387c:	aa07      	add	r2, sp, #28
 800387e:	9200      	str	r2, [sp, #0]
 8003880:	0021      	movs	r1, r4
 8003882:	003a      	movs	r2, r7
 8003884:	4b0f      	ldr	r3, [pc, #60]	@ (80038c4 <_svfiprintf_r+0x1f8>)
 8003886:	9803      	ldr	r0, [sp, #12]
 8003888:	e000      	b.n	800388c <_svfiprintf_r+0x1c0>
 800388a:	bf00      	nop
 800388c:	9004      	str	r0, [sp, #16]
 800388e:	9b04      	ldr	r3, [sp, #16]
 8003890:	3301      	adds	r3, #1
 8003892:	d1d6      	bne.n	8003842 <_svfiprintf_r+0x176>
 8003894:	89bb      	ldrh	r3, [r7, #12]
 8003896:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003898:	065b      	lsls	r3, r3, #25
 800389a:	d500      	bpl.n	800389e <_svfiprintf_r+0x1d2>
 800389c:	e72c      	b.n	80036f8 <_svfiprintf_r+0x2c>
 800389e:	b021      	add	sp, #132	@ 0x84
 80038a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a2:	aa07      	add	r2, sp, #28
 80038a4:	9200      	str	r2, [sp, #0]
 80038a6:	0021      	movs	r1, r4
 80038a8:	003a      	movs	r2, r7
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <_svfiprintf_r+0x1f8>)
 80038ac:	9803      	ldr	r0, [sp, #12]
 80038ae:	f000 f87b 	bl	80039a8 <_printf_i>
 80038b2:	e7eb      	b.n	800388c <_svfiprintf_r+0x1c0>
 80038b4:	08003cf4 	.word	0x08003cf4
 80038b8:	08003cfa 	.word	0x08003cfa
 80038bc:	08003cfe 	.word	0x08003cfe
 80038c0:	00000000 	.word	0x00000000
 80038c4:	0800360d 	.word	0x0800360d

080038c8 <_printf_common>:
 80038c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ca:	0016      	movs	r6, r2
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	688a      	ldr	r2, [r1, #8]
 80038d0:	690b      	ldr	r3, [r1, #16]
 80038d2:	000c      	movs	r4, r1
 80038d4:	9000      	str	r0, [sp, #0]
 80038d6:	4293      	cmp	r3, r2
 80038d8:	da00      	bge.n	80038dc <_printf_common+0x14>
 80038da:	0013      	movs	r3, r2
 80038dc:	0022      	movs	r2, r4
 80038de:	6033      	str	r3, [r6, #0]
 80038e0:	3243      	adds	r2, #67	@ 0x43
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	2a00      	cmp	r2, #0
 80038e6:	d001      	beq.n	80038ec <_printf_common+0x24>
 80038e8:	3301      	adds	r3, #1
 80038ea:	6033      	str	r3, [r6, #0]
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	069b      	lsls	r3, r3, #26
 80038f0:	d502      	bpl.n	80038f8 <_printf_common+0x30>
 80038f2:	6833      	ldr	r3, [r6, #0]
 80038f4:	3302      	adds	r3, #2
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	6822      	ldr	r2, [r4, #0]
 80038fa:	2306      	movs	r3, #6
 80038fc:	0015      	movs	r5, r2
 80038fe:	401d      	ands	r5, r3
 8003900:	421a      	tst	r2, r3
 8003902:	d027      	beq.n	8003954 <_printf_common+0x8c>
 8003904:	0023      	movs	r3, r4
 8003906:	3343      	adds	r3, #67	@ 0x43
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	1e5a      	subs	r2, r3, #1
 800390c:	4193      	sbcs	r3, r2
 800390e:	6822      	ldr	r2, [r4, #0]
 8003910:	0692      	lsls	r2, r2, #26
 8003912:	d430      	bmi.n	8003976 <_printf_common+0xae>
 8003914:	0022      	movs	r2, r4
 8003916:	9901      	ldr	r1, [sp, #4]
 8003918:	9800      	ldr	r0, [sp, #0]
 800391a:	9d08      	ldr	r5, [sp, #32]
 800391c:	3243      	adds	r2, #67	@ 0x43
 800391e:	47a8      	blx	r5
 8003920:	3001      	adds	r0, #1
 8003922:	d025      	beq.n	8003970 <_printf_common+0xa8>
 8003924:	2206      	movs	r2, #6
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	2500      	movs	r5, #0
 800392a:	4013      	ands	r3, r2
 800392c:	2b04      	cmp	r3, #4
 800392e:	d105      	bne.n	800393c <_printf_common+0x74>
 8003930:	6833      	ldr	r3, [r6, #0]
 8003932:	68e5      	ldr	r5, [r4, #12]
 8003934:	1aed      	subs	r5, r5, r3
 8003936:	43eb      	mvns	r3, r5
 8003938:	17db      	asrs	r3, r3, #31
 800393a:	401d      	ands	r5, r3
 800393c:	68a3      	ldr	r3, [r4, #8]
 800393e:	6922      	ldr	r2, [r4, #16]
 8003940:	4293      	cmp	r3, r2
 8003942:	dd01      	ble.n	8003948 <_printf_common+0x80>
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	18ed      	adds	r5, r5, r3
 8003948:	2600      	movs	r6, #0
 800394a:	42b5      	cmp	r5, r6
 800394c:	d120      	bne.n	8003990 <_printf_common+0xc8>
 800394e:	2000      	movs	r0, #0
 8003950:	e010      	b.n	8003974 <_printf_common+0xac>
 8003952:	3501      	adds	r5, #1
 8003954:	68e3      	ldr	r3, [r4, #12]
 8003956:	6832      	ldr	r2, [r6, #0]
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	42ab      	cmp	r3, r5
 800395c:	ddd2      	ble.n	8003904 <_printf_common+0x3c>
 800395e:	0022      	movs	r2, r4
 8003960:	2301      	movs	r3, #1
 8003962:	9901      	ldr	r1, [sp, #4]
 8003964:	9800      	ldr	r0, [sp, #0]
 8003966:	9f08      	ldr	r7, [sp, #32]
 8003968:	3219      	adds	r2, #25
 800396a:	47b8      	blx	r7
 800396c:	3001      	adds	r0, #1
 800396e:	d1f0      	bne.n	8003952 <_printf_common+0x8a>
 8003970:	2001      	movs	r0, #1
 8003972:	4240      	negs	r0, r0
 8003974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003976:	2030      	movs	r0, #48	@ 0x30
 8003978:	18e1      	adds	r1, r4, r3
 800397a:	3143      	adds	r1, #67	@ 0x43
 800397c:	7008      	strb	r0, [r1, #0]
 800397e:	0021      	movs	r1, r4
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	3145      	adds	r1, #69	@ 0x45
 8003984:	7809      	ldrb	r1, [r1, #0]
 8003986:	18a2      	adds	r2, r4, r2
 8003988:	3243      	adds	r2, #67	@ 0x43
 800398a:	3302      	adds	r3, #2
 800398c:	7011      	strb	r1, [r2, #0]
 800398e:	e7c1      	b.n	8003914 <_printf_common+0x4c>
 8003990:	0022      	movs	r2, r4
 8003992:	2301      	movs	r3, #1
 8003994:	9901      	ldr	r1, [sp, #4]
 8003996:	9800      	ldr	r0, [sp, #0]
 8003998:	9f08      	ldr	r7, [sp, #32]
 800399a:	321a      	adds	r2, #26
 800399c:	47b8      	blx	r7
 800399e:	3001      	adds	r0, #1
 80039a0:	d0e6      	beq.n	8003970 <_printf_common+0xa8>
 80039a2:	3601      	adds	r6, #1
 80039a4:	e7d1      	b.n	800394a <_printf_common+0x82>
	...

080039a8 <_printf_i>:
 80039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039aa:	b08b      	sub	sp, #44	@ 0x2c
 80039ac:	9206      	str	r2, [sp, #24]
 80039ae:	000a      	movs	r2, r1
 80039b0:	3243      	adds	r2, #67	@ 0x43
 80039b2:	9307      	str	r3, [sp, #28]
 80039b4:	9005      	str	r0, [sp, #20]
 80039b6:	9203      	str	r2, [sp, #12]
 80039b8:	7e0a      	ldrb	r2, [r1, #24]
 80039ba:	000c      	movs	r4, r1
 80039bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80039be:	2a78      	cmp	r2, #120	@ 0x78
 80039c0:	d809      	bhi.n	80039d6 <_printf_i+0x2e>
 80039c2:	2a62      	cmp	r2, #98	@ 0x62
 80039c4:	d80b      	bhi.n	80039de <_printf_i+0x36>
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	d100      	bne.n	80039cc <_printf_i+0x24>
 80039ca:	e0ba      	b.n	8003b42 <_printf_i+0x19a>
 80039cc:	497a      	ldr	r1, [pc, #488]	@ (8003bb8 <_printf_i+0x210>)
 80039ce:	9104      	str	r1, [sp, #16]
 80039d0:	2a58      	cmp	r2, #88	@ 0x58
 80039d2:	d100      	bne.n	80039d6 <_printf_i+0x2e>
 80039d4:	e08e      	b.n	8003af4 <_printf_i+0x14c>
 80039d6:	0025      	movs	r5, r4
 80039d8:	3542      	adds	r5, #66	@ 0x42
 80039da:	702a      	strb	r2, [r5, #0]
 80039dc:	e022      	b.n	8003a24 <_printf_i+0x7c>
 80039de:	0010      	movs	r0, r2
 80039e0:	3863      	subs	r0, #99	@ 0x63
 80039e2:	2815      	cmp	r0, #21
 80039e4:	d8f7      	bhi.n	80039d6 <_printf_i+0x2e>
 80039e6:	f7fc fb97 	bl	8000118 <__gnu_thumb1_case_shi>
 80039ea:	0016      	.short	0x0016
 80039ec:	fff6001f 	.word	0xfff6001f
 80039f0:	fff6fff6 	.word	0xfff6fff6
 80039f4:	001ffff6 	.word	0x001ffff6
 80039f8:	fff6fff6 	.word	0xfff6fff6
 80039fc:	fff6fff6 	.word	0xfff6fff6
 8003a00:	0036009f 	.word	0x0036009f
 8003a04:	fff6007e 	.word	0xfff6007e
 8003a08:	00b0fff6 	.word	0x00b0fff6
 8003a0c:	0036fff6 	.word	0x0036fff6
 8003a10:	fff6fff6 	.word	0xfff6fff6
 8003a14:	0082      	.short	0x0082
 8003a16:	0025      	movs	r5, r4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	3542      	adds	r5, #66	@ 0x42
 8003a1c:	1d11      	adds	r1, r2, #4
 8003a1e:	6019      	str	r1, [r3, #0]
 8003a20:	6813      	ldr	r3, [r2, #0]
 8003a22:	702b      	strb	r3, [r5, #0]
 8003a24:	2301      	movs	r3, #1
 8003a26:	e09e      	b.n	8003b66 <_printf_i+0x1be>
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	6809      	ldr	r1, [r1, #0]
 8003a2c:	1d02      	adds	r2, r0, #4
 8003a2e:	060d      	lsls	r5, r1, #24
 8003a30:	d50b      	bpl.n	8003a4a <_printf_i+0xa2>
 8003a32:	6806      	ldr	r6, [r0, #0]
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	2e00      	cmp	r6, #0
 8003a38:	da03      	bge.n	8003a42 <_printf_i+0x9a>
 8003a3a:	232d      	movs	r3, #45	@ 0x2d
 8003a3c:	9a03      	ldr	r2, [sp, #12]
 8003a3e:	4276      	negs	r6, r6
 8003a40:	7013      	strb	r3, [r2, #0]
 8003a42:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb8 <_printf_i+0x210>)
 8003a44:	270a      	movs	r7, #10
 8003a46:	9304      	str	r3, [sp, #16]
 8003a48:	e018      	b.n	8003a7c <_printf_i+0xd4>
 8003a4a:	6806      	ldr	r6, [r0, #0]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	0649      	lsls	r1, r1, #25
 8003a50:	d5f1      	bpl.n	8003a36 <_printf_i+0x8e>
 8003a52:	b236      	sxth	r6, r6
 8003a54:	e7ef      	b.n	8003a36 <_printf_i+0x8e>
 8003a56:	6808      	ldr	r0, [r1, #0]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	c940      	ldmia	r1!, {r6}
 8003a5c:	0605      	lsls	r5, r0, #24
 8003a5e:	d402      	bmi.n	8003a66 <_printf_i+0xbe>
 8003a60:	0640      	lsls	r0, r0, #25
 8003a62:	d500      	bpl.n	8003a66 <_printf_i+0xbe>
 8003a64:	b2b6      	uxth	r6, r6
 8003a66:	6019      	str	r1, [r3, #0]
 8003a68:	4b53      	ldr	r3, [pc, #332]	@ (8003bb8 <_printf_i+0x210>)
 8003a6a:	270a      	movs	r7, #10
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003a70:	d100      	bne.n	8003a74 <_printf_i+0xcc>
 8003a72:	3f02      	subs	r7, #2
 8003a74:	0023      	movs	r3, r4
 8003a76:	2200      	movs	r2, #0
 8003a78:	3343      	adds	r3, #67	@ 0x43
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	6863      	ldr	r3, [r4, #4]
 8003a7e:	60a3      	str	r3, [r4, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db06      	blt.n	8003a92 <_printf_i+0xea>
 8003a84:	2104      	movs	r1, #4
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	9d03      	ldr	r5, [sp, #12]
 8003a8a:	438a      	bics	r2, r1
 8003a8c:	6022      	str	r2, [r4, #0]
 8003a8e:	4333      	orrs	r3, r6
 8003a90:	d00c      	beq.n	8003aac <_printf_i+0x104>
 8003a92:	9d03      	ldr	r5, [sp, #12]
 8003a94:	0030      	movs	r0, r6
 8003a96:	0039      	movs	r1, r7
 8003a98:	f7fc fbce 	bl	8000238 <__aeabi_uidivmod>
 8003a9c:	9b04      	ldr	r3, [sp, #16]
 8003a9e:	3d01      	subs	r5, #1
 8003aa0:	5c5b      	ldrb	r3, [r3, r1]
 8003aa2:	702b      	strb	r3, [r5, #0]
 8003aa4:	0033      	movs	r3, r6
 8003aa6:	0006      	movs	r6, r0
 8003aa8:	429f      	cmp	r7, r3
 8003aaa:	d9f3      	bls.n	8003a94 <_printf_i+0xec>
 8003aac:	2f08      	cmp	r7, #8
 8003aae:	d109      	bne.n	8003ac4 <_printf_i+0x11c>
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	07db      	lsls	r3, r3, #31
 8003ab4:	d506      	bpl.n	8003ac4 <_printf_i+0x11c>
 8003ab6:	6862      	ldr	r2, [r4, #4]
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	dc02      	bgt.n	8003ac4 <_printf_i+0x11c>
 8003abe:	2330      	movs	r3, #48	@ 0x30
 8003ac0:	3d01      	subs	r5, #1
 8003ac2:	702b      	strb	r3, [r5, #0]
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	1b5b      	subs	r3, r3, r5
 8003ac8:	6123      	str	r3, [r4, #16]
 8003aca:	9b07      	ldr	r3, [sp, #28]
 8003acc:	0021      	movs	r1, r4
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	9805      	ldr	r0, [sp, #20]
 8003ad2:	9b06      	ldr	r3, [sp, #24]
 8003ad4:	aa09      	add	r2, sp, #36	@ 0x24
 8003ad6:	f7ff fef7 	bl	80038c8 <_printf_common>
 8003ada:	3001      	adds	r0, #1
 8003adc:	d148      	bne.n	8003b70 <_printf_i+0x1c8>
 8003ade:	2001      	movs	r0, #1
 8003ae0:	4240      	negs	r0, r0
 8003ae2:	b00b      	add	sp, #44	@ 0x2c
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	6809      	ldr	r1, [r1, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	6022      	str	r2, [r4, #0]
 8003aee:	2278      	movs	r2, #120	@ 0x78
 8003af0:	4932      	ldr	r1, [pc, #200]	@ (8003bbc <_printf_i+0x214>)
 8003af2:	9104      	str	r1, [sp, #16]
 8003af4:	0021      	movs	r1, r4
 8003af6:	3145      	adds	r1, #69	@ 0x45
 8003af8:	700a      	strb	r2, [r1, #0]
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	6822      	ldr	r2, [r4, #0]
 8003afe:	c940      	ldmia	r1!, {r6}
 8003b00:	0610      	lsls	r0, r2, #24
 8003b02:	d402      	bmi.n	8003b0a <_printf_i+0x162>
 8003b04:	0650      	lsls	r0, r2, #25
 8003b06:	d500      	bpl.n	8003b0a <_printf_i+0x162>
 8003b08:	b2b6      	uxth	r6, r6
 8003b0a:	6019      	str	r1, [r3, #0]
 8003b0c:	07d3      	lsls	r3, r2, #31
 8003b0e:	d502      	bpl.n	8003b16 <_printf_i+0x16e>
 8003b10:	2320      	movs	r3, #32
 8003b12:	4313      	orrs	r3, r2
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	2e00      	cmp	r6, #0
 8003b18:	d001      	beq.n	8003b1e <_printf_i+0x176>
 8003b1a:	2710      	movs	r7, #16
 8003b1c:	e7aa      	b.n	8003a74 <_printf_i+0xcc>
 8003b1e:	2220      	movs	r2, #32
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	4393      	bics	r3, r2
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	e7f8      	b.n	8003b1a <_printf_i+0x172>
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	680d      	ldr	r5, [r1, #0]
 8003b2c:	1d10      	adds	r0, r2, #4
 8003b2e:	6949      	ldr	r1, [r1, #20]
 8003b30:	6018      	str	r0, [r3, #0]
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	062e      	lsls	r6, r5, #24
 8003b36:	d501      	bpl.n	8003b3c <_printf_i+0x194>
 8003b38:	6019      	str	r1, [r3, #0]
 8003b3a:	e002      	b.n	8003b42 <_printf_i+0x19a>
 8003b3c:	066d      	lsls	r5, r5, #25
 8003b3e:	d5fb      	bpl.n	8003b38 <_printf_i+0x190>
 8003b40:	8019      	strh	r1, [r3, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	9d03      	ldr	r5, [sp, #12]
 8003b46:	6123      	str	r3, [r4, #16]
 8003b48:	e7bf      	b.n	8003aca <_printf_i+0x122>
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	1d11      	adds	r1, r2, #4
 8003b4e:	6019      	str	r1, [r3, #0]
 8003b50:	6815      	ldr	r5, [r2, #0]
 8003b52:	2100      	movs	r1, #0
 8003b54:	0028      	movs	r0, r5
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	f000 f856 	bl	8003c08 <memchr>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d001      	beq.n	8003b64 <_printf_i+0x1bc>
 8003b60:	1b40      	subs	r0, r0, r5
 8003b62:	6060      	str	r0, [r4, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	6123      	str	r3, [r4, #16]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9a03      	ldr	r2, [sp, #12]
 8003b6c:	7013      	strb	r3, [r2, #0]
 8003b6e:	e7ac      	b.n	8003aca <_printf_i+0x122>
 8003b70:	002a      	movs	r2, r5
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	9906      	ldr	r1, [sp, #24]
 8003b76:	9805      	ldr	r0, [sp, #20]
 8003b78:	9d07      	ldr	r5, [sp, #28]
 8003b7a:	47a8      	blx	r5
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0ae      	beq.n	8003ade <_printf_i+0x136>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	d415      	bmi.n	8003bb2 <_printf_i+0x20a>
 8003b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b88:	68e0      	ldr	r0, [r4, #12]
 8003b8a:	4298      	cmp	r0, r3
 8003b8c:	daa9      	bge.n	8003ae2 <_printf_i+0x13a>
 8003b8e:	0018      	movs	r0, r3
 8003b90:	e7a7      	b.n	8003ae2 <_printf_i+0x13a>
 8003b92:	0022      	movs	r2, r4
 8003b94:	2301      	movs	r3, #1
 8003b96:	9906      	ldr	r1, [sp, #24]
 8003b98:	9805      	ldr	r0, [sp, #20]
 8003b9a:	9e07      	ldr	r6, [sp, #28]
 8003b9c:	3219      	adds	r2, #25
 8003b9e:	47b0      	blx	r6
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d09c      	beq.n	8003ade <_printf_i+0x136>
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dcf0      	bgt.n	8003b92 <_printf_i+0x1ea>
 8003bb0:	e7e9      	b.n	8003b86 <_printf_i+0x1de>
 8003bb2:	2500      	movs	r5, #0
 8003bb4:	e7f7      	b.n	8003ba6 <_printf_i+0x1fe>
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	08003d05 	.word	0x08003d05
 8003bbc:	08003d16 	.word	0x08003d16

08003bc0 <memmove>:
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4288      	cmp	r0, r1
 8003bc4:	d902      	bls.n	8003bcc <memmove+0xc>
 8003bc6:	188b      	adds	r3, r1, r2
 8003bc8:	4298      	cmp	r0, r3
 8003bca:	d308      	bcc.n	8003bde <memmove+0x1e>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d007      	beq.n	8003be2 <memmove+0x22>
 8003bd2:	5ccc      	ldrb	r4, [r1, r3]
 8003bd4:	54c4      	strb	r4, [r0, r3]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	e7f9      	b.n	8003bce <memmove+0xe>
 8003bda:	5c8b      	ldrb	r3, [r1, r2]
 8003bdc:	5483      	strb	r3, [r0, r2]
 8003bde:	3a01      	subs	r2, #1
 8003be0:	d2fb      	bcs.n	8003bda <memmove+0x1a>
 8003be2:	bd10      	pop	{r4, pc}

08003be4 <_sbrk_r>:
 8003be4:	2300      	movs	r3, #0
 8003be6:	b570      	push	{r4, r5, r6, lr}
 8003be8:	4d06      	ldr	r5, [pc, #24]	@ (8003c04 <_sbrk_r+0x20>)
 8003bea:	0004      	movs	r4, r0
 8003bec:	0008      	movs	r0, r1
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	f7fc ff4e 	bl	8000a90 <_sbrk>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d103      	bne.n	8003c00 <_sbrk_r+0x1c>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d000      	beq.n	8003c00 <_sbrk_r+0x1c>
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	bd70      	pop	{r4, r5, r6, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	2000028c 	.word	0x2000028c

08003c08 <memchr>:
 8003c08:	b2c9      	uxtb	r1, r1
 8003c0a:	1882      	adds	r2, r0, r2
 8003c0c:	4290      	cmp	r0, r2
 8003c0e:	d101      	bne.n	8003c14 <memchr+0xc>
 8003c10:	2000      	movs	r0, #0
 8003c12:	4770      	bx	lr
 8003c14:	7803      	ldrb	r3, [r0, #0]
 8003c16:	428b      	cmp	r3, r1
 8003c18:	d0fb      	beq.n	8003c12 <memchr+0xa>
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	e7f6      	b.n	8003c0c <memchr+0x4>

08003c1e <_realloc_r>:
 8003c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c20:	0006      	movs	r6, r0
 8003c22:	000c      	movs	r4, r1
 8003c24:	0015      	movs	r5, r2
 8003c26:	2900      	cmp	r1, #0
 8003c28:	d105      	bne.n	8003c36 <_realloc_r+0x18>
 8003c2a:	0011      	movs	r1, r2
 8003c2c:	f7ff fc5e 	bl	80034ec <_malloc_r>
 8003c30:	0004      	movs	r4, r0
 8003c32:	0020      	movs	r0, r4
 8003c34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c36:	2a00      	cmp	r2, #0
 8003c38:	d103      	bne.n	8003c42 <_realloc_r+0x24>
 8003c3a:	f7ff fbeb 	bl	8003414 <_free_r>
 8003c3e:	002c      	movs	r4, r5
 8003c40:	e7f7      	b.n	8003c32 <_realloc_r+0x14>
 8003c42:	f000 f81c 	bl	8003c7e <_malloc_usable_size_r>
 8003c46:	0007      	movs	r7, r0
 8003c48:	4285      	cmp	r5, r0
 8003c4a:	d802      	bhi.n	8003c52 <_realloc_r+0x34>
 8003c4c:	0843      	lsrs	r3, r0, #1
 8003c4e:	42ab      	cmp	r3, r5
 8003c50:	d3ef      	bcc.n	8003c32 <_realloc_r+0x14>
 8003c52:	0029      	movs	r1, r5
 8003c54:	0030      	movs	r0, r6
 8003c56:	f7ff fc49 	bl	80034ec <_malloc_r>
 8003c5a:	9001      	str	r0, [sp, #4]
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d101      	bne.n	8003c64 <_realloc_r+0x46>
 8003c60:	9c01      	ldr	r4, [sp, #4]
 8003c62:	e7e6      	b.n	8003c32 <_realloc_r+0x14>
 8003c64:	002a      	movs	r2, r5
 8003c66:	42bd      	cmp	r5, r7
 8003c68:	d900      	bls.n	8003c6c <_realloc_r+0x4e>
 8003c6a:	003a      	movs	r2, r7
 8003c6c:	0021      	movs	r1, r4
 8003c6e:	9801      	ldr	r0, [sp, #4]
 8003c70:	f7ff fbc6 	bl	8003400 <memcpy>
 8003c74:	0021      	movs	r1, r4
 8003c76:	0030      	movs	r0, r6
 8003c78:	f7ff fbcc 	bl	8003414 <_free_r>
 8003c7c:	e7f0      	b.n	8003c60 <_realloc_r+0x42>

08003c7e <_malloc_usable_size_r>:
 8003c7e:	1f0b      	subs	r3, r1, #4
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	1f18      	subs	r0, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da01      	bge.n	8003c8c <_malloc_usable_size_r+0xe>
 8003c88:	580b      	ldr	r3, [r1, r0]
 8003c8a:	18c0      	adds	r0, r0, r3
 8003c8c:	4770      	bx	lr
	...

08003c90 <_init>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr

08003c9c <_fini>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr
