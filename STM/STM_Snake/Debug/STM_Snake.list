
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003164  08003164  00004164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800319c  0800319c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800319c  0800319c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800319c  0800319c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800319c  0800319c  0000419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031a0  080031a0  000041a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080031b0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080031b0  00005104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009286  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab6  00000000  00000000  0000e2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000057b  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b26  00000000  00000000  00010a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a705  00000000  00000000  00022539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000689db  00000000  00000000  0002cc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017d0  00000000  00000000  0009565c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00096e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800314c 	.word	0x0800314c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800314c 	.word	0x0800314c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <simulate_snake_game>:
void simulate_snake_game();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void simulate_snake_game() {
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af02      	add	r7, sp, #8
    uint8_t frog_x = 20, frog_y = 25;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2214      	movs	r2, #20
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	2219      	movs	r2, #25
 8000230:	701a      	strb	r2, [r3, #0]
    uint8_t payload[] = {10,15};
 8000232:	003b      	movs	r3, r7
 8000234:	4a0e      	ldr	r2, [pc, #56]	@ (8000270 <simulate_snake_game+0x50>)
 8000236:	801a      	strh	r2, [r3, #0]

    uint8_t frame_length = encode_frame_snake(payload, sizeof(payload), frame, 0x02, frog_x, frog_y);
 8000238:	1d7c      	adds	r4, r7, #5
 800023a:	4a0e      	ldr	r2, [pc, #56]	@ (8000274 <simulate_snake_game+0x54>)
 800023c:	0038      	movs	r0, r7
 800023e:	1dbb      	adds	r3, r7, #6
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2302      	movs	r3, #2
 800024c:	2102      	movs	r1, #2
 800024e:	f000 f9d9 	bl	8000604 <encode_frame_snake>
 8000252:	0003      	movs	r3, r0
 8000254:	7023      	strb	r3, [r4, #0]

    HAL_UART_Transmit(&huart1, frame, frame_length, 100);
 8000256:	1d7b      	adds	r3, r7, #5
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b29a      	uxth	r2, r3
 800025c:	4905      	ldr	r1, [pc, #20]	@ (8000274 <simulate_snake_game+0x54>)
 800025e:	4806      	ldr	r0, [pc, #24]	@ (8000278 <simulate_snake_game+0x58>)
 8000260:	2364      	movs	r3, #100	@ 0x64
 8000262:	f001 fdd5 	bl	8001e10 <HAL_UART_Transmit>
}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	46bd      	mov	sp, r7
 800026a:	b003      	add	sp, #12
 800026c:	bd90      	pop	{r4, r7, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)
 8000270:	00000f0a 	.word	0x00000f0a
 8000274:	200000f4 	.word	0x200000f4
 8000278:	20000028 	.word	0x20000028

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000280:	f000 fb50 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f814 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 f8c0 	bl	800040c <MX_GPIO_Init>
  MX_DMA_Init();
 800028c:	f000 f8a0 	bl	80003d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000290:	f000 f86e 	bl	8000370 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,frame,sizeof(frame));
 8000294:	4904      	ldr	r1, [pc, #16]	@ (80002a8 <main+0x2c>)
 8000296:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <main+0x30>)
 8000298:	2209      	movs	r2, #9
 800029a:	0018      	movs	r0, r3
 800029c:	f001 fe57 	bl	8001f4e <HAL_UART_Receive_DMA>
  simulate_snake_game();
 80002a0:	f7ff ffbe 	bl	8000220 <simulate_snake_game>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a4:	46c0      	nop			@ (mov r8, r8)
 80002a6:	e7fd      	b.n	80002a4 <main+0x28>
 80002a8:	200000f4 	.word	0x200000f4
 80002ac:	20000028 	.word	0x20000028

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b097      	sub	sp, #92	@ 0x5c
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	2428      	movs	r4, #40	@ 0x28
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	2330      	movs	r3, #48	@ 0x30
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f002 ff16 	bl	80030f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	2318      	movs	r3, #24
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	0018      	movs	r0, r3
 80002cc:	2310      	movs	r3, #16
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f002 ff0e 	bl	80030f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	0018      	movs	r0, r3
 80002da:	2314      	movs	r3, #20
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f002 ff07 	bl	80030f2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2280      	movs	r2, #128	@ 0x80
 80002fc:	0252      	lsls	r2, r2, #9
 80002fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2280      	movs	r2, #128	@ 0x80
 8000304:	0352      	lsls	r2, r2, #13
 8000306:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	187b      	adds	r3, r7, r1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 ffed 	bl	80012f0 <HAL_RCC_OscConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031a:	f000 f8eb 	bl	80004f4 <Error_Handler>
  }


  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	2118      	movs	r1, #24
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2207      	movs	r2, #7
 8000324:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2101      	movs	r1, #1
 800033c:	0018      	movs	r0, r3
 800033e:	f001 faf1 	bl	8001924 <HAL_RCC_ClockConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000346:	f000 f8d5 	bl	80004f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	f001 fc27 	bl	8001bac <HAL_RCCEx_PeriphCLKConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000362:	f000 f8c7 	bl	80004f4 <Error_Handler>
  }
}
 8000366:	46c0      	nop			@ (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b017      	add	sp, #92	@ 0x5c
 800036c:	bd90      	pop	{r4, r7, pc}
	...

08000370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 8000376:	4a15      	ldr	r2, [pc, #84]	@ (80003cc <MX_USART1_UART_Init+0x5c>)
 8000378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800037a:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 800037c:	2296      	movs	r2, #150	@ 0x96
 800037e:	0192      	lsls	r2, r2, #6
 8000380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b2:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <MX_USART1_UART_Init+0x58>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fcd7 	bl	8001d68 <HAL_UART_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003be:	f000 f899 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c2:	46c0      	nop			@ (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000028 	.word	0x20000028
 80003cc:	40013800 	.word	0x40013800

080003d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <MX_DMA_Init+0x38>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <MX_DMA_Init+0x38>)
 80003dc:	2101      	movs	r1, #1
 80003de:	430a      	orrs	r2, r1
 80003e0:	615a      	str	r2, [r3, #20]
 80003e2:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <MX_DMA_Init+0x38>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	2201      	movs	r2, #1
 80003e8:	4013      	ands	r3, r2
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2100      	movs	r1, #0
 80003f2:	200a      	movs	r0, #10
 80003f4:	f000 fba6 	bl	8000b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003f8:	200a      	movs	r0, #10
 80003fa:	f000 fbb8 	bl	8000b6e <HAL_NVIC_EnableIRQ>

}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b002      	add	sp, #8
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	40021000 	.word	0x40021000

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b089      	sub	sp, #36	@ 0x24
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	240c      	movs	r4, #12
 8000414:	193b      	adds	r3, r7, r4
 8000416:	0018      	movs	r0, r3
 8000418:	2314      	movs	r3, #20
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f002 fe68 	bl	80030f2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4b24      	ldr	r3, [pc, #144]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 8000428:	2180      	movs	r1, #128	@ 0x80
 800042a:	03c9      	lsls	r1, r1, #15
 800042c:	430a      	orrs	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
 8000430:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	2380      	movs	r3, #128	@ 0x80
 8000436:	03db      	lsls	r3, r3, #15
 8000438:	4013      	ands	r3, r2
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 8000444:	2180      	movs	r1, #128	@ 0x80
 8000446:	0309      	lsls	r1, r1, #12
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	@ 0x80
 8000452:	031b      	lsls	r3, r3, #12
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	0289      	lsls	r1, r1, #10
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	029b      	lsls	r3, r3, #10
 8000470:	4013      	ands	r3, r2
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000476:	23c0      	movs	r3, #192	@ 0xc0
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	480f      	ldr	r0, [pc, #60]	@ (80004b8 <MX_GPIO_Init+0xac>)
 800047c:	2200      	movs	r2, #0
 800047e:	0019      	movs	r1, r3
 8000480:	f000 ff18 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	22c0      	movs	r2, #192	@ 0xc0
 8000488:	0092      	lsls	r2, r2, #2
 800048a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2201      	movs	r2, #1
 8000490:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	4a05      	ldr	r2, [pc, #20]	@ (80004b8 <MX_GPIO_Init+0xac>)
 80004a2:	0019      	movs	r1, r3
 80004a4:	0010      	movs	r0, r2
 80004a6:	f000 fd95 	bl	8000fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b009      	add	sp, #36	@ 0x24
 80004b0:	bd90      	pop	{r4, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000
 80004b8:	48000800 	.word	0x48000800

080004bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a07      	ldr	r2, [pc, #28]	@ (80004e8 <HAL_UART_RxCpltCallback+0x2c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d107      	bne.n	80004de <HAL_UART_RxCpltCallback+0x22>




        simulate_snake_game();
 80004ce:	f7ff fea7 	bl	8000220 <simulate_snake_game>

        HAL_UART_Receive_DMA(&huart1, frame, sizeof(frame));
 80004d2:	4906      	ldr	r1, [pc, #24]	@ (80004ec <HAL_UART_RxCpltCallback+0x30>)
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <HAL_UART_RxCpltCallback+0x34>)
 80004d6:	2209      	movs	r2, #9
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fd38 	bl	8001f4e <HAL_UART_Receive_DMA>
    }
}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	40013800 	.word	0x40013800
 80004ec:	200000f4 	.word	0x200000f4
 80004f0:	20000028 	.word	0x20000028

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <crc16_ccitt_snake>:



// Функція обчислення CRC-16-CCITT для пакету змійки (поліном 0x1021, початкове значення 0xFFFF)
// Обчислення CRC-16-CCITT для пакету змійки
uint16_t crc16_ccitt_snake(const uint8_t *data, uint16_t len, uint8_t cmd, uint8_t frog_x, uint8_t frog_y) {
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	000c      	movs	r4, r1
 800050a:	0010      	movs	r0, r2
 800050c:	0019      	movs	r1, r3
 800050e:	1cbb      	adds	r3, r7, #2
 8000510:	1c22      	adds	r2, r4, #0
 8000512:	801a      	strh	r2, [r3, #0]
 8000514:	1c7b      	adds	r3, r7, #1
 8000516:	1c02      	adds	r2, r0, #0
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	003b      	movs	r3, r7
 800051c:	1c0a      	adds	r2, r1, #0
 800051e:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000520:	210e      	movs	r1, #14
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	4252      	negs	r2, r2
 8000528:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);
 800052a:	1c7b      	adds	r3, r7, #1
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	021b      	lsls	r3, r3, #8
 8000530:	b21a      	sxth	r2, r3
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2000      	movs	r0, #0
 8000536:	5e1b      	ldrsh	r3, [r3, r0]
 8000538:	4053      	eors	r3, r2
 800053a:	b21a      	sxth	r2, r3
 800053c:	187b      	adds	r3, r7, r1
 800053e:	801a      	strh	r2, [r3, #0]
    crc ^= (((uint16_t)frog_x << 8) | frog_y);
 8000540:	003b      	movs	r3, r7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	021b      	lsls	r3, r3, #8
 8000546:	b21a      	sxth	r2, r3
 8000548:	2320      	movs	r3, #32
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b21b      	sxth	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b21a      	sxth	r2, r3
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2000      	movs	r0, #0
 8000558:	5e1b      	ldrsh	r3, [r3, r0]
 800055a:	4053      	eors	r3, r2
 800055c:	b21a      	sxth	r2, r3
 800055e:	187b      	adds	r3, r7, r1
 8000560:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000562:	230c      	movs	r3, #12
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	2200      	movs	r2, #0
 8000568:	801a      	strh	r2, [r3, #0]
 800056a:	e03b      	b.n	80005e4 <crc16_ccitt_snake+0xe4>
        crc ^= ((uint16_t)data[i] << 8);
 800056c:	230c      	movs	r3, #12
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	18d3      	adds	r3, r2, r3
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21a      	sxth	r2, r3
 800057c:	210e      	movs	r1, #14
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2000      	movs	r0, #0
 8000582:	5e1b      	ldrsh	r3, [r3, r0]
 8000584:	4053      	eors	r3, r2
 8000586:	b21a      	sxth	r2, r3
 8000588:	187b      	adds	r3, r7, r1
 800058a:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 800058c:	230b      	movs	r3, #11
 800058e:	18fb      	adds	r3, r7, r3
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
 8000594:	e01b      	b.n	80005ce <crc16_ccitt_snake+0xce>
            if (crc & 0x8000)
 8000596:	210e      	movs	r1, #14
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	5e9b      	ldrsh	r3, [r3, r2]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	da09      	bge.n	80005b6 <crc16_ccitt_snake+0xb6>
                crc = (crc << 1) ^ 0x1021;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4a15      	ldr	r2, [pc, #84]	@ (8000600 <crc16_ccitt_snake+0x100>)
 80005ac:	4053      	eors	r3, r2
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	801a      	strh	r2, [r3, #0]
 80005b4:	e005      	b.n	80005c2 <crc16_ccitt_snake+0xc2>
            else
                crc <<= 1;
 80005b6:	230e      	movs	r3, #14
 80005b8:	18fa      	adds	r2, r7, r3
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	18db      	adds	r3, r3, r3
 80005c0:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 80005c2:	210b      	movs	r1, #11
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	3201      	adds	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	230b      	movs	r3, #11
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b07      	cmp	r3, #7
 80005d6:	d9de      	bls.n	8000596 <crc16_ccitt_snake+0x96>
    for (uint16_t i = 0; i < len; i++) {
 80005d8:	210c      	movs	r1, #12
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	881a      	ldrh	r2, [r3, #0]
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	3201      	adds	r2, #1
 80005e2:	801a      	strh	r2, [r3, #0]
 80005e4:	230c      	movs	r3, #12
 80005e6:	18fa      	adds	r2, r7, r3
 80005e8:	1cbb      	adds	r3, r7, #2
 80005ea:	8812      	ldrh	r2, [r2, #0]
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d3bc      	bcc.n	800056c <crc16_ccitt_snake+0x6c>
        }
    }
    return crc;
 80005f2:	230e      	movs	r3, #14
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	881b      	ldrh	r3, [r3, #0]
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b005      	add	sp, #20
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	00001021 	.word	0x00001021

08000604 <encode_frame_snake>:
    }
    return crc;
}

//функція кодування пакету змії
uint8_t encode_frame_snake(const uint8_t *payload, uint8_t payload_len, uint8_t *frame, uint8_t cmd_byte, uint8_t frog_x, uint8_t frog_y) {
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	b089      	sub	sp, #36	@ 0x24
 8000608:	af02      	add	r7, sp, #8
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	0008      	movs	r0, r1
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	0019      	movs	r1, r3
 8000612:	240b      	movs	r4, #11
 8000614:	193b      	adds	r3, r7, r4
 8000616:	1c02      	adds	r2, r0, #0
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	200a      	movs	r0, #10
 800061c:	183b      	adds	r3, r7, r0
 800061e:	1c0a      	adds	r2, r1, #0
 8000620:	701a      	strb	r2, [r3, #0]
   frame[0] = START_BYTE;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	227e      	movs	r2, #126	@ 0x7e
 8000626:	701a      	strb	r2, [r3, #0]
    frame[1] = cmd_byte;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	183a      	adds	r2, r7, r0
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	701a      	strb	r2, [r3, #0]
    frame[2] = payload_len;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3302      	adds	r3, #2
 8000636:	193a      	adds	r2, r7, r4
 8000638:	7812      	ldrb	r2, [r2, #0]
 800063a:	701a      	strb	r2, [r3, #0]


    for (uint8_t i = 0; i < payload_len; i++) {
 800063c:	2317      	movs	r3, #23
 800063e:	18fb      	adds	r3, r7, r3
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	e011      	b.n	800066a <encode_frame_snake+0x66>
        frame[3 + i] = payload[i];
 8000646:	2017      	movs	r0, #23
 8000648:	183b      	adds	r3, r7, r0
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	18d2      	adds	r2, r2, r3
 8000650:	183b      	adds	r3, r7, r0
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	3303      	adds	r3, #3
 8000656:	0019      	movs	r1, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	185b      	adds	r3, r3, r1
 800065c:	7812      	ldrb	r2, [r2, #0]
 800065e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < payload_len; i++) {
 8000660:	183b      	adds	r3, r7, r0
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	183b      	adds	r3, r7, r0
 8000666:	3201      	adds	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	2317      	movs	r3, #23
 800066c:	18fa      	adds	r2, r7, r3
 800066e:	260b      	movs	r6, #11
 8000670:	19bb      	adds	r3, r7, r6
 8000672:	7812      	ldrb	r2, [r2, #0]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	d3e5      	bcc.n	8000646 <encode_frame_snake+0x42>

    }



    frame[3 + payload_len] = frog_x;
 800067a:	19bb      	adds	r3, r7, r6
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	3303      	adds	r3, #3
 8000680:	001a      	movs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	189a      	adds	r2, r3, r2
 8000686:	2528      	movs	r5, #40	@ 0x28
 8000688:	2108      	movs	r1, #8
 800068a:	186b      	adds	r3, r5, r1
 800068c:	19db      	adds	r3, r3, r7
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	7013      	strb	r3, [r2, #0]
    frame[4 + payload_len] = frog_y;
 8000692:	19bb      	adds	r3, r7, r6
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3304      	adds	r3, #4
 8000698:	001a      	movs	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	189b      	adds	r3, r3, r2
 800069e:	222c      	movs	r2, #44	@ 0x2c
 80006a0:	1852      	adds	r2, r2, r1
 80006a2:	19d2      	adds	r2, r2, r7
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	701a      	strb	r2, [r3, #0]

   uint16_t crc = crc16_ccitt_snake(payload, payload_len, cmd_byte, frog_x, frog_y);
 80006a8:	19bb      	adds	r3, r7, r6
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	469c      	mov	ip, r3
 80006b0:	2014      	movs	r0, #20
 80006b2:	183c      	adds	r4, r7, r0
 80006b4:	186b      	adds	r3, r5, r1
 80006b6:	19db      	adds	r3, r3, r7
 80006b8:	781d      	ldrb	r5, [r3, #0]
 80006ba:	230a      	movs	r3, #10
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	232c      	movs	r3, #44	@ 0x2c
 80006c4:	185b      	adds	r3, r3, r1
 80006c6:	19db      	adds	r3, r3, r7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	002b      	movs	r3, r5
 80006ce:	4661      	mov	r1, ip
 80006d0:	f7ff ff16 	bl	8000500 <crc16_ccitt_snake>
 80006d4:	0003      	movs	r3, r0
 80006d6:	8023      	strh	r3, [r4, #0]
    frame[5 + payload_len] = (crc >> 8) & 0xFF;
 80006d8:	2014      	movs	r0, #20
 80006da:	183b      	adds	r3, r7, r0
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	19bb      	adds	r3, r7, r6
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3305      	adds	r3, #5
 80006e8:	0019      	movs	r1, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	185b      	adds	r3, r3, r1
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	701a      	strb	r2, [r3, #0]
    frame[6 + payload_len] = crc & 0xFF;
 80006f2:	19bb      	adds	r3, r7, r6
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3306      	adds	r3, #6
 80006f8:	001a      	movs	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	189b      	adds	r3, r3, r2
 80006fe:	183a      	adds	r2, r7, r0
 8000700:	8812      	ldrh	r2, [r2, #0]
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	701a      	strb	r2, [r3, #0]

    return (7+payload_len);
 8000706:	19bb      	adds	r3, r7, r6
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3307      	adds	r3, #7
 800070c:	b2db      	uxtb	r3, r3
}
 800070e:	0018      	movs	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	b007      	add	sp, #28
 8000714:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <HAL_MspInit+0x44>)
 8000720:	699a      	ldr	r2, [r3, #24]
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_MspInit+0x44>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	619a      	str	r2, [r3, #24]
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <HAL_MspInit+0x44>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <HAL_MspInit+0x44>)
 8000738:	69da      	ldr	r2, [r3, #28]
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <HAL_MspInit+0x44>)
 800073c:	2180      	movs	r1, #128	@ 0x80
 800073e:	0549      	lsls	r1, r1, #21
 8000740:	430a      	orrs	r2, r1
 8000742:	61da      	str	r2, [r3, #28]
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_MspInit+0x44>)
 8000746:	69da      	ldr	r2, [r3, #28]
 8000748:	2380      	movs	r3, #128	@ 0x80
 800074a:	055b      	lsls	r3, r3, #21
 800074c:	4013      	ands	r3, r2
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b08b      	sub	sp, #44	@ 0x2c
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	2414      	movs	r4, #20
 800076a:	193b      	adds	r3, r7, r4
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f002 fcbd 	bl	80030f2 <memset>
  if(huart->Instance==USART1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a34      	ldr	r2, [pc, #208]	@ (8000850 <HAL_UART_MspInit+0xf0>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d161      	bne.n	8000846 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000782:	4b34      	ldr	r3, [pc, #208]	@ (8000854 <HAL_UART_MspInit+0xf4>)
 8000784:	699a      	ldr	r2, [r3, #24]
 8000786:	4b33      	ldr	r3, [pc, #204]	@ (8000854 <HAL_UART_MspInit+0xf4>)
 8000788:	2180      	movs	r1, #128	@ 0x80
 800078a:	01c9      	lsls	r1, r1, #7
 800078c:	430a      	orrs	r2, r1
 800078e:	619a      	str	r2, [r3, #24]
 8000790:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <HAL_UART_MspInit+0xf4>)
 8000792:	699a      	ldr	r2, [r3, #24]
 8000794:	2380      	movs	r3, #128	@ 0x80
 8000796:	01db      	lsls	r3, r3, #7
 8000798:	4013      	ands	r3, r2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <HAL_UART_MspInit+0xf4>)
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <HAL_UART_MspInit+0xf4>)
 80007a4:	2180      	movs	r1, #128	@ 0x80
 80007a6:	0289      	lsls	r1, r1, #10
 80007a8:	430a      	orrs	r2, r1
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <HAL_UART_MspInit+0xf4>)
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	029b      	lsls	r3, r3, #10
 80007b4:	4013      	ands	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	22c0      	movs	r2, #192	@ 0xc0
 80007be:	00d2      	lsls	r2, r2, #3
 80007c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	0021      	movs	r1, r4
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2202      	movs	r2, #2
 80007c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2203      	movs	r2, #3
 80007d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2201      	movs	r2, #1
 80007da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	187a      	adds	r2, r7, r1
 80007de:	2390      	movs	r3, #144	@ 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fbf5 	bl	8000fd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 80007ec:	4a1b      	ldr	r2, [pc, #108]	@ (800085c <HAL_UART_MspInit+0xfc>)
 80007ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 8000810:	2220      	movs	r2, #32
 8000812:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 800081c:	0018      	movs	r0, r3
 800081e:	f000 f9c3 	bl	8000ba8 <HAL_DMA_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000826:	f7ff fe65 	bl	80004f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 800082e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_UART_MspInit+0xf8>)
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	201b      	movs	r0, #27
 800083c:	f000 f982 	bl	8000b44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000840:	201b      	movs	r0, #27
 8000842:	f000 f994 	bl	8000b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b00b      	add	sp, #44	@ 0x2c
 800084c:	bd90      	pop	{r4, r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	40013800 	.word	0x40013800
 8000854:	40021000 	.word	0x40021000
 8000858:	200000b0 	.word	0x200000b0
 800085c:	40020030 	.word	0x40020030

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	e7fd      	b.n	8000864 <NMI_Handler+0x4>

08000868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	e7fd      	b.n	800086c <HardFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f894 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <DMA1_Channel2_3_IRQHandler+0x14>)
 800089a:	0018      	movs	r0, r3
 800089c:	f000 faaf 	bl	8000dfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	200000b0 	.word	0x200000b0

080008ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <USART1_IRQHandler+0x14>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fba2 	bl	8001ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	20000028 	.word	0x20000028

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80008d4:	f7ff fff6 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	@ (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	@ (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fe:	f002 fc01 	bl	8003104 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fcbb 	bl	800027c <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000914:	080031a4 	.word	0x080031a4
  ldr r2, =_sbss
 8000918:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800091c:	20000104 	.word	0x20000104

08000920 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_COMP_IRQHandler>
	...

08000924 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <HAL_Init+0x24>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_Init+0x24>)
 800092e:	2110      	movs	r1, #16
 8000930:	430a      	orrs	r2, r1
 8000932:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f809 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093a:	f7ff feed 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <HAL_InitTick+0x5c>)
 8000956:	681c      	ldr	r4, [r3, #0]
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <HAL_InitTick+0x60>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	0019      	movs	r1, r3
 800095e:	23fa      	movs	r3, #250	@ 0xfa
 8000960:	0098      	lsls	r0, r3, #2
 8000962:	f7ff fbd1 	bl	8000108 <__udivsi3>
 8000966:	0003      	movs	r3, r0
 8000968:	0019      	movs	r1, r3
 800096a:	0020      	movs	r0, r4
 800096c:	f7ff fbcc 	bl	8000108 <__udivsi3>
 8000970:	0003      	movs	r3, r0
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f90b 	bl	8000b8e <HAL_SYSTICK_Config>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	e00f      	b.n	80009a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d80b      	bhi.n	800099e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	2301      	movs	r3, #1
 800098a:	425b      	negs	r3, r3
 800098c:	2200      	movs	r2, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f000 f8d8 	bl	8000b44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_InitTick+0x64>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b003      	add	sp, #12
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	001a      	movs	r2, r3
 80009be:	4b05      	ldr	r3, [pc, #20]	@ (80009d4 <HAL_IncTick+0x20>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	18d2      	adds	r2, r2, r3
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <HAL_IncTick+0x20>)
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000100 	.word	0x20000100

080009d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	@ (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	20000100 	.word	0x20000100

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	0002      	movs	r2, r0
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80009fe:	d809      	bhi.n	8000a14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a00:	1dfb      	adds	r3, r7, #7
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	231f      	movs	r3, #31
 8000a08:	401a      	ands	r2, r3
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_EnableIRQ+0x30>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4091      	lsls	r1, r2
 8000a10:	000a      	movs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
  }
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a34:	d828      	bhi.n	8000a88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a36:	4a2f      	ldr	r2, [pc, #188]	@ (8000af4 <__NVIC_SetPriority+0xd4>)
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	33c0      	adds	r3, #192	@ 0xc0
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	589b      	ldr	r3, [r3, r2]
 8000a46:	1dfa      	adds	r2, r7, #7
 8000a48:	7812      	ldrb	r2, [r2, #0]
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	400a      	ands	r2, r1
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	21ff      	movs	r1, #255	@ 0xff
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	43d2      	mvns	r2, r2
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	019b      	lsls	r3, r3, #6
 8000a62:	22ff      	movs	r2, #255	@ 0xff
 8000a64:	401a      	ands	r2, r3
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	4003      	ands	r3, r0
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a74:	481f      	ldr	r0, [pc, #124]	@ (8000af4 <__NVIC_SetPriority+0xd4>)
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	33c0      	adds	r3, #192	@ 0xc0
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a86:	e031      	b.n	8000aec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <__NVIC_SetPriority+0xd8>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	0019      	movs	r1, r3
 8000a90:	230f      	movs	r3, #15
 8000a92:	400b      	ands	r3, r1
 8000a94:	3b08      	subs	r3, #8
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	3306      	adds	r3, #6
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	18d3      	adds	r3, r2, r3
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	@ 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	@ 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	4809      	ldr	r0, [pc, #36]	@ (8000af8 <__NVIC_SetPriority+0xd8>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	001c      	movs	r4, r3
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4023      	ands	r3, r4
 8000adc:	3b08      	subs	r3, #8
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	3306      	adds	r3, #6
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	18c3      	adds	r3, r0, r3
 8000ae8:	3304      	adds	r3, #4
 8000aea:	601a      	str	r2, [r3, #0]
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b003      	add	sp, #12
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	1e5a      	subs	r2, r3, #1
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	045b      	lsls	r3, r3, #17
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d301      	bcc.n	8000b14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b10:	2301      	movs	r3, #1
 8000b12:	e010      	b.n	8000b36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <SysTick_Config+0x44>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	3a01      	subs	r2, #1
 8000b1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	425b      	negs	r3, r3
 8000b20:	2103      	movs	r1, #3
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff ff7c 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <SysTick_Config+0x44>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <SysTick_Config+0x44>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	210f      	movs	r1, #15
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	1c02      	adds	r2, r0, #0
 8000b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	0011      	movs	r1, r2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b004      	add	sp, #16
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	0002      	movs	r2, r0
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ff33 	bl	80009ec <__NVIC_EnableIRQ>
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ffaf 	bl	8000afc <SysTick_Config>
 8000b9e:	0003      	movs	r3, r0
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e036      	b.n	8000c2c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2221      	movs	r2, #33	@ 0x21
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_DMA_Init+0x8c>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f9c4 	bl	8000f9c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2221      	movs	r2, #33	@ 0x21
 8000c1e:	2101      	movs	r1, #1
 8000c20:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2220      	movs	r2, #32
 8000c26:	2100      	movs	r1, #0
 8000c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b004      	add	sp, #16
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	ffffc00f 	.word	0xffffc00f

08000c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c46:	2317      	movs	r3, #23
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2220      	movs	r2, #32
 8000c52:	5c9b      	ldrb	r3, [r3, r2]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d101      	bne.n	8000c5c <HAL_DMA_Start_IT+0x24>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e04f      	b.n	8000cfc <HAL_DMA_Start_IT+0xc4>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2220      	movs	r2, #32
 8000c60:	2101      	movs	r1, #1
 8000c62:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2221      	movs	r2, #33	@ 0x21
 8000c68:	5c9b      	ldrb	r3, [r3, r2]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d13a      	bne.n	8000ce6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2221      	movs	r2, #33	@ 0x21
 8000c74:	2102      	movs	r1, #2
 8000c76:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	438a      	bics	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f000 f954 	bl	8000f42 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d008      	beq.n	8000cb4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	210e      	movs	r1, #14
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	e00f      	b.n	8000cd4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	210a      	movs	r1, #10
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2104      	movs	r1, #4
 8000cd0:	438a      	bics	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	e007      	b.n	8000cf6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2220      	movs	r2, #32
 8000cea:	2100      	movs	r1, #0
 8000cec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cee:	2317      	movs	r3, #23
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000cf6:	2317      	movs	r3, #23
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	781b      	ldrb	r3, [r3, #0]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b006      	add	sp, #24
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2221      	movs	r2, #33	@ 0x21
 8000d10:	5c9b      	ldrb	r3, [r3, r2]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d008      	beq.n	8000d2a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2220      	movs	r2, #32
 8000d22:	2100      	movs	r1, #0
 8000d24:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e020      	b.n	8000d6c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	210e      	movs	r1, #14
 8000d36:	438a      	bics	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	438a      	bics	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d52:	2101      	movs	r1, #1
 8000d54:	4091      	lsls	r1, r2
 8000d56:	000a      	movs	r2, r1
 8000d58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2221      	movs	r2, #33	@ 0x21
 8000d5e:	2101      	movs	r1, #1
 8000d60:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2220      	movs	r2, #32
 8000d66:	2100      	movs	r1, #0
 8000d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2221      	movs	r2, #33	@ 0x21
 8000d88:	5c9b      	ldrb	r3, [r3, r2]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d006      	beq.n	8000d9e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2204      	movs	r2, #4
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	e028      	b.n	8000df0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	210e      	movs	r1, #14
 8000daa:	438a      	bics	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	438a      	bics	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2221      	movs	r2, #33	@ 0x21
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2220      	movs	r2, #32
 8000dda:	2100      	movs	r1, #0
 8000ddc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	0010      	movs	r0, r2
 8000dee:	4798      	blx	r3
    }
  }
  return status;
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	781b      	ldrb	r3, [r3, #0]
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b004      	add	sp, #16
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4013      	ands	r3, r2
 8000e24:	d024      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x72>
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2204      	movs	r2, #4
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d020      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2220      	movs	r2, #32
 8000e36:	4013      	ands	r3, r2
 8000e38:	d107      	bne.n	8000e4a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2104      	movs	r1, #4
 8000e46:	438a      	bics	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e52:	2104      	movs	r1, #4
 8000e54:	4091      	lsls	r1, r2
 8000e56:	000a      	movs	r2, r1
 8000e58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d100      	bne.n	8000e64 <HAL_DMA_IRQHandler+0x66>
 8000e62:	e06a      	b.n	8000f3a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	0010      	movs	r0, r2
 8000e6c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000e6e:	e064      	b.n	8000f3a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	2202      	movs	r2, #2
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d02b      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0xda>
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2202      	movs	r2, #2
 8000e84:	4013      	ands	r3, r2
 8000e86:	d027      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2220      	movs	r2, #32
 8000e90:	4013      	ands	r3, r2
 8000e92:	d10b      	bne.n	8000eac <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	210a      	movs	r1, #10
 8000ea0:	438a      	bics	r2, r1
 8000ea2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2221      	movs	r2, #33	@ 0x21
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4091      	lsls	r1, r2
 8000eb8:	000a      	movs	r2, r1
 8000eba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d036      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	0010      	movs	r0, r2
 8000ed4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000ed6:	e030      	b.n	8000f3a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	2208      	movs	r2, #8
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d028      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x13c>
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2208      	movs	r2, #8
 8000eec:	4013      	ands	r3, r2
 8000eee:	d024      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	210e      	movs	r1, #14
 8000efc:	438a      	bics	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4091      	lsls	r1, r2
 8000f0c:	000a      	movs	r2, r1
 8000f0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2221      	movs	r2, #33	@ 0x21
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	0010      	movs	r0, r2
 8000f36:	4798      	blx	r3
    }
  }
}
 8000f38:	e7ff      	b.n	8000f3a <HAL_DMA_IRQHandler+0x13c>
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4091      	lsls	r1, r2
 8000f5c:	000a      	movs	r2, r1
 8000f5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	d108      	bne.n	8000f82 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f80:	e007      	b.n	8000f92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	60da      	str	r2, [r3, #12]
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <DMA_CalcBaseAndBitshift+0x30>)
 8000faa:	4694      	mov	ip, r2
 8000fac:	4463      	add	r3, ip
 8000fae:	2114      	movs	r1, #20
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff f8a9 	bl	8000108 <__udivsi3>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	009a      	lsls	r2, r3, #2
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a03      	ldr	r2, [pc, #12]	@ (8000fd0 <DMA_CalcBaseAndBitshift+0x34>)
 8000fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	bffdfff8 	.word	0xbffdfff8
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	e14f      	b.n	8001284 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4091      	lsls	r1, r2
 8000fee:	000a      	movs	r2, r1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d100      	bne.n	8000ffc <HAL_GPIO_Init+0x28>
 8000ffa:	e140      	b.n	800127e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2203      	movs	r2, #3
 8001002:	4013      	ands	r3, r2
 8001004:	2b01      	cmp	r3, #1
 8001006:	d005      	beq.n	8001014 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001010:	2b02      	cmp	r3, #2
 8001012:	d130      	bne.n	8001076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	43da      	mvns	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104a:	2201      	movs	r2, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	2201      	movs	r2, #1
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2203      	movs	r2, #3
 800107c:	4013      	ands	r3, r2
 800107e:	2b03      	cmp	r3, #3
 8001080:	d017      	beq.n	80010b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	43da      	mvns	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2203      	movs	r2, #3
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d123      	bne.n	8001106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	58d3      	ldr	r3, [r2, r3]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2207      	movs	r2, #7
 80010d0:	4013      	ands	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2107      	movs	r1, #7
 80010ea:	400b      	ands	r3, r1
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	6939      	ldr	r1, [r7, #16]
 8001104:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2203      	movs	r2, #3
 8001124:	401a      	ands	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	409a      	lsls	r2, r3
 800112c:	0013      	movs	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	23c0      	movs	r3, #192	@ 0xc0
 8001140:	029b      	lsls	r3, r3, #10
 8001142:	4013      	ands	r3, r2
 8001144:	d100      	bne.n	8001148 <HAL_GPIO_Init+0x174>
 8001146:	e09a      	b.n	800127e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001148:	4b54      	ldr	r3, [pc, #336]	@ (800129c <HAL_GPIO_Init+0x2c8>)
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	4b53      	ldr	r3, [pc, #332]	@ (800129c <HAL_GPIO_Init+0x2c8>)
 800114e:	2101      	movs	r1, #1
 8001150:	430a      	orrs	r2, r1
 8001152:	619a      	str	r2, [r3, #24]
 8001154:	4b51      	ldr	r3, [pc, #324]	@ (800129c <HAL_GPIO_Init+0x2c8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001160:	4a4f      	ldr	r2, [pc, #316]	@ (80012a0 <HAL_GPIO_Init+0x2cc>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	589b      	ldr	r3, [r3, r2]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2203      	movs	r2, #3
 8001172:	4013      	ands	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	2390      	movs	r3, #144	@ 0x90
 8001188:	05db      	lsls	r3, r3, #23
 800118a:	429a      	cmp	r2, r3
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0x1e2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a44      	ldr	r2, [pc, #272]	@ (80012a4 <HAL_GPIO_Init+0x2d0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00d      	beq.n	80011b2 <HAL_GPIO_Init+0x1de>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a43      	ldr	r2, [pc, #268]	@ (80012a8 <HAL_GPIO_Init+0x2d4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x1da>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a42      	ldr	r2, [pc, #264]	@ (80012ac <HAL_GPIO_Init+0x2d8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_GPIO_Init+0x1d6>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x1e4>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x1e4>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x1e4>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x1e4>
 80011b6:	2300      	movs	r3, #0
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	2103      	movs	r1, #3
 80011bc:	400a      	ands	r2, r1
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	@ (80012a0 <HAL_GPIO_Init+0x2cc>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b36      	ldr	r3, [pc, #216]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	035b      	lsls	r3, r3, #13
 80011ee:	4013      	ands	r3, r2
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011fa:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001200:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43da      	mvns	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	039b      	lsls	r3, r3, #14
 8001218:	4013      	ands	r3, r2
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	029b      	lsls	r3, r3, #10
 8001242:	4013      	ands	r3, r2
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43da      	mvns	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	025b      	lsls	r3, r3, #9
 800126c:	4013      	ands	r3, r2
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	40da      	lsrs	r2, r3
 800128c:	1e13      	subs	r3, r2, #0
 800128e:	d000      	beq.n	8001292 <HAL_GPIO_Init+0x2be>
 8001290:	e6a8      	b.n	8000fe4 <HAL_GPIO_Init+0x10>
  } 
}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48000800 	.word	0x48000800
 80012ac:	48000c00 	.word	0x48000c00
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	0008      	movs	r0, r1
 80012be:	0011      	movs	r1, r2
 80012c0:	1cbb      	adds	r3, r7, #2
 80012c2:	1c02      	adds	r2, r0, #0
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	1c7b      	adds	r3, r7, #1
 80012c8:	1c0a      	adds	r2, r1, #0
 80012ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012cc:	1c7b      	adds	r3, r7, #1
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d4:	1cbb      	adds	r3, r7, #2
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012de:	1cbb      	adds	r3, r7, #2
 80012e0:	881a      	ldrh	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e301      	b.n	8001906 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2201      	movs	r2, #1
 8001308:	4013      	ands	r3, r2
 800130a:	d100      	bne.n	800130e <HAL_RCC_OscConfig+0x1e>
 800130c:	e08d      	b.n	800142a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800130e:	4bc3      	ldr	r3, [pc, #780]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	220c      	movs	r2, #12
 8001314:	4013      	ands	r3, r2
 8001316:	2b04      	cmp	r3, #4
 8001318:	d00e      	beq.n	8001338 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800131a:	4bc0      	ldr	r3, [pc, #768]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	220c      	movs	r2, #12
 8001320:	4013      	ands	r3, r2
 8001322:	2b08      	cmp	r3, #8
 8001324:	d116      	bne.n	8001354 <HAL_RCC_OscConfig+0x64>
 8001326:	4bbd      	ldr	r3, [pc, #756]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	025b      	lsls	r3, r3, #9
 800132e:	401a      	ands	r2, r3
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	025b      	lsls	r3, r3, #9
 8001334:	429a      	cmp	r2, r3
 8001336:	d10d      	bne.n	8001354 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4bb8      	ldr	r3, [pc, #736]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x56>
 8001344:	e070      	b.n	8001428 <HAL_RCC_OscConfig+0x138>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d000      	beq.n	8001350 <HAL_RCC_OscConfig+0x60>
 800134e:	e06b      	b.n	8001428 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e2d8      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d107      	bne.n	800136c <HAL_RCC_OscConfig+0x7c>
 800135c:	4baf      	ldr	r3, [pc, #700]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4bae      	ldr	r3, [pc, #696]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	0249      	lsls	r1, r1, #9
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e02f      	b.n	80013cc <HAL_RCC_OscConfig+0xdc>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10c      	bne.n	800138e <HAL_RCC_OscConfig+0x9e>
 8001374:	4ba9      	ldr	r3, [pc, #676]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4ba8      	ldr	r3, [pc, #672]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800137a:	49a9      	ldr	r1, [pc, #676]	@ (8001620 <HAL_RCC_OscConfig+0x330>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	4ba6      	ldr	r3, [pc, #664]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4ba5      	ldr	r3, [pc, #660]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001386:	49a7      	ldr	r1, [pc, #668]	@ (8001624 <HAL_RCC_OscConfig+0x334>)
 8001388:	400a      	ands	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e01e      	b.n	80013cc <HAL_RCC_OscConfig+0xdc>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10e      	bne.n	80013b4 <HAL_RCC_OscConfig+0xc4>
 8001396:	4ba1      	ldr	r3, [pc, #644]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4ba0      	ldr	r3, [pc, #640]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800139c:	2180      	movs	r1, #128	@ 0x80
 800139e:	02c9      	lsls	r1, r1, #11
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4b9d      	ldr	r3, [pc, #628]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b9c      	ldr	r3, [pc, #624]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80013aa:	2180      	movs	r1, #128	@ 0x80
 80013ac:	0249      	lsls	r1, r1, #9
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0xdc>
 80013b4:	4b99      	ldr	r3, [pc, #612]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b98      	ldr	r3, [pc, #608]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80013ba:	4999      	ldr	r1, [pc, #612]	@ (8001620 <HAL_RCC_OscConfig+0x330>)
 80013bc:	400a      	ands	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	4b96      	ldr	r3, [pc, #600]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b95      	ldr	r3, [pc, #596]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80013c6:	4997      	ldr	r1, [pc, #604]	@ (8001624 <HAL_RCC_OscConfig+0x334>)
 80013c8:	400a      	ands	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d014      	beq.n	80013fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb00 	bl	80009d8 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fafb 	bl	80009d8 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	@ 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e28a      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f0:	4b8a      	ldr	r3, [pc, #552]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	029b      	lsls	r3, r3, #10
 80013f8:	4013      	ands	r3, r2
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0xee>
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff faeb 	bl	80009d8 <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fae6 	bl	80009d8 <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e275      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	4b80      	ldr	r3, [pc, #512]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	029b      	lsls	r3, r3, #10
 8001422:	4013      	ands	r3, r2
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x118>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d100      	bne.n	8001436 <HAL_RCC_OscConfig+0x146>
 8001434:	e069      	b.n	800150a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001436:	4b79      	ldr	r3, [pc, #484]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	220c      	movs	r2, #12
 800143c:	4013      	ands	r3, r2
 800143e:	d00b      	beq.n	8001458 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001440:	4b76      	ldr	r3, [pc, #472]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	220c      	movs	r2, #12
 8001446:	4013      	ands	r3, r2
 8001448:	2b08      	cmp	r3, #8
 800144a:	d11c      	bne.n	8001486 <HAL_RCC_OscConfig+0x196>
 800144c:	4b73      	ldr	r3, [pc, #460]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	4013      	ands	r3, r2
 8001456:	d116      	bne.n	8001486 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001458:	4b70      	ldr	r3, [pc, #448]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2202      	movs	r2, #2
 800145e:	4013      	ands	r3, r2
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x17e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e24b      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b6b      	ldr	r3, [pc, #428]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	22f8      	movs	r2, #248	@ 0xf8
 8001474:	4393      	bics	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	00da      	lsls	r2, r3, #3
 800147e:	4b67      	ldr	r3, [pc, #412]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001484:	e041      	b.n	800150a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d024      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148e:	4b63      	ldr	r3, [pc, #396]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b62      	ldr	r3, [pc, #392]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001494:	2101      	movs	r1, #1
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fa9d 	bl	80009d8 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff fa98 	bl	80009d8 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e227      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b6:	4b59      	ldr	r3, [pc, #356]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2202      	movs	r2, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	d0f1      	beq.n	80014a4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b56      	ldr	r3, [pc, #344]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22f8      	movs	r2, #248	@ 0xf8
 80014c6:	4393      	bics	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	00da      	lsls	r2, r3, #3
 80014d0:	4b52      	ldr	r3, [pc, #328]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e018      	b.n	800150a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d8:	4b50      	ldr	r3, [pc, #320]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b4f      	ldr	r3, [pc, #316]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80014de:	2101      	movs	r1, #1
 80014e0:	438a      	bics	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fa78 	bl	80009d8 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fa73 	bl	80009d8 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e202      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001500:	4b46      	ldr	r3, [pc, #280]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d1f1      	bne.n	80014ee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2208      	movs	r2, #8
 8001510:	4013      	ands	r3, r2
 8001512:	d036      	beq.n	8001582 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d019      	beq.n	8001550 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151c:	4b3f      	ldr	r3, [pc, #252]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800151e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001520:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001522:	2101      	movs	r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fa56 	bl	80009d8 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff fa51 	bl	80009d8 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1e0      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001544:	4b35      	ldr	r3, [pc, #212]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d0f1      	beq.n	8001532 <HAL_RCC_OscConfig+0x242>
 800154e:	e018      	b.n	8001582 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b32      	ldr	r3, [pc, #200]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001554:	4b31      	ldr	r3, [pc, #196]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff fa3c 	bl	80009d8 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fa37 	bl	80009d8 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1c6      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001578:	4b28      	ldr	r3, [pc, #160]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d1f1      	bne.n	8001566 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2204      	movs	r2, #4
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x29e>
 800158c:	e0b4      	b.n	80016f8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	201f      	movs	r0, #31
 8001590:	183b      	adds	r3, r7, r0
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001596:	4b21      	ldr	r3, [pc, #132]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	2380      	movs	r3, #128	@ 0x80
 800159c:	055b      	lsls	r3, r3, #21
 800159e:	4013      	ands	r3, r2
 80015a0:	d110      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80015a8:	2180      	movs	r1, #128	@ 0x80
 80015aa:	0549      	lsls	r1, r1, #21
 80015ac:	430a      	orrs	r2, r1
 80015ae:	61da      	str	r2, [r3, #28]
 80015b0:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 80015b2:	69da      	ldr	r2, [r3, #28]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	055b      	lsls	r3, r3, #21
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015be:	183b      	adds	r3, r7, r0
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_RCC_OscConfig+0x338>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4013      	ands	r3, r2
 80015ce:	d11a      	bne.n	8001606 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d0:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_RCC_OscConfig+0x338>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <HAL_RCC_OscConfig+0x338>)
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	0049      	lsls	r1, r1, #1
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff f9fb 	bl	80009d8 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e8:	f7ff f9f6 	bl	80009d8 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	@ 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e185      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <HAL_RCC_OscConfig+0x338>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	@ 0x80
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4013      	ands	r3, r2
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d10e      	bne.n	800162c <HAL_RCC_OscConfig+0x33c>
 800160e:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001610:	6a1a      	ldr	r2, [r3, #32]
 8001612:	4b02      	ldr	r3, [pc, #8]	@ (800161c <HAL_RCC_OscConfig+0x32c>)
 8001614:	2101      	movs	r1, #1
 8001616:	430a      	orrs	r2, r1
 8001618:	621a      	str	r2, [r3, #32]
 800161a:	e035      	b.n	8001688 <HAL_RCC_OscConfig+0x398>
 800161c:	40021000 	.word	0x40021000
 8001620:	fffeffff 	.word	0xfffeffff
 8001624:	fffbffff 	.word	0xfffbffff
 8001628:	40007000 	.word	0x40007000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x35e>
 8001634:	4bb6      	ldr	r3, [pc, #728]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	4bb5      	ldr	r3, [pc, #724]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800163a:	2101      	movs	r1, #1
 800163c:	438a      	bics	r2, r1
 800163e:	621a      	str	r2, [r3, #32]
 8001640:	4bb3      	ldr	r3, [pc, #716]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001642:	6a1a      	ldr	r2, [r3, #32]
 8001644:	4bb2      	ldr	r3, [pc, #712]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001646:	2104      	movs	r1, #4
 8001648:	438a      	bics	r2, r1
 800164a:	621a      	str	r2, [r3, #32]
 800164c:	e01c      	b.n	8001688 <HAL_RCC_OscConfig+0x398>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x380>
 8001656:	4bae      	ldr	r3, [pc, #696]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	4bad      	ldr	r3, [pc, #692]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800165c:	2104      	movs	r1, #4
 800165e:	430a      	orrs	r2, r1
 8001660:	621a      	str	r2, [r3, #32]
 8001662:	4bab      	ldr	r3, [pc, #684]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	4baa      	ldr	r3, [pc, #680]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001668:	2101      	movs	r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	621a      	str	r2, [r3, #32]
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0x398>
 8001670:	4ba7      	ldr	r3, [pc, #668]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	4ba6      	ldr	r3, [pc, #664]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001676:	2101      	movs	r1, #1
 8001678:	438a      	bics	r2, r1
 800167a:	621a      	str	r2, [r3, #32]
 800167c:	4ba4      	ldr	r3, [pc, #656]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800167e:	6a1a      	ldr	r2, [r3, #32]
 8001680:	4ba3      	ldr	r3, [pc, #652]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001682:	2104      	movs	r1, #4
 8001684:	438a      	bics	r2, r1
 8001686:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d014      	beq.n	80016ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff f9a2 	bl	80009d8 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	e009      	b.n	80016ae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169a:	f7ff f99d 	bl	80009d8 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4a9b      	ldr	r2, [pc, #620]	@ (8001914 <HAL_RCC_OscConfig+0x624>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e12b      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ae:	4b98      	ldr	r3, [pc, #608]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x3aa>
 80016b8:	e013      	b.n	80016e2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff f98d 	bl	80009d8 <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c2:	e009      	b.n	80016d8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff f988 	bl	80009d8 <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	4a91      	ldr	r2, [pc, #580]	@ (8001914 <HAL_RCC_OscConfig+0x624>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e116      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	2202      	movs	r2, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016e2:	231f      	movs	r3, #31
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	4b88      	ldr	r3, [pc, #544]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80016ee:	69da      	ldr	r2, [r3, #28]
 80016f0:	4b87      	ldr	r3, [pc, #540]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80016f2:	4989      	ldr	r1, [pc, #548]	@ (8001918 <HAL_RCC_OscConfig+0x628>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2210      	movs	r2, #16
 80016fe:	4013      	ands	r3, r2
 8001700:	d063      	beq.n	80017ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d12a      	bne.n	8001760 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800170a:	4b81      	ldr	r3, [pc, #516]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800170c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800170e:	4b80      	ldr	r3, [pc, #512]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001710:	2104      	movs	r1, #4
 8001712:	430a      	orrs	r2, r1
 8001714:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001716:	4b7e      	ldr	r3, [pc, #504]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800171a:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800171c:	2101      	movs	r1, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff f959 	bl	80009d8 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800172c:	f7ff f954 	bl	80009d8 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0e3      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800173e:	4b74      	ldr	r3, [pc, #464]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d0f1      	beq.n	800172c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001748:	4b71      	ldr	r3, [pc, #452]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800174a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174c:	22f8      	movs	r2, #248	@ 0xf8
 800174e:	4393      	bics	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	00da      	lsls	r2, r3, #3
 8001758:	4b6d      	ldr	r3, [pc, #436]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800175a:	430a      	orrs	r2, r1
 800175c:	635a      	str	r2, [r3, #52]	@ 0x34
 800175e:	e034      	b.n	80017ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	3305      	adds	r3, #5
 8001766:	d111      	bne.n	800178c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001768:	4b69      	ldr	r3, [pc, #420]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800176a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800176c:	4b68      	ldr	r3, [pc, #416]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800176e:	2104      	movs	r1, #4
 8001770:	438a      	bics	r2, r1
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001774:	4b66      	ldr	r3, [pc, #408]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001778:	22f8      	movs	r2, #248	@ 0xf8
 800177a:	4393      	bics	r3, r2
 800177c:	0019      	movs	r1, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	00da      	lsls	r2, r3, #3
 8001784:	4b62      	ldr	r3, [pc, #392]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001786:	430a      	orrs	r2, r1
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
 800178a:	e01e      	b.n	80017ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800178c:	4b60      	ldr	r3, [pc, #384]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800178e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001790:	4b5f      	ldr	r3, [pc, #380]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001792:	2104      	movs	r1, #4
 8001794:	430a      	orrs	r2, r1
 8001796:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001798:	4b5d      	ldr	r3, [pc, #372]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800179a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800179c:	4b5c      	ldr	r3, [pc, #368]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f918 	bl	80009d8 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017ae:	f7ff f913 	bl	80009d8 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0a2      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017c0:	4b53      	ldr	r3, [pc, #332]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80017c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f1      	bne.n	80017ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d100      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4e4>
 80017d2:	e097      	b.n	8001904 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	220c      	movs	r2, #12
 80017da:	4013      	ands	r3, r2
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d100      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4f2>
 80017e0:	e06b      	b.n	80018ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d14c      	bne.n	8001884 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b48      	ldr	r3, [pc, #288]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80017f0:	494a      	ldr	r1, [pc, #296]	@ (800191c <HAL_RCC_OscConfig+0x62c>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff f8ef 	bl	80009d8 <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff f8ea 	bl	80009d8 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e079      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001812:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	049b      	lsls	r3, r3, #18
 800181a:	4013      	ands	r3, r2
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181e:	4b3c      	ldr	r3, [pc, #240]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001822:	220f      	movs	r2, #15
 8001824:	4393      	bics	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182c:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800182e:	430a      	orrs	r2, r1
 8001830:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001832:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a3a      	ldr	r2, [pc, #232]	@ (8001920 <HAL_RCC_OscConfig+0x630>)
 8001838:	4013      	ands	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	431a      	orrs	r2, r3
 8001846:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b2f      	ldr	r3, [pc, #188]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001852:	2180      	movs	r1, #128	@ 0x80
 8001854:	0449      	lsls	r1, r1, #17
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff f8bd 	bl	80009d8 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f8b8 	bl	80009d8 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e047      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001876:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	049b      	lsls	r3, r3, #18
 800187e:	4013      	ands	r3, r2
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x574>
 8001882:	e03f      	b.n	8001904 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 800188a:	4924      	ldr	r1, [pc, #144]	@ (800191c <HAL_RCC_OscConfig+0x62c>)
 800188c:	400a      	ands	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff f8a2 	bl	80009d8 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff f89d 	bl	80009d8 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e02c      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	049b      	lsls	r3, r3, #18
 80018b4:	4013      	ands	r3, r2
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x5aa>
 80018b8:	e024      	b.n	8001904 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e01f      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018cc:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_RCC_OscConfig+0x620>)
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	401a      	ands	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	429a      	cmp	r2, r3
 80018e0:	d10e      	bne.n	8001900 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	220f      	movs	r2, #15
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	23f0      	movs	r3, #240	@ 0xf0
 80018f4:	039b      	lsls	r3, r3, #14
 80018f6:	401a      	ands	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b008      	add	sp, #32
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	40021000 	.word	0x40021000
 8001914:	00001388 	.word	0x00001388
 8001918:	efffffff 	.word	0xefffffff
 800191c:	feffffff 	.word	0xfeffffff
 8001920:	ffc2ffff 	.word	0xffc2ffff

08001924 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0b3      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa8 <HAL_RCC_ClockConfig+0x184>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2201      	movs	r2, #1
 800193e:	4013      	ands	r3, r2
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d911      	bls.n	800196a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b58      	ldr	r3, [pc, #352]	@ (8001aa8 <HAL_RCC_ClockConfig+0x184>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	4393      	bics	r3, r2
 800194e:	0019      	movs	r1, r3
 8001950:	4b55      	ldr	r3, [pc, #340]	@ (8001aa8 <HAL_RCC_ClockConfig+0x184>)
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_RCC_ClockConfig+0x184>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d001      	beq.n	800196a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e09a      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2202      	movs	r2, #2
 8001970:	4013      	ands	r3, r2
 8001972:	d015      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2204      	movs	r2, #4
 800197a:	4013      	ands	r3, r2
 800197c:	d006      	beq.n	800198c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800197e:	4b4b      	ldr	r3, [pc, #300]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4b4a      	ldr	r3, [pc, #296]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 8001984:	21e0      	movs	r1, #224	@ 0xe0
 8001986:	00c9      	lsls	r1, r1, #3
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b47      	ldr	r3, [pc, #284]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	22f0      	movs	r2, #240	@ 0xf0
 8001992:	4393      	bics	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	4b44      	ldr	r3, [pc, #272]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	d040      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	4b3e      	ldr	r3, [pc, #248]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d114      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06e      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	049b      	lsls	r3, r3, #18
 80019d2:	4013      	ands	r3, r2
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e062      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b34      	ldr	r3, [pc, #208]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e05b      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e8:	4b30      	ldr	r3, [pc, #192]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	4393      	bics	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7fe ffec 	bl	80009d8 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f7fe ffe7 	bl	80009d8 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a27      	ldr	r2, [pc, #156]	@ (8001ab0 <HAL_RCC_ClockConfig+0x18c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e042      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	401a      	ands	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1ec      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <HAL_RCC_ClockConfig+0x184>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d211      	bcs.n	8001a5e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <HAL_RCC_ClockConfig+0x184>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4393      	bics	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <HAL_RCC_ClockConfig+0x184>)
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_RCC_ClockConfig+0x184>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e020      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	d009      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_RCC_ClockConfig+0x190>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a7c:	f000 f820 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a80:	0001      	movs	r1, r0
 8001a82:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_RCC_ClockConfig+0x188>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	220f      	movs	r2, #15
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <HAL_RCC_ClockConfig+0x194>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	000a      	movs	r2, r1
 8001a92:	40da      	lsrs	r2, r3
 8001a94:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_RCC_ClockConfig+0x198>)
 8001a96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f7fe ff57 	bl	800094c <HAL_InitTick>
  
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	00001388 	.word	0x00001388
 8001ab4:	fffff8ff 	.word	0xfffff8ff
 8001ab8:	08003164 	.word	0x08003164
 8001abc:	20000000 	.word	0x20000000

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ada:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d002      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x30>
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d003      	beq.n	8001af6 <HAL_RCC_GetSysClockFreq+0x36>
 8001aee:	e02c      	b.n	8001b4a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001af2:	613b      	str	r3, [r7, #16]
      break;
 8001af4:	e02c      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	0c9b      	lsrs	r3, r3, #18
 8001afa:	220f      	movs	r2, #15
 8001afc:	4013      	ands	r3, r2
 8001afe:	4a19      	ldr	r2, [pc, #100]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b00:	5cd3      	ldrb	r3, [r2, r3]
 8001b02:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b04:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	220f      	movs	r2, #15
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	4a16      	ldr	r2, [pc, #88]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	025b      	lsls	r3, r3, #9
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	4810      	ldr	r0, [pc, #64]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b20:	f7fe faf2 	bl	8000108 <__udivsi3>
 8001b24:	0003      	movs	r3, r0
 8001b26:	001a      	movs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4353      	muls	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e009      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	000a      	movs	r2, r1
 8001b34:	0152      	lsls	r2, r2, #5
 8001b36:	1a52      	subs	r2, r2, r1
 8001b38:	0193      	lsls	r3, r2, #6
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	185b      	adds	r3, r3, r1
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
      break;
 8001b48:	e002      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b4a:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b4c:	613b      	str	r3, [r7, #16]
      break;
 8001b4e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b50:	693b      	ldr	r3, [r7, #16]
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b006      	add	sp, #24
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	007a1200 	.word	0x007a1200
 8001b64:	0800317c 	.word	0x0800317c
 8001b68:	0800318c 	.word	0x0800318c

08001b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b70:	4b02      	ldr	r3, [pc, #8]	@ (8001b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b84:	f7ff fff2 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001b88:	0001      	movs	r1, r0
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	2207      	movs	r2, #7
 8001b92:	4013      	ands	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b96:	5cd3      	ldrb	r3, [r2, r3]
 8001b98:	40d9      	lsrs	r1, r3
 8001b9a:	000b      	movs	r3, r1
}    
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08003174 	.word	0x08003174

08001bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d100      	bne.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bc8:	e08e      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bca:	2017      	movs	r0, #23
 8001bcc:	183b      	adds	r3, r7, r0
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	055b      	lsls	r3, r3, #21
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d110      	bne.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b5c      	ldr	r3, [pc, #368]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001be4:	2180      	movs	r1, #128	@ 0x80
 8001be6:	0549      	lsls	r1, r1, #21
 8001be8:	430a      	orrs	r2, r1
 8001bea:	61da      	str	r2, [r3, #28]
 8001bec:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	055b      	lsls	r3, r3, #21
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	4b54      	ldr	r3, [pc, #336]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d11a      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0c:	4b51      	ldr	r3, [pc, #324]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b50      	ldr	r3, [pc, #320]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c12:	2180      	movs	r1, #128	@ 0x80
 8001c14:	0049      	lsls	r1, r1, #1
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1a:	f7fe fedd 	bl	80009d8 <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	e008      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c24:	f7fe fed8 	bl	80009d8 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e087      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b47      	ldr	r3, [pc, #284]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c42:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	23c0      	movs	r3, #192	@ 0xc0
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d034      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	23c0      	movs	r3, #192	@ 0xc0
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d02c      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c64:	4b3a      	ldr	r3, [pc, #232]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a3b      	ldr	r2, [pc, #236]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c6e:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c70:	6a1a      	ldr	r2, [r3, #32]
 8001c72:	4b37      	ldr	r3, [pc, #220]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	0249      	lsls	r1, r1, #9
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c7c:	4b34      	ldr	r3, [pc, #208]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c82:	4936      	ldr	r1, [pc, #216]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c88:	4b31      	ldr	r3, [pc, #196]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7fe fe9f 	bl	80009d8 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9e:	e009      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7fe fe9a 	bl	80009d8 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a2d      	ldr	r2, [pc, #180]	@ (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e048      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a25      	ldr	r2, [pc, #148]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cd2:	2317      	movs	r3, #23
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ce2:	4920      	ldr	r1, [pc, #128]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d14:	2210      	movs	r2, #16
 8001d16:	4393      	bics	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d30:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d34:	2240      	movs	r2, #64	@ 0x40
 8001d36:	4393      	bics	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b006      	add	sp, #24
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
 8001d58:	fffffcff 	.word	0xfffffcff
 8001d5c:	fffeffff 	.word	0xfffeffff
 8001d60:	00001388 	.word	0x00001388
 8001d64:	efffffff 	.word	0xefffffff

08001d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e044      	b.n	8001e04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2278      	movs	r2, #120	@ 0x78
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7fe fce7 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2224      	movs	r2, #36	@ 0x24
 8001d96:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	438a      	bics	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 fd66 	bl	8002884 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f000 fc22 	bl	8002604 <UART_SetConfig>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e01c      	b.n	8001e04 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	490d      	ldr	r1, [pc, #52]	@ (8001e0c <HAL_UART_Init+0xa4>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	212a      	movs	r1, #42	@ 0x2a
 8001de6:	438a      	bics	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 fdf5 	bl	80029ec <UART_CheckIdleState>
 8001e02:	0003      	movs	r3, r0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b002      	add	sp, #8
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	ffffb7ff 	.word	0xffffb7ff

08001e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	1dbb      	adds	r3, r7, #6
 8001e1e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d000      	beq.n	8001e2a <HAL_UART_Transmit+0x1a>
 8001e28:	e08c      	b.n	8001f44 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_UART_Transmit+0x28>
 8001e30:	1dbb      	adds	r3, r7, #6
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e084      	b.n	8001f46 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	015b      	lsls	r3, r3, #5
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d109      	bne.n	8001e5c <HAL_UART_Transmit+0x4c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2201      	movs	r2, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e074      	b.n	8001f46 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2284      	movs	r2, #132	@ 0x84
 8001e60:	2100      	movs	r1, #0
 8001e62:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2221      	movs	r2, #33	@ 0x21
 8001e68:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e6a:	f7fe fdb5 	bl	80009d8 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1dba      	adds	r2, r7, #6
 8001e76:	2150      	movs	r1, #80	@ 0x50
 8001e78:	8812      	ldrh	r2, [r2, #0]
 8001e7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1dba      	adds	r2, r7, #6
 8001e80:	2152      	movs	r1, #82	@ 0x52
 8001e82:	8812      	ldrh	r2, [r2, #0]
 8001e84:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	015b      	lsls	r3, r3, #5
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d108      	bne.n	8001ea4 <HAL_UART_Transmit+0x94>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	e003      	b.n	8001eac <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001eac:	e02f      	b.n	8001f0e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2180      	movs	r1, #128	@ 0x80
 8001ebc:	f000 fe3e 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e03b      	b.n	8001f46 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10b      	bne.n	8001eec <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	05d2      	lsls	r2, r2, #23
 8001ede:	0dd2      	lsrs	r2, r2, #23
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	e007      	b.n	8001efc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2252      	movs	r2, #82	@ 0x52
 8001f00:	5a9b      	ldrh	r3, [r3, r2]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b299      	uxth	r1, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2252      	movs	r2, #82	@ 0x52
 8001f0c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2252      	movs	r2, #82	@ 0x52
 8001f12:	5a9b      	ldrh	r3, [r3, r2]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1c9      	bne.n	8001eae <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	0013      	movs	r3, r2
 8001f24:	2200      	movs	r2, #0
 8001f26:	2140      	movs	r1, #64	@ 0x40
 8001f28:	f000 fe08 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8001f2c:	1e03      	subs	r3, r0, #0
 8001f2e:	d004      	beq.n	8001f3a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e005      	b.n	8001f46 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b008      	add	sp, #32
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b088      	sub	sp, #32
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	1dbb      	adds	r3, r7, #6
 8001f5a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	589b      	ldr	r3, [r3, r2]
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d145      	bne.n	8001ff2 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_UART_Receive_DMA+0x26>
 8001f6c:	1dbb      	adds	r3, r7, #6
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e03d      	b.n	8001ff4 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	015b      	lsls	r3, r3, #5
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d109      	bne.n	8001f98 <HAL_UART_Receive_DMA+0x4a>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e02d      	b.n	8001ff4 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d019      	beq.n	8001fe0 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fac:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8001fb2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f383 8810 	msr	PRIMASK, r3
}
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	04c9      	lsls	r1, r1, #19
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f383 8810 	msr	PRIMASK, r3
}
 8001fde:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001fe0:	1dbb      	adds	r3, r7, #6
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 fe17 	bl	8002c1c <UART_Start_Receive_DMA>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	e000      	b.n	8001ff4 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
  }
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b008      	add	sp, #32
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b0ab      	sub	sp, #172	@ 0xac
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	22a4      	movs	r2, #164	@ 0xa4
 800200c:	18b9      	adds	r1, r7, r2
 800200e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	20a0      	movs	r0, #160	@ 0xa0
 8002018:	1839      	adds	r1, r7, r0
 800201a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	219c      	movs	r1, #156	@ 0x9c
 8002024:	1879      	adds	r1, r7, r1
 8002026:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002028:	0011      	movs	r1, r2
 800202a:	18bb      	adds	r3, r7, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a99      	ldr	r2, [pc, #612]	@ (8002294 <HAL_UART_IRQHandler+0x298>)
 8002030:	4013      	ands	r3, r2
 8002032:	2298      	movs	r2, #152	@ 0x98
 8002034:	18bc      	adds	r4, r7, r2
 8002036:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002038:	18bb      	adds	r3, r7, r2
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d114      	bne.n	800206a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002040:	187b      	adds	r3, r7, r1
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2220      	movs	r2, #32
 8002046:	4013      	ands	r3, r2
 8002048:	d00f      	beq.n	800206a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800204a:	183b      	adds	r3, r7, r0
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2220      	movs	r2, #32
 8002050:	4013      	ands	r3, r2
 8002052:	d00a      	beq.n	800206a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002058:	2b00      	cmp	r3, #0
 800205a:	d100      	bne.n	800205e <HAL_UART_IRQHandler+0x62>
 800205c:	e29e      	b.n	800259c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	0010      	movs	r0, r2
 8002066:	4798      	blx	r3
      }
      return;
 8002068:	e298      	b.n	800259c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800206a:	2398      	movs	r3, #152	@ 0x98
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d100      	bne.n	8002076 <HAL_UART_IRQHandler+0x7a>
 8002074:	e114      	b.n	80022a0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002076:	239c      	movs	r3, #156	@ 0x9c
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	4013      	ands	r3, r2
 8002080:	d106      	bne.n	8002090 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002082:	23a0      	movs	r3, #160	@ 0xa0
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a83      	ldr	r2, [pc, #524]	@ (8002298 <HAL_UART_IRQHandler+0x29c>)
 800208a:	4013      	ands	r3, r2
 800208c:	d100      	bne.n	8002090 <HAL_UART_IRQHandler+0x94>
 800208e:	e107      	b.n	80022a0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002090:	23a4      	movs	r3, #164	@ 0xa4
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d012      	beq.n	80020c2 <HAL_UART_IRQHandler+0xc6>
 800209c:	23a0      	movs	r3, #160	@ 0xa0
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	d00b      	beq.n	80020c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2201      	movs	r2, #1
 80020b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2284      	movs	r2, #132	@ 0x84
 80020b6:	589b      	ldr	r3, [r3, r2]
 80020b8:	2201      	movs	r2, #1
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2184      	movs	r1, #132	@ 0x84
 80020c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020c2:	23a4      	movs	r3, #164	@ 0xa4
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d011      	beq.n	80020f2 <HAL_UART_IRQHandler+0xf6>
 80020ce:	239c      	movs	r3, #156	@ 0x9c
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2202      	movs	r2, #2
 80020e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2284      	movs	r2, #132	@ 0x84
 80020e6:	589b      	ldr	r3, [r3, r2]
 80020e8:	2204      	movs	r2, #4
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2184      	movs	r1, #132	@ 0x84
 80020f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020f2:	23a4      	movs	r3, #164	@ 0xa4
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2204      	movs	r2, #4
 80020fa:	4013      	ands	r3, r2
 80020fc:	d011      	beq.n	8002122 <HAL_UART_IRQHandler+0x126>
 80020fe:	239c      	movs	r3, #156	@ 0x9c
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	4013      	ands	r3, r2
 8002108:	d00b      	beq.n	8002122 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2204      	movs	r2, #4
 8002110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2284      	movs	r2, #132	@ 0x84
 8002116:	589b      	ldr	r3, [r3, r2]
 8002118:	2202      	movs	r2, #2
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2184      	movs	r1, #132	@ 0x84
 8002120:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002122:	23a4      	movs	r3, #164	@ 0xa4
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2208      	movs	r2, #8
 800212a:	4013      	ands	r3, r2
 800212c:	d017      	beq.n	800215e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800212e:	23a0      	movs	r3, #160	@ 0xa0
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2220      	movs	r2, #32
 8002136:	4013      	ands	r3, r2
 8002138:	d105      	bne.n	8002146 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800213a:	239c      	movs	r3, #156	@ 0x9c
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002144:	d00b      	beq.n	800215e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2284      	movs	r2, #132	@ 0x84
 8002152:	589b      	ldr	r3, [r3, r2]
 8002154:	2208      	movs	r2, #8
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2184      	movs	r1, #132	@ 0x84
 800215c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800215e:	23a4      	movs	r3, #164	@ 0xa4
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4013      	ands	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_UART_IRQHandler+0x198>
 800216c:	23a0      	movs	r3, #160	@ 0xa0
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	2380      	movs	r3, #128	@ 0x80
 8002174:	04db      	lsls	r3, r3, #19
 8002176:	4013      	ands	r3, r2
 8002178:	d00c      	beq.n	8002194 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2280      	movs	r2, #128	@ 0x80
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2284      	movs	r2, #132	@ 0x84
 8002188:	589b      	ldr	r3, [r3, r2]
 800218a:	2220      	movs	r2, #32
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2184      	movs	r1, #132	@ 0x84
 8002192:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2284      	movs	r2, #132	@ 0x84
 8002198:	589b      	ldr	r3, [r3, r2]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d100      	bne.n	80021a0 <HAL_UART_IRQHandler+0x1a4>
 800219e:	e1ff      	b.n	80025a0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80021a0:	23a4      	movs	r3, #164	@ 0xa4
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2220      	movs	r2, #32
 80021a8:	4013      	ands	r3, r2
 80021aa:	d00e      	beq.n	80021ca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021ac:	23a0      	movs	r3, #160	@ 0xa0
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2220      	movs	r2, #32
 80021b4:	4013      	ands	r3, r2
 80021b6:	d008      	beq.n	80021ca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	0010      	movs	r0, r2
 80021c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2284      	movs	r2, #132	@ 0x84
 80021ce:	589b      	ldr	r3, [r3, r2]
 80021d0:	2194      	movs	r1, #148	@ 0x94
 80021d2:	187a      	adds	r2, r7, r1
 80021d4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2240      	movs	r2, #64	@ 0x40
 80021de:	4013      	ands	r3, r2
 80021e0:	2b40      	cmp	r3, #64	@ 0x40
 80021e2:	d004      	beq.n	80021ee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2228      	movs	r2, #40	@ 0x28
 80021ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021ec:	d047      	beq.n	800227e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 fdd7 	bl	8002da4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2240      	movs	r2, #64	@ 0x40
 80021fe:	4013      	ands	r3, r2
 8002200:	2b40      	cmp	r3, #64	@ 0x40
 8002202:	d137      	bne.n	8002274 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002204:	f3ef 8310 	mrs	r3, PRIMASK
 8002208:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800220a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800220c:	2090      	movs	r0, #144	@ 0x90
 800220e:	183a      	adds	r2, r7, r0
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002218:	f383 8810 	msr	PRIMASK, r3
}
 800221c:	46c0      	nop			@ (mov r8, r8)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2140      	movs	r1, #64	@ 0x40
 800222a:	438a      	bics	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	183b      	adds	r3, r7, r0
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002234:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002236:	f383 8810 	msr	PRIMASK, r3
}
 800223a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002248:	4a14      	ldr	r2, [pc, #80]	@ (800229c <HAL_UART_IRQHandler+0x2a0>)
 800224a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002250:	0018      	movs	r0, r3
 8002252:	f7fe fd8f 	bl	8000d74 <HAL_DMA_Abort_IT>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d01a      	beq.n	8002290 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800225e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002264:	0018      	movs	r0, r3
 8002266:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002268:	e012      	b.n	8002290 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 f9b5 	bl	80025dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002272:	e00d      	b.n	8002290 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	0018      	movs	r0, r3
 8002278:	f000 f9b0 	bl	80025dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800227c:	e008      	b.n	8002290 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 f9ab 	bl	80025dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2284      	movs	r2, #132	@ 0x84
 800228a:	2100      	movs	r1, #0
 800228c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800228e:	e187      	b.n	80025a0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	46c0      	nop			@ (mov r8, r8)
    return;
 8002292:	e185      	b.n	80025a0 <HAL_UART_IRQHandler+0x5a4>
 8002294:	0000080f 	.word	0x0000080f
 8002298:	04000120 	.word	0x04000120
 800229c:	0800305f 	.word	0x0800305f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d000      	beq.n	80022aa <HAL_UART_IRQHandler+0x2ae>
 80022a8:	e139      	b.n	800251e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80022aa:	23a4      	movs	r3, #164	@ 0xa4
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	4013      	ands	r3, r2
 80022b4:	d100      	bne.n	80022b8 <HAL_UART_IRQHandler+0x2bc>
 80022b6:	e132      	b.n	800251e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80022b8:	23a0      	movs	r3, #160	@ 0xa0
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2210      	movs	r2, #16
 80022c0:	4013      	ands	r3, r2
 80022c2:	d100      	bne.n	80022c6 <HAL_UART_IRQHandler+0x2ca>
 80022c4:	e12b      	b.n	800251e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2210      	movs	r2, #16
 80022cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2240      	movs	r2, #64	@ 0x40
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b40      	cmp	r3, #64	@ 0x40
 80022da:	d000      	beq.n	80022de <HAL_UART_IRQHandler+0x2e2>
 80022dc:	e09f      	b.n	800241e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	217e      	movs	r1, #126	@ 0x7e
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d100      	bne.n	80022f6 <HAL_UART_IRQHandler+0x2fa>
 80022f4:	e156      	b.n	80025a4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2258      	movs	r2, #88	@ 0x58
 80022fa:	5a9b      	ldrh	r3, [r3, r2]
 80022fc:	187a      	adds	r2, r7, r1
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d300      	bcc.n	8002306 <HAL_UART_IRQHandler+0x30a>
 8002304:	e14e      	b.n	80025a4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	187a      	adds	r2, r7, r1
 800230a:	215a      	movs	r1, #90	@ 0x5a
 800230c:	8812      	ldrh	r2, [r2, #0]
 800230e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b20      	cmp	r3, #32
 8002318:	d06f      	beq.n	80023fa <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231a:	f3ef 8310 	mrs	r3, PRIMASK
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002322:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002324:	2301      	movs	r3, #1
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	f383 8810 	msr	PRIMASK, r3
}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	499e      	ldr	r1, [pc, #632]	@ (80025b4 <HAL_UART_IRQHandler+0x5b8>)
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002342:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002346:	f383 8810 	msr	PRIMASK, r3
}
 800234a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800234c:	f3ef 8310 	mrs	r3, PRIMASK
 8002350:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002354:	677b      	str	r3, [r7, #116]	@ 0x74
 8002356:	2301      	movs	r3, #1
 8002358:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235c:	f383 8810 	msr	PRIMASK, r3
}
 8002360:	46c0      	nop			@ (mov r8, r8)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	438a      	bics	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002374:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002378:	f383 8810 	msr	PRIMASK, r3
}
 800237c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800237e:	f3ef 8310 	mrs	r3, PRIMASK
 8002382:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002386:	673b      	str	r3, [r7, #112]	@ 0x70
 8002388:	2301      	movs	r3, #1
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800238c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800238e:	f383 8810 	msr	PRIMASK, r3
}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2140      	movs	r1, #64	@ 0x40
 80023a0:	438a      	bics	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023a6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023aa:	f383 8810 	msr	PRIMASK, r3
}
 80023ae:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2280      	movs	r2, #128	@ 0x80
 80023b4:	2120      	movs	r1, #32
 80023b6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023be:	f3ef 8310 	mrs	r3, PRIMASK
 80023c2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80023c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023c8:	2301      	movs	r3, #1
 80023ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80023ce:	f383 8810 	msr	PRIMASK, r3
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2110      	movs	r1, #16
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023ea:	f383 8810 	msr	PRIMASK, r3
}
 80023ee:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7fe fc85 	bl	8000d04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2258      	movs	r2, #88	@ 0x58
 8002404:	5a9a      	ldrh	r2, [r3, r2]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	215a      	movs	r1, #90	@ 0x5a
 800240a:	5a5b      	ldrh	r3, [r3, r1]
 800240c:	b29b      	uxth	r3, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0011      	movs	r1, r2
 8002416:	0018      	movs	r0, r3
 8002418:	f000 f8e8 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800241c:	e0c2      	b.n	80025a4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2258      	movs	r2, #88	@ 0x58
 8002422:	5a99      	ldrh	r1, [r3, r2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	225a      	movs	r2, #90	@ 0x5a
 8002428:	5a9b      	ldrh	r3, [r3, r2]
 800242a:	b29a      	uxth	r2, r3
 800242c:	208e      	movs	r0, #142	@ 0x8e
 800242e:	183b      	adds	r3, r7, r0
 8002430:	1a8a      	subs	r2, r1, r2
 8002432:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	225a      	movs	r2, #90	@ 0x5a
 8002438:	5a9b      	ldrh	r3, [r3, r2]
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d100      	bne.n	8002442 <HAL_UART_IRQHandler+0x446>
 8002440:	e0b2      	b.n	80025a8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002442:	183b      	adds	r3, r7, r0
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d100      	bne.n	800244c <HAL_UART_IRQHandler+0x450>
 800244a:	e0ad      	b.n	80025a8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244c:	f3ef 8310 	mrs	r3, PRIMASK
 8002450:	60fb      	str	r3, [r7, #12]
  return(result);
 8002452:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002454:	2488      	movs	r4, #136	@ 0x88
 8002456:	193a      	adds	r2, r7, r4
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f383 8810 	msr	PRIMASK, r3
}
 8002464:	46c0      	nop			@ (mov r8, r8)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4951      	ldr	r1, [pc, #324]	@ (80025b8 <HAL_UART_IRQHandler+0x5bc>)
 8002472:	400a      	ands	r2, r1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	193b      	adds	r3, r7, r4
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f383 8810 	msr	PRIMASK, r3
}
 8002482:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002484:	f3ef 8310 	mrs	r3, PRIMASK
 8002488:	61bb      	str	r3, [r7, #24]
  return(result);
 800248a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800248c:	2484      	movs	r4, #132	@ 0x84
 800248e:	193a      	adds	r2, r7, r4
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	2301      	movs	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f383 8810 	msr	PRIMASK, r3
}
 800249c:	46c0      	nop			@ (mov r8, r8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	438a      	bics	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2280      	movs	r2, #128	@ 0x80
 80024c0:	2120      	movs	r1, #32
 80024c2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d0:	f3ef 8310 	mrs	r3, PRIMASK
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d8:	2480      	movs	r4, #128	@ 0x80
 80024da:	193a      	adds	r2, r7, r4
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	2301      	movs	r3, #1
 80024e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	f383 8810 	msr	PRIMASK, r3
}
 80024e8:	46c0      	nop			@ (mov r8, r8)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2110      	movs	r1, #16
 80024f6:	438a      	bics	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002502:	f383 8810 	msr	PRIMASK, r3
}
 8002506:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800250e:	183b      	adds	r3, r7, r0
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0011      	movs	r1, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f000 f868 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800251c:	e044      	b.n	80025a8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800251e:	23a4      	movs	r3, #164	@ 0xa4
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	035b      	lsls	r3, r3, #13
 8002528:	4013      	ands	r3, r2
 800252a:	d010      	beq.n	800254e <HAL_UART_IRQHandler+0x552>
 800252c:	239c      	movs	r3, #156	@ 0x9c
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	03db      	lsls	r3, r3, #15
 8002536:	4013      	ands	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2280      	movs	r2, #128	@ 0x80
 8002540:	0352      	lsls	r2, r2, #13
 8002542:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	0018      	movs	r0, r3
 8002548:	f000 fdcb 	bl	80030e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800254c:	e02f      	b.n	80025ae <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800254e:	23a4      	movs	r3, #164	@ 0xa4
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2280      	movs	r2, #128	@ 0x80
 8002556:	4013      	ands	r3, r2
 8002558:	d00f      	beq.n	800257a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800255a:	23a0      	movs	r3, #160	@ 0xa0
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2280      	movs	r2, #128	@ 0x80
 8002562:	4013      	ands	r3, r2
 8002564:	d009      	beq.n	800257a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01e      	beq.n	80025ac <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	0010      	movs	r0, r2
 8002576:	4798      	blx	r3
    }
    return;
 8002578:	e018      	b.n	80025ac <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800257a:	23a4      	movs	r3, #164	@ 0xa4
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2240      	movs	r2, #64	@ 0x40
 8002582:	4013      	ands	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_UART_IRQHandler+0x5b2>
 8002586:	23a0      	movs	r3, #160	@ 0xa0
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2240      	movs	r2, #64	@ 0x40
 800258e:	4013      	ands	r3, r2
 8002590:	d00d      	beq.n	80025ae <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 fd79 	bl	800308c <UART_EndTransmit_IT>
    return;
 800259a:	e008      	b.n	80025ae <HAL_UART_IRQHandler+0x5b2>
      return;
 800259c:	46c0      	nop			@ (mov r8, r8)
 800259e:	e006      	b.n	80025ae <HAL_UART_IRQHandler+0x5b2>
    return;
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	e004      	b.n	80025ae <HAL_UART_IRQHandler+0x5b2>
      return;
 80025a4:	46c0      	nop			@ (mov r8, r8)
 80025a6:	e002      	b.n	80025ae <HAL_UART_IRQHandler+0x5b2>
      return;
 80025a8:	46c0      	nop			@ (mov r8, r8)
 80025aa:	e000      	b.n	80025ae <HAL_UART_IRQHandler+0x5b2>
    return;
 80025ac:	46c0      	nop			@ (mov r8, r8)
  }

}
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b02b      	add	sp, #172	@ 0xac
 80025b2:	bd90      	pop	{r4, r7, pc}
 80025b4:	fffffeff 	.word	0xfffffeff
 80025b8:	fffffedf 	.word	0xfffffedf

080025bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80025d4:	46c0      	nop			@ (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	000a      	movs	r2, r1
 80025f6:	1cbb      	adds	r3, r7, #2
 80025f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b002      	add	sp, #8
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800260c:	231e      	movs	r3, #30
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a8d      	ldr	r2, [pc, #564]	@ (8002868 <UART_SetConfig+0x264>)
 8002634:	4013      	ands	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a88      	ldr	r2, [pc, #544]	@ (800286c <UART_SetConfig+0x268>)
 800264a:	4013      	ands	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a7f      	ldr	r2, [pc, #508]	@ (8002870 <UART_SetConfig+0x26c>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	430a      	orrs	r2, r1
 800267e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a7b      	ldr	r2, [pc, #492]	@ (8002874 <UART_SetConfig+0x270>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d127      	bne.n	80026da <UART_SetConfig+0xd6>
 800268a:	4b7b      	ldr	r3, [pc, #492]	@ (8002878 <UART_SetConfig+0x274>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	2203      	movs	r2, #3
 8002690:	4013      	ands	r3, r2
 8002692:	2b03      	cmp	r3, #3
 8002694:	d00d      	beq.n	80026b2 <UART_SetConfig+0xae>
 8002696:	d81b      	bhi.n	80026d0 <UART_SetConfig+0xcc>
 8002698:	2b02      	cmp	r3, #2
 800269a:	d014      	beq.n	80026c6 <UART_SetConfig+0xc2>
 800269c:	d818      	bhi.n	80026d0 <UART_SetConfig+0xcc>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <UART_SetConfig+0xa4>
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d00a      	beq.n	80026bc <UART_SetConfig+0xb8>
 80026a6:	e013      	b.n	80026d0 <UART_SetConfig+0xcc>
 80026a8:	231f      	movs	r3, #31
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e021      	b.n	80026f6 <UART_SetConfig+0xf2>
 80026b2:	231f      	movs	r3, #31
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2202      	movs	r2, #2
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e01c      	b.n	80026f6 <UART_SetConfig+0xf2>
 80026bc:	231f      	movs	r3, #31
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2204      	movs	r2, #4
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e017      	b.n	80026f6 <UART_SetConfig+0xf2>
 80026c6:	231f      	movs	r3, #31
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2208      	movs	r2, #8
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e012      	b.n	80026f6 <UART_SetConfig+0xf2>
 80026d0:	231f      	movs	r3, #31
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2210      	movs	r2, #16
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	e00d      	b.n	80026f6 <UART_SetConfig+0xf2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a67      	ldr	r2, [pc, #412]	@ (800287c <UART_SetConfig+0x278>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d104      	bne.n	80026ee <UART_SetConfig+0xea>
 80026e4:	231f      	movs	r3, #31
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e003      	b.n	80026f6 <UART_SetConfig+0xf2>
 80026ee:	231f      	movs	r3, #31
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	2210      	movs	r2, #16
 80026f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	429a      	cmp	r2, r3
 8002700:	d15c      	bne.n	80027bc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002702:	231f      	movs	r3, #31
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d015      	beq.n	8002738 <UART_SetConfig+0x134>
 800270c:	dc18      	bgt.n	8002740 <UART_SetConfig+0x13c>
 800270e:	2b04      	cmp	r3, #4
 8002710:	d00d      	beq.n	800272e <UART_SetConfig+0x12a>
 8002712:	dc15      	bgt.n	8002740 <UART_SetConfig+0x13c>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <UART_SetConfig+0x11a>
 8002718:	2b02      	cmp	r3, #2
 800271a:	d005      	beq.n	8002728 <UART_SetConfig+0x124>
 800271c:	e010      	b.n	8002740 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800271e:	f7ff fa2f 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8002722:	0003      	movs	r3, r0
 8002724:	61bb      	str	r3, [r7, #24]
        break;
 8002726:	e012      	b.n	800274e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002728:	4b55      	ldr	r3, [pc, #340]	@ (8002880 <UART_SetConfig+0x27c>)
 800272a:	61bb      	str	r3, [r7, #24]
        break;
 800272c:	e00f      	b.n	800274e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800272e:	f7ff f9c7 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8002732:	0003      	movs	r3, r0
 8002734:	61bb      	str	r3, [r7, #24]
        break;
 8002736:	e00a      	b.n	800274e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	61bb      	str	r3, [r7, #24]
        break;
 800273e:	e006      	b.n	800274e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002744:	231e      	movs	r3, #30
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
        break;
 800274c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d100      	bne.n	8002756 <UART_SetConfig+0x152>
 8002754:	e07a      	b.n	800284c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	005a      	lsls	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	18d2      	adds	r2, r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0019      	movs	r1, r3
 8002768:	0010      	movs	r0, r2
 800276a:	f7fd fccd 	bl	8000108 <__udivsi3>
 800276e:	0003      	movs	r3, r0
 8002770:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b0f      	cmp	r3, #15
 8002776:	d91c      	bls.n	80027b2 <UART_SetConfig+0x1ae>
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	429a      	cmp	r2, r3
 8002780:	d217      	bcs.n	80027b2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	b29a      	uxth	r2, r3
 8002786:	200e      	movs	r0, #14
 8002788:	183b      	adds	r3, r7, r0
 800278a:	210f      	movs	r1, #15
 800278c:	438a      	bics	r2, r1
 800278e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	2207      	movs	r2, #7
 8002798:	4013      	ands	r3, r2
 800279a:	b299      	uxth	r1, r3
 800279c:	183b      	adds	r3, r7, r0
 800279e:	183a      	adds	r2, r7, r0
 80027a0:	8812      	ldrh	r2, [r2, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	183a      	adds	r2, r7, r0
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	e04c      	b.n	800284c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80027b2:	231e      	movs	r3, #30
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e047      	b.n	800284c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027bc:	231f      	movs	r3, #31
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d015      	beq.n	80027f2 <UART_SetConfig+0x1ee>
 80027c6:	dc18      	bgt.n	80027fa <UART_SetConfig+0x1f6>
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d00d      	beq.n	80027e8 <UART_SetConfig+0x1e4>
 80027cc:	dc15      	bgt.n	80027fa <UART_SetConfig+0x1f6>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <UART_SetConfig+0x1d4>
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d005      	beq.n	80027e2 <UART_SetConfig+0x1de>
 80027d6:	e010      	b.n	80027fa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027d8:	f7ff f9d2 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 80027dc:	0003      	movs	r3, r0
 80027de:	61bb      	str	r3, [r7, #24]
        break;
 80027e0:	e012      	b.n	8002808 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027e2:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <UART_SetConfig+0x27c>)
 80027e4:	61bb      	str	r3, [r7, #24]
        break;
 80027e6:	e00f      	b.n	8002808 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e8:	f7ff f96a 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 80027ec:	0003      	movs	r3, r0
 80027ee:	61bb      	str	r3, [r7, #24]
        break;
 80027f0:	e00a      	b.n	8002808 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	61bb      	str	r3, [r7, #24]
        break;
 80027f8:	e006      	b.n	8002808 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027fe:	231e      	movs	r3, #30
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
        break;
 8002806:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01e      	beq.n	800284c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	085a      	lsrs	r2, r3, #1
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	18d2      	adds	r2, r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0019      	movs	r1, r3
 800281e:	0010      	movs	r0, r2
 8002820:	f7fd fc72 	bl	8000108 <__udivsi3>
 8002824:	0003      	movs	r3, r0
 8002826:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	d90a      	bls.n	8002844 <UART_SetConfig+0x240>
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	025b      	lsls	r3, r3, #9
 8002834:	429a      	cmp	r2, r3
 8002836:	d205      	bcs.n	8002844 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	e003      	b.n	800284c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002844:	231e      	movs	r3, #30
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002858:	231e      	movs	r3, #30
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	781b      	ldrb	r3, [r3, #0]
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b008      	add	sp, #32
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	ffff69f3 	.word	0xffff69f3
 800286c:	ffffcfff 	.word	0xffffcfff
 8002870:	fffff4ff 	.word	0xfffff4ff
 8002874:	40013800 	.word	0x40013800
 8002878:	40021000 	.word	0x40021000
 800287c:	40004400 	.word	0x40004400
 8002880:	007a1200 	.word	0x007a1200

08002884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	2208      	movs	r2, #8
 8002892:	4013      	ands	r3, r2
 8002894:	d00b      	beq.n	80028ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a4a      	ldr	r2, [pc, #296]	@ (80029c8 <UART_AdvFeatureConfig+0x144>)
 800289e:	4013      	ands	r3, r2
 80028a0:	0019      	movs	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	2201      	movs	r2, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a43      	ldr	r2, [pc, #268]	@ (80029cc <UART_AdvFeatureConfig+0x148>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	2202      	movs	r2, #2
 80028d6:	4013      	ands	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a3b      	ldr	r2, [pc, #236]	@ (80029d0 <UART_AdvFeatureConfig+0x14c>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	2204      	movs	r2, #4
 80028f8:	4013      	ands	r3, r2
 80028fa:	d00b      	beq.n	8002914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <UART_AdvFeatureConfig+0x150>)
 8002904:	4013      	ands	r3, r2
 8002906:	0019      	movs	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	2210      	movs	r2, #16
 800291a:	4013      	ands	r3, r2
 800291c:	d00b      	beq.n	8002936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a2c      	ldr	r2, [pc, #176]	@ (80029d8 <UART_AdvFeatureConfig+0x154>)
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	2220      	movs	r2, #32
 800293c:	4013      	ands	r3, r2
 800293e:	d00b      	beq.n	8002958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4a25      	ldr	r2, [pc, #148]	@ (80029dc <UART_AdvFeatureConfig+0x158>)
 8002948:	4013      	ands	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	2240      	movs	r2, #64	@ 0x40
 800295e:	4013      	ands	r3, r2
 8002960:	d01d      	beq.n	800299e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a1d      	ldr	r2, [pc, #116]	@ (80029e0 <UART_AdvFeatureConfig+0x15c>)
 800296a:	4013      	ands	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	035b      	lsls	r3, r3, #13
 8002982:	429a      	cmp	r2, r3
 8002984:	d10b      	bne.n	800299e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a15      	ldr	r2, [pc, #84]	@ (80029e4 <UART_AdvFeatureConfig+0x160>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	4013      	ands	r3, r2
 80029a6:	d00b      	beq.n	80029c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a0e      	ldr	r2, [pc, #56]	@ (80029e8 <UART_AdvFeatureConfig+0x164>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
  }
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	ffff7fff 	.word	0xffff7fff
 80029cc:	fffdffff 	.word	0xfffdffff
 80029d0:	fffeffff 	.word	0xfffeffff
 80029d4:	fffbffff 	.word	0xfffbffff
 80029d8:	ffffefff 	.word	0xffffefff
 80029dc:	ffffdfff 	.word	0xffffdfff
 80029e0:	ffefffff 	.word	0xffefffff
 80029e4:	ff9fffff 	.word	0xff9fffff
 80029e8:	fff7ffff 	.word	0xfff7ffff

080029ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b092      	sub	sp, #72	@ 0x48
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2284      	movs	r2, #132	@ 0x84
 80029f8:	2100      	movs	r1, #0
 80029fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029fc:	f7fd ffec 	bl	80009d8 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d12c      	bne.n	8002a6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a14:	2280      	movs	r2, #128	@ 0x80
 8002a16:	0391      	lsls	r1, r2, #14
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4a46      	ldr	r2, [pc, #280]	@ (8002b34 <UART_CheckIdleState+0x148>)
 8002a1c:	9200      	str	r2, [sp, #0]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f000 f88c 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d021      	beq.n	8002a6c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a28:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002a30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a32:	2301      	movs	r3, #1
 8002a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a38:	f383 8810 	msr	PRIMASK, r3
}
 8002a3c:	46c0      	nop			@ (mov r8, r8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2180      	movs	r1, #128	@ 0x80
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a54:	f383 8810 	msr	PRIMASK, r3
}
 8002a58:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2278      	movs	r2, #120	@ 0x78
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e05f      	b.n	8002b2c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2204      	movs	r2, #4
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d146      	bne.n	8002b08 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a7c:	2280      	movs	r2, #128	@ 0x80
 8002a7e:	03d1      	lsls	r1, r2, #15
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4a2c      	ldr	r2, [pc, #176]	@ (8002b34 <UART_CheckIdleState+0x148>)
 8002a84:	9200      	str	r2, [sp, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f000 f858 	bl	8002b3c <UART_WaitOnFlagUntilTimeout>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d03b      	beq.n	8002b08 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a90:	f3ef 8310 	mrs	r3, PRIMASK
 8002a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f383 8810 	msr	PRIMASK, r3
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4921      	ldr	r1, [pc, #132]	@ (8002b38 <UART_CheckIdleState+0x14c>)
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f383 8810 	msr	PRIMASK, r3
}
 8002ac0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8002acc:	2301      	movs	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f383 8810 	msr	PRIMASK, r3
}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	f383 8810 	msr	PRIMASK, r3
}
 8002af2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2280      	movs	r2, #128	@ 0x80
 8002af8:	2120      	movs	r1, #32
 8002afa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2278      	movs	r2, #120	@ 0x78
 8002b00:	2100      	movs	r1, #0
 8002b02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e011      	b.n	8002b2c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2280      	movs	r2, #128	@ 0x80
 8002b12:	2120      	movs	r1, #32
 8002b14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2278      	movs	r2, #120	@ 0x78
 8002b26:	2100      	movs	r1, #0
 8002b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b010      	add	sp, #64	@ 0x40
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	01ffffff 	.word	0x01ffffff
 8002b38:	fffffedf 	.word	0xfffffedf

08002b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b4c:	e051      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3301      	adds	r3, #1
 8002b52:	d04e      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b54:	f7fd ff40 	bl	80009d8 <HAL_GetTick>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d302      	bcc.n	8002b6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e051      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2204      	movs	r2, #4
 8002b76:	4013      	ands	r3, r2
 8002b78:	d03b      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b80      	cmp	r3, #128	@ 0x80
 8002b7e:	d038      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b40      	cmp	r3, #64	@ 0x40
 8002b84:	d035      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d111      	bne.n	8002bb8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 f900 	bl	8002da4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2284      	movs	r2, #132	@ 0x84
 8002ba8:	2108      	movs	r1, #8
 8002baa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2278      	movs	r2, #120	@ 0x78
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e02c      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	2380      	movs	r3, #128	@ 0x80
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	2380      	movs	r3, #128	@ 0x80
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d112      	bne.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2280      	movs	r2, #128	@ 0x80
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 f8e3 	bl	8002da4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2284      	movs	r2, #132	@ 0x84
 8002be2:	2120      	movs	r1, #32
 8002be4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2278      	movs	r2, #120	@ 0x78
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	425a      	negs	r2, r3
 8002c02:	4153      	adcs	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	001a      	movs	r2, r3
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d09e      	beq.n	8002b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b004      	add	sp, #16
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b090      	sub	sp, #64	@ 0x40
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1dba      	adds	r2, r7, #6
 8002c34:	2158      	movs	r1, #88	@ 0x58
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2284      	movs	r2, #132	@ 0x84
 8002c3e:	2100      	movs	r1, #0
 8002c40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2280      	movs	r2, #128	@ 0x80
 8002c46:	2122      	movs	r1, #34	@ 0x22
 8002c48:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d028      	beq.n	8002ca4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c56:	4a3e      	ldr	r2, [pc, #248]	@ (8002d50 <UART_Start_Receive_DMA+0x134>)
 8002c58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d54 <UART_Start_Receive_DMA+0x138>)
 8002c60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c66:	4a3c      	ldr	r2, [pc, #240]	@ (8002d58 <UART_Start_Receive_DMA+0x13c>)
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6e:	2200      	movs	r2, #0
 8002c70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3324      	adds	r3, #36	@ 0x24
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	001a      	movs	r2, r3
 8002c84:	1dbb      	adds	r3, r7, #6
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	f7fd ffd6 	bl	8000c38 <HAL_DMA_Start_IT>
 8002c8c:	1e03      	subs	r3, r0, #0
 8002c8e:	d009      	beq.n	8002ca4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2284      	movs	r2, #132	@ 0x84
 8002c94:	2110      	movs	r1, #16
 8002c96:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2280      	movs	r2, #128	@ 0x80
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e050      	b.n	8002d46 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d019      	beq.n	8002ce0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cac:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbc:	f383 8810 	msr	PRIMASK, r3
}
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	0049      	lsls	r1, r1, #1
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	f383 8810 	msr	PRIMASK, r3
}
 8002cde:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8002ce6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cea:	2301      	movs	r3, #1
 8002cec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f383 8810 	msr	PRIMASK, r3
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f383 8810 	msr	PRIMASK, r3
}
 8002d10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d12:	f3ef 8310 	mrs	r3, PRIMASK
 8002d16:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d18:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f383 8810 	msr	PRIMASK, r3
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2140      	movs	r1, #64	@ 0x40
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	f383 8810 	msr	PRIMASK, r3
}
 8002d42:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b010      	add	sp, #64	@ 0x40
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	08002e6d 	.word	0x08002e6d
 8002d54:	08002f99 	.word	0x08002f99
 8002d58:	08002fdb 	.word	0x08002fdb

08002d5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d64:	f3ef 8310 	mrs	r3, PRIMASK
 8002d68:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f383 8810 	msr	PRIMASK, r3
}
 8002d78:	46c0      	nop			@ (mov r8, r8)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	21c0      	movs	r1, #192	@ 0xc0
 8002d86:	438a      	bics	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f383 8810 	msr	PRIMASK, r3
}
 8002d94:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b006      	add	sp, #24
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08e      	sub	sp, #56	@ 0x38
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dac:	f3ef 8310 	mrs	r3, PRIMASK
 8002db0:	617b      	str	r3, [r7, #20]
  return(result);
 8002db2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db6:	2301      	movs	r3, #1
 8002db8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f383 8810 	msr	PRIMASK, r3
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4926      	ldr	r1, [pc, #152]	@ (8002e68 <UART_EndRxTransfer+0xc4>)
 8002dce:	400a      	ands	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f383 8810 	msr	PRIMASK, r3
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dde:	f3ef 8310 	mrs	r3, PRIMASK
 8002de2:	623b      	str	r3, [r7, #32]
  return(result);
 8002de4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002de8:	2301      	movs	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	f383 8810 	msr	PRIMASK, r3
}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	438a      	bics	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0a:	f383 8810 	msr	PRIMASK, r3
}
 8002e0e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d118      	bne.n	8002e4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e18:	f3ef 8310 	mrs	r3, PRIMASK
 8002e1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e22:	2301      	movs	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f383 8810 	msr	PRIMASK, r3
}
 8002e2c:	46c0      	nop			@ (mov r8, r8)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2110      	movs	r1, #16
 8002e3a:	438a      	bics	r2, r1
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f383 8810 	msr	PRIMASK, r3
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2280      	movs	r2, #128	@ 0x80
 8002e4e:	2120      	movs	r1, #32
 8002e50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b00e      	add	sp, #56	@ 0x38
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	fffffedf 	.word	0xfffffedf

08002e6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b094      	sub	sp, #80	@ 0x50
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d06f      	beq.n	8002f62 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e84:	225a      	movs	r2, #90	@ 0x5a
 8002e86:	2100      	movs	r1, #0
 8002e88:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e90:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e94:	2301      	movs	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f383 8810 	msr	PRIMASK, r3
}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	493a      	ldr	r1, [pc, #232]	@ (8002f94 <UART_DMAReceiveCplt+0x128>)
 8002eac:	400a      	ands	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f383 8810 	msr	PRIMASK, r3
}
 8002eba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	f383 8810 	msr	PRIMASK, r3
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	438a      	bics	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ef8:	2301      	movs	r3, #1
 8002efa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2140      	movs	r1, #64	@ 0x40
 8002f10:	438a      	bics	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f16:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f22:	2280      	movs	r2, #128	@ 0x80
 8002f24:	2120      	movs	r1, #32
 8002f26:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d118      	bne.n	8002f62 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f30:	f3ef 8310 	mrs	r3, PRIMASK
 8002f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f36:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f383 8810 	msr	PRIMASK, r3
}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2110      	movs	r1, #16
 8002f52:	438a      	bics	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f383 8810 	msr	PRIMASK, r3
}
 8002f60:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f64:	2200      	movs	r2, #0
 8002f66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d108      	bne.n	8002f82 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f72:	2258      	movs	r2, #88	@ 0x58
 8002f74:	5a9a      	ldrh	r2, [r3, r2]
 8002f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f78:	0011      	movs	r1, r2
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7ff fb36 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f80:	e003      	b.n	8002f8a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd fa99 	bl	80004bc <HAL_UART_RxCpltCallback>
}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b014      	add	sp, #80	@ 0x50
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	fffffeff 	.word	0xfffffeff

08002f98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10a      	bne.n	8002fca <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2258      	movs	r2, #88	@ 0x58
 8002fb8:	5a9b      	ldrh	r3, [r3, r2]
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f7ff fb12 	bl	80025ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fc8:	e003      	b.n	8002fd2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff fafd 	bl	80025cc <HAL_UART_RxHalfCpltCallback>
}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b004      	add	sp, #16
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	589b      	ldr	r3, [r3, r2]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2280      	movs	r2, #128	@ 0x80
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b80      	cmp	r3, #128	@ 0x80
 8003002:	d10a      	bne.n	800301a <UART_DMAError+0x40>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b21      	cmp	r3, #33	@ 0x21
 8003008:	d107      	bne.n	800301a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2252      	movs	r2, #82	@ 0x52
 800300e:	2100      	movs	r1, #0
 8003010:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff fea1 	bl	8002d5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2240      	movs	r2, #64	@ 0x40
 8003022:	4013      	ands	r3, r2
 8003024:	2b40      	cmp	r3, #64	@ 0x40
 8003026:	d10a      	bne.n	800303e <UART_DMAError+0x64>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b22      	cmp	r3, #34	@ 0x22
 800302c:	d107      	bne.n	800303e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	225a      	movs	r2, #90	@ 0x5a
 8003032:	2100      	movs	r1, #0
 8003034:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff feb3 	bl	8002da4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2284      	movs	r2, #132	@ 0x84
 8003042:	589b      	ldr	r3, [r3, r2]
 8003044:	2210      	movs	r2, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2184      	movs	r1, #132	@ 0x84
 800304c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff fac3 	bl	80025dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b006      	add	sp, #24
 800305c:	bd80      	pop	{r7, pc}

0800305e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	225a      	movs	r2, #90	@ 0x5a
 8003070:	2100      	movs	r1, #0
 8003072:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2252      	movs	r2, #82	@ 0x52
 8003078:	2100      	movs	r1, #0
 800307a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	0018      	movs	r0, r3
 8003080:	f7ff faac 	bl	80025dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b004      	add	sp, #16
 800308a:	bd80      	pop	{r7, pc}

0800308c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003094:	f3ef 8310 	mrs	r3, PRIMASK
 8003098:	60bb      	str	r3, [r7, #8]
  return(result);
 800309a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	2301      	movs	r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f383 8810 	msr	PRIMASK, r3
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2140      	movs	r1, #64	@ 0x40
 80030b6:	438a      	bics	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f383 8810 	msr	PRIMASK, r3
}
 80030c4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff fa71 	bl	80025bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b006      	add	sp, #24
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b002      	add	sp, #8
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <memset>:
 80030f2:	0003      	movs	r3, r0
 80030f4:	1882      	adds	r2, r0, r2
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d100      	bne.n	80030fc <memset+0xa>
 80030fa:	4770      	bx	lr
 80030fc:	7019      	strb	r1, [r3, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	e7f9      	b.n	80030f6 <memset+0x4>
	...

08003104 <__libc_init_array>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	2600      	movs	r6, #0
 8003108:	4c0c      	ldr	r4, [pc, #48]	@ (800313c <__libc_init_array+0x38>)
 800310a:	4d0d      	ldr	r5, [pc, #52]	@ (8003140 <__libc_init_array+0x3c>)
 800310c:	1b64      	subs	r4, r4, r5
 800310e:	10a4      	asrs	r4, r4, #2
 8003110:	42a6      	cmp	r6, r4
 8003112:	d109      	bne.n	8003128 <__libc_init_array+0x24>
 8003114:	2600      	movs	r6, #0
 8003116:	f000 f819 	bl	800314c <_init>
 800311a:	4c0a      	ldr	r4, [pc, #40]	@ (8003144 <__libc_init_array+0x40>)
 800311c:	4d0a      	ldr	r5, [pc, #40]	@ (8003148 <__libc_init_array+0x44>)
 800311e:	1b64      	subs	r4, r4, r5
 8003120:	10a4      	asrs	r4, r4, #2
 8003122:	42a6      	cmp	r6, r4
 8003124:	d105      	bne.n	8003132 <__libc_init_array+0x2e>
 8003126:	bd70      	pop	{r4, r5, r6, pc}
 8003128:	00b3      	lsls	r3, r6, #2
 800312a:	58eb      	ldr	r3, [r5, r3]
 800312c:	4798      	blx	r3
 800312e:	3601      	adds	r6, #1
 8003130:	e7ee      	b.n	8003110 <__libc_init_array+0xc>
 8003132:	00b3      	lsls	r3, r6, #2
 8003134:	58eb      	ldr	r3, [r5, r3]
 8003136:	4798      	blx	r3
 8003138:	3601      	adds	r6, #1
 800313a:	e7f2      	b.n	8003122 <__libc_init_array+0x1e>
 800313c:	0800319c 	.word	0x0800319c
 8003140:	0800319c 	.word	0x0800319c
 8003144:	080031a0 	.word	0x080031a0
 8003148:	0800319c 	.word	0x0800319c

0800314c <_init>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr

08003158 <_fini>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr
