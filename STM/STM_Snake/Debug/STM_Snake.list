
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005450  08005450  00006450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005580  08005580  00007170  2**0
                  CONTENTS
  4 .ARM          00000000  08005580  08005580  00007170  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005580  08005580  00007170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005580  08005580  00006580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005584  08005584  00006584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08005588  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000170  080056f8  00007170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  080056f8  00007608  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7be  00000000  00000000  00007198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f6  00000000  00000000  00015956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00017d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a84  00000000  00000000  00018ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013bee  00000000  00000000  0001954c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112b0  00000000  00000000  0002d13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073120  00000000  00000000  0003e3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000b150a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  000b1590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000b4ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000170 	.word	0x20000170
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005438 	.word	0x08005438

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000174 	.word	0x20000174
 8000104:	08005438 	.word	0x08005438

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4699      	mov	r9, r3
 800023a:	0c03      	lsrs	r3, r0, #16
 800023c:	469c      	mov	ip, r3
 800023e:	0413      	lsls	r3, r2, #16
 8000240:	4647      	mov	r7, r8
 8000242:	0c1b      	lsrs	r3, r3, #16
 8000244:	001d      	movs	r5, r3
 8000246:	000e      	movs	r6, r1
 8000248:	4661      	mov	r1, ip
 800024a:	0404      	lsls	r4, r0, #16
 800024c:	0c24      	lsrs	r4, r4, #16
 800024e:	b580      	push	{r7, lr}
 8000250:	0007      	movs	r7, r0
 8000252:	0c10      	lsrs	r0, r2, #16
 8000254:	434b      	muls	r3, r1
 8000256:	4365      	muls	r5, r4
 8000258:	4341      	muls	r1, r0
 800025a:	4360      	muls	r0, r4
 800025c:	0c2c      	lsrs	r4, r5, #16
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	1824      	adds	r4, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	42a3      	cmp	r3, r4
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	@ 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4356      	muls	r6, r2
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	042d      	lsls	r5, r5, #16
 800027a:	0c2d      	lsrs	r5, r5, #16
 800027c:	1989      	adds	r1, r1, r6
 800027e:	4463      	add	r3, ip
 8000280:	0424      	lsls	r4, r4, #16
 8000282:	1960      	adds	r0, r4, r5
 8000284:	18c9      	adds	r1, r1, r3
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			@ (mov r8, r8)

08000290 <randomize_apple>:
 static uint8_t x_buffer[128] = {10, 11, 12, 13};
 static uint8_t y_buffer[128] = {15, 15, 15, 15};



void randomize_apple(uint8_t *frog_x, uint8_t *frog_y) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
    *frog_x = (rand() % 16)+1;
 800029a:	f004 f8b5 	bl	8004408 <rand>
 800029e:	0003      	movs	r3, r0
 80002a0:	4a10      	ldr	r2, [pc, #64]	@ (80002e4 <randomize_apple+0x54>)
 80002a2:	4013      	ands	r3, r2
 80002a4:	d504      	bpl.n	80002b0 <randomize_apple+0x20>
 80002a6:	3b01      	subs	r3, #1
 80002a8:	2210      	movs	r2, #16
 80002aa:	4252      	negs	r2, r2
 80002ac:	4313      	orrs	r3, r2
 80002ae:	3301      	adds	r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	3301      	adds	r3, #1
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	701a      	strb	r2, [r3, #0]
    *frog_y = (rand() % 16)+1;
 80002ba:	f004 f8a5 	bl	8004408 <rand>
 80002be:	0003      	movs	r3, r0
 80002c0:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <randomize_apple+0x54>)
 80002c2:	4013      	ands	r3, r2
 80002c4:	d504      	bpl.n	80002d0 <randomize_apple+0x40>
 80002c6:	3b01      	subs	r3, #1
 80002c8:	2210      	movs	r2, #16
 80002ca:	4252      	negs	r2, r2
 80002cc:	4313      	orrs	r3, r2
 80002ce:	3301      	adds	r3, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	701a      	strb	r2, [r3, #0]
}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b002      	add	sp, #8
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	8000000f 	.word	0x8000000f

080002e8 <move_snake>:



uint8_t move_snake(uint8_t command, uint8_t *frog_x, uint8_t *frog_y, uint8_t *payload) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	@ 0x28
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60b9      	str	r1, [r7, #8]
 80002f0:	607a      	str	r2, [r7, #4]
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	210f      	movs	r1, #15
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	1c02      	adds	r2, r0, #0
 80002fa:	701a      	strb	r2, [r3, #0]
    	static uint8_t legit = 1;
    	static uint8_t last_command = 0;  // 0 — змійка стоїть


        // Заборона руху в зворотному напрямку
        if ((command == 1 && last_command == 2) || (command == 2 && last_command == 1) ||
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d103      	bne.n	800030c <move_snake+0x24>
 8000304:	4bb5      	ldr	r3, [pc, #724]	@ (80005dc <move_snake+0x2f4>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b02      	cmp	r3, #2
 800030a:	d01a      	beq.n	8000342 <move_snake+0x5a>
 800030c:	230f      	movs	r3, #15
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b02      	cmp	r3, #2
 8000314:	d103      	bne.n	800031e <move_snake+0x36>
 8000316:	4bb1      	ldr	r3, [pc, #708]	@ (80005dc <move_snake+0x2f4>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d011      	beq.n	8000342 <move_snake+0x5a>
 800031e:	230f      	movs	r3, #15
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d103      	bne.n	8000330 <move_snake+0x48>
            (command == 3 && last_command == 4) || (command == 4 && last_command == 3)) {
 8000328:	4bac      	ldr	r3, [pc, #688]	@ (80005dc <move_snake+0x2f4>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b04      	cmp	r3, #4
 800032e:	d008      	beq.n	8000342 <move_snake+0x5a>
 8000330:	230f      	movs	r3, #15
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b04      	cmp	r3, #4
 8000338:	d109      	bne.n	800034e <move_snake+0x66>
 800033a:	4ba8      	ldr	r3, [pc, #672]	@ (80005dc <move_snake+0x2f4>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b03      	cmp	r3, #3
 8000340:	d105      	bne.n	800034e <move_snake+0x66>
            command = last_command;
 8000342:	230f      	movs	r3, #15
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	4aa5      	ldr	r2, [pc, #660]	@ (80005dc <move_snake+0x2f4>)
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	701a      	strb	r2, [r3, #0]
 800034c:	e008      	b.n	8000360 <move_snake+0x78>
        } else if (command != 0) {
 800034e:	220f      	movs	r2, #15
 8000350:	18bb      	adds	r3, r7, r2
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d003      	beq.n	8000360 <move_snake+0x78>
            last_command = command;
 8000358:	4ba0      	ldr	r3, [pc, #640]	@ (80005dc <move_snake+0x2f4>)
 800035a:	18ba      	adds	r2, r7, r2
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	701a      	strb	r2, [r3, #0]
        }

        // Рухаєм змійку тільки якщо команда не 0
        if (last_command != 0) {
 8000360:	4b9e      	ldr	r3, [pc, #632]	@ (80005dc <move_snake+0x2f4>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d046      	beq.n	80003f6 <move_snake+0x10e>
            for (int i = snake_length - 1; i > 0; i--) {
 8000368:	4b9d      	ldr	r3, [pc, #628]	@ (80005e0 <move_snake+0x2f8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000370:	e014      	b.n	800039c <move_snake+0xb4>
                x_buffer[i] = x_buffer[i - 1];
 8000372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000374:	3b01      	subs	r3, #1
 8000376:	4a9b      	ldr	r2, [pc, #620]	@ (80005e4 <move_snake+0x2fc>)
 8000378:	5cd1      	ldrb	r1, [r2, r3]
 800037a:	4a9a      	ldr	r2, [pc, #616]	@ (80005e4 <move_snake+0x2fc>)
 800037c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800037e:	18d3      	adds	r3, r2, r3
 8000380:	1c0a      	adds	r2, r1, #0
 8000382:	701a      	strb	r2, [r3, #0]
                y_buffer[i] = y_buffer[i - 1];
 8000384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000386:	3b01      	subs	r3, #1
 8000388:	4a97      	ldr	r2, [pc, #604]	@ (80005e8 <move_snake+0x300>)
 800038a:	5cd1      	ldrb	r1, [r2, r3]
 800038c:	4a96      	ldr	r2, [pc, #600]	@ (80005e8 <move_snake+0x300>)
 800038e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000390:	18d3      	adds	r3, r2, r3
 8000392:	1c0a      	adds	r2, r1, #0
 8000394:	701a      	strb	r2, [r3, #0]
            for (int i = snake_length - 1; i > 0; i--) {
 8000396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000398:	3b01      	subs	r3, #1
 800039a:	627b      	str	r3, [r7, #36]	@ 0x24
 800039c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800039e:	2b00      	cmp	r3, #0
 80003a0:	dce7      	bgt.n	8000372 <move_snake+0x8a>
            }

            // Обробка команд руху
            switch (last_command) {
 80003a2:	4b8e      	ldr	r3, [pc, #568]	@ (80005dc <move_snake+0x2f4>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d01d      	beq.n	80003e6 <move_snake+0xfe>
 80003aa:	dc23      	bgt.n	80003f4 <move_snake+0x10c>
 80003ac:	2b03      	cmp	r3, #3
 80003ae:	d013      	beq.n	80003d8 <move_snake+0xf0>
 80003b0:	dc20      	bgt.n	80003f4 <move_snake+0x10c>
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d002      	beq.n	80003bc <move_snake+0xd4>
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d007      	beq.n	80003ca <move_snake+0xe2>
                case 1: y_buffer[0]--; break;  // Вгору
                case 2: y_buffer[0]++; break;  // Вниз
                case 3: x_buffer[0]--; break;  // Вліво
                case 4: x_buffer[0]++; break;  // Вправо
                default: break;
 80003ba:	e01b      	b.n	80003f4 <move_snake+0x10c>
                case 1: y_buffer[0]--; break;  // Вгору
 80003bc:	4b8a      	ldr	r3, [pc, #552]	@ (80005e8 <move_snake+0x300>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	4b88      	ldr	r3, [pc, #544]	@ (80005e8 <move_snake+0x300>)
 80003c6:	701a      	strb	r2, [r3, #0]
 80003c8:	e015      	b.n	80003f6 <move_snake+0x10e>
                case 2: y_buffer[0]++; break;  // Вниз
 80003ca:	4b87      	ldr	r3, [pc, #540]	@ (80005e8 <move_snake+0x300>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b85      	ldr	r3, [pc, #532]	@ (80005e8 <move_snake+0x300>)
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	e00e      	b.n	80003f6 <move_snake+0x10e>
                case 3: x_buffer[0]--; break;  // Вліво
 80003d8:	4b82      	ldr	r3, [pc, #520]	@ (80005e4 <move_snake+0x2fc>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b80      	ldr	r3, [pc, #512]	@ (80005e4 <move_snake+0x2fc>)
 80003e2:	701a      	strb	r2, [r3, #0]
 80003e4:	e007      	b.n	80003f6 <move_snake+0x10e>
                case 4: x_buffer[0]++; break;  // Вправо
 80003e6:	4b7f      	ldr	r3, [pc, #508]	@ (80005e4 <move_snake+0x2fc>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	3301      	adds	r3, #1
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b7d      	ldr	r3, [pc, #500]	@ (80005e4 <move_snake+0x2fc>)
 80003f0:	701a      	strb	r2, [r3, #0]
 80003f2:	e000      	b.n	80003f6 <move_snake+0x10e>
                default: break;
 80003f4:	46c0      	nop			@ (mov r8, r8)
            }
        }

    for (int i = 0; i < snake_length; i++) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	623b      	str	r3, [r7, #32]
 80003fa:	e030      	b.n	800045e <move_snake+0x176>
    if (x_buffer[i] >= 17) x_buffer[i] = 1;
 80003fc:	4a79      	ldr	r2, [pc, #484]	@ (80005e4 <move_snake+0x2fc>)
 80003fe:	6a3b      	ldr	r3, [r7, #32]
 8000400:	18d3      	adds	r3, r2, r3
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b10      	cmp	r3, #16
 8000406:	d905      	bls.n	8000414 <move_snake+0x12c>
 8000408:	4a76      	ldr	r2, [pc, #472]	@ (80005e4 <move_snake+0x2fc>)
 800040a:	6a3b      	ldr	r3, [r7, #32]
 800040c:	18d3      	adds	r3, r2, r3
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]
 8000412:	e00a      	b.n	800042a <move_snake+0x142>
        else if (x_buffer[i] < 1) x_buffer[i] = 16;
 8000414:	4a73      	ldr	r2, [pc, #460]	@ (80005e4 <move_snake+0x2fc>)
 8000416:	6a3b      	ldr	r3, [r7, #32]
 8000418:	18d3      	adds	r3, r2, r3
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d104      	bne.n	800042a <move_snake+0x142>
 8000420:	4a70      	ldr	r2, [pc, #448]	@ (80005e4 <move_snake+0x2fc>)
 8000422:	6a3b      	ldr	r3, [r7, #32]
 8000424:	18d3      	adds	r3, r2, r3
 8000426:	2210      	movs	r2, #16
 8000428:	701a      	strb	r2, [r3, #0]

    if (y_buffer[i] >= 17) y_buffer[i] = 1;
 800042a:	4a6f      	ldr	r2, [pc, #444]	@ (80005e8 <move_snake+0x300>)
 800042c:	6a3b      	ldr	r3, [r7, #32]
 800042e:	18d3      	adds	r3, r2, r3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b10      	cmp	r3, #16
 8000434:	d905      	bls.n	8000442 <move_snake+0x15a>
 8000436:	4a6c      	ldr	r2, [pc, #432]	@ (80005e8 <move_snake+0x300>)
 8000438:	6a3b      	ldr	r3, [r7, #32]
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	e00a      	b.n	8000458 <move_snake+0x170>
        else if (y_buffer[i] < 1) y_buffer[i] = 16;
 8000442:	4a69      	ldr	r2, [pc, #420]	@ (80005e8 <move_snake+0x300>)
 8000444:	6a3b      	ldr	r3, [r7, #32]
 8000446:	18d3      	adds	r3, r2, r3
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d104      	bne.n	8000458 <move_snake+0x170>
 800044e:	4a66      	ldr	r2, [pc, #408]	@ (80005e8 <move_snake+0x300>)
 8000450:	6a3b      	ldr	r3, [r7, #32]
 8000452:	18d3      	adds	r3, r2, r3
 8000454:	2210      	movs	r2, #16
 8000456:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake_length; i++) {
 8000458:	6a3b      	ldr	r3, [r7, #32]
 800045a:	3301      	adds	r3, #1
 800045c:	623b      	str	r3, [r7, #32]
 800045e:	4b60      	ldr	r3, [pc, #384]	@ (80005e0 <move_snake+0x2f8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	001a      	movs	r2, r3
 8000464:	6a3b      	ldr	r3, [r7, #32]
 8000466:	4293      	cmp	r3, r2
 8000468:	dbc8      	blt.n	80003fc <move_snake+0x114>
    }

    // Перевірка на "з'їдання" яблука
    if (x_buffer[0] == *frog_x && y_buffer[0] == *frog_y) {	//перевірка на з'їдене яблуко
 800046a:	4b5e      	ldr	r3, [pc, #376]	@ (80005e4 <move_snake+0x2fc>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	429a      	cmp	r2, r3
 8000474:	d16e      	bne.n	8000554 <move_snake+0x26c>
 8000476:	4b5c      	ldr	r3, [pc, #368]	@ (80005e8 <move_snake+0x300>)
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	429a      	cmp	r2, r3
 8000480:	d168      	bne.n	8000554 <move_snake+0x26c>
            snake_length++;
 8000482:	4b57      	ldr	r3, [pc, #348]	@ (80005e0 <move_snake+0x2f8>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	3301      	adds	r3, #1
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b55      	ldr	r3, [pc, #340]	@ (80005e0 <move_snake+0x2f8>)
 800048c:	701a      	strb	r2, [r3, #0]
            x_buffer[snake_length - 1] = x_buffer[snake_length - 2];
 800048e:	4b54      	ldr	r3, [pc, #336]	@ (80005e0 <move_snake+0x2f8>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	1e9a      	subs	r2, r3, #2
 8000494:	4b52      	ldr	r3, [pc, #328]	@ (80005e0 <move_snake+0x2f8>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	3b01      	subs	r3, #1
 800049a:	4952      	ldr	r1, [pc, #328]	@ (80005e4 <move_snake+0x2fc>)
 800049c:	5c89      	ldrb	r1, [r1, r2]
 800049e:	4a51      	ldr	r2, [pc, #324]	@ (80005e4 <move_snake+0x2fc>)
 80004a0:	54d1      	strb	r1, [r2, r3]
            y_buffer[snake_length - 1] = y_buffer[snake_length - 2];
 80004a2:	4b4f      	ldr	r3, [pc, #316]	@ (80005e0 <move_snake+0x2f8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	1e9a      	subs	r2, r3, #2
 80004a8:	4b4d      	ldr	r3, [pc, #308]	@ (80005e0 <move_snake+0x2f8>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	494e      	ldr	r1, [pc, #312]	@ (80005e8 <move_snake+0x300>)
 80004b0:	5c89      	ldrb	r1, [r1, r2]
 80004b2:	4a4d      	ldr	r2, [pc, #308]	@ (80005e8 <move_snake+0x300>)
 80004b4:	54d1      	strb	r1, [r2, r3]
            legit = 0;
 80004b6:	4b4d      	ldr	r3, [pc, #308]	@ (80005ec <move_snake+0x304>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
        	for (uint8_t i = 0; i < snake_length; i++) {
 80004bc:	231f      	movs	r3, #31
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	e03f      	b.n	8000546 <move_snake+0x25e>
        		i++;
 80004c6:	211f      	movs	r1, #31
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	3201      	adds	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
        		do {
        			randomize_apple(frog_x, frog_y);
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff fed9 	bl	8000290 <randomize_apple>
        		    legit = 1;
 80004de:	4b43      	ldr	r3, [pc, #268]	@ (80005ec <move_snake+0x304>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]

        		    for (uint8_t i = 0; i < snake_length; i++) {
 80004e4:	231e      	movs	r3, #30
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	e01a      	b.n	8000524 <move_snake+0x23c>
        		        if (x_buffer[i] == *frog_x && y_buffer[i] == *frog_y) {
 80004ee:	211e      	movs	r1, #30
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4a3b      	ldr	r2, [pc, #236]	@ (80005e4 <move_snake+0x2fc>)
 80004f6:	5cd2      	ldrb	r2, [r2, r3]
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d10b      	bne.n	8000518 <move_snake+0x230>
 8000500:	187b      	adds	r3, r7, r1
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4a38      	ldr	r2, [pc, #224]	@ (80005e8 <move_snake+0x300>)
 8000506:	5cd2      	ldrb	r2, [r2, r3]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d103      	bne.n	8000518 <move_snake+0x230>
        		            legit = 0;
 8000510:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <move_snake+0x304>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
        		            break;
 8000516:	e00c      	b.n	8000532 <move_snake+0x24a>
        		    for (uint8_t i = 0; i < snake_length; i++) {
 8000518:	211e      	movs	r1, #30
 800051a:	187b      	adds	r3, r7, r1
 800051c:	781a      	ldrb	r2, [r3, #0]
 800051e:	187b      	adds	r3, r7, r1
 8000520:	3201      	adds	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	4b2e      	ldr	r3, [pc, #184]	@ (80005e0 <move_snake+0x2f8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	221e      	movs	r2, #30
 800052a:	18ba      	adds	r2, r7, r2
 800052c:	7812      	ldrb	r2, [r2, #0]
 800052e:	429a      	cmp	r2, r3
 8000530:	d3dd      	bcc.n	80004ee <move_snake+0x206>
        		        }
        		    }
        		} while (!legit);
 8000532:	4b2e      	ldr	r3, [pc, #184]	@ (80005ec <move_snake+0x304>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0cb      	beq.n	80004d2 <move_snake+0x1ea>
        	for (uint8_t i = 0; i < snake_length; i++) {
 800053a:	211f      	movs	r1, #31
 800053c:	187b      	adds	r3, r7, r1
 800053e:	781a      	ldrb	r2, [r3, #0]
 8000540:	187b      	adds	r3, r7, r1
 8000542:	3201      	adds	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <move_snake+0x2f8>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	221f      	movs	r2, #31
 800054c:	18ba      	adds	r2, r7, r2
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d3b8      	bcc.n	80004c6 <move_snake+0x1de>
        	        }
            if (snake_length > 255) snake_length = 255;
    }

    for (int i = 1; i < snake_length; i++) {
 8000554:	2301      	movs	r3, #1
 8000556:	61bb      	str	r3, [r7, #24]
 8000558:	e014      	b.n	8000584 <move_snake+0x29c>
      if (x_buffer[0] == x_buffer[i] && y_buffer[0] == y_buffer[i]) {
 800055a:	4b22      	ldr	r3, [pc, #136]	@ (80005e4 <move_snake+0x2fc>)
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4921      	ldr	r1, [pc, #132]	@ (80005e4 <move_snake+0x2fc>)
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	18cb      	adds	r3, r1, r3
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d109      	bne.n	800057e <move_snake+0x296>
 800056a:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <move_snake+0x300>)
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	491e      	ldr	r1, [pc, #120]	@ (80005e8 <move_snake+0x300>)
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	18cb      	adds	r3, r1, r3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	d101      	bne.n	800057e <move_snake+0x296>
            return 8;  // Змійка зіткнулась сама з собою
 800057a:	2308      	movs	r3, #8
 800057c:	e029      	b.n	80005d2 <move_snake+0x2ea>
    for (int i = 1; i < snake_length; i++) {
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	3301      	adds	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <move_snake+0x2f8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	001a      	movs	r2, r3
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	4293      	cmp	r3, r2
 800058e:	dbe4      	blt.n	800055a <move_snake+0x272>
         }
      }

    // Формуємо payload для відображення змійки
    for (int i = 0; i < snake_length; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e016      	b.n	80005c4 <move_snake+0x2dc>
        payload[2 * i] = x_buffer[i];
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	001a      	movs	r2, r3
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	4910      	ldr	r1, [pc, #64]	@ (80005e4 <move_snake+0x2fc>)
 80005a2:	697a      	ldr	r2, [r7, #20]
 80005a4:	188a      	adds	r2, r1, r2
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	701a      	strb	r2, [r3, #0]
        payload[2 * i + 1] = y_buffer[i];
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	3301      	adds	r3, #1
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	18d3      	adds	r3, r2, r3
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <move_snake+0x300>)
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	188a      	adds	r2, r1, r2
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake_length; i++) {
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <move_snake+0x2f8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	001a      	movs	r2, r3
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	4293      	cmp	r3, r2
 80005ce:	dbe2      	blt.n	8000596 <move_snake+0x2ae>
    }

    return 0;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	0018      	movs	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b00a      	add	sp, #40	@ 0x28
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	2000018c 	.word	0x2000018c
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20000084 	.word	0x20000084
 80005ec:	20000104 	.word	0x20000104

080005f0 <reset_game>:

void reset_game(uint8_t *frog_x, uint8_t *frog_y) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]

    snake_length = 4;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <reset_game+0x84>)
 80005fc:	2204      	movs	r2, #4
 80005fe:	701a      	strb	r2, [r3, #0]


    uint8_t start_x = 10;
 8000600:	210b      	movs	r1, #11
 8000602:	187b      	adds	r3, r7, r1
 8000604:	220a      	movs	r2, #10
 8000606:	701a      	strb	r2, [r3, #0]
    uint8_t start_y = 15;
 8000608:	200a      	movs	r0, #10
 800060a:	183b      	adds	r3, r7, r0
 800060c:	220f      	movs	r2, #15
 800060e:	701a      	strb	r2, [r3, #0]


    x_buffer[0] = start_x;
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <reset_game+0x88>)
 8000612:	187a      	adds	r2, r7, r1
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	701a      	strb	r2, [r3, #0]
    y_buffer[0] = start_y;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <reset_game+0x8c>)
 800061a:	183a      	adds	r2, r7, r0
 800061c:	7812      	ldrb	r2, [r2, #0]
 800061e:	701a      	strb	r2, [r3, #0]


    for (int i = 1; i < snake_length; i++) {
 8000620:	2301      	movs	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e015      	b.n	8000652 <reset_game+0x62>
        x_buffer[i] = start_x - i;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	220b      	movs	r2, #11
 800062c:	18ba      	adds	r2, r7, r2
 800062e:	7812      	ldrb	r2, [r2, #0]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	b2d9      	uxtb	r1, r3
 8000634:	4a10      	ldr	r2, [pc, #64]	@ (8000678 <reset_game+0x88>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	18d3      	adds	r3, r2, r3
 800063a:	1c0a      	adds	r2, r1, #0
 800063c:	701a      	strb	r2, [r3, #0]
        y_buffer[i] = start_y;
 800063e:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <reset_game+0x8c>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	18d3      	adds	r3, r2, r3
 8000644:	220a      	movs	r2, #10
 8000646:	18ba      	adds	r2, r7, r2
 8000648:	7812      	ldrb	r2, [r2, #0]
 800064a:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < snake_length; i++) {
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <reset_game+0x84>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	001a      	movs	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4293      	cmp	r3, r2
 800065c:	dbe3      	blt.n	8000626 <reset_game+0x36>
    }


    randomize_apple(frog_x, frog_y);
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f7ff fe13 	bl	8000290 <randomize_apple>
}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b004      	add	sp, #16
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	20000000 	.word	0x20000000
 8000678:	20000004 	.word	0x20000004
 800067c:	20000084 	.word	0x20000084

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fe90 	bl	80013a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f81e 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f920 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 f900 	bl	8000894 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000694:	f000 f8ce 	bl	8000834 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000698:	f000 f876 	bl	8000788 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1,rx_buffer,sizeof(rx_buffer));
 800069c:	4906      	ldr	r1, [pc, #24]	@ (80006b8 <main+0x38>)
 800069e:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <main+0x3c>)
 80006a0:	2205      	movs	r2, #5
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 fddd 	bl	8003262 <HAL_UART_Receive_DMA>
  randomize_apple(&frog_x, &frog_y);
 80006a8:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <main+0x40>)
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <main+0x44>)
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fdee 	bl	8000290 <randomize_apple>
  //simulate_snake_game();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	e7fd      	b.n	80006b4 <main+0x34>
 80006b8:	200003a4 	.word	0x200003a4
 80006bc:	200001d8 	.word	0x200001d8
 80006c0:	200004b1 	.word	0x200004b1
 80006c4:	200004b0 	.word	0x200004b0

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b097      	sub	sp, #92	@ 0x5c
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	2428      	movs	r4, #40	@ 0x28
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2330      	movs	r3, #48	@ 0x30
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f003 ffe3 	bl	80046a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006de:	2318      	movs	r3, #24
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	0018      	movs	r0, r3
 80006e4:	2310      	movs	r3, #16
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f003 ffdb 	bl	80046a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	0018      	movs	r0, r3
 80006f2:	2314      	movs	r3, #20
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f003 ffd4 	bl	80046a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	0021      	movs	r1, r4
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2201      	movs	r2, #1
 8000708:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2202      	movs	r2, #2
 800070e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	0252      	lsls	r2, r2, #9
 8000716:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	0352      	lsls	r2, r2, #13
 800071e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	187b      	adds	r3, r7, r1
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fb23 	bl	8001d74 <HAL_RCC_OscConfig>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000732:	f000 fa7b 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	2118      	movs	r1, #24
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2207      	movs	r2, #7
 800073c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2202      	movs	r2, #2
 8000742:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2101      	movs	r1, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fe27 	bl	80023a8 <HAL_RCC_ClockConfig>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 fa65 	bl	8000c2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	0018      	movs	r0, r3
 8000772:	f001 ff5d 	bl	8002630 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800077a:	f000 fa57 	bl	8000c2c <Error_Handler>
  }
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b017      	add	sp, #92	@ 0x5c
 8000784:	bd90      	pop	{r4, r7, pc}
	...

08000788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	2308      	movs	r3, #8
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	0018      	movs	r0, r3
 8000794:	2310      	movs	r3, #16
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f003 ff83 	bl	80046a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	003b      	movs	r3, r7
 80007a0:	0018      	movs	r0, r3
 80007a2:	2308      	movs	r3, #8
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f003 ff7c 	bl	80046a4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_TIM2_Init+0xa0>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	05d2      	lsls	r2, r2, #23
 80007b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_TIM2_Init+0xa0>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <MX_TIM2_Init+0xa4>)
 80007b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_TIM2_Init+0xa0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_TIM2_Init+0xa0>)
 80007c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <MX_TIM2_Init+0xa8>)
 80007c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_TIM2_Init+0xa0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_TIM2_Init+0xa0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_TIM2_Init+0xa0>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 f809 	bl	80027ec <HAL_TIM_Base_Init>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007de:	f000 fa25 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	2108      	movs	r1, #8
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2280      	movs	r2, #128	@ 0x80
 80007e8:	0152      	lsls	r2, r2, #5
 80007ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ec:	187a      	adds	r2, r7, r1
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_TIM2_Init+0xa0>)
 80007f0:	0011      	movs	r1, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f002 f9b8 	bl	8002b68 <HAL_TIM_ConfigClockSource>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007fc:	f000 fa16 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	003b      	movs	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	003b      	movs	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080c:	003a      	movs	r2, r7
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_TIM2_Init+0xa0>)
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f002 fbc4 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800081c:	f000 fa06 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b006      	add	sp, #24
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000190 	.word	0x20000190
 800082c:	00002edf 	.word	0x00002edf
 8000830:	000003e7 	.word	0x000003e7

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USART1_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <MX_USART1_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000840:	2296      	movs	r2, #150	@ 0x96
 8000842:	0192      	lsls	r2, r2, #6
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USART1_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000876:	4b05      	ldr	r3, [pc, #20]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000878:	0018      	movs	r0, r3
 800087a:	f002 fbff 	bl	800307c <HAL_UART_Init>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f9d3 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200001d8 	.word	0x200001d8
 8000890:	40013800 	.word	0x40013800

08000894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_DMA_Init+0x38>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_DMA_Init+0x38>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	615a      	str	r2, [r3, #20]
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_DMA_Init+0x38>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	200a      	movs	r0, #10
 80008b8:	f000 fe86 	bl	80015c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80008bc:	200a      	movs	r0, #10
 80008be:	f000 fe98 	bl	80015f2 <HAL_NVIC_EnableIRQ>

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b089      	sub	sp, #36	@ 0x24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	240c      	movs	r4, #12
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f003 fedf 	bl	80046a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e6:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <MX_GPIO_Init+0xa8>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_GPIO_Init+0xa8>)
 80008ec:	2180      	movs	r1, #128	@ 0x80
 80008ee:	03c9      	lsls	r1, r1, #15
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <MX_GPIO_Init+0xa8>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	@ 0x80
 80008fa:	03db      	lsls	r3, r3, #15
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_GPIO_Init+0xa8>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_GPIO_Init+0xa8>)
 8000908:	2180      	movs	r1, #128	@ 0x80
 800090a:	0309      	lsls	r1, r1, #12
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_GPIO_Init+0xa8>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	031b      	lsls	r3, r3, #12
 8000918:	4013      	ands	r3, r2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_GPIO_Init+0xa8>)
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_GPIO_Init+0xa8>)
 8000924:	2180      	movs	r1, #128	@ 0x80
 8000926:	0289      	lsls	r1, r1, #10
 8000928:	430a      	orrs	r2, r1
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_GPIO_Init+0xa8>)
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	029b      	lsls	r3, r3, #10
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800093a:	23c0      	movs	r3, #192	@ 0xc0
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	480f      	ldr	r0, [pc, #60]	@ (800097c <MX_GPIO_Init+0xac>)
 8000940:	2200      	movs	r2, #0
 8000942:	0019      	movs	r1, r3
 8000944:	f001 f9f8 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	22c0      	movs	r2, #192	@ 0xc0
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2201      	movs	r2, #1
 8000954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000962:	193b      	adds	r3, r7, r4
 8000964:	4a05      	ldr	r2, [pc, #20]	@ (800097c <MX_GPIO_Init+0xac>)
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f001 f875 	bl	8001a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b009      	add	sp, #36	@ 0x24
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	40021000 	.word	0x40021000
 800097c:	48000800 	.word	0x48000800

08000980 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a51      	ldr	r2, [pc, #324]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x154>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d000      	beq.n	8000994 <HAL_UART_RxCpltCallback+0x14>
 8000992:	e09b      	b.n	8000acc <HAL_UART_RxCpltCallback+0x14c>

    	uint8_t cmd_code = rx_buffer[1];
 8000994:	2117      	movs	r1, #23
 8000996:	187b      	adds	r3, r7, r1
 8000998:	4a4f      	ldr	r2, [pc, #316]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x158>)
 800099a:	7852      	ldrb	r2, [r2, #1]
 800099c:	701a      	strb	r2, [r3, #0]
    	second_byte = rx_buffer[2];
 800099e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x158>)
 80009a0:	789a      	ldrb	r2, [r3, #2]
 80009a2:	4b4e      	ldr	r3, [pc, #312]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 80009a4:	701a      	strb	r2, [r3, #0]
    	switch(cmd_code){
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d002      	beq.n	80009b4 <HAL_UART_RxCpltCallback+0x34>
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d032      	beq.n	8000a18 <HAL_UART_RxCpltCallback+0x98>
 80009b2:	e070      	b.n	8000a96 <HAL_UART_RxCpltCallback+0x116>
    		case(1):
			uint8_t Decoder_receive = decode_frame(rx_buffer,sizeof(rx_buffer));
 80009b4:	4b48      	ldr	r3, [pc, #288]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x158>)
 80009b6:	2105      	movs	r1, #5
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 faba 	bl	8000f32 <decode_frame>
 80009be:	0002      	movs	r2, r0
 80009c0:	2116      	movs	r1, #22
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	701a      	strb	r2, [r3, #0]
    		if (Decoder_receive==0 && second_byte == 1) {
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d117      	bne.n	80009fe <HAL_UART_RxCpltCallback+0x7e>
 80009ce:	4b43      	ldr	r3, [pc, #268]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d113      	bne.n	80009fe <HAL_UART_RxCpltCallback+0x7e>
    			uint8_t response[5] = {0x7E,0x01,0x02,0xD1,0x93};
 80009d6:	2010      	movs	r0, #16
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	4a41      	ldr	r2, [pc, #260]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x160>)
 80009dc:	6811      	ldr	r1, [r2, #0]
 80009de:	6019      	str	r1, [r3, #0]
 80009e0:	7912      	ldrb	r2, [r2, #4]
 80009e2:	711a      	strb	r2, [r3, #4]
    		    HAL_UART_Transmit(&huart1, response, sizeof(response), 100);
 80009e4:	1839      	adds	r1, r7, r0
 80009e6:	483f      	ldr	r0, [pc, #252]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x164>)
 80009e8:	2364      	movs	r3, #100	@ 0x64
 80009ea:	2205      	movs	r2, #5
 80009ec:	f002 fb9a 	bl	8003124 <HAL_UART_Transmit>
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 80009f0:	2380      	movs	r3, #128	@ 0x80
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	483c      	ldr	r0, [pc, #240]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x168>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	0019      	movs	r1, r3
 80009fa:	f001 f99d 	bl	8001d38 <HAL_GPIO_WritePin>

    		}
    		if (Decoder_receive==4) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
 80009fe:	2316      	movs	r3, #22
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d145      	bne.n	8000a94 <HAL_UART_RxCpltCallback+0x114>
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4836      	ldr	r0, [pc, #216]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x168>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	0019      	movs	r1, r3
 8000a12:	f001 f991 	bl	8001d38 <HAL_GPIO_WritePin>
    		break;
 8000a16:	e03d      	b.n	8000a94 <HAL_UART_RxCpltCallback+0x114>

    		case(3):
				 if (second_byte == 0) {
 8000a18:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d106      	bne.n	8000a2e <HAL_UART_RxCpltCallback+0xae>
					 im_single_packet = 1;
 8000a20:	4b32      	ldr	r3, [pc, #200]	@ (8000aec <HAL_UART_RxCpltCallback+0x16c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
		             HAL_TIM_Base_Start_IT(&htim2);
 8000a26:	4b32      	ldr	r3, [pc, #200]	@ (8000af0 <HAL_UART_RxCpltCallback+0x170>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 ff2f 	bl	800288c <HAL_TIM_Base_Start_IT>
		            }

    				if (second_byte == 5 && flag == 0) {
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b05      	cmp	r3, #5
 8000a34:	d10a      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0xcc>
 8000a36:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <HAL_UART_RxCpltCallback+0x174>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d106      	bne.n	8000a4c <HAL_UART_RxCpltCallback+0xcc>
    					HAL_TIM_Base_Stop_IT(&htim2);
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000af0 <HAL_UART_RxCpltCallback+0x170>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 ff75 	bl	8002930 <HAL_TIM_Base_Stop_IT>
    					flag = 1;
 8000a46:	4b2b      	ldr	r3, [pc, #172]	@ (8000af4 <HAL_UART_RxCpltCallback+0x174>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
    				}
    				if (second_byte == 5 && flag == 1 ) {
 8000a4c:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b05      	cmp	r3, #5
 8000a52:	d10a      	bne.n	8000a6a <HAL_UART_RxCpltCallback+0xea>
 8000a54:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <HAL_UART_RxCpltCallback+0x174>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <HAL_UART_RxCpltCallback+0xea>
    				   	HAL_TIM_Base_Start_IT(&htim2);
 8000a5c:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <HAL_UART_RxCpltCallback+0x170>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 ff14 	bl	800288c <HAL_TIM_Base_Start_IT>
     					flag = 0;
 8000a64:	4b23      	ldr	r3, [pc, #140]	@ (8000af4 <HAL_UART_RxCpltCallback+0x174>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
    				   }

    				if (second_byte == 1 || second_byte == 2 || second_byte == 3 || second_byte == 4) {
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d00b      	beq.n	8000a8a <HAL_UART_RxCpltCallback+0x10a>
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d007      	beq.n	8000a8a <HAL_UART_RxCpltCallback+0x10a>
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d003      	beq.n	8000a8a <HAL_UART_RxCpltCallback+0x10a>
 8000a82:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d105      	bne.n	8000a96 <HAL_UART_RxCpltCallback+0x116>
    					HAL_TIM_Base_Start_IT(&htim2);
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <HAL_UART_RxCpltCallback+0x170>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 fefd 	bl	800288c <HAL_TIM_Base_Start_IT>
 8000a92:	e000      	b.n	8000a96 <HAL_UART_RxCpltCallback+0x116>
    		break;
 8000a94:	46c0      	nop			@ (mov r8, r8)
    				}
    		}
    	 HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 8000a96:	4910      	ldr	r1, [pc, #64]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x158>)
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x164>)
 8000a9a:	2205      	movs	r2, #5
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 fbe0 	bl	8003262 <HAL_UART_Receive_DMA>




    	 if (move_snake(second_byte, &frog_x, &frog_y, payload) == 8) {
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_UART_RxCpltCallback+0x15c>)
 8000aa4:	7818      	ldrb	r0, [r3, #0]
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HAL_UART_RxCpltCallback+0x178>)
 8000aa8:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <HAL_UART_RxCpltCallback+0x17c>)
 8000aaa:	4915      	ldr	r1, [pc, #84]	@ (8000b00 <HAL_UART_RxCpltCallback+0x180>)
 8000aac:	f7ff fc1c 	bl	80002e8 <move_snake>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d10a      	bne.n	8000acc <HAL_UART_RxCpltCallback+0x14c>
    	 HAL_TIM_Base_Stop_IT(&htim2);
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_UART_RxCpltCallback+0x170>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f001 ff39 	bl	8002930 <HAL_TIM_Base_Stop_IT>
    	 uint8_t response[5] = {0x7E,0x06,0x02,0xD1,0x93}; // треба згенерувати crc
 8000abe:	2308      	movs	r3, #8
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_UART_RxCpltCallback+0x184>)
 8000ac4:	6811      	ldr	r1, [r2, #0]
 8000ac6:	6019      	str	r1, [r3, #0]
 8000ac8:	7912      	ldrb	r2, [r2, #4]
 8000aca:	711a      	strb	r2, [r3, #4]



    }

}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b006      	add	sp, #24
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	200003a4 	.word	0x200003a4
 8000adc:	200004ac 	.word	0x200004ac
 8000ae0:	08005450 	.word	0x08005450
 8000ae4:	200001d8 	.word	0x200001d8
 8000ae8:	48000800 	.word	0x48000800
 8000aec:	200004ae 	.word	0x200004ae
 8000af0:	20000190 	.word	0x20000190
 8000af4:	200004af 	.word	0x200004af
 8000af8:	200003ac 	.word	0x200003ac
 8000afc:	200004b1 	.word	0x200004b1
 8000b00:	200004b0 	.word	0x200004b0
 8000b04:	08005458 	.word	0x08005458

08000b08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2380      	movs	r3, #128	@ 0x80
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d13f      	bne.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x94>
        time_count++;
 8000b1c:	4b38      	ldr	r3, [pc, #224]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b36      	ldr	r3, [pc, #216]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b26:	701a      	strb	r2, [r3, #0]


        if (im_single_packet) {
 8000b28:	4b36      	ldr	r3, [pc, #216]	@ (8000c04 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d035      	beq.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x94>

        	reset_game(&frog_x, &frog_y);
 8000b30:	4a35      	ldr	r2, [pc, #212]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b32:	4b36      	ldr	r3, [pc, #216]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff fd5a 	bl	80005f0 <reset_game>

        	uint8_t initial_snake_payload[8] = {10, 15, 11, 15, 12, 15, 13, 15};// стартовий пакет змійки(потрібно узгодити)
 8000b3c:	260c      	movs	r6, #12
 8000b3e:	19bb      	adds	r3, r7, r6
 8000b40:	4a33      	ldr	r2, [pc, #204]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b42:	ca03      	ldmia	r2!, {r0, r1}
 8000b44:	c303      	stmia	r3!, {r0, r1}
            move_snake(second_byte, &frog_x, &frog_y, initial_snake_payload);
 8000b46:	4b33      	ldr	r3, [pc, #204]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b48:	7818      	ldrb	r0, [r3, #0]
 8000b4a:	19bb      	adds	r3, r7, r6
 8000b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b4e:	492f      	ldr	r1, [pc, #188]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b50:	f7ff fbca 	bl	80002e8 <move_snake>
            uint8_t frame_length = encode_frame_snake(initial_snake_payload, snake_length*2, tx_buffer, 0x02, frog_x, frog_y);
 8000b54:	4b30      	ldr	r3, [pc, #192]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	18db      	adds	r3, r3, r3
 8000b5a:	b2d9      	uxtb	r1, r3
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4a29      	ldr	r2, [pc, #164]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	2017      	movs	r0, #23
 8000b66:	183c      	adds	r4, r7, r0
 8000b68:	4d2c      	ldr	r5, [pc, #176]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b6a:	19b8      	adds	r0, r7, r6
 8000b6c:	9201      	str	r2, [sp, #4]
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2302      	movs	r3, #2
 8000b72:	002a      	movs	r2, r5
 8000b74:	f000 f952 	bl	8000e1c <encode_frame_snake>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart1, tx_buffer, frame_length, 100);
 8000b7c:	2017      	movs	r0, #23
 8000b7e:	183b      	adds	r3, r7, r0
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	4925      	ldr	r1, [pc, #148]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b86:	4826      	ldr	r0, [pc, #152]	@ (8000c20 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b88:	2364      	movs	r3, #100	@ 0x64
 8000b8a:	f002 facb 	bl	8003124 <HAL_UART_Transmit>
            HAL_TIM_Base_Stop_IT(&htim2);
 8000b8e:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b90:	0018      	movs	r0, r3
 8000b92:	f001 fecd 	bl	8002930 <HAL_TIM_Base_Stop_IT>
            im_single_packet = 0;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
            }
        }

                if (time_count > 1 && !im_single_packet) {
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d929      	bls.n	8000bf8 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d125      	bne.n	8000bf8 <HAL_TIM_PeriodElapsedCallback+0xf0>
                    move_snake(second_byte, &frog_x, &frog_y, payload);
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000bae:	7818      	ldrb	r0, [r3, #0]
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000bb2:	4a15      	ldr	r2, [pc, #84]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bb4:	4915      	ldr	r1, [pc, #84]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000bb6:	f7ff fb97 	bl	80002e8 <move_snake>
                    uint8_t frame_length = encode_frame_snake(payload, snake_length*2, tx_buffer, 0x02, frog_x, frog_y);
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	18db      	adds	r3, r3, r3
 8000bc0:	b2d9      	uxtb	r1, r3
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4a10      	ldr	r2, [pc, #64]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	2616      	movs	r6, #22
 8000bcc:	19bc      	adds	r4, r7, r6
 8000bce:	4d13      	ldr	r5, [pc, #76]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000bd0:	4815      	ldr	r0, [pc, #84]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000bd2:	9201      	str	r2, [sp, #4]
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	002a      	movs	r2, r5
 8000bda:	f000 f91f 	bl	8000e1c <encode_frame_snake>
 8000bde:	0003      	movs	r3, r0
 8000be0:	7023      	strb	r3, [r4, #0]
                    HAL_UART_Transmit(&huart1, tx_buffer, frame_length, 100);
 8000be2:	19bb      	adds	r3, r7, r6
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000bea:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bec:	2364      	movs	r3, #100	@ 0x64
 8000bee:	f002 fa99 	bl	8003124 <HAL_UART_Transmit>

                    time_count = 0;
 8000bf2:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
                }
 }
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b007      	add	sp, #28
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c00:	200004ad 	.word	0x200004ad
 8000c04:	200004ae 	.word	0x200004ae
 8000c08:	200004b1 	.word	0x200004b1
 8000c0c:	200004b0 	.word	0x200004b0
 8000c10:	08005460 	.word	0x08005460
 8000c14:	200004ac 	.word	0x200004ac
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	200002a4 	.word	0x200002a4
 8000c20:	200001d8 	.word	0x200001d8
 8000c24:	20000190 	.word	0x20000190
 8000c28:	200003ac 	.word	0x200003ac

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <crc16_ccitt_snake>:



// Функція обчислення CRC-16-CCITT для пакету змійки (поліном 0x1021, початкове значення 0xFFFF)
// Обчислення CRC-16-CCITT для пакету змійки
uint16_t crc16_ccitt_snake(const uint8_t *data, uint8_t len, uint8_t cmd, uint8_t frog_x, uint8_t frog_y) {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	000c      	movs	r4, r1
 8000c42:	0010      	movs	r0, r2
 8000c44:	0019      	movs	r1, r3
 8000c46:	1cfb      	adds	r3, r7, #3
 8000c48:	1c22      	adds	r2, r4, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	1cbb      	adds	r3, r7, #2
 8000c4e:	1c02      	adds	r2, r0, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	1c7b      	adds	r3, r7, #1
 8000c54:	1c0a      	adds	r2, r1, #0
 8000c56:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000c58:	210e      	movs	r1, #14
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4252      	negs	r2, r2
 8000c60:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);
 8000c62:	1cbb      	adds	r3, r7, #2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	5e1b      	ldrsh	r3, [r3, r0]
 8000c70:	4053      	eors	r3, r2
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	801a      	strh	r2, [r3, #0]
    crc ^= (((uint16_t)frog_x << 8) | frog_y);
 8000c78:	1c7b      	adds	r3, r7, #1
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b21a      	sxth	r2, r3
 8000c80:	2320      	movs	r3, #32
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2000      	movs	r0, #0
 8000c90:	5e1b      	ldrsh	r3, [r3, r0]
 8000c92:	4053      	eors	r3, r2
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	801a      	strh	r2, [r3, #0]
 8000ca2:	e03b      	b.n	8000d1c <crc16_ccitt_snake+0xe4>
        crc ^= ((uint16_t)data[i] << 8);
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	18d3      	adds	r3, r2, r3
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	210e      	movs	r1, #14
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2000      	movs	r0, #0
 8000cba:	5e1b      	ldrsh	r3, [r3, r0]
 8000cbc:	4053      	eors	r3, r2
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	e01b      	b.n	8000d06 <crc16_ccitt_snake+0xce>
            if (crc & 0x8000)
 8000cce:	210e      	movs	r1, #14
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	5e9b      	ldrsh	r3, [r3, r2]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	da09      	bge.n	8000cee <crc16_ccitt_snake+0xb6>
                crc = (crc << 1) ^ 0x1021;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <crc16_ccitt_snake+0x104>)
 8000ce4:	4053      	eors	r3, r2
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	801a      	strh	r2, [r3, #0]
 8000cec:	e005      	b.n	8000cfa <crc16_ccitt_snake+0xc2>
            else
                crc <<= 1;
 8000cee:	230e      	movs	r3, #14
 8000cf0:	18fa      	adds	r2, r7, r3
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	18db      	adds	r3, r3, r3
 8000cf8:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000cfa:	210b      	movs	r1, #11
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	3201      	adds	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	230b      	movs	r3, #11
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b07      	cmp	r3, #7
 8000d0e:	d9de      	bls.n	8000cce <crc16_ccitt_snake+0x96>
    for (uint16_t i = 0; i < len; i++) {
 8000d10:	210c      	movs	r1, #12
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	881a      	ldrh	r2, [r3, #0]
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	3201      	adds	r2, #1
 8000d1a:	801a      	strh	r2, [r3, #0]
 8000d1c:	1cfb      	adds	r3, r7, #3
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	220c      	movs	r2, #12
 8000d24:	18ba      	adds	r2, r7, r2
 8000d26:	8812      	ldrh	r2, [r2, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d3bb      	bcc.n	8000ca4 <crc16_ccitt_snake+0x6c>
        }
    }
    return crc;
 8000d2c:	230e      	movs	r3, #14
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	881b      	ldrh	r3, [r3, #0]
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b005      	add	sp, #20
 8000d38:	bd90      	pop	{r4, r7, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	00001021 	.word	0x00001021

08000d40 <crc16_ccitt>:
// Функція обчислення CRC-16-CCITT (поліном 0x1021, початкове значення 0xFFFF)
uint16_t crc16_ccitt(const uint8_t *data, uint16_t len, uint8_t cmd) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	0008      	movs	r0, r1
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	1cbb      	adds	r3, r7, #2
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	801a      	strh	r2, [r3, #0]
 8000d52:	1c7b      	adds	r3, r7, #1
 8000d54:	1c0a      	adds	r2, r1, #0
 8000d56:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;									//початкове значення
 8000d58:	210e      	movs	r1, #14
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4252      	negs	r2, r2
 8000d60:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);							//команда cmd
 8000d62:	1c7b      	adds	r3, r7, #1
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	b21a      	sxth	r2, r3
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	5e1b      	ldrsh	r3, [r3, r0]
 8000d70:	4053      	eors	r3, r2
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000d78:	230c      	movs	r3, #12
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	e03b      	b.n	8000dfa <crc16_ccitt+0xba>
        crc ^= ((uint16_t)data[i] << 8);
 8000d82:	230c      	movs	r3, #12
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	18d3      	adds	r3, r2, r3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	210e      	movs	r1, #14
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2000      	movs	r0, #0
 8000d98:	5e1b      	ldrsh	r3, [r3, r0]
 8000d9a:	4053      	eors	r3, r2
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000da2:	230b      	movs	r3, #11
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e01b      	b.n	8000de4 <crc16_ccitt+0xa4>
            if (crc & 0x8000)
 8000dac:	210e      	movs	r1, #14
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	5e9b      	ldrsh	r3, [r3, r2]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	da09      	bge.n	8000dcc <crc16_ccitt+0x8c>
                crc = (crc << 1) ^ 0x1021;					//поліном
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	4a15      	ldr	r2, [pc, #84]	@ (8000e18 <crc16_ccitt+0xd8>)
 8000dc2:	4053      	eors	r3, r2
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	801a      	strh	r2, [r3, #0]
 8000dca:	e005      	b.n	8000dd8 <crc16_ccitt+0x98>
            else
                crc <<= 1;
 8000dcc:	230e      	movs	r3, #14
 8000dce:	18fa      	adds	r2, r7, r3
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	18db      	adds	r3, r3, r3
 8000dd6:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000dd8:	210b      	movs	r1, #11
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	3201      	adds	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
 8000de4:	230b      	movs	r3, #11
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b07      	cmp	r3, #7
 8000dec:	d9de      	bls.n	8000dac <crc16_ccitt+0x6c>
    for (uint16_t i = 0; i < len; i++) {
 8000dee:	210c      	movs	r1, #12
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	3201      	adds	r2, #1
 8000df8:	801a      	strh	r2, [r3, #0]
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	18fa      	adds	r2, r7, r3
 8000dfe:	1cbb      	adds	r3, r7, #2
 8000e00:	8812      	ldrh	r2, [r2, #0]
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3bc      	bcc.n	8000d82 <crc16_ccitt+0x42>
        }
    }
    return crc;
 8000e08:	230e      	movs	r3, #14
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	881b      	ldrh	r3, [r3, #0]
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	00001021 	.word	0x00001021

08000e1c <encode_frame_snake>:

//функція кодування пакету змії
uint8_t encode_frame_snake(const uint8_t *payload, uint8_t payload_len, uint8_t *tx_buffer, uint8_t cmd_byte, uint8_t frog_x, uint8_t frog_y) {
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	0008      	movs	r0, r1
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	0019      	movs	r1, r3
 8000e2a:	240b      	movs	r4, #11
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	1c02      	adds	r2, r0, #0
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	200a      	movs	r0, #10
 8000e34:	183b      	adds	r3, r7, r0
 8000e36:	1c0a      	adds	r2, r1, #0
 8000e38:	701a      	strb	r2, [r3, #0]

	tx_buffer[0] = START_BYTE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	227e      	movs	r2, #126	@ 0x7e
 8000e3e:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = cmd_byte;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	183a      	adds	r2, r7, r0
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = payload_len;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	193a      	adds	r2, r7, r4
 8000e50:	7812      	ldrb	r2, [r2, #0]
 8000e52:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < payload_len; i++) {
 8000e54:	2317      	movs	r3, #23
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e011      	b.n	8000e82 <encode_frame_snake+0x66>
    tx_buffer[3 + i] = payload[i];
 8000e5e:	2017      	movs	r0, #23
 8000e60:	183b      	adds	r3, r7, r0
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	18d2      	adds	r2, r2, r3
 8000e68:	183b      	adds	r3, r7, r0
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	3303      	adds	r3, #3
 8000e6e:	0019      	movs	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	185b      	adds	r3, r3, r1
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < payload_len; i++) {
 8000e78:	183b      	adds	r3, r7, r0
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	183b      	adds	r3, r7, r0
 8000e7e:	3201      	adds	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	2317      	movs	r3, #23
 8000e84:	18fa      	adds	r2, r7, r3
 8000e86:	210b      	movs	r1, #11
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	7812      	ldrb	r2, [r2, #0]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3e5      	bcc.n	8000e5e <encode_frame_snake+0x42>
    }

    tx_buffer[3 + payload_len] = frog_x;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	3303      	adds	r3, #3
 8000e98:	001a      	movs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	189a      	adds	r2, r3, r2
 8000e9e:	2528      	movs	r5, #40	@ 0x28
 8000ea0:	2008      	movs	r0, #8
 8000ea2:	182b      	adds	r3, r5, r0
 8000ea4:	19db      	adds	r3, r3, r7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	7013      	strb	r3, [r2, #0]
    tx_buffer[4 + payload_len] = frog_y;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	3304      	adds	r3, #4
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	189b      	adds	r3, r3, r2
 8000eb6:	222c      	movs	r2, #44	@ 0x2c
 8000eb8:	0006      	movs	r6, r0
 8000eba:	1812      	adds	r2, r2, r0
 8000ebc:	19d2      	adds	r2, r2, r7
 8000ebe:	7812      	ldrb	r2, [r2, #0]
 8000ec0:	701a      	strb	r2, [r3, #0]

   uint16_t crc = crc16_ccitt_snake(payload, payload_len, cmd_byte, frog_x, frog_y);
 8000ec2:	2014      	movs	r0, #20
 8000ec4:	183c      	adds	r4, r7, r0
 8000ec6:	0030      	movs	r0, r6
 8000ec8:	19ab      	adds	r3, r5, r6
 8000eca:	19db      	adds	r3, r3, r7
 8000ecc:	781d      	ldrb	r5, [r3, #0]
 8000ece:	260a      	movs	r6, #10
 8000ed0:	19bb      	adds	r3, r7, r6
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	000e      	movs	r6, r1
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	7819      	ldrb	r1, [r3, #0]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	469c      	mov	ip, r3
 8000ede:	232c      	movs	r3, #44	@ 0x2c
 8000ee0:	181b      	adds	r3, r3, r0
 8000ee2:	19db      	adds	r3, r3, r7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	002b      	movs	r3, r5
 8000eea:	4660      	mov	r0, ip
 8000eec:	f7ff fea4 	bl	8000c38 <crc16_ccitt_snake>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	8023      	strh	r3, [r4, #0]
   	tx_buffer[5 + payload_len] = (crc >> 8) & 0xFF;
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	183b      	adds	r3, r7, r0
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	0a1b      	lsrs	r3, r3, #8
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	19bb      	adds	r3, r7, r6
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3305      	adds	r3, #5
 8000f04:	0019      	movs	r1, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	185b      	adds	r3, r3, r1
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	701a      	strb	r2, [r3, #0]
    tx_buffer[6 + payload_len] = crc & 0xFF;
 8000f0e:	19bb      	adds	r3, r7, r6
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3306      	adds	r3, #6
 8000f14:	001a      	movs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	189b      	adds	r3, r3, r2
 8000f1a:	183a      	adds	r2, r7, r0
 8000f1c:	8812      	ldrh	r2, [r2, #0]
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	701a      	strb	r2, [r3, #0]

    return (7+payload_len);
 8000f22:	19bb      	adds	r3, r7, r6
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	3307      	adds	r3, #7
 8000f28:	b2db      	uxtb	r3, r3
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b007      	add	sp, #28
 8000f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f32 <decode_frame>:
    tx_buffer[3] = (crc >> 8) & 0xFF; 							// crc high
    tx_buffer[4] = crc & 0xFF;        							// crc low
    return 5;
}

int decode_frame(const uint8_t *frame, uint8_t frame_len) {
 8000f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	1cfb      	adds	r3, r7, #3
 8000f3e:	701a      	strb	r2, [r3, #0]
	// Кадр занадто короткий
    if (frame_len < 5){
 8000f40:	1cfb      	adds	r3, r7, #3
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d801      	bhi.n	8000f4c <decode_frame+0x1a>
    	return 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e034      	b.n	8000fb6 <decode_frame+0x84>
    }
    // Невірний стартовий байт
    if (frame[0] != START_BYTE){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b7e      	cmp	r3, #126	@ 0x7e
 8000f52:	d001      	beq.n	8000f58 <decode_frame+0x26>
    		return 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	e02e      	b.n	8000fb6 <decode_frame+0x84>
    }

    uint8_t cmd_byte = frame[1];
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	701a      	strb	r2, [r3, #0]
   	uint8_t payload = frame[2];
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1c9a      	adds	r2, r3, #2
 8000f68:	230e      	movs	r3, #14
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	701a      	strb	r2, [r3, #0]

    uint16_t received_crc = (frame[3] << 8) | frame[4];
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3303      	adds	r3, #3
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	250c      	movs	r5, #12
 8000f88:	197b      	adds	r3, r7, r5
 8000f8a:	801a      	strh	r2, [r3, #0]

    uint16_t computed_crc = crc16_ccitt(&frame[2], 1, cmd_byte);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	1c98      	adds	r0, r3, #2
 8000f90:	260a      	movs	r6, #10
 8000f92:	19bc      	adds	r4, r7, r6
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	f7ff fed0 	bl	8000d40 <crc16_ccitt>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	8023      	strh	r3, [r4, #0]
    return (received_crc == computed_crc) ? 0 : 4;
 8000fa4:	197a      	adds	r2, r7, r5
 8000fa6:	19bb      	adds	r3, r7, r6
 8000fa8:	8812      	ldrh	r2, [r2, #0]
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d101      	bne.n	8000fb4 <decode_frame+0x82>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e000      	b.n	8000fb6 <decode_frame+0x84>
 8000fb4:	2304      	movs	r3, #4
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b005      	add	sp, #20
 8000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_MspInit+0x44>)
 8000fc8:	699a      	ldr	r2, [r3, #24]
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_MspInit+0x44>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	619a      	str	r2, [r3, #24]
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <HAL_MspInit+0x44>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_MspInit+0x44>)
 8000fe0:	69da      	ldr	r2, [r3, #28]
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_MspInit+0x44>)
 8000fe4:	2180      	movs	r1, #128	@ 0x80
 8000fe6:	0549      	lsls	r1, r1, #21
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	61da      	str	r2, [r3, #28]
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <HAL_MspInit+0x44>)
 8000fee:	69da      	ldr	r2, [r3, #28]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	055b      	lsls	r3, r3, #21
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	05db      	lsls	r3, r3, #23
 8001018:	429a      	cmp	r2, r3
 800101a:	d113      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_TIM_Base_MspInit+0x44>)
 800101e:	69da      	ldr	r2, [r3, #28]
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_TIM_Base_MspInit+0x44>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	61da      	str	r2, [r3, #28]
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HAL_TIM_Base_MspInit+0x44>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	2201      	movs	r2, #1
 800102e:	4013      	ands	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	200f      	movs	r0, #15
 800103a:	f000 fac5 	bl	80015c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800103e:	200f      	movs	r0, #15
 8001040:	f000 fad7 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	@ 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	2414      	movs	r4, #20
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f003 fb1e 	bl	80046a4 <memset>
  if(huart->Instance==USART1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a34      	ldr	r2, [pc, #208]	@ (8001140 <HAL_UART_MspInit+0xf0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d161      	bne.n	8001136 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001072:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <HAL_UART_MspInit+0xf4>)
 8001074:	699a      	ldr	r2, [r3, #24]
 8001076:	4b33      	ldr	r3, [pc, #204]	@ (8001144 <HAL_UART_MspInit+0xf4>)
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	01c9      	lsls	r1, r1, #7
 800107c:	430a      	orrs	r2, r1
 800107e:	619a      	str	r2, [r3, #24]
 8001080:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <HAL_UART_MspInit+0xf4>)
 8001082:	699a      	ldr	r2, [r3, #24]
 8001084:	2380      	movs	r3, #128	@ 0x80
 8001086:	01db      	lsls	r3, r3, #7
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <HAL_UART_MspInit+0xf4>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <HAL_UART_MspInit+0xf4>)
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	0289      	lsls	r1, r1, #10
 8001098:	430a      	orrs	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <HAL_UART_MspInit+0xf4>)
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	2380      	movs	r3, #128	@ 0x80
 80010a2:	029b      	lsls	r3, r3, #10
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	22c0      	movs	r2, #192	@ 0xc0
 80010ae:	00d2      	lsls	r2, r2, #3
 80010b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	0021      	movs	r1, r4
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2202      	movs	r2, #2
 80010b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	2203      	movs	r2, #3
 80010c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	2201      	movs	r2, #1
 80010ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	187a      	adds	r2, r7, r1
 80010ce:	2390      	movs	r3, #144	@ 0x90
 80010d0:	05db      	lsls	r3, r3, #23
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fcbf 	bl	8001a58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <HAL_UART_MspInit+0xfc>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e0:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 8001100:	2220      	movs	r2, #32
 8001102:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 800110c:	0018      	movs	r0, r3
 800110e:	f000 fa8d 	bl	800162c <HAL_DMA_Init>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001116:	f7ff fd89 	bl	8000c2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 800111e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001120:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <HAL_UART_MspInit+0xf8>)
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	201b      	movs	r0, #27
 800112c:	f000 fa4c 	bl	80015c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001130:	201b      	movs	r0, #27
 8001132:	f000 fa5e 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b00b      	add	sp, #44	@ 0x2c
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	40013800 	.word	0x40013800
 8001144:	40021000 	.word	0x40021000
 8001148:	20000260 	.word	0x20000260
 800114c:	40020030 	.word	0x40020030

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001154:	46c0      	nop			@ (mov r8, r8)
 8001156:	e7fd      	b.n	8001154 <NMI_Handler+0x4>

08001158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	e7fd      	b.n	800115c <HardFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f000 f95e 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <DMA1_Channel2_3_IRQHandler+0x14>)
 800118a:	0018      	movs	r0, r3
 800118c:	f000 fb79 	bl	8001882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001190:	46c0      	nop			@ (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	20000260 	.word	0x20000260

0800119c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <TIM2_IRQHandler+0x14>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f001 fbf2 	bl	800298c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	20000190 	.word	0x20000190

080011b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <USART1_IRQHandler+0x14>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f002 f8a8 	bl	8003310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	200001d8 	.word	0x200001d8

080011cc <_getpid>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	2301      	movs	r3, #1
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_kill>:
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	f003 fab5 	bl	8004750 <__errno>
 80011e6:	0003      	movs	r3, r0
 80011e8:	2216      	movs	r2, #22
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	425b      	negs	r3, r3
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_exit>:
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	2301      	movs	r3, #1
 8001202:	425a      	negs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ffe5 	bl	80011d8 <_kill>
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	e7fd      	b.n	800120e <_exit+0x16>

08001212 <_read>:
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e00a      	b.n	800123a <_read+0x28>
 8001224:	e000      	b.n	8001228 <_read+0x16>
 8001226:	bf00      	nop
 8001228:	0001      	movs	r1, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	60ba      	str	r2, [r7, #8]
 8001230:	b2ca      	uxtb	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	dbf0      	blt.n	8001224 <_read+0x12>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b006      	add	sp, #24
 800124a:	bd80      	pop	{r7, pc}

0800124c <_write>:
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e009      	b.n	8001272 <_write+0x26>
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60ba      	str	r2, [r7, #8]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	0018      	movs	r0, r3
 8001268:	e000      	b.n	800126c <_write+0x20>
 800126a:	bf00      	nop
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbf1      	blt.n	800125e <_write+0x12>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b006      	add	sp, #24
 8001282:	bd80      	pop	{r7, pc}

08001284 <_close>:
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	2301      	movs	r3, #1
 800128e:	425b      	negs	r3, r3
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}

08001298 <_fstat>:
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2280      	movs	r2, #128	@ 0x80
 80012a6:	0192      	lsls	r2, r2, #6
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	2300      	movs	r3, #0
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_isatty>:
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	2301      	movs	r3, #1
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_lseek>:
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	2300      	movs	r3, #0
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b004      	add	sp, #16
 80012da:	bd80      	pop	{r7, pc}

080012dc <_sbrk>:
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	18d3      	adds	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
 800130c:	f003 fa20 	bl	8004750 <__errno>
 8001310:	0003      	movs	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	425b      	negs	r3, r3
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	18d2      	adds	r2, r2, r3
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <_sbrk+0x64>)
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b006      	add	sp, #24
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20002000 	.word	0x20002000
 800133c:	00000400 	.word	0x00000400
 8001340:	200004b4 	.word	0x200004b4
 8001344:	20000608 	.word	0x20000608

08001348 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800134c:	46c0      	nop			@ (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001354:	480d      	ldr	r0, [pc, #52]	@ (800138c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001356:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001358:	f7ff fff6 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480c      	ldr	r0, [pc, #48]	@ (8001390 <LoopForever+0x6>)
  ldr r1, =_edata
 800135e:	490d      	ldr	r1, [pc, #52]	@ (8001394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001360:	4a0d      	ldr	r2, [pc, #52]	@ (8001398 <LoopForever+0xe>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001374:	4c0a      	ldr	r4, [pc, #40]	@ (80013a0 <LoopForever+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001382:	f003 f9eb 	bl	800475c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff f97b 	bl	8000680 <main>

0800138a <LoopForever>:

LoopForever:
    b LoopForever
 800138a:	e7fe      	b.n	800138a <LoopForever>
  ldr   r0, =_estack
 800138c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001394:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001398:	08005588 	.word	0x08005588
  ldr r2, =_sbss
 800139c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80013a0:	20000608 	.word	0x20000608

080013a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC1_COMP_IRQHandler>
	...

080013a8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <HAL_Init+0x24>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_Init+0x24>)
 80013b2:	2110      	movs	r1, #16
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f809 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013be:	f7ff fdff 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_InitTick+0x5c>)
 80013da:	681c      	ldr	r4, [r3, #0]
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_InitTick+0x60>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	0019      	movs	r1, r3
 80013e2:	23fa      	movs	r3, #250	@ 0xfa
 80013e4:	0098      	lsls	r0, r3, #2
 80013e6:	f7fe fe99 	bl	800011c <__udivsi3>
 80013ea:	0003      	movs	r3, r0
 80013ec:	0019      	movs	r1, r3
 80013ee:	0020      	movs	r0, r4
 80013f0:	f7fe fe94 	bl	800011c <__udivsi3>
 80013f4:	0003      	movs	r3, r0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 f90b 	bl	8001612 <HAL_SYSTICK_Config>
 80013fc:	1e03      	subs	r3, r0, #0
 80013fe:	d001      	beq.n	8001404 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e00f      	b.n	8001424 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d80b      	bhi.n	8001422 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	2301      	movs	r3, #1
 800140e:	425b      	negs	r3, r3
 8001410:	2200      	movs	r2, #0
 8001412:	0018      	movs	r0, r3
 8001414:	f000 f8d8 	bl	80015c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_InitTick+0x64>)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	b003      	add	sp, #12
 800142a:	bd90      	pop	{r4, r7, pc}
 800142c:	20000108 	.word	0x20000108
 8001430:	20000110 	.word	0x20000110
 8001434:	2000010c 	.word	0x2000010c

08001438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_IncTick+0x1c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	001a      	movs	r2, r3
 8001442:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_IncTick+0x20>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	18d2      	adds	r2, r2, r3
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <HAL_IncTick+0x20>)
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	20000110 	.word	0x20000110
 8001458:	200004b8 	.word	0x200004b8

0800145c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b02      	ldr	r3, [pc, #8]	@ (800146c <HAL_GetTick+0x10>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	200004b8 	.word	0x200004b8

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	0002      	movs	r2, r0
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b7f      	cmp	r3, #127	@ 0x7f
 8001482:	d809      	bhi.n	8001498 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	001a      	movs	r2, r3
 800148a:	231f      	movs	r3, #31
 800148c:	401a      	ands	r2, r3
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <__NVIC_EnableIRQ+0x30>)
 8001490:	2101      	movs	r1, #1
 8001492:	4091      	lsls	r1, r2
 8001494:	000a      	movs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
  }
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	0002      	movs	r2, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80014b8:	d828      	bhi.n	800150c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001578 <__NVIC_SetPriority+0xd4>)
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	33c0      	adds	r3, #192	@ 0xc0
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	589b      	ldr	r3, [r3, r2]
 80014ca:	1dfa      	adds	r2, r7, #7
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	0011      	movs	r1, r2
 80014d0:	2203      	movs	r2, #3
 80014d2:	400a      	ands	r2, r1
 80014d4:	00d2      	lsls	r2, r2, #3
 80014d6:	21ff      	movs	r1, #255	@ 0xff
 80014d8:	4091      	lsls	r1, r2
 80014da:	000a      	movs	r2, r1
 80014dc:	43d2      	mvns	r2, r2
 80014de:	401a      	ands	r2, r3
 80014e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	22ff      	movs	r2, #255	@ 0xff
 80014e8:	401a      	ands	r2, r3
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	0018      	movs	r0, r3
 80014f0:	2303      	movs	r3, #3
 80014f2:	4003      	ands	r3, r0
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f8:	481f      	ldr	r0, [pc, #124]	@ (8001578 <__NVIC_SetPriority+0xd4>)
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	430a      	orrs	r2, r1
 8001504:	33c0      	adds	r3, #192	@ 0xc0
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800150a:	e031      	b.n	8001570 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800150c:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <__NVIC_SetPriority+0xd8>)
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	0019      	movs	r1, r3
 8001514:	230f      	movs	r3, #15
 8001516:	400b      	ands	r3, r1
 8001518:	3b08      	subs	r3, #8
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3306      	adds	r3, #6
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	18d3      	adds	r3, r2, r3
 8001522:	3304      	adds	r3, #4
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1dfa      	adds	r2, r7, #7
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	0011      	movs	r1, r2
 800152c:	2203      	movs	r2, #3
 800152e:	400a      	ands	r2, r1
 8001530:	00d2      	lsls	r2, r2, #3
 8001532:	21ff      	movs	r1, #255	@ 0xff
 8001534:	4091      	lsls	r1, r2
 8001536:	000a      	movs	r2, r1
 8001538:	43d2      	mvns	r2, r2
 800153a:	401a      	ands	r2, r3
 800153c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	019b      	lsls	r3, r3, #6
 8001542:	22ff      	movs	r2, #255	@ 0xff
 8001544:	401a      	ands	r2, r3
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	2303      	movs	r3, #3
 800154e:	4003      	ands	r3, r0
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001554:	4809      	ldr	r0, [pc, #36]	@ (800157c <__NVIC_SetPriority+0xd8>)
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	001c      	movs	r4, r3
 800155c:	230f      	movs	r3, #15
 800155e:	4023      	ands	r3, r4
 8001560:	3b08      	subs	r3, #8
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	430a      	orrs	r2, r1
 8001566:	3306      	adds	r3, #6
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	18c3      	adds	r3, r0, r3
 800156c:	3304      	adds	r3, #4
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	46c0      	nop			@ (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b003      	add	sp, #12
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	2380      	movs	r3, #128	@ 0x80
 800158e:	045b      	lsls	r3, r3, #17
 8001590:	429a      	cmp	r2, r3
 8001592:	d301      	bcc.n	8001598 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001594:	2301      	movs	r3, #1
 8001596:	e010      	b.n	80015ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001598:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <SysTick_Config+0x44>)
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	3a01      	subs	r2, #1
 800159e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a0:	2301      	movs	r3, #1
 80015a2:	425b      	negs	r3, r3
 80015a4:	2103      	movs	r1, #3
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff ff7c 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <SysTick_Config+0x44>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <SysTick_Config+0x44>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	210f      	movs	r1, #15
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	1c02      	adds	r2, r0, #0
 80015d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	0002      	movs	r2, r0
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b25b      	sxtb	r3, r3
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff ff33 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff ffaf 	bl	8001580 <SysTick_Config>
 8001622:	0003      	movs	r3, r0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e036      	b.n	80016b0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2221      	movs	r2, #33	@ 0x21
 8001646:	2102      	movs	r1, #2
 8001648:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <HAL_DMA_Init+0x8c>)
 8001656:	4013      	ands	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	0018      	movs	r0, r3
 8001694:	f000 f9c4 	bl	8001a20 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2221      	movs	r2, #33	@ 0x21
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	2100      	movs	r1, #0
 80016ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	ffffc00f 	.word	0xffffc00f

080016bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2317      	movs	r3, #23
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2220      	movs	r2, #32
 80016d6:	5c9b      	ldrb	r3, [r3, r2]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_DMA_Start_IT+0x24>
 80016dc:	2302      	movs	r3, #2
 80016de:	e04f      	b.n	8001780 <HAL_DMA_Start_IT+0xc4>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2220      	movs	r2, #32
 80016e4:	2101      	movs	r1, #1
 80016e6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2221      	movs	r2, #33	@ 0x21
 80016ec:	5c9b      	ldrb	r3, [r3, r2]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d13a      	bne.n	800176a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2221      	movs	r2, #33	@ 0x21
 80016f8:	2102      	movs	r1, #2
 80016fa:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	438a      	bics	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f954 	bl	80019c6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	210e      	movs	r1, #14
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e00f      	b.n	8001758 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	210a      	movs	r1, #10
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2104      	movs	r1, #4
 8001754:	438a      	bics	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2101      	movs	r1, #1
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e007      	b.n	800177a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2220      	movs	r2, #32
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001772:	2317      	movs	r3, #23
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	2202      	movs	r2, #2
 8001778:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800177a:	2317      	movs	r3, #23
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	781b      	ldrb	r3, [r3, #0]
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b006      	add	sp, #24
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2221      	movs	r2, #33	@ 0x21
 8001794:	5c9b      	ldrb	r3, [r3, r2]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2220      	movs	r2, #32
 80017a6:	2100      	movs	r1, #0
 80017a8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e020      	b.n	80017f0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	210e      	movs	r1, #14
 80017ba:	438a      	bics	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	438a      	bics	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d6:	2101      	movs	r1, #1
 80017d8:	4091      	lsls	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2221      	movs	r2, #33	@ 0x21
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	2100      	movs	r1, #0
 80017ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	210f      	movs	r1, #15
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2221      	movs	r2, #33	@ 0x21
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d006      	beq.n	8001822 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2204      	movs	r2, #4
 8001818:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800181a:	187b      	adds	r3, r7, r1
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	e028      	b.n	8001874 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	210e      	movs	r1, #14
 800182e:	438a      	bics	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	438a      	bics	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184a:	2101      	movs	r1, #1
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2221      	movs	r2, #33	@ 0x21
 8001856:	2101      	movs	r1, #1
 8001858:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2220      	movs	r2, #32
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001866:	2b00      	cmp	r3, #0
 8001868:	d004      	beq.n	8001874 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	0010      	movs	r0, r2
 8001872:	4798      	blx	r3
    }
  }
  return status;
 8001874:	230f      	movs	r3, #15
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	781b      	ldrb	r3, [r3, #0]
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	b004      	add	sp, #16
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	2204      	movs	r2, #4
 80018a0:	409a      	lsls	r2, r3
 80018a2:	0013      	movs	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	d024      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x72>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2204      	movs	r2, #4
 80018ae:	4013      	ands	r3, r2
 80018b0:	d020      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2220      	movs	r2, #32
 80018ba:	4013      	ands	r3, r2
 80018bc:	d107      	bne.n	80018ce <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2104      	movs	r1, #4
 80018ca:	438a      	bics	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d6:	2104      	movs	r1, #4
 80018d8:	4091      	lsls	r1, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d100      	bne.n	80018e8 <HAL_DMA_IRQHandler+0x66>
 80018e6:	e06a      	b.n	80019be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	0010      	movs	r0, r2
 80018f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018f2:	e064      	b.n	80019be <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	2202      	movs	r2, #2
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	d02b      	beq.n	800195c <HAL_DMA_IRQHandler+0xda>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d027      	beq.n	800195c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2220      	movs	r2, #32
 8001914:	4013      	ands	r3, r2
 8001916:	d10b      	bne.n	8001930 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	210a      	movs	r1, #10
 8001924:	438a      	bics	r2, r1
 8001926:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2221      	movs	r2, #33	@ 0x21
 800192c:	2101      	movs	r1, #1
 800192e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001938:	2102      	movs	r1, #2
 800193a:	4091      	lsls	r1, r2
 800193c:	000a      	movs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2220      	movs	r2, #32
 8001944:	2100      	movs	r1, #0
 8001946:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d036      	beq.n	80019be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	0010      	movs	r0, r2
 8001958:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800195a:	e030      	b.n	80019be <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	2208      	movs	r2, #8
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4013      	ands	r3, r2
 800196a:	d028      	beq.n	80019be <HAL_DMA_IRQHandler+0x13c>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2208      	movs	r2, #8
 8001970:	4013      	ands	r3, r2
 8001972:	d024      	beq.n	80019be <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	210e      	movs	r1, #14
 8001980:	438a      	bics	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800198c:	2101      	movs	r1, #1
 800198e:	4091      	lsls	r1, r2
 8001990:	000a      	movs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2221      	movs	r2, #33	@ 0x21
 800199e:	2101      	movs	r1, #1
 80019a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2220      	movs	r2, #32
 80019a6:	2100      	movs	r1, #0
 80019a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	0010      	movs	r0, r2
 80019ba:	4798      	blx	r3
    }
  }
}
 80019bc:	e7ff      	b.n	80019be <HAL_DMA_IRQHandler+0x13c>
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b004      	add	sp, #16
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019dc:	2101      	movs	r1, #1
 80019de:	4091      	lsls	r1, r2
 80019e0:	000a      	movs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d108      	bne.n	8001a06 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a04:	e007      	b.n	8001a16 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	60da      	str	r2, [r3, #12]
}
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b004      	add	sp, #16
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <DMA_CalcBaseAndBitshift+0x30>)
 8001a2e:	4694      	mov	ip, r2
 8001a30:	4463      	add	r3, ip
 8001a32:	2114      	movs	r1, #20
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe fb71 	bl	800011c <__udivsi3>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	009a      	lsls	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a03      	ldr	r2, [pc, #12]	@ (8001a54 <DMA_CalcBaseAndBitshift+0x34>)
 8001a46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	bffdfff8 	.word	0xbffdfff8
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	e14f      	b.n	8001d08 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4091      	lsls	r1, r2
 8001a72:	000a      	movs	r2, r1
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d100      	bne.n	8001a80 <HAL_GPIO_Init+0x28>
 8001a7e:	e140      	b.n	8001d02 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2203      	movs	r2, #3
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d005      	beq.n	8001a98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d130      	bne.n	8001afa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	0013      	movs	r3, r2
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	0013      	movs	r3, r2
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ace:	2201      	movs	r2, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
 8001aec:	0013      	movs	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2203      	movs	r2, #3
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d017      	beq.n	8001b36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	409a      	lsls	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	43da      	mvns	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d123      	bne.n	8001b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	58d3      	ldr	r3, [r2, r3]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2207      	movs	r2, #7
 8001b54:	4013      	ands	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2107      	movs	r1, #7
 8001b6e:	400b      	ands	r3, r1
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	6939      	ldr	r1, [r7, #16]
 8001b88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	401a      	ands	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	0013      	movs	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	23c0      	movs	r3, #192	@ 0xc0
 8001bc4:	029b      	lsls	r3, r3, #10
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d100      	bne.n	8001bcc <HAL_GPIO_Init+0x174>
 8001bca:	e09a      	b.n	8001d02 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	4b54      	ldr	r3, [pc, #336]	@ (8001d20 <HAL_GPIO_Init+0x2c8>)
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	4b53      	ldr	r3, [pc, #332]	@ (8001d20 <HAL_GPIO_Init+0x2c8>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	619a      	str	r2, [r3, #24]
 8001bd8:	4b51      	ldr	r3, [pc, #324]	@ (8001d20 <HAL_GPIO_Init+0x2c8>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be4:	4a4f      	ldr	r2, [pc, #316]	@ (8001d24 <HAL_GPIO_Init+0x2cc>)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	589b      	ldr	r3, [r3, r2]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	43da      	mvns	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	2390      	movs	r3, #144	@ 0x90
 8001c0c:	05db      	lsls	r3, r3, #23
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x1e2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a44      	ldr	r2, [pc, #272]	@ (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x1de>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a43      	ldr	r2, [pc, #268]	@ (8001d2c <HAL_GPIO_Init+0x2d4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x1da>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a42      	ldr	r2, [pc, #264]	@ (8001d30 <HAL_GPIO_Init+0x2d8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x1d6>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	2103      	movs	r1, #3
 8001c40:	400a      	ands	r2, r1
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c4c:	4935      	ldr	r1, [pc, #212]	@ (8001d24 <HAL_GPIO_Init+0x2cc>)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	2380      	movs	r3, #128	@ 0x80
 8001c70:	035b      	lsls	r3, r3, #13
 8001c72:	4013      	ands	r3, r2
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	039b      	lsls	r3, r3, #14
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	029b      	lsls	r3, r3, #10
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	1e13      	subs	r3, r2, #0
 8001d12:	d000      	beq.n	8001d16 <HAL_GPIO_Init+0x2be>
 8001d14:	e6a8      	b.n	8001a68 <HAL_GPIO_Init+0x10>
  } 
}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	46c0      	nop			@ (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b006      	add	sp, #24
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	48000400 	.word	0x48000400
 8001d2c:	48000800 	.word	0x48000800
 8001d30:	48000c00 	.word	0x48000c00
 8001d34:	40010400 	.word	0x40010400

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	0008      	movs	r0, r1
 8001d42:	0011      	movs	r1, r2
 8001d44:	1cbb      	adds	r3, r7, #2
 8001d46:	1c02      	adds	r2, r0, #0
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	1c7b      	adds	r3, r7, #1
 8001d4c:	1c0a      	adds	r2, r1, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d50:	1c7b      	adds	r3, r7, #1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d58:	1cbb      	adds	r3, r7, #2
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d60:	e003      	b.n	8001d6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d62:	1cbb      	adds	r3, r7, #2
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e301      	b.n	800238a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d100      	bne.n	8001d92 <HAL_RCC_OscConfig+0x1e>
 8001d90:	e08d      	b.n	8001eae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d92:	4bc3      	ldr	r3, [pc, #780]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	220c      	movs	r2, #12
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d00e      	beq.n	8001dbc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d9e:	4bc0      	ldr	r3, [pc, #768]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	220c      	movs	r2, #12
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d116      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x64>
 8001daa:	4bbd      	ldr	r3, [pc, #756]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	2380      	movs	r3, #128	@ 0x80
 8001db0:	025b      	lsls	r3, r3, #9
 8001db2:	401a      	ands	r2, r3
 8001db4:	2380      	movs	r3, #128	@ 0x80
 8001db6:	025b      	lsls	r3, r3, #9
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	4bb8      	ldr	r3, [pc, #736]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d100      	bne.n	8001dca <HAL_RCC_OscConfig+0x56>
 8001dc8:	e070      	b.n	8001eac <HAL_RCC_OscConfig+0x138>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d000      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x60>
 8001dd2:	e06b      	b.n	8001eac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e2d8      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x7c>
 8001de0:	4baf      	ldr	r3, [pc, #700]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4bae      	ldr	r3, [pc, #696]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	2180      	movs	r1, #128	@ 0x80
 8001de8:	0249      	lsls	r1, r1, #9
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e02f      	b.n	8001e50 <HAL_RCC_OscConfig+0xdc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x9e>
 8001df8:	4ba9      	ldr	r3, [pc, #676]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4ba8      	ldr	r3, [pc, #672]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	49a9      	ldr	r1, [pc, #676]	@ (80020a4 <HAL_RCC_OscConfig+0x330>)
 8001e00:	400a      	ands	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	4ba6      	ldr	r3, [pc, #664]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4ba5      	ldr	r3, [pc, #660]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	49a7      	ldr	r1, [pc, #668]	@ (80020a8 <HAL_RCC_OscConfig+0x334>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e01e      	b.n	8001e50 <HAL_RCC_OscConfig+0xdc>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d10e      	bne.n	8001e38 <HAL_RCC_OscConfig+0xc4>
 8001e1a:	4ba1      	ldr	r3, [pc, #644]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4ba0      	ldr	r3, [pc, #640]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	02c9      	lsls	r1, r1, #11
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	4b9d      	ldr	r3, [pc, #628]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b9c      	ldr	r3, [pc, #624]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	0249      	lsls	r1, r1, #9
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xdc>
 8001e38:	4b99      	ldr	r3, [pc, #612]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b98      	ldr	r3, [pc, #608]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e3e:	4999      	ldr	r1, [pc, #612]	@ (80020a4 <HAL_RCC_OscConfig+0x330>)
 8001e40:	400a      	ands	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	4b96      	ldr	r3, [pc, #600]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b95      	ldr	r3, [pc, #596]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e4a:	4997      	ldr	r1, [pc, #604]	@ (80020a8 <HAL_RCC_OscConfig+0x334>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d014      	beq.n	8001e82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb00 	bl	800145c <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e62:	f7ff fafb 	bl	800145c <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	@ 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e28a      	b.n	800238a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	4b8a      	ldr	r3, [pc, #552]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	029b      	lsls	r3, r3, #10
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0xee>
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff faeb 	bl	800145c <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fae6 	bl	800145c <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	@ 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e275      	b.n	800238a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	4b80      	ldr	r3, [pc, #512]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x118>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d100      	bne.n	8001eba <HAL_RCC_OscConfig+0x146>
 8001eb8:	e069      	b.n	8001f8e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001eba:	4b79      	ldr	r3, [pc, #484]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d00b      	beq.n	8001edc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ec4:	4b76      	ldr	r3, [pc, #472]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	220c      	movs	r2, #12
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d11c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x196>
 8001ed0:	4b73      	ldr	r3, [pc, #460]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d116      	bne.n	8001f0a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001edc:	4b70      	ldr	r3, [pc, #448]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x17e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e24b      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b6b      	ldr	r3, [pc, #428]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	22f8      	movs	r2, #248	@ 0xf8
 8001ef8:	4393      	bics	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00da      	lsls	r2, r3, #3
 8001f02:	4b67      	ldr	r3, [pc, #412]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f08:	e041      	b.n	8001f8e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d024      	beq.n	8001f5c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f12:	4b63      	ldr	r3, [pc, #396]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b62      	ldr	r3, [pc, #392]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fa9d 	bl	800145c <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff fa98 	bl	800145c <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e227      	b.n	800238a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b59      	ldr	r3, [pc, #356]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	4013      	ands	r3, r2
 8001f42:	d0f1      	beq.n	8001f28 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b56      	ldr	r3, [pc, #344]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	22f8      	movs	r2, #248	@ 0xf8
 8001f4a:	4393      	bics	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00da      	lsls	r2, r3, #3
 8001f54:	4b52      	ldr	r3, [pc, #328]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e018      	b.n	8001f8e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5c:	4b50      	ldr	r3, [pc, #320]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b4f      	ldr	r3, [pc, #316]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	438a      	bics	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fa78 	bl	800145c <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f72:	f7ff fa73 	bl	800145c <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e202      	b.n	800238a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f84:	4b46      	ldr	r3, [pc, #280]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d1f1      	bne.n	8001f72 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2208      	movs	r2, #8
 8001f94:	4013      	ands	r3, r2
 8001f96:	d036      	beq.n	8002006 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d019      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7ff fa56 	bl	800145c <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb6:	f7ff fa51 	bl	800145c <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1e0      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc8:	4b35      	ldr	r3, [pc, #212]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d0f1      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x242>
 8001fd2:	e018      	b.n	8002006 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd4:	4b32      	ldr	r3, [pc, #200]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd8:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	438a      	bics	r2, r1
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fa3c 	bl	800145c <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff fa37 	bl	800145c <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1c6      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ffc:	4b28      	ldr	r3, [pc, #160]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d1f1      	bne.n	8001fea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2204      	movs	r2, #4
 800200c:	4013      	ands	r3, r2
 800200e:	d100      	bne.n	8002012 <HAL_RCC_OscConfig+0x29e>
 8002010:	e0b4      	b.n	800217c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	201f      	movs	r0, #31
 8002014:	183b      	adds	r3, r7, r0
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	2380      	movs	r3, #128	@ 0x80
 8002020:	055b      	lsls	r3, r3, #21
 8002022:	4013      	ands	r3, r2
 8002024:	d110      	bne.n	8002048 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 800202c:	2180      	movs	r1, #128	@ 0x80
 800202e:	0549      	lsls	r1, r1, #21
 8002030:	430a      	orrs	r2, r1
 8002032:	61da      	str	r2, [r3, #28]
 8002034:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8002036:	69da      	ldr	r2, [r3, #28]
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	055b      	lsls	r3, r3, #21
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002042:	183b      	adds	r3, r7, r0
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_RCC_OscConfig+0x338>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	@ 0x80
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4013      	ands	r3, r2
 8002052:	d11a      	bne.n	800208a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002054:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_RCC_OscConfig+0x338>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <HAL_RCC_OscConfig+0x338>)
 800205a:	2180      	movs	r1, #128	@ 0x80
 800205c:	0049      	lsls	r1, r1, #1
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7ff f9fb 	bl	800145c <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7ff f9f6 	bl	800145c <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	@ 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e185      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <HAL_RCC_OscConfig+0x338>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	@ 0x80
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4013      	ands	r3, r2
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10e      	bne.n	80020b0 <HAL_RCC_OscConfig+0x33c>
 8002092:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	4b02      	ldr	r3, [pc, #8]	@ (80020a0 <HAL_RCC_OscConfig+0x32c>)
 8002098:	2101      	movs	r1, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	621a      	str	r2, [r3, #32]
 800209e:	e035      	b.n	800210c <HAL_RCC_OscConfig+0x398>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	fffeffff 	.word	0xfffeffff
 80020a8:	fffbffff 	.word	0xfffbffff
 80020ac:	40007000 	.word	0x40007000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x35e>
 80020b8:	4bb6      	ldr	r3, [pc, #728]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	4bb5      	ldr	r3, [pc, #724]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020be:	2101      	movs	r1, #1
 80020c0:	438a      	bics	r2, r1
 80020c2:	621a      	str	r2, [r3, #32]
 80020c4:	4bb3      	ldr	r3, [pc, #716]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	4bb2      	ldr	r3, [pc, #712]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020ca:	2104      	movs	r1, #4
 80020cc:	438a      	bics	r2, r1
 80020ce:	621a      	str	r2, [r3, #32]
 80020d0:	e01c      	b.n	800210c <HAL_RCC_OscConfig+0x398>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x380>
 80020da:	4bae      	ldr	r3, [pc, #696]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	4bad      	ldr	r3, [pc, #692]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020e0:	2104      	movs	r1, #4
 80020e2:	430a      	orrs	r2, r1
 80020e4:	621a      	str	r2, [r3, #32]
 80020e6:	4bab      	ldr	r3, [pc, #684]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	4baa      	ldr	r3, [pc, #680]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	430a      	orrs	r2, r1
 80020f0:	621a      	str	r2, [r3, #32]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0x398>
 80020f4:	4ba7      	ldr	r3, [pc, #668]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020f6:	6a1a      	ldr	r2, [r3, #32]
 80020f8:	4ba6      	ldr	r3, [pc, #664]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	621a      	str	r2, [r3, #32]
 8002100:	4ba4      	ldr	r3, [pc, #656]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	4ba3      	ldr	r3, [pc, #652]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002106:	2104      	movs	r1, #4
 8002108:	438a      	bics	r2, r1
 800210a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d014      	beq.n	800213e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7ff f9a2 	bl	800145c <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	e009      	b.n	8002132 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7ff f99d 	bl	800145c <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	4a9b      	ldr	r2, [pc, #620]	@ (8002398 <HAL_RCC_OscConfig+0x624>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e12b      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002132:	4b98      	ldr	r3, [pc, #608]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x3aa>
 800213c:	e013      	b.n	8002166 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff f98d 	bl	800145c <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002146:	e009      	b.n	800215c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002148:	f7ff f988 	bl	800145c <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a91      	ldr	r2, [pc, #580]	@ (8002398 <HAL_RCC_OscConfig+0x624>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e116      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b8d      	ldr	r3, [pc, #564]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	2202      	movs	r2, #2
 8002162:	4013      	ands	r3, r2
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002166:	231f      	movs	r3, #31
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b88      	ldr	r3, [pc, #544]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002172:	69da      	ldr	r2, [r3, #28]
 8002174:	4b87      	ldr	r3, [pc, #540]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002176:	4989      	ldr	r1, [pc, #548]	@ (800239c <HAL_RCC_OscConfig+0x628>)
 8002178:	400a      	ands	r2, r1
 800217a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2210      	movs	r2, #16
 8002182:	4013      	ands	r3, r2
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d12a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800218e:	4b81      	ldr	r3, [pc, #516]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002192:	4b80      	ldr	r3, [pc, #512]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002194:	2104      	movs	r1, #4
 8002196:	430a      	orrs	r2, r1
 8002198:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800219a:	4b7e      	ldr	r3, [pc, #504]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 800219c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219e:	4b7d      	ldr	r3, [pc, #500]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7ff f959 	bl	800145c <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021b0:	f7ff f954 	bl	800145c <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0e3      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021c2:	4b74      	ldr	r3, [pc, #464]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80021c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f1      	beq.n	80021b0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021cc:	4b71      	ldr	r3, [pc, #452]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80021ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d0:	22f8      	movs	r2, #248	@ 0xf8
 80021d2:	4393      	bics	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	00da      	lsls	r2, r3, #3
 80021dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e2:	e034      	b.n	800224e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	3305      	adds	r3, #5
 80021ea:	d111      	bne.n	8002210 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021ec:	4b69      	ldr	r3, [pc, #420]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80021ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f0:	4b68      	ldr	r3, [pc, #416]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80021f2:	2104      	movs	r1, #4
 80021f4:	438a      	bics	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021f8:	4b66      	ldr	r3, [pc, #408]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80021fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fc:	22f8      	movs	r2, #248	@ 0xf8
 80021fe:	4393      	bics	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	00da      	lsls	r2, r3, #3
 8002208:	4b62      	ldr	r3, [pc, #392]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 800220a:	430a      	orrs	r2, r1
 800220c:	635a      	str	r2, [r3, #52]	@ 0x34
 800220e:	e01e      	b.n	800224e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002210:	4b60      	ldr	r3, [pc, #384]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002214:	4b5f      	ldr	r3, [pc, #380]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002216:	2104      	movs	r1, #4
 8002218:	430a      	orrs	r2, r1
 800221a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800221c:	4b5d      	ldr	r3, [pc, #372]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 800221e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002220:	4b5c      	ldr	r3, [pc, #368]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002222:	2101      	movs	r1, #1
 8002224:	438a      	bics	r2, r1
 8002226:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7ff f918 	bl	800145c <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002232:	f7ff f913 	bl	800145c <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0a2      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002244:	4b53      	ldr	r3, [pc, #332]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002248:	2202      	movs	r2, #2
 800224a:	4013      	ands	r3, r2
 800224c:	d1f1      	bne.n	8002232 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d100      	bne.n	8002258 <HAL_RCC_OscConfig+0x4e4>
 8002256:	e097      	b.n	8002388 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002258:	4b4e      	ldr	r3, [pc, #312]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	220c      	movs	r2, #12
 800225e:	4013      	ands	r3, r2
 8002260:	2b08      	cmp	r3, #8
 8002262:	d100      	bne.n	8002266 <HAL_RCC_OscConfig+0x4f2>
 8002264:	e06b      	b.n	800233e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d14c      	bne.n	8002308 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b49      	ldr	r3, [pc, #292]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b48      	ldr	r3, [pc, #288]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002274:	494a      	ldr	r1, [pc, #296]	@ (80023a0 <HAL_RCC_OscConfig+0x62c>)
 8002276:	400a      	ands	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff f8ef 	bl	800145c <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff f8ea 	bl	800145c <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e079      	b.n	800238a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	4b3f      	ldr	r3, [pc, #252]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	049b      	lsls	r3, r3, #18
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	220f      	movs	r2, #15
 80022a8:	4393      	bics	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b0:	4b38      	ldr	r3, [pc, #224]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80022b2:	430a      	orrs	r2, r1
 80022b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022b6:	4b37      	ldr	r3, [pc, #220]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a3a      	ldr	r2, [pc, #232]	@ (80023a4 <HAL_RCC_OscConfig+0x630>)
 80022bc:	4013      	ands	r3, r2
 80022be:	0019      	movs	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	431a      	orrs	r2, r3
 80022ca:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b30      	ldr	r3, [pc, #192]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80022d6:	2180      	movs	r1, #128	@ 0x80
 80022d8:	0449      	lsls	r1, r1, #17
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff f8bd 	bl	800145c <HAL_GetTick>
 80022e2:	0003      	movs	r3, r0
 80022e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff f8b8 	bl	800145c <HAL_GetTick>
 80022ec:	0002      	movs	r2, r0
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e047      	b.n	800238a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fa:	4b26      	ldr	r3, [pc, #152]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	@ 0x80
 8002300:	049b      	lsls	r3, r3, #18
 8002302:	4013      	ands	r3, r2
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x574>
 8002306:	e03f      	b.n	8002388 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b21      	ldr	r3, [pc, #132]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 800230e:	4924      	ldr	r1, [pc, #144]	@ (80023a0 <HAL_RCC_OscConfig+0x62c>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff f8a2 	bl	800145c <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231e:	f7ff f89d 	bl	800145c <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e02c      	b.n	800238a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	049b      	lsls	r3, r3, #18
 8002338:	4013      	ands	r3, r2
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x5aa>
 800233c:	e024      	b.n	8002388 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e01f      	b.n	800238a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800234a:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002350:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_RCC_OscConfig+0x620>)
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	2380      	movs	r3, #128	@ 0x80
 800235a:	025b      	lsls	r3, r3, #9
 800235c:	401a      	ands	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	429a      	cmp	r2, r3
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	220f      	movs	r2, #15
 800236a:	401a      	ands	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	23f0      	movs	r3, #240	@ 0xf0
 8002378:	039b      	lsls	r3, r3, #14
 800237a:	401a      	ands	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b008      	add	sp, #32
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	40021000 	.word	0x40021000
 8002398:	00001388 	.word	0x00001388
 800239c:	efffffff 	.word	0xefffffff
 80023a0:	feffffff 	.word	0xfeffffff
 80023a4:	ffc2ffff 	.word	0xffc2ffff

080023a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b3      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <HAL_RCC_ClockConfig+0x184>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d911      	bls.n	80023ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b58      	ldr	r3, [pc, #352]	@ (800252c <HAL_RCC_ClockConfig+0x184>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b55      	ldr	r3, [pc, #340]	@ (800252c <HAL_RCC_ClockConfig+0x184>)
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_ClockConfig+0x184>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e09a      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d015      	beq.n	8002424 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2204      	movs	r2, #4
 80023fe:	4013      	ands	r3, r2
 8002400:	d006      	beq.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002402:	4b4b      	ldr	r3, [pc, #300]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b4a      	ldr	r3, [pc, #296]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002408:	21e0      	movs	r1, #224	@ 0xe0
 800240a:	00c9      	lsls	r1, r1, #3
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b47      	ldr	r3, [pc, #284]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	22f0      	movs	r2, #240	@ 0xf0
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4b44      	ldr	r3, [pc, #272]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	d040      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b3e      	ldr	r3, [pc, #248]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	029b      	lsls	r3, r3, #10
 800243e:	4013      	ands	r3, r2
 8002440:	d114      	bne.n	800246c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e06e      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b38      	ldr	r3, [pc, #224]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	049b      	lsls	r3, r3, #18
 8002456:	4013      	ands	r3, r2
 8002458:	d108      	bne.n	800246c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e062      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b34      	ldr	r3, [pc, #208]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2202      	movs	r2, #2
 8002464:	4013      	ands	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e05b      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246c:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2203      	movs	r2, #3
 8002472:	4393      	bics	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4b2d      	ldr	r3, [pc, #180]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe ffec 	bl	800145c <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002488:	e009      	b.n	800249e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7fe ffe7 	bl	800145c <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	4a27      	ldr	r2, [pc, #156]	@ (8002534 <HAL_RCC_ClockConfig+0x18c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e042      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	220c      	movs	r2, #12
 80024a4:	401a      	ands	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1ec      	bne.n	800248a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b1e      	ldr	r3, [pc, #120]	@ (800252c <HAL_RCC_ClockConfig+0x184>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2201      	movs	r2, #1
 80024b6:	4013      	ands	r3, r2
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d211      	bcs.n	80024e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_RCC_ClockConfig+0x184>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4393      	bics	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	4b18      	ldr	r3, [pc, #96]	@ (800252c <HAL_RCC_ClockConfig+0x184>)
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d0:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_RCC_ClockConfig+0x184>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e020      	b.n	8002524 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a11      	ldr	r2, [pc, #68]	@ (8002538 <HAL_RCC_ClockConfig+0x190>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002500:	f000 f820 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002504:	0001      	movs	r1, r0
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_RCC_ClockConfig+0x188>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	220f      	movs	r2, #15
 800250e:	4013      	ands	r3, r2
 8002510:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <HAL_RCC_ClockConfig+0x194>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	000a      	movs	r2, r1
 8002516:	40da      	lsrs	r2, r3
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_ClockConfig+0x198>)
 800251a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800251c:	2003      	movs	r0, #3
 800251e:	f7fe ff57 	bl	80013d0 <HAL_InitTick>
  
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40022000 	.word	0x40022000
 8002530:	40021000 	.word	0x40021000
 8002534:	00001388 	.word	0x00001388
 8002538:	fffff8ff 	.word	0xfffff8ff
 800253c:	08005468 	.word	0x08005468
 8002540:	20000108 	.word	0x20000108

08002544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800255e:	4b20      	ldr	r3, [pc, #128]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	220c      	movs	r2, #12
 8002568:	4013      	ands	r3, r2
 800256a:	2b04      	cmp	r3, #4
 800256c:	d002      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x30>
 800256e:	2b08      	cmp	r3, #8
 8002570:	d003      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x36>
 8002572:	e02c      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002576:	613b      	str	r3, [r7, #16]
      break;
 8002578:	e02c      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	0c9b      	lsrs	r3, r3, #18
 800257e:	220f      	movs	r2, #15
 8002580:	4013      	ands	r3, r2
 8002582:	4a19      	ldr	r2, [pc, #100]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002584:	5cd3      	ldrb	r3, [r2, r3]
 8002586:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002588:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	220f      	movs	r2, #15
 800258e:	4013      	ands	r3, r2
 8002590:	4a16      	ldr	r2, [pc, #88]	@ (80025ec <HAL_RCC_GetSysClockFreq+0xa8>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	025b      	lsls	r3, r3, #9
 800259c:	4013      	ands	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4810      	ldr	r0, [pc, #64]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025a4:	f7fd fdba 	bl	800011c <__udivsi3>
 80025a8:	0003      	movs	r3, r0
 80025aa:	001a      	movs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4353      	muls	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e009      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	000a      	movs	r2, r1
 80025b8:	0152      	lsls	r2, r2, #5
 80025ba:	1a52      	subs	r2, r2, r1
 80025bc:	0193      	lsls	r3, r2, #6
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	185b      	adds	r3, r3, r1
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	613b      	str	r3, [r7, #16]
      break;
 80025cc:	e002      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025d0:	613b      	str	r3, [r7, #16]
      break;
 80025d2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025d4:	693b      	ldr	r3, [r7, #16]
}
 80025d6:	0018      	movs	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	b006      	add	sp, #24
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	40021000 	.word	0x40021000
 80025e4:	007a1200 	.word	0x007a1200
 80025e8:	08005480 	.word	0x08005480
 80025ec:	08005490 	.word	0x08005490

080025f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b02      	ldr	r3, [pc, #8]	@ (8002600 <HAL_RCC_GetHCLKFreq+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	20000108 	.word	0x20000108

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002608:	f7ff fff2 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 800260c:	0001      	movs	r1, r0
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	2207      	movs	r2, #7
 8002616:	4013      	ands	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	@ (800262c <HAL_RCC_GetPCLK1Freq+0x28>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	40d9      	lsrs	r1, r3
 800261e:	000b      	movs	r3, r1
}    
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	40021000 	.word	0x40021000
 800262c:	08005478 	.word	0x08005478

08002630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	025b      	lsls	r3, r3, #9
 8002648:	4013      	ands	r3, r2
 800264a:	d100      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800264c:	e08e      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2017      	movs	r0, #23
 8002650:	183b      	adds	r3, r7, r0
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	055b      	lsls	r3, r3, #21
 800265e:	4013      	ands	r3, r2
 8002660:	d110      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b5c      	ldr	r3, [pc, #368]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	4b5b      	ldr	r3, [pc, #364]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002668:	2180      	movs	r1, #128	@ 0x80
 800266a:	0549      	lsls	r1, r1, #21
 800266c:	430a      	orrs	r2, r1
 800266e:	61da      	str	r2, [r3, #28]
 8002670:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	055b      	lsls	r3, r3, #21
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	183b      	adds	r3, r7, r0
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b54      	ldr	r3, [pc, #336]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4013      	ands	r3, r2
 800268e:	d11a      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002690:	4b51      	ldr	r3, [pc, #324]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b50      	ldr	r3, [pc, #320]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002696:	2180      	movs	r1, #128	@ 0x80
 8002698:	0049      	lsls	r1, r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7fe fedd 	bl	800145c <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	e008      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7fe fed8 	bl	800145c <HAL_GetTick>
 80026ac:	0002      	movs	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e087      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b47      	ldr	r3, [pc, #284]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026c6:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026c8:	6a1a      	ldr	r2, [r3, #32]
 80026ca:	23c0      	movs	r3, #192	@ 0xc0
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4013      	ands	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d034      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	23c0      	movs	r3, #192	@ 0xc0
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d02c      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e8:	4b3a      	ldr	r3, [pc, #232]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a3b      	ldr	r2, [pc, #236]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026f2:	4b38      	ldr	r3, [pc, #224]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026f8:	2180      	movs	r1, #128	@ 0x80
 80026fa:	0249      	lsls	r1, r1, #9
 80026fc:	430a      	orrs	r2, r1
 80026fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002700:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	4b33      	ldr	r3, [pc, #204]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002706:	4936      	ldr	r1, [pc, #216]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002708:	400a      	ands	r2, r1
 800270a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800270c:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	4013      	ands	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7fe fe9f 	bl	800145c <HAL_GetTick>
 800271e:	0003      	movs	r3, r0
 8002720:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	e009      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe fe9a 	bl	800145c <HAL_GetTick>
 8002728:	0002      	movs	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	4a2d      	ldr	r2, [pc, #180]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e048      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	4b26      	ldr	r3, [pc, #152]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	d0f0      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002742:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a25      	ldr	r2, [pc, #148]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002752:	430a      	orrs	r2, r1
 8002754:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002756:	2317      	movs	r3, #23
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002766:	4920      	ldr	r1, [pc, #128]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002768:	400a      	ands	r2, r1
 800276a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	4013      	ands	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002776:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	2203      	movs	r2, #3
 800277c:	4393      	bics	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002786:	430a      	orrs	r2, r1
 8002788:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2220      	movs	r2, #32
 8002790:	4013      	ands	r3, r2
 8002792:	d009      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	2210      	movs	r2, #16
 800279a:	4393      	bics	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4013      	ands	r3, r2
 80027b2:	d009      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027b4:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	2240      	movs	r2, #64	@ 0x40
 80027ba:	4393      	bics	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b006      	add	sp, #24
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
 80027dc:	fffffcff 	.word	0xfffffcff
 80027e0:	fffeffff 	.word	0xfffeffff
 80027e4:	00001388 	.word	0x00001388
 80027e8:	efffffff 	.word	0xefffffff

080027ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e042      	b.n	8002884 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223d      	movs	r2, #61	@ 0x3d
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223c      	movs	r2, #60	@ 0x3c
 800280e:	2100      	movs	r1, #0
 8002810:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f7fe fbf7 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223d      	movs	r2, #61	@ 0x3d
 800281e:	2102      	movs	r1, #2
 8002820:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	0019      	movs	r1, r3
 800282c:	0010      	movs	r0, r2
 800282e:	f000 fa8f 	bl	8002d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2246      	movs	r2, #70	@ 0x46
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	223e      	movs	r2, #62	@ 0x3e
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	223f      	movs	r2, #63	@ 0x3f
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2240      	movs	r2, #64	@ 0x40
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2241      	movs	r2, #65	@ 0x41
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2242      	movs	r2, #66	@ 0x42
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2243      	movs	r2, #67	@ 0x43
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2244      	movs	r2, #68	@ 0x44
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2245      	movs	r2, #69	@ 0x45
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	223d      	movs	r2, #61	@ 0x3d
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	223d      	movs	r2, #61	@ 0x3d
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d001      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e03b      	b.n	800291c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	223d      	movs	r2, #61	@ 0x3d
 80028a8:	2102      	movs	r1, #2
 80028aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <HAL_TIM_Base_Start_IT+0x98>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00f      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x5a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	2380      	movs	r3, #128	@ 0x80
 80028cc:	05db      	lsls	r3, r3, #23
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d009      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x5a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <HAL_TIM_Base_Start_IT+0x9c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <HAL_TIM_Base_Start_IT+0x5a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a12      	ldr	r2, [pc, #72]	@ (800292c <HAL_TIM_Base_Start_IT+0xa0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d111      	bne.n	800290a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2207      	movs	r2, #7
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d010      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2101      	movs	r1, #1
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	e007      	b.n	800291a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2101      	movs	r1, #1
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40000400 	.word	0x40000400
 800292c:	40014000 	.word	0x40014000

08002930 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2101      	movs	r1, #1
 8002944:	438a      	bics	r2, r1
 8002946:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <HAL_TIM_Base_Stop_IT+0x54>)
 8002950:	4013      	ands	r3, r2
 8002952:	d10d      	bne.n	8002970 <HAL_TIM_Base_Stop_IT+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a0b      	ldr	r2, [pc, #44]	@ (8002988 <HAL_TIM_Base_Stop_IT+0x58>)
 800295c:	4013      	ands	r3, r2
 800295e:	d107      	bne.n	8002970 <HAL_TIM_Base_Stop_IT+0x40>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2101      	movs	r1, #1
 800296c:	438a      	bics	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	223d      	movs	r2, #61	@ 0x3d
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	00001111 	.word	0x00001111
 8002988:	00000444 	.word	0x00000444

0800298c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	d021      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d01d      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2203      	movs	r2, #3
 80029ba:	4252      	negs	r2, r2
 80029bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2203      	movs	r2, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f9a4 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 80029d8:	e007      	b.n	80029ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0018      	movs	r0, r3
 80029de:	f000 f997 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 f9a3 	bl	8002d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2204      	movs	r2, #4
 80029f4:	4013      	ands	r3, r2
 80029f6:	d022      	beq.n	8002a3e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2204      	movs	r2, #4
 80029fc:	4013      	ands	r3, r2
 80029fe:	d01e      	beq.n	8002a3e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2205      	movs	r2, #5
 8002a06:	4252      	negs	r2, r2
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	23c0      	movs	r3, #192	@ 0xc0
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f97d 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002a26:	e007      	b.n	8002a38 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f970 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f97c 	bl	8002d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2208      	movs	r2, #8
 8002a42:	4013      	ands	r3, r2
 8002a44:	d021      	beq.n	8002a8a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d01d      	beq.n	8002a8a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2209      	movs	r2, #9
 8002a54:	4252      	negs	r2, r2
 8002a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2203      	movs	r2, #3
 8002a66:	4013      	ands	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 f957 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002a72:	e007      	b.n	8002a84 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f94a 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 f956 	bl	8002d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d022      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2210      	movs	r2, #16
 8002a96:	4013      	ands	r3, r2
 8002a98:	d01e      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2211      	movs	r2, #17
 8002aa0:	4252      	negs	r2, r2
 8002aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	23c0      	movs	r3, #192	@ 0xc0
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 f930 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e007      	b.n	8002ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 f923 	bl	8002d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 f92f 	bl	8002d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	d00c      	beq.n	8002afa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d008      	beq.n	8002afa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2202      	movs	r2, #2
 8002aee:	4252      	negs	r2, r2
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7fe f807 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2280      	movs	r2, #128	@ 0x80
 8002afe:	4013      	ands	r3, r2
 8002b00:	d00c      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2280      	movs	r2, #128	@ 0x80
 8002b06:	4013      	ands	r3, r2
 8002b08:	d008      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2281      	movs	r2, #129	@ 0x81
 8002b10:	4252      	negs	r2, r2
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 faa8 	bl	800306c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2240      	movs	r2, #64	@ 0x40
 8002b20:	4013      	ands	r3, r2
 8002b22:	d00c      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2240      	movs	r2, #64	@ 0x40
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d008      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2241      	movs	r2, #65	@ 0x41
 8002b32:	4252      	negs	r2, r2
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 f901 	bl	8002d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2220      	movs	r2, #32
 8002b42:	4013      	ands	r3, r2
 8002b44:	d00c      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d008      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2221      	movs	r2, #33	@ 0x21
 8002b54:	4252      	negs	r2, r2
 8002b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 fa7e 	bl	800305c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b60:	46c0      	nop			@ (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b004      	add	sp, #16
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	230f      	movs	r3, #15
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	223c      	movs	r2, #60	@ 0x3c
 8002b7e:	5c9b      	ldrb	r3, [r3, r2]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIM_ConfigClockSource+0x20>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0bc      	b.n	8002d02 <HAL_TIM_ConfigClockSource+0x19a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	223c      	movs	r2, #60	@ 0x3c
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	223d      	movs	r2, #61	@ 0x3d
 8002b94:	2102      	movs	r1, #2
 8002b96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2277      	movs	r2, #119	@ 0x77
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2280      	movs	r2, #128	@ 0x80
 8002bbe:	0192      	lsls	r2, r2, #6
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d040      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0xde>
 8002bc4:	2280      	movs	r2, #128	@ 0x80
 8002bc6:	0192      	lsls	r2, r2, #6
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d900      	bls.n	8002bce <HAL_TIM_ConfigClockSource+0x66>
 8002bcc:	e088      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
 8002bce:	2280      	movs	r2, #128	@ 0x80
 8002bd0:	0152      	lsls	r2, r2, #5
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d100      	bne.n	8002bd8 <HAL_TIM_ConfigClockSource+0x70>
 8002bd6:	e088      	b.n	8002cea <HAL_TIM_ConfigClockSource+0x182>
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	0152      	lsls	r2, r2, #5
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d900      	bls.n	8002be2 <HAL_TIM_ConfigClockSource+0x7a>
 8002be0:	e07e      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
 8002be2:	2b70      	cmp	r3, #112	@ 0x70
 8002be4:	d018      	beq.n	8002c18 <HAL_TIM_ConfigClockSource+0xb0>
 8002be6:	d900      	bls.n	8002bea <HAL_TIM_ConfigClockSource+0x82>
 8002be8:	e07a      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
 8002bea:	2b60      	cmp	r3, #96	@ 0x60
 8002bec:	d04f      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x126>
 8002bee:	d900      	bls.n	8002bf2 <HAL_TIM_ConfigClockSource+0x8a>
 8002bf0:	e076      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
 8002bf2:	2b50      	cmp	r3, #80	@ 0x50
 8002bf4:	d03b      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x106>
 8002bf6:	d900      	bls.n	8002bfa <HAL_TIM_ConfigClockSource+0x92>
 8002bf8:	e072      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
 8002bfa:	2b40      	cmp	r3, #64	@ 0x40
 8002bfc:	d057      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x146>
 8002bfe:	d900      	bls.n	8002c02 <HAL_TIM_ConfigClockSource+0x9a>
 8002c00:	e06e      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
 8002c02:	2b30      	cmp	r3, #48	@ 0x30
 8002c04:	d063      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x166>
 8002c06:	d86b      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	d060      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x166>
 8002c0c:	d868      	bhi.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d05d      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x166>
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d05b      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x166>
 8002c16:	e063      	b.n	8002ce0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	f000 f99a 	bl	8002f60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2277      	movs	r2, #119	@ 0x77
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]
      break;
 8002c44:	e052      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c56:	f000 f983 	bl	8002f60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2180      	movs	r1, #128	@ 0x80
 8002c66:	01c9      	lsls	r1, r1, #7
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]
      break;
 8002c6c:	e03e      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c7a:	001a      	movs	r2, r3
 8002c7c:	f000 f8f6 	bl	8002e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2150      	movs	r1, #80	@ 0x50
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 f950 	bl	8002f2c <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e02e      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	f000 f914 	bl	8002ec8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2160      	movs	r1, #96	@ 0x60
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 f940 	bl	8002f2c <TIM_ITRx_SetConfig>
      break;
 8002cac:	e01e      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	001a      	movs	r2, r3
 8002cbc:	f000 f8d6 	bl	8002e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2140      	movs	r1, #64	@ 0x40
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 f930 	bl	8002f2c <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e00e      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	0010      	movs	r0, r2
 8002cda:	f000 f927 	bl	8002f2c <TIM_ITRx_SetConfig>
      break;
 8002cde:	e005      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
      break;
 8002ce8:	e000      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002cea:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	223d      	movs	r2, #61	@ 0x3d
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	223c      	movs	r2, #60	@ 0x3c
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]

  return status;
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	781b      	ldrb	r3, [r3, #0]
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	ffff00ff 	.word	0xffff00ff

08002d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d28:	46c0      	nop			@ (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d38:	46c0      	nop			@ (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d48:	46c0      	nop			@ (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	@ (8002e50 <TIM_Base_SetConfig+0x100>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d008      	beq.n	8002d7a <TIM_Base_SetConfig+0x2a>
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	2380      	movs	r3, #128	@ 0x80
 8002d6c:	05db      	lsls	r3, r3, #23
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d003      	beq.n	8002d7a <TIM_Base_SetConfig+0x2a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a37      	ldr	r2, [pc, #220]	@ (8002e54 <TIM_Base_SetConfig+0x104>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2270      	movs	r2, #112	@ 0x70
 8002d7e:	4393      	bics	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a30      	ldr	r2, [pc, #192]	@ (8002e50 <TIM_Base_SetConfig+0x100>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <TIM_Base_SetConfig+0x76>
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	05db      	lsls	r3, r3, #23
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d013      	beq.n	8002dc6 <TIM_Base_SetConfig+0x76>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <TIM_Base_SetConfig+0x104>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_Base_SetConfig+0x76>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2b      	ldr	r2, [pc, #172]	@ (8002e58 <TIM_Base_SetConfig+0x108>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x76>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e5c <TIM_Base_SetConfig+0x10c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0x76>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a29      	ldr	r2, [pc, #164]	@ (8002e60 <TIM_Base_SetConfig+0x110>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0x76>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a28      	ldr	r2, [pc, #160]	@ (8002e64 <TIM_Base_SetConfig+0x114>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a27      	ldr	r2, [pc, #156]	@ (8002e68 <TIM_Base_SetConfig+0x118>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2280      	movs	r2, #128	@ 0x80
 8002ddc:	4393      	bics	r3, r2
 8002dde:	001a      	movs	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <TIM_Base_SetConfig+0x100>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <TIM_Base_SetConfig+0xce>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a14      	ldr	r2, [pc, #80]	@ (8002e5c <TIM_Base_SetConfig+0x10c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <TIM_Base_SetConfig+0xce>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <TIM_Base_SetConfig+0x110>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_Base_SetConfig+0xce>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a12      	ldr	r2, [pc, #72]	@ (8002e64 <TIM_Base_SetConfig+0x114>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d103      	bne.n	8002e26 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	4393      	bics	r3, r2
 8002e40:	001a      	movs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	611a      	str	r2, [r3, #16]
  }
}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b004      	add	sp, #16
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40002000 	.word	0x40002000
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800
 8002e68:	fffffcff 	.word	0xfffffcff

08002e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4393      	bics	r3, r2
 8002e86:	001a      	movs	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	22f0      	movs	r2, #240	@ 0xf0
 8002e96:	4393      	bics	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	220a      	movs	r2, #10
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	621a      	str	r2, [r3, #32]
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b006      	add	sp, #24
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	2210      	movs	r2, #16
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f28 <TIM_TI2_ConfigInputStage+0x60>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	031b      	lsls	r3, r3, #12
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	22a0      	movs	r2, #160	@ 0xa0
 8002f04:	4393      	bics	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b006      	add	sp, #24
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	ffff0fff 	.word	0xffff0fff

08002f2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2270      	movs	r2, #112	@ 0x70
 8002f40:	4393      	bics	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	609a      	str	r2, [r3, #8]
}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b004      	add	sp, #16
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	4a09      	ldr	r2, [pc, #36]	@ (8002f9c <TIM_ETR_SetConfig+0x3c>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	021a      	lsls	r2, r3, #8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	609a      	str	r2, [r3, #8]
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b006      	add	sp, #24
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	ffff00ff 	.word	0xffff00ff

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	223c      	movs	r2, #60	@ 0x3c
 8002fae:	5c9b      	ldrb	r3, [r3, r2]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e047      	b.n	8003048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	223c      	movs	r2, #60	@ 0x3c
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	223d      	movs	r2, #61	@ 0x3d
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2270      	movs	r2, #112	@ 0x70
 8002fdc:	4393      	bics	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	@ (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00f      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	@ 0x80
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	429a      	cmp	r2, r3
 8003006:	d009      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a11      	ldr	r2, [pc, #68]	@ (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a10      	ldr	r2, [pc, #64]	@ (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d10c      	bne.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2280      	movs	r2, #128	@ 0x80
 8003020:	4393      	bics	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	4313      	orrs	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	223d      	movs	r2, #61	@ 0x3d
 800303a:	2101      	movs	r1, #1
 800303c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	223c      	movs	r2, #60	@ 0x3c
 8003042:	2100      	movs	r1, #0
 8003044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b004      	add	sp, #16
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40012c00 	.word	0x40012c00
 8003054:	40000400 	.word	0x40000400
 8003058:	40014000 	.word	0x40014000

0800305c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e044      	b.n	8003118 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2278      	movs	r2, #120	@ 0x78
 800309a:	2100      	movs	r1, #0
 800309c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7fd ffd5 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2224      	movs	r2, #36	@ 0x24
 80030aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	438a      	bics	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 fd66 	bl	8003b98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fc22 	bl	8003918 <UART_SetConfig>
 80030d4:	0003      	movs	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e01c      	b.n	8003118 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	490d      	ldr	r1, [pc, #52]	@ (8003120 <HAL_UART_Init+0xa4>)
 80030ea:	400a      	ands	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	212a      	movs	r1, #42	@ 0x2a
 80030fa:	438a      	bics	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fdf5 	bl	8003d00 <UART_CheckIdleState>
 8003116:	0003      	movs	r3, r0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}
 8003120:	ffffb7ff 	.word	0xffffb7ff

08003124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	@ 0x28
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	1dbb      	adds	r3, r7, #6
 8003132:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003138:	2b20      	cmp	r3, #32
 800313a:	d000      	beq.n	800313e <HAL_UART_Transmit+0x1a>
 800313c:	e08c      	b.n	8003258 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_UART_Transmit+0x28>
 8003144:	1dbb      	adds	r3, r7, #6
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e084      	b.n	800325a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	015b      	lsls	r3, r3, #5
 8003158:	429a      	cmp	r2, r3
 800315a:	d109      	bne.n	8003170 <HAL_UART_Transmit+0x4c>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2201      	movs	r2, #1
 8003168:	4013      	ands	r3, r2
 800316a:	d001      	beq.n	8003170 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e074      	b.n	800325a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2284      	movs	r2, #132	@ 0x84
 8003174:	2100      	movs	r1, #0
 8003176:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2221      	movs	r2, #33	@ 0x21
 800317c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800317e:	f7fe f96d 	bl	800145c <HAL_GetTick>
 8003182:	0003      	movs	r3, r0
 8003184:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1dba      	adds	r2, r7, #6
 800318a:	2150      	movs	r1, #80	@ 0x50
 800318c:	8812      	ldrh	r2, [r2, #0]
 800318e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1dba      	adds	r2, r7, #6
 8003194:	2152      	movs	r1, #82	@ 0x52
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	2380      	movs	r3, #128	@ 0x80
 80031a0:	015b      	lsls	r3, r3, #5
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d108      	bne.n	80031b8 <HAL_UART_Transmit+0x94>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e003      	b.n	80031c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031c0:	e02f      	b.n	8003222 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	0013      	movs	r3, r2
 80031cc:	2200      	movs	r2, #0
 80031ce:	2180      	movs	r1, #128	@ 0x80
 80031d0:	f000 fe3e 	bl	8003e50 <UART_WaitOnFlagUntilTimeout>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e03b      	b.n	800325a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	881a      	ldrh	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	05d2      	lsls	r2, r2, #23
 80031f2:	0dd2      	lsrs	r2, r2, #23
 80031f4:	b292      	uxth	r2, r2
 80031f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	3302      	adds	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	e007      	b.n	8003210 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2252      	movs	r2, #82	@ 0x52
 8003214:	5a9b      	ldrh	r3, [r3, r2]
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b299      	uxth	r1, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2252      	movs	r2, #82	@ 0x52
 8003220:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2252      	movs	r2, #82	@ 0x52
 8003226:	5a9b      	ldrh	r3, [r3, r2]
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1c9      	bne.n	80031c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	0013      	movs	r3, r2
 8003238:	2200      	movs	r2, #0
 800323a:	2140      	movs	r1, #64	@ 0x40
 800323c:	f000 fe08 	bl	8003e50 <UART_WaitOnFlagUntilTimeout>
 8003240:	1e03      	subs	r3, r0, #0
 8003242:	d004      	beq.n	800324e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e005      	b.n	800325a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	0018      	movs	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	b008      	add	sp, #32
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b088      	sub	sp, #32
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	1dbb      	adds	r3, r7, #6
 800326e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2280      	movs	r2, #128	@ 0x80
 8003274:	589b      	ldr	r3, [r3, r2]
 8003276:	2b20      	cmp	r3, #32
 8003278:	d145      	bne.n	8003306 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_UART_Receive_DMA+0x26>
 8003280:	1dbb      	adds	r3, r7, #6
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e03d      	b.n	8003308 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	015b      	lsls	r3, r3, #5
 8003294:	429a      	cmp	r2, r3
 8003296:	d109      	bne.n	80032ac <HAL_UART_Receive_DMA+0x4a>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2201      	movs	r2, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	d001      	beq.n	80032ac <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e02d      	b.n	8003308 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	2380      	movs	r3, #128	@ 0x80
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	4013      	ands	r3, r2
 80032be:	d019      	beq.n	80032f4 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c0:	f3ef 8310 	mrs	r3, PRIMASK
 80032c4:	613b      	str	r3, [r7, #16]
  return(result);
 80032c6:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	2301      	movs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	04c9      	lsls	r1, r1, #19
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f383 8810 	msr	PRIMASK, r3
}
 80032f2:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032f4:	1dbb      	adds	r3, r7, #6
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 fe17 	bl	8003f30 <UART_Start_Receive_DMA>
 8003302:	0003      	movs	r3, r0
 8003304:	e000      	b.n	8003308 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
  }
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b008      	add	sp, #32
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b0ab      	sub	sp, #172	@ 0xac
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	22a4      	movs	r2, #164	@ 0xa4
 8003320:	18b9      	adds	r1, r7, r2
 8003322:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	20a0      	movs	r0, #160	@ 0xa0
 800332c:	1839      	adds	r1, r7, r0
 800332e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	219c      	movs	r1, #156	@ 0x9c
 8003338:	1879      	adds	r1, r7, r1
 800333a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800333c:	0011      	movs	r1, r2
 800333e:	18bb      	adds	r3, r7, r2
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a99      	ldr	r2, [pc, #612]	@ (80035a8 <HAL_UART_IRQHandler+0x298>)
 8003344:	4013      	ands	r3, r2
 8003346:	2298      	movs	r2, #152	@ 0x98
 8003348:	18bc      	adds	r4, r7, r2
 800334a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800334c:	18bb      	adds	r3, r7, r2
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d114      	bne.n	800337e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003354:	187b      	adds	r3, r7, r1
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2220      	movs	r2, #32
 800335a:	4013      	ands	r3, r2
 800335c:	d00f      	beq.n	800337e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800335e:	183b      	adds	r3, r7, r0
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2220      	movs	r2, #32
 8003364:	4013      	ands	r3, r2
 8003366:	d00a      	beq.n	800337e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800336c:	2b00      	cmp	r3, #0
 800336e:	d100      	bne.n	8003372 <HAL_UART_IRQHandler+0x62>
 8003370:	e29e      	b.n	80038b0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	0010      	movs	r0, r2
 800337a:	4798      	blx	r3
      }
      return;
 800337c:	e298      	b.n	80038b0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800337e:	2398      	movs	r3, #152	@ 0x98
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d100      	bne.n	800338a <HAL_UART_IRQHandler+0x7a>
 8003388:	e114      	b.n	80035b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800338a:	239c      	movs	r3, #156	@ 0x9c
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d106      	bne.n	80033a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003396:	23a0      	movs	r3, #160	@ 0xa0
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a83      	ldr	r2, [pc, #524]	@ (80035ac <HAL_UART_IRQHandler+0x29c>)
 800339e:	4013      	ands	r3, r2
 80033a0:	d100      	bne.n	80033a4 <HAL_UART_IRQHandler+0x94>
 80033a2:	e107      	b.n	80035b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033a4:	23a4      	movs	r3, #164	@ 0xa4
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	d012      	beq.n	80033d6 <HAL_UART_IRQHandler+0xc6>
 80033b0:	23a0      	movs	r3, #160	@ 0xa0
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2284      	movs	r2, #132	@ 0x84
 80033ca:	589b      	ldr	r3, [r3, r2]
 80033cc:	2201      	movs	r2, #1
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2184      	movs	r1, #132	@ 0x84
 80033d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033d6:	23a4      	movs	r3, #164	@ 0xa4
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2202      	movs	r2, #2
 80033de:	4013      	ands	r3, r2
 80033e0:	d011      	beq.n	8003406 <HAL_UART_IRQHandler+0xf6>
 80033e2:	239c      	movs	r3, #156	@ 0x9c
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2201      	movs	r2, #1
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00b      	beq.n	8003406 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2202      	movs	r2, #2
 80033f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2284      	movs	r2, #132	@ 0x84
 80033fa:	589b      	ldr	r3, [r3, r2]
 80033fc:	2204      	movs	r2, #4
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2184      	movs	r1, #132	@ 0x84
 8003404:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003406:	23a4      	movs	r3, #164	@ 0xa4
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2204      	movs	r2, #4
 800340e:	4013      	ands	r3, r2
 8003410:	d011      	beq.n	8003436 <HAL_UART_IRQHandler+0x126>
 8003412:	239c      	movs	r3, #156	@ 0x9c
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2201      	movs	r2, #1
 800341a:	4013      	ands	r3, r2
 800341c:	d00b      	beq.n	8003436 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2204      	movs	r2, #4
 8003424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2284      	movs	r2, #132	@ 0x84
 800342a:	589b      	ldr	r3, [r3, r2]
 800342c:	2202      	movs	r2, #2
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2184      	movs	r1, #132	@ 0x84
 8003434:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003436:	23a4      	movs	r3, #164	@ 0xa4
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2208      	movs	r2, #8
 800343e:	4013      	ands	r3, r2
 8003440:	d017      	beq.n	8003472 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003442:	23a0      	movs	r3, #160	@ 0xa0
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2220      	movs	r2, #32
 800344a:	4013      	ands	r3, r2
 800344c:	d105      	bne.n	800345a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800344e:	239c      	movs	r3, #156	@ 0x9c
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2201      	movs	r2, #1
 8003456:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003458:	d00b      	beq.n	8003472 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2208      	movs	r2, #8
 8003460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2284      	movs	r2, #132	@ 0x84
 8003466:	589b      	ldr	r3, [r3, r2]
 8003468:	2208      	movs	r2, #8
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2184      	movs	r1, #132	@ 0x84
 8003470:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003472:	23a4      	movs	r3, #164	@ 0xa4
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	2380      	movs	r3, #128	@ 0x80
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	4013      	ands	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_UART_IRQHandler+0x198>
 8003480:	23a0      	movs	r3, #160	@ 0xa0
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	04db      	lsls	r3, r3, #19
 800348a:	4013      	ands	r3, r2
 800348c:	d00c      	beq.n	80034a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2280      	movs	r2, #128	@ 0x80
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2284      	movs	r2, #132	@ 0x84
 800349c:	589b      	ldr	r3, [r3, r2]
 800349e:	2220      	movs	r2, #32
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2184      	movs	r1, #132	@ 0x84
 80034a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2284      	movs	r2, #132	@ 0x84
 80034ac:	589b      	ldr	r3, [r3, r2]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d100      	bne.n	80034b4 <HAL_UART_IRQHandler+0x1a4>
 80034b2:	e1ff      	b.n	80038b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b4:	23a4      	movs	r3, #164	@ 0xa4
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2220      	movs	r2, #32
 80034bc:	4013      	ands	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c0:	23a0      	movs	r3, #160	@ 0xa0
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2220      	movs	r2, #32
 80034c8:	4013      	ands	r3, r2
 80034ca:	d008      	beq.n	80034de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	0010      	movs	r0, r2
 80034dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2284      	movs	r2, #132	@ 0x84
 80034e2:	589b      	ldr	r3, [r3, r2]
 80034e4:	2194      	movs	r1, #148	@ 0x94
 80034e6:	187a      	adds	r2, r7, r1
 80034e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2240      	movs	r2, #64	@ 0x40
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b40      	cmp	r3, #64	@ 0x40
 80034f6:	d004      	beq.n	8003502 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2228      	movs	r2, #40	@ 0x28
 80034fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003500:	d047      	beq.n	8003592 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f000 fdd7 	bl	80040b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2240      	movs	r2, #64	@ 0x40
 8003512:	4013      	ands	r3, r2
 8003514:	2b40      	cmp	r3, #64	@ 0x40
 8003516:	d137      	bne.n	8003588 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003518:	f3ef 8310 	mrs	r3, PRIMASK
 800351c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800351e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003520:	2090      	movs	r0, #144	@ 0x90
 8003522:	183a      	adds	r2, r7, r0
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	2301      	movs	r3, #1
 8003528:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800352c:	f383 8810 	msr	PRIMASK, r3
}
 8003530:	46c0      	nop			@ (mov r8, r8)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2140      	movs	r1, #64	@ 0x40
 800353e:	438a      	bics	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	183b      	adds	r3, r7, r0
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800354a:	f383 8810 	msr	PRIMASK, r3
}
 800354e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355c:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <HAL_UART_IRQHandler+0x2a0>)
 800355e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003564:	0018      	movs	r0, r3
 8003566:	f7fe f947 	bl	80017f8 <HAL_DMA_Abort_IT>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d01a      	beq.n	80035a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003578:	0018      	movs	r0, r3
 800357a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	e012      	b.n	80035a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 f9b5 	bl	80038f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003586:	e00d      	b.n	80035a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f9b0 	bl	80038f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	e008      	b.n	80035a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 f9ab 	bl	80038f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2284      	movs	r2, #132	@ 0x84
 800359e:	2100      	movs	r1, #0
 80035a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80035a2:	e187      	b.n	80038b4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	46c0      	nop			@ (mov r8, r8)
    return;
 80035a6:	e185      	b.n	80038b4 <HAL_UART_IRQHandler+0x5a4>
 80035a8:	0000080f 	.word	0x0000080f
 80035ac:	04000120 	.word	0x04000120
 80035b0:	08004373 	.word	0x08004373

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d000      	beq.n	80035be <HAL_UART_IRQHandler+0x2ae>
 80035bc:	e139      	b.n	8003832 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035be:	23a4      	movs	r3, #164	@ 0xa4
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2210      	movs	r2, #16
 80035c6:	4013      	ands	r3, r2
 80035c8:	d100      	bne.n	80035cc <HAL_UART_IRQHandler+0x2bc>
 80035ca:	e132      	b.n	8003832 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035cc:	23a0      	movs	r3, #160	@ 0xa0
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	4013      	ands	r3, r2
 80035d6:	d100      	bne.n	80035da <HAL_UART_IRQHandler+0x2ca>
 80035d8:	e12b      	b.n	8003832 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2210      	movs	r2, #16
 80035e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2240      	movs	r2, #64	@ 0x40
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b40      	cmp	r3, #64	@ 0x40
 80035ee:	d000      	beq.n	80035f2 <HAL_UART_IRQHandler+0x2e2>
 80035f0:	e09f      	b.n	8003732 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	217e      	movs	r1, #126	@ 0x7e
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003600:	187b      	adds	r3, r7, r1
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d100      	bne.n	800360a <HAL_UART_IRQHandler+0x2fa>
 8003608:	e156      	b.n	80038b8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2258      	movs	r2, #88	@ 0x58
 800360e:	5a9b      	ldrh	r3, [r3, r2]
 8003610:	187a      	adds	r2, r7, r1
 8003612:	8812      	ldrh	r2, [r2, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d300      	bcc.n	800361a <HAL_UART_IRQHandler+0x30a>
 8003618:	e14e      	b.n	80038b8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	187a      	adds	r2, r7, r1
 800361e:	215a      	movs	r1, #90	@ 0x5a
 8003620:	8812      	ldrh	r2, [r2, #0]
 8003622:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b20      	cmp	r3, #32
 800362c:	d06f      	beq.n	800370e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362e:	f3ef 8310 	mrs	r3, PRIMASK
 8003632:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003636:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003638:	2301      	movs	r3, #1
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	499e      	ldr	r1, [pc, #632]	@ (80038c8 <HAL_UART_IRQHandler+0x5b8>)
 8003650:	400a      	ands	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003656:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	f383 8810 	msr	PRIMASK, r3
}
 800365e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003660:	f3ef 8310 	mrs	r3, PRIMASK
 8003664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003668:	677b      	str	r3, [r7, #116]	@ 0x74
 800366a:	2301      	movs	r3, #1
 800366c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2101      	movs	r1, #1
 8003682:	438a      	bics	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003688:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003692:	f3ef 8310 	mrs	r3, PRIMASK
 8003696:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369a:	673b      	str	r3, [r7, #112]	@ 0x70
 800369c:	2301      	movs	r3, #1
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a2:	f383 8810 	msr	PRIMASK, r3
}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2140      	movs	r1, #64	@ 0x40
 80036b4:	438a      	bics	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036ba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2280      	movs	r2, #128	@ 0x80
 80036c8:	2120      	movs	r1, #32
 80036ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d2:	f3ef 8310 	mrs	r3, PRIMASK
 80036d6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036dc:	2301      	movs	r3, #1
 80036de:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036e2:	f383 8810 	msr	PRIMASK, r3
}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2110      	movs	r1, #16
 80036f4:	438a      	bics	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036fe:	f383 8810 	msr	PRIMASK, r3
}
 8003702:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003708:	0018      	movs	r0, r3
 800370a:	f7fe f83d 	bl	8001788 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2258      	movs	r2, #88	@ 0x58
 8003718:	5a9a      	ldrh	r2, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	215a      	movs	r1, #90	@ 0x5a
 800371e:	5a5b      	ldrh	r3, [r3, r1]
 8003720:	b29b      	uxth	r3, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0011      	movs	r1, r2
 800372a:	0018      	movs	r0, r3
 800372c:	f000 f8e8 	bl	8003900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003730:	e0c2      	b.n	80038b8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2258      	movs	r2, #88	@ 0x58
 8003736:	5a99      	ldrh	r1, [r3, r2]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	225a      	movs	r2, #90	@ 0x5a
 800373c:	5a9b      	ldrh	r3, [r3, r2]
 800373e:	b29a      	uxth	r2, r3
 8003740:	208e      	movs	r0, #142	@ 0x8e
 8003742:	183b      	adds	r3, r7, r0
 8003744:	1a8a      	subs	r2, r1, r2
 8003746:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	225a      	movs	r2, #90	@ 0x5a
 800374c:	5a9b      	ldrh	r3, [r3, r2]
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d100      	bne.n	8003756 <HAL_UART_IRQHandler+0x446>
 8003754:	e0b2      	b.n	80038bc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003756:	183b      	adds	r3, r7, r0
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d100      	bne.n	8003760 <HAL_UART_IRQHandler+0x450>
 800375e:	e0ad      	b.n	80038bc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003760:	f3ef 8310 	mrs	r3, PRIMASK
 8003764:	60fb      	str	r3, [r7, #12]
  return(result);
 8003766:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003768:	2488      	movs	r4, #136	@ 0x88
 800376a:	193a      	adds	r2, r7, r4
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	2301      	movs	r3, #1
 8003770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f383 8810 	msr	PRIMASK, r3
}
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4951      	ldr	r1, [pc, #324]	@ (80038cc <HAL_UART_IRQHandler+0x5bc>)
 8003786:	400a      	ands	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	193b      	adds	r3, r7, r4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f383 8810 	msr	PRIMASK, r3
}
 8003796:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003798:	f3ef 8310 	mrs	r3, PRIMASK
 800379c:	61bb      	str	r3, [r7, #24]
  return(result);
 800379e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	2484      	movs	r4, #132	@ 0x84
 80037a2:	193a      	adds	r2, r7, r4
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	2301      	movs	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f383 8810 	msr	PRIMASK, r3
}
 80037b0:	46c0      	nop			@ (mov r8, r8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2101      	movs	r1, #1
 80037be:	438a      	bics	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	193b      	adds	r3, r7, r4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2280      	movs	r2, #128	@ 0x80
 80037d4:	2120      	movs	r1, #32
 80037d6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ec:	2480      	movs	r4, #128	@ 0x80
 80037ee:	193a      	adds	r2, r7, r4
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	2301      	movs	r3, #1
 80037f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			@ (mov r8, r8)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2110      	movs	r1, #16
 800380a:	438a      	bics	r2, r1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	193b      	adds	r3, r7, r4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003816:	f383 8810 	msr	PRIMASK, r3
}
 800381a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003822:	183b      	adds	r3, r7, r0
 8003824:	881a      	ldrh	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0011      	movs	r1, r2
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f868 	bl	8003900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003830:	e044      	b.n	80038bc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003832:	23a4      	movs	r3, #164	@ 0xa4
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	@ 0x80
 800383a:	035b      	lsls	r3, r3, #13
 800383c:	4013      	ands	r3, r2
 800383e:	d010      	beq.n	8003862 <HAL_UART_IRQHandler+0x552>
 8003840:	239c      	movs	r3, #156	@ 0x9c
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	03db      	lsls	r3, r3, #15
 800384a:	4013      	ands	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2280      	movs	r2, #128	@ 0x80
 8003854:	0352      	lsls	r2, r2, #13
 8003856:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f000 fdcb 	bl	80043f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003860:	e02f      	b.n	80038c2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003862:	23a4      	movs	r3, #164	@ 0xa4
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2280      	movs	r2, #128	@ 0x80
 800386a:	4013      	ands	r3, r2
 800386c:	d00f      	beq.n	800388e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800386e:	23a0      	movs	r3, #160	@ 0xa0
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2280      	movs	r2, #128	@ 0x80
 8003876:	4013      	ands	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01e      	beq.n	80038c0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	0010      	movs	r0, r2
 800388a:	4798      	blx	r3
    }
    return;
 800388c:	e018      	b.n	80038c0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800388e:	23a4      	movs	r3, #164	@ 0xa4
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2240      	movs	r2, #64	@ 0x40
 8003896:	4013      	ands	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_UART_IRQHandler+0x5b2>
 800389a:	23a0      	movs	r3, #160	@ 0xa0
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2240      	movs	r2, #64	@ 0x40
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00d      	beq.n	80038c2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 fd79 	bl	80043a0 <UART_EndTransmit_IT>
    return;
 80038ae:	e008      	b.n	80038c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	e006      	b.n	80038c2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	e004      	b.n	80038c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80038b8:	46c0      	nop			@ (mov r8, r8)
 80038ba:	e002      	b.n	80038c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	e000      	b.n	80038c2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80038c0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b02b      	add	sp, #172	@ 0xac
 80038c6:	bd90      	pop	{r4, r7, pc}
 80038c8:	fffffeff 	.word	0xfffffeff
 80038cc:	fffffedf 	.word	0xfffffedf

080038d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	000a      	movs	r2, r1
 800390a:	1cbb      	adds	r3, r7, #2
 800390c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003920:	231e      	movs	r3, #30
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a8d      	ldr	r2, [pc, #564]	@ (8003b7c <UART_SetConfig+0x264>)
 8003948:	4013      	ands	r3, r2
 800394a:	0019      	movs	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4a88      	ldr	r2, [pc, #544]	@ (8003b80 <UART_SetConfig+0x268>)
 800395e:	4013      	ands	r3, r2
 8003960:	0019      	movs	r1, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a7f      	ldr	r2, [pc, #508]	@ (8003b84 <UART_SetConfig+0x26c>)
 8003986:	4013      	ands	r3, r2
 8003988:	0019      	movs	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	430a      	orrs	r2, r1
 8003992:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a7b      	ldr	r2, [pc, #492]	@ (8003b88 <UART_SetConfig+0x270>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d127      	bne.n	80039ee <UART_SetConfig+0xd6>
 800399e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b8c <UART_SetConfig+0x274>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	2203      	movs	r2, #3
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d00d      	beq.n	80039c6 <UART_SetConfig+0xae>
 80039aa:	d81b      	bhi.n	80039e4 <UART_SetConfig+0xcc>
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d014      	beq.n	80039da <UART_SetConfig+0xc2>
 80039b0:	d818      	bhi.n	80039e4 <UART_SetConfig+0xcc>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <UART_SetConfig+0xa4>
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d00a      	beq.n	80039d0 <UART_SetConfig+0xb8>
 80039ba:	e013      	b.n	80039e4 <UART_SetConfig+0xcc>
 80039bc:	231f      	movs	r3, #31
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e021      	b.n	8003a0a <UART_SetConfig+0xf2>
 80039c6:	231f      	movs	r3, #31
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2202      	movs	r2, #2
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e01c      	b.n	8003a0a <UART_SetConfig+0xf2>
 80039d0:	231f      	movs	r3, #31
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	2204      	movs	r2, #4
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e017      	b.n	8003a0a <UART_SetConfig+0xf2>
 80039da:	231f      	movs	r3, #31
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	2208      	movs	r2, #8
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	e012      	b.n	8003a0a <UART_SetConfig+0xf2>
 80039e4:	231f      	movs	r3, #31
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	2210      	movs	r2, #16
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e00d      	b.n	8003a0a <UART_SetConfig+0xf2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a67      	ldr	r2, [pc, #412]	@ (8003b90 <UART_SetConfig+0x278>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d104      	bne.n	8003a02 <UART_SetConfig+0xea>
 80039f8:	231f      	movs	r3, #31
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e003      	b.n	8003a0a <UART_SetConfig+0xf2>
 8003a02:	231f      	movs	r3, #31
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	2210      	movs	r2, #16
 8003a08:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	2380      	movs	r3, #128	@ 0x80
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d15c      	bne.n	8003ad0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003a16:	231f      	movs	r3, #31
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d015      	beq.n	8003a4c <UART_SetConfig+0x134>
 8003a20:	dc18      	bgt.n	8003a54 <UART_SetConfig+0x13c>
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d00d      	beq.n	8003a42 <UART_SetConfig+0x12a>
 8003a26:	dc15      	bgt.n	8003a54 <UART_SetConfig+0x13c>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <UART_SetConfig+0x11a>
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d005      	beq.n	8003a3c <UART_SetConfig+0x124>
 8003a30:	e010      	b.n	8003a54 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a32:	f7fe fde7 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8003a36:	0003      	movs	r3, r0
 8003a38:	61bb      	str	r3, [r7, #24]
        break;
 8003a3a:	e012      	b.n	8003a62 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a3c:	4b55      	ldr	r3, [pc, #340]	@ (8003b94 <UART_SetConfig+0x27c>)
 8003a3e:	61bb      	str	r3, [r7, #24]
        break;
 8003a40:	e00f      	b.n	8003a62 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a42:	f7fe fd7f 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8003a46:	0003      	movs	r3, r0
 8003a48:	61bb      	str	r3, [r7, #24]
        break;
 8003a4a:	e00a      	b.n	8003a62 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	61bb      	str	r3, [r7, #24]
        break;
 8003a52:	e006      	b.n	8003a62 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a58:	231e      	movs	r3, #30
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
        break;
 8003a60:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d100      	bne.n	8003a6a <UART_SetConfig+0x152>
 8003a68:	e07a      	b.n	8003b60 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	005a      	lsls	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	18d2      	adds	r2, r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	0010      	movs	r0, r2
 8003a7e:	f7fc fb4d 	bl	800011c <__udivsi3>
 8003a82:	0003      	movs	r3, r0
 8003a84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b0f      	cmp	r3, #15
 8003a8a:	d91c      	bls.n	8003ac6 <UART_SetConfig+0x1ae>
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	2380      	movs	r3, #128	@ 0x80
 8003a90:	025b      	lsls	r3, r3, #9
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d217      	bcs.n	8003ac6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	200e      	movs	r0, #14
 8003a9c:	183b      	adds	r3, r7, r0
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2207      	movs	r2, #7
 8003aac:	4013      	ands	r3, r2
 8003aae:	b299      	uxth	r1, r3
 8003ab0:	183b      	adds	r3, r7, r0
 8003ab2:	183a      	adds	r2, r7, r0
 8003ab4:	8812      	ldrh	r2, [r2, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	183a      	adds	r2, r7, r0
 8003ac0:	8812      	ldrh	r2, [r2, #0]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	e04c      	b.n	8003b60 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac6:	231e      	movs	r3, #30
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e047      	b.n	8003b60 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad0:	231f      	movs	r3, #31
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d015      	beq.n	8003b06 <UART_SetConfig+0x1ee>
 8003ada:	dc18      	bgt.n	8003b0e <UART_SetConfig+0x1f6>
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d00d      	beq.n	8003afc <UART_SetConfig+0x1e4>
 8003ae0:	dc15      	bgt.n	8003b0e <UART_SetConfig+0x1f6>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <UART_SetConfig+0x1d4>
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d005      	beq.n	8003af6 <UART_SetConfig+0x1de>
 8003aea:	e010      	b.n	8003b0e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe fd8a 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8003af0:	0003      	movs	r3, r0
 8003af2:	61bb      	str	r3, [r7, #24]
        break;
 8003af4:	e012      	b.n	8003b1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af6:	4b27      	ldr	r3, [pc, #156]	@ (8003b94 <UART_SetConfig+0x27c>)
 8003af8:	61bb      	str	r3, [r7, #24]
        break;
 8003afa:	e00f      	b.n	8003b1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003afc:	f7fe fd22 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8003b00:	0003      	movs	r3, r0
 8003b02:	61bb      	str	r3, [r7, #24]
        break;
 8003b04:	e00a      	b.n	8003b1c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b06:	2380      	movs	r3, #128	@ 0x80
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	61bb      	str	r3, [r7, #24]
        break;
 8003b0c:	e006      	b.n	8003b1c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b12:	231e      	movs	r3, #30
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
        break;
 8003b1a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01e      	beq.n	8003b60 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	085a      	lsrs	r2, r3, #1
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	18d2      	adds	r2, r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0019      	movs	r1, r3
 8003b32:	0010      	movs	r0, r2
 8003b34:	f7fc faf2 	bl	800011c <__udivsi3>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	d90a      	bls.n	8003b58 <UART_SetConfig+0x240>
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	2380      	movs	r3, #128	@ 0x80
 8003b46:	025b      	lsls	r3, r3, #9
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d205      	bcs.n	8003b58 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	e003      	b.n	8003b60 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003b58:	231e      	movs	r3, #30
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b6c:	231e      	movs	r3, #30
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	781b      	ldrb	r3, [r3, #0]
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b008      	add	sp, #32
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	ffff69f3 	.word	0xffff69f3
 8003b80:	ffffcfff 	.word	0xffffcfff
 8003b84:	fffff4ff 	.word	0xfffff4ff
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40004400 	.word	0x40004400
 8003b94:	007a1200 	.word	0x007a1200

08003b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <UART_AdvFeatureConfig+0x144>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a43      	ldr	r2, [pc, #268]	@ (8003ce0 <UART_AdvFeatureConfig+0x148>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	2202      	movs	r2, #2
 8003bea:	4013      	ands	r3, r2
 8003bec:	d00b      	beq.n	8003c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce4 <UART_AdvFeatureConfig+0x14c>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a34      	ldr	r2, [pc, #208]	@ (8003ce8 <UART_AdvFeatureConfig+0x150>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a2c      	ldr	r2, [pc, #176]	@ (8003cec <UART_AdvFeatureConfig+0x154>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	2220      	movs	r2, #32
 8003c50:	4013      	ands	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a25      	ldr	r2, [pc, #148]	@ (8003cf0 <UART_AdvFeatureConfig+0x158>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	2240      	movs	r2, #64	@ 0x40
 8003c72:	4013      	ands	r3, r2
 8003c74:	d01d      	beq.n	8003cb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf4 <UART_AdvFeatureConfig+0x15c>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c92:	2380      	movs	r3, #128	@ 0x80
 8003c94:	035b      	lsls	r3, r3, #13
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d10b      	bne.n	8003cb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	@ (8003cf8 <UART_AdvFeatureConfig+0x160>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d00b      	beq.n	8003cd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cfc <UART_AdvFeatureConfig+0x164>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	605a      	str	r2, [r3, #4]
  }
}
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	ffff7fff 	.word	0xffff7fff
 8003ce0:	fffdffff 	.word	0xfffdffff
 8003ce4:	fffeffff 	.word	0xfffeffff
 8003ce8:	fffbffff 	.word	0xfffbffff
 8003cec:	ffffefff 	.word	0xffffefff
 8003cf0:	ffffdfff 	.word	0xffffdfff
 8003cf4:	ffefffff 	.word	0xffefffff
 8003cf8:	ff9fffff 	.word	0xff9fffff
 8003cfc:	fff7ffff 	.word	0xfff7ffff

08003d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b092      	sub	sp, #72	@ 0x48
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2284      	movs	r2, #132	@ 0x84
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d10:	f7fd fba4 	bl	800145c <HAL_GetTick>
 8003d14:	0003      	movs	r3, r0
 8003d16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2208      	movs	r2, #8
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d12c      	bne.n	8003d80 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d28:	2280      	movs	r2, #128	@ 0x80
 8003d2a:	0391      	lsls	r1, r2, #14
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4a46      	ldr	r2, [pc, #280]	@ (8003e48 <UART_CheckIdleState+0x148>)
 8003d30:	9200      	str	r2, [sp, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f000 f88c 	bl	8003e50 <UART_WaitOnFlagUntilTimeout>
 8003d38:	1e03      	subs	r3, r0, #0
 8003d3a:	d021      	beq.n	8003d80 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d46:	2301      	movs	r3, #1
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4c:	f383 8810 	msr	PRIMASK, r3
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2180      	movs	r1, #128	@ 0x80
 8003d5e:	438a      	bics	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d68:	f383 8810 	msr	PRIMASK, r3
}
 8003d6c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2278      	movs	r2, #120	@ 0x78
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e05f      	b.n	8003e40 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2204      	movs	r2, #4
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d146      	bne.n	8003e1c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d90:	2280      	movs	r2, #128	@ 0x80
 8003d92:	03d1      	lsls	r1, r2, #15
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4a2c      	ldr	r2, [pc, #176]	@ (8003e48 <UART_CheckIdleState+0x148>)
 8003d98:	9200      	str	r2, [sp, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f000 f858 	bl	8003e50 <UART_WaitOnFlagUntilTimeout>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d03b      	beq.n	8003e1c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da4:	f3ef 8310 	mrs	r3, PRIMASK
 8003da8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003daa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dae:	2301      	movs	r3, #1
 8003db0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			@ (mov r8, r8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4921      	ldr	r1, [pc, #132]	@ (8003e4c <UART_CheckIdleState+0x14c>)
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dda:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ddc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8003de0:	2301      	movs	r3, #1
 8003de2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f383 8810 	msr	PRIMASK, r3
}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2101      	movs	r1, #1
 8003df8:	438a      	bics	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2280      	movs	r2, #128	@ 0x80
 8003e0c:	2120      	movs	r1, #32
 8003e0e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2278      	movs	r2, #120	@ 0x78
 8003e14:	2100      	movs	r1, #0
 8003e16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e011      	b.n	8003e40 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2280      	movs	r2, #128	@ 0x80
 8003e26:	2120      	movs	r1, #32
 8003e28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2278      	movs	r2, #120	@ 0x78
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b010      	add	sp, #64	@ 0x40
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	01ffffff 	.word	0x01ffffff
 8003e4c:	fffffedf 	.word	0xfffffedf

08003e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	1dfb      	adds	r3, r7, #7
 8003e5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e60:	e051      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3301      	adds	r3, #1
 8003e66:	d04e      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7fd faf8 	bl	800145c <HAL_GetTick>
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e051      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d03b      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b80      	cmp	r3, #128	@ 0x80
 8003e92:	d038      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b40      	cmp	r3, #64	@ 0x40
 8003e98:	d035      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d111      	bne.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2208      	movs	r2, #8
 8003eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f000 f900 	bl	80040b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2284      	movs	r2, #132	@ 0x84
 8003ebc:	2108      	movs	r1, #8
 8003ebe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2278      	movs	r2, #120	@ 0x78
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e02c      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	2380      	movs	r3, #128	@ 0x80
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d112      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2280      	movs	r2, #128	@ 0x80
 8003ee6:	0112      	lsls	r2, r2, #4
 8003ee8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 f8e3 	bl	80040b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2284      	movs	r2, #132	@ 0x84
 8003ef6:	2120      	movs	r1, #32
 8003ef8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2278      	movs	r2, #120	@ 0x78
 8003efe:	2100      	movs	r1, #0
 8003f00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e00f      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	425a      	negs	r2, r3
 8003f16:	4153      	adcs	r3, r2
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	1dfb      	adds	r3, r7, #7
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d09e      	beq.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b004      	add	sp, #16
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b090      	sub	sp, #64	@ 0x40
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	1dbb      	adds	r3, r7, #6
 8003f3c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1dba      	adds	r2, r7, #6
 8003f48:	2158      	movs	r1, #88	@ 0x58
 8003f4a:	8812      	ldrh	r2, [r2, #0]
 8003f4c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2284      	movs	r2, #132	@ 0x84
 8003f52:	2100      	movs	r1, #0
 8003f54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	2122      	movs	r1, #34	@ 0x22
 8003f5c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d028      	beq.n	8003fb8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8004064 <UART_Start_Receive_DMA+0x134>)
 8003f6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f72:	4a3d      	ldr	r2, [pc, #244]	@ (8004068 <UART_Start_Receive_DMA+0x138>)
 8003f74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	4a3c      	ldr	r2, [pc, #240]	@ (800406c <UART_Start_Receive_DMA+0x13c>)
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f82:	2200      	movs	r2, #0
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3324      	adds	r3, #36	@ 0x24
 8003f90:	0019      	movs	r1, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f96:	001a      	movs	r2, r3
 8003f98:	1dbb      	adds	r3, r7, #6
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	f7fd fb8e 	bl	80016bc <HAL_DMA_Start_IT>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d009      	beq.n	8003fb8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2284      	movs	r2, #132	@ 0x84
 8003fa8:	2110      	movs	r1, #16
 8003faa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2280      	movs	r2, #128	@ 0x80
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e050      	b.n	800405a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d019      	beq.n	8003ff4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fca:	2301      	movs	r3, #1
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd0:	f383 8810 	msr	PRIMASK, r3
}
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2180      	movs	r1, #128	@ 0x80
 8003fe2:	0049      	lsls	r1, r1, #1
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	f383 8810 	msr	PRIMASK, r3
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff8:	613b      	str	r3, [r7, #16]
  return(result);
 8003ffa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ffe:	2301      	movs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2101      	movs	r1, #1
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f383 8810 	msr	PRIMASK, r3
}
 8004024:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004026:	f3ef 8310 	mrs	r3, PRIMASK
 800402a:	61fb      	str	r3, [r7, #28]
  return(result);
 800402c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800402e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004030:	2301      	movs	r3, #1
 8004032:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2140      	movs	r1, #64	@ 0x40
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	f383 8810 	msr	PRIMASK, r3
}
 8004056:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b010      	add	sp, #64	@ 0x40
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	08004181 	.word	0x08004181
 8004068:	080042ad 	.word	0x080042ad
 800406c:	080042ef 	.word	0x080042ef

08004070 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004078:	f3ef 8310 	mrs	r3, PRIMASK
 800407c:	60bb      	str	r3, [r7, #8]
  return(result);
 800407e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	2301      	movs	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f383 8810 	msr	PRIMASK, r3
}
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	21c0      	movs	r1, #192	@ 0xc0
 800409a:	438a      	bics	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b006      	add	sp, #24
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	@ 0x38
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	617b      	str	r3, [r7, #20]
  return(result);
 80040c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ca:	2301      	movs	r3, #1
 80040cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4926      	ldr	r1, [pc, #152]	@ (800417c <UART_EndRxTransfer+0xc4>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f383 8810 	msr	PRIMASK, r3
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f2:	f3ef 8310 	mrs	r3, PRIMASK
 80040f6:	623b      	str	r3, [r7, #32]
  return(result);
 80040f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80040fc:	2301      	movs	r3, #1
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	f383 8810 	msr	PRIMASK, r3
}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2101      	movs	r1, #1
 8004114:	438a      	bics	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	f383 8810 	msr	PRIMASK, r3
}
 8004122:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004128:	2b01      	cmp	r3, #1
 800412a:	d118      	bne.n	800415e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412c:	f3ef 8310 	mrs	r3, PRIMASK
 8004130:	60bb      	str	r3, [r7, #8]
  return(result);
 8004132:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004136:	2301      	movs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f383 8810 	msr	PRIMASK, r3
}
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2110      	movs	r1, #16
 800414e:	438a      	bics	r2, r1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004154:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f383 8810 	msr	PRIMASK, r3
}
 800415c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2280      	movs	r2, #128	@ 0x80
 8004162:	2120      	movs	r1, #32
 8004164:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b00e      	add	sp, #56	@ 0x38
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	fffffedf 	.word	0xfffffedf

08004180 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b094      	sub	sp, #80	@ 0x50
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b20      	cmp	r3, #32
 8004194:	d06f      	beq.n	8004276 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8004196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004198:	225a      	movs	r2, #90	@ 0x5a
 800419a:	2100      	movs	r1, #0
 800419c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419e:	f3ef 8310 	mrs	r3, PRIMASK
 80041a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80041a4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041a8:	2301      	movs	r3, #1
 80041aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f383 8810 	msr	PRIMASK, r3
}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	493a      	ldr	r1, [pc, #232]	@ (80042a8 <UART_DMAReceiveCplt+0x128>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d0:	f3ef 8310 	mrs	r3, PRIMASK
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041da:	2301      	movs	r3, #1
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	f383 8810 	msr	PRIMASK, r3
}
 80041e4:	46c0      	nop			@ (mov r8, r8)
 80041e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2101      	movs	r1, #1
 80041f2:	438a      	bics	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fc:	f383 8810 	msr	PRIMASK, r3
}
 8004200:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004202:	f3ef 8310 	mrs	r3, PRIMASK
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800420a:	643b      	str	r3, [r7, #64]	@ 0x40
 800420c:	2301      	movs	r3, #1
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004212:	f383 8810 	msr	PRIMASK, r3
}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2140      	movs	r1, #64	@ 0x40
 8004224:	438a      	bics	r2, r1
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800422a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422e:	f383 8810 	msr	PRIMASK, r3
}
 8004232:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004236:	2280      	movs	r2, #128	@ 0x80
 8004238:	2120      	movs	r1, #32
 800423a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800423e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004240:	2b01      	cmp	r3, #1
 8004242:	d118      	bne.n	8004276 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004244:	f3ef 8310 	mrs	r3, PRIMASK
 8004248:	60fb      	str	r3, [r7, #12]
  return(result);
 800424a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800424e:	2301      	movs	r3, #1
 8004250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f383 8810 	msr	PRIMASK, r3
}
 8004258:	46c0      	nop			@ (mov r8, r8)
 800425a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2110      	movs	r1, #16
 8004266:	438a      	bics	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f383 8810 	msr	PRIMASK, r3
}
 8004274:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004278:	2200      	movs	r2, #0
 800427a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800427e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004280:	2b01      	cmp	r3, #1
 8004282:	d108      	bne.n	8004296 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004286:	2258      	movs	r2, #88	@ 0x58
 8004288:	5a9a      	ldrh	r2, [r3, r2]
 800428a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800428c:	0011      	movs	r1, r2
 800428e:	0018      	movs	r0, r3
 8004290:	f7ff fb36 	bl	8003900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004294:	e003      	b.n	800429e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004298:	0018      	movs	r0, r3
 800429a:	f7fc fb71 	bl	8000980 <HAL_UART_RxCpltCallback>
}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b014      	add	sp, #80	@ 0x50
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	fffffeff 	.word	0xfffffeff

080042ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10a      	bne.n	80042de <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2258      	movs	r2, #88	@ 0x58
 80042cc:	5a9b      	ldrh	r3, [r3, r2]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff fb12 	bl	8003900 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042dc:	e003      	b.n	80042e6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7ff fafd 	bl	80038e0 <HAL_UART_RxHalfCpltCallback>
}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004300:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2280      	movs	r2, #128	@ 0x80
 8004306:	589b      	ldr	r3, [r3, r2]
 8004308:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2280      	movs	r2, #128	@ 0x80
 8004312:	4013      	ands	r3, r2
 8004314:	2b80      	cmp	r3, #128	@ 0x80
 8004316:	d10a      	bne.n	800432e <UART_DMAError+0x40>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b21      	cmp	r3, #33	@ 0x21
 800431c:	d107      	bne.n	800432e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2252      	movs	r2, #82	@ 0x52
 8004322:	2100      	movs	r1, #0
 8004324:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	0018      	movs	r0, r3
 800432a:	f7ff fea1 	bl	8004070 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2240      	movs	r2, #64	@ 0x40
 8004336:	4013      	ands	r3, r2
 8004338:	2b40      	cmp	r3, #64	@ 0x40
 800433a:	d10a      	bne.n	8004352 <UART_DMAError+0x64>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b22      	cmp	r3, #34	@ 0x22
 8004340:	d107      	bne.n	8004352 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	225a      	movs	r2, #90	@ 0x5a
 8004346:	2100      	movs	r1, #0
 8004348:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	0018      	movs	r0, r3
 800434e:	f7ff feb3 	bl	80040b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2284      	movs	r2, #132	@ 0x84
 8004356:	589b      	ldr	r3, [r3, r2]
 8004358:	2210      	movs	r2, #16
 800435a:	431a      	orrs	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2184      	movs	r1, #132	@ 0x84
 8004360:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff fac3 	bl	80038f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	46bd      	mov	sp, r7
 800436e:	b006      	add	sp, #24
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	225a      	movs	r2, #90	@ 0x5a
 8004384:	2100      	movs	r1, #0
 8004386:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2252      	movs	r2, #82	@ 0x52
 800438c:	2100      	movs	r1, #0
 800438e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	0018      	movs	r0, r3
 8004394:	f7ff faac 	bl	80038f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004398:	46c0      	nop			@ (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b004      	add	sp, #16
 800439e:	bd80      	pop	{r7, pc}

080043a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80043ae:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	2301      	movs	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f383 8810 	msr	PRIMASK, r3
}
 80043bc:	46c0      	nop			@ (mov r8, r8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	@ 0x40
 80043ca:	438a      	bics	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f383 8810 	msr	PRIMASK, r3
}
 80043d8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f7ff fa71 	bl	80038d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b006      	add	sp, #24
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <rand>:
 8004408:	4b16      	ldr	r3, [pc, #88]	@ (8004464 <rand+0x5c>)
 800440a:	b510      	push	{r4, lr}
 800440c:	681c      	ldr	r4, [r3, #0]
 800440e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004410:	2b00      	cmp	r3, #0
 8004412:	d116      	bne.n	8004442 <rand+0x3a>
 8004414:	2018      	movs	r0, #24
 8004416:	f000 fa31 	bl	800487c <malloc>
 800441a:	1e02      	subs	r2, r0, #0
 800441c:	6320      	str	r0, [r4, #48]	@ 0x30
 800441e:	d104      	bne.n	800442a <rand+0x22>
 8004420:	2152      	movs	r1, #82	@ 0x52
 8004422:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <rand+0x60>)
 8004424:	4811      	ldr	r0, [pc, #68]	@ (800446c <rand+0x64>)
 8004426:	f000 f9c1 	bl	80047ac <__assert_func>
 800442a:	4b11      	ldr	r3, [pc, #68]	@ (8004470 <rand+0x68>)
 800442c:	2100      	movs	r1, #0
 800442e:	6003      	str	r3, [r0, #0]
 8004430:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <rand+0x6c>)
 8004432:	6043      	str	r3, [r0, #4]
 8004434:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <rand+0x70>)
 8004436:	6083      	str	r3, [r0, #8]
 8004438:	230b      	movs	r3, #11
 800443a:	8183      	strh	r3, [r0, #12]
 800443c:	2001      	movs	r0, #1
 800443e:	6110      	str	r0, [r2, #16]
 8004440:	6151      	str	r1, [r2, #20]
 8004442:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8004444:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <rand+0x74>)
 8004446:	6920      	ldr	r0, [r4, #16]
 8004448:	6961      	ldr	r1, [r4, #20]
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <rand+0x78>)
 800444c:	f7fb fef2 	bl	8000234 <__aeabi_lmul>
 8004450:	2201      	movs	r2, #1
 8004452:	2300      	movs	r3, #0
 8004454:	1880      	adds	r0, r0, r2
 8004456:	4159      	adcs	r1, r3
 8004458:	6120      	str	r0, [r4, #16]
 800445a:	6161      	str	r1, [r4, #20]
 800445c:	0048      	lsls	r0, r1, #1
 800445e:	0840      	lsrs	r0, r0, #1
 8004460:	bd10      	pop	{r4, pc}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	20000120 	.word	0x20000120
 8004468:	080054a0 	.word	0x080054a0
 800446c:	080054b7 	.word	0x080054b7
 8004470:	abcd330e 	.word	0xabcd330e
 8004474:	e66d1234 	.word	0xe66d1234
 8004478:	0005deec 	.word	0x0005deec
 800447c:	4c957f2d 	.word	0x4c957f2d
 8004480:	5851f42d 	.word	0x5851f42d

08004484 <std>:
 8004484:	2300      	movs	r3, #0
 8004486:	b510      	push	{r4, lr}
 8004488:	0004      	movs	r4, r0
 800448a:	6003      	str	r3, [r0, #0]
 800448c:	6043      	str	r3, [r0, #4]
 800448e:	6083      	str	r3, [r0, #8]
 8004490:	8181      	strh	r1, [r0, #12]
 8004492:	6643      	str	r3, [r0, #100]	@ 0x64
 8004494:	81c2      	strh	r2, [r0, #14]
 8004496:	6103      	str	r3, [r0, #16]
 8004498:	6143      	str	r3, [r0, #20]
 800449a:	6183      	str	r3, [r0, #24]
 800449c:	0019      	movs	r1, r3
 800449e:	2208      	movs	r2, #8
 80044a0:	305c      	adds	r0, #92	@ 0x5c
 80044a2:	f000 f8ff 	bl	80046a4 <memset>
 80044a6:	4b0b      	ldr	r3, [pc, #44]	@ (80044d4 <std+0x50>)
 80044a8:	6224      	str	r4, [r4, #32]
 80044aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80044ac:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <std+0x54>)
 80044ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044b0:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <std+0x58>)
 80044b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044b4:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <std+0x5c>)
 80044b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80044b8:	4b0a      	ldr	r3, [pc, #40]	@ (80044e4 <std+0x60>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	d005      	beq.n	80044ca <std+0x46>
 80044be:	4b0a      	ldr	r3, [pc, #40]	@ (80044e8 <std+0x64>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	d002      	beq.n	80044ca <std+0x46>
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <std+0x68>)
 80044c6:	429c      	cmp	r4, r3
 80044c8:	d103      	bne.n	80044d2 <std+0x4e>
 80044ca:	0020      	movs	r0, r4
 80044cc:	3058      	adds	r0, #88	@ 0x58
 80044ce:	f000 f969 	bl	80047a4 <__retarget_lock_init_recursive>
 80044d2:	bd10      	pop	{r4, pc}
 80044d4:	0800460d 	.word	0x0800460d
 80044d8:	08004635 	.word	0x08004635
 80044dc:	0800466d 	.word	0x0800466d
 80044e0:	08004699 	.word	0x08004699
 80044e4:	200004bc 	.word	0x200004bc
 80044e8:	20000524 	.word	0x20000524
 80044ec:	2000058c 	.word	0x2000058c

080044f0 <stdio_exit_handler>:
 80044f0:	b510      	push	{r4, lr}
 80044f2:	4a03      	ldr	r2, [pc, #12]	@ (8004500 <stdio_exit_handler+0x10>)
 80044f4:	4903      	ldr	r1, [pc, #12]	@ (8004504 <stdio_exit_handler+0x14>)
 80044f6:	4804      	ldr	r0, [pc, #16]	@ (8004508 <stdio_exit_handler+0x18>)
 80044f8:	f000 f86c 	bl	80045d4 <_fwalk_sglue>
 80044fc:	bd10      	pop	{r4, pc}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	20000114 	.word	0x20000114
 8004504:	08004b01 	.word	0x08004b01
 8004508:	20000124 	.word	0x20000124

0800450c <cleanup_stdio>:
 800450c:	6841      	ldr	r1, [r0, #4]
 800450e:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <cleanup_stdio+0x30>)
 8004510:	b510      	push	{r4, lr}
 8004512:	0004      	movs	r4, r0
 8004514:	4299      	cmp	r1, r3
 8004516:	d001      	beq.n	800451c <cleanup_stdio+0x10>
 8004518:	f000 faf2 	bl	8004b00 <_fflush_r>
 800451c:	68a1      	ldr	r1, [r4, #8]
 800451e:	4b08      	ldr	r3, [pc, #32]	@ (8004540 <cleanup_stdio+0x34>)
 8004520:	4299      	cmp	r1, r3
 8004522:	d002      	beq.n	800452a <cleanup_stdio+0x1e>
 8004524:	0020      	movs	r0, r4
 8004526:	f000 faeb 	bl	8004b00 <_fflush_r>
 800452a:	68e1      	ldr	r1, [r4, #12]
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <cleanup_stdio+0x38>)
 800452e:	4299      	cmp	r1, r3
 8004530:	d002      	beq.n	8004538 <cleanup_stdio+0x2c>
 8004532:	0020      	movs	r0, r4
 8004534:	f000 fae4 	bl	8004b00 <_fflush_r>
 8004538:	bd10      	pop	{r4, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	200004bc 	.word	0x200004bc
 8004540:	20000524 	.word	0x20000524
 8004544:	2000058c 	.word	0x2000058c

08004548 <global_stdio_init.part.0>:
 8004548:	b510      	push	{r4, lr}
 800454a:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <global_stdio_init.part.0+0x28>)
 800454c:	4a09      	ldr	r2, [pc, #36]	@ (8004574 <global_stdio_init.part.0+0x2c>)
 800454e:	2104      	movs	r1, #4
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	4809      	ldr	r0, [pc, #36]	@ (8004578 <global_stdio_init.part.0+0x30>)
 8004554:	2200      	movs	r2, #0
 8004556:	f7ff ff95 	bl	8004484 <std>
 800455a:	2201      	movs	r2, #1
 800455c:	2109      	movs	r1, #9
 800455e:	4807      	ldr	r0, [pc, #28]	@ (800457c <global_stdio_init.part.0+0x34>)
 8004560:	f7ff ff90 	bl	8004484 <std>
 8004564:	2202      	movs	r2, #2
 8004566:	2112      	movs	r1, #18
 8004568:	4805      	ldr	r0, [pc, #20]	@ (8004580 <global_stdio_init.part.0+0x38>)
 800456a:	f7ff ff8b 	bl	8004484 <std>
 800456e:	bd10      	pop	{r4, pc}
 8004570:	200005f4 	.word	0x200005f4
 8004574:	080044f1 	.word	0x080044f1
 8004578:	200004bc 	.word	0x200004bc
 800457c:	20000524 	.word	0x20000524
 8004580:	2000058c 	.word	0x2000058c

08004584 <__sfp_lock_acquire>:
 8004584:	b510      	push	{r4, lr}
 8004586:	4802      	ldr	r0, [pc, #8]	@ (8004590 <__sfp_lock_acquire+0xc>)
 8004588:	f000 f90d 	bl	80047a6 <__retarget_lock_acquire_recursive>
 800458c:	bd10      	pop	{r4, pc}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	200005fd 	.word	0x200005fd

08004594 <__sfp_lock_release>:
 8004594:	b510      	push	{r4, lr}
 8004596:	4802      	ldr	r0, [pc, #8]	@ (80045a0 <__sfp_lock_release+0xc>)
 8004598:	f000 f906 	bl	80047a8 <__retarget_lock_release_recursive>
 800459c:	bd10      	pop	{r4, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	200005fd 	.word	0x200005fd

080045a4 <__sinit>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	0004      	movs	r4, r0
 80045a8:	f7ff ffec 	bl	8004584 <__sfp_lock_acquire>
 80045ac:	6a23      	ldr	r3, [r4, #32]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <__sinit+0x14>
 80045b2:	f7ff ffef 	bl	8004594 <__sfp_lock_release>
 80045b6:	bd10      	pop	{r4, pc}
 80045b8:	4b04      	ldr	r3, [pc, #16]	@ (80045cc <__sinit+0x28>)
 80045ba:	6223      	str	r3, [r4, #32]
 80045bc:	4b04      	ldr	r3, [pc, #16]	@ (80045d0 <__sinit+0x2c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f6      	bne.n	80045b2 <__sinit+0xe>
 80045c4:	f7ff ffc0 	bl	8004548 <global_stdio_init.part.0>
 80045c8:	e7f3      	b.n	80045b2 <__sinit+0xe>
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	0800450d 	.word	0x0800450d
 80045d0:	200005f4 	.word	0x200005f4

080045d4 <_fwalk_sglue>:
 80045d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045d6:	0014      	movs	r4, r2
 80045d8:	2600      	movs	r6, #0
 80045da:	9000      	str	r0, [sp, #0]
 80045dc:	9101      	str	r1, [sp, #4]
 80045de:	68a5      	ldr	r5, [r4, #8]
 80045e0:	6867      	ldr	r7, [r4, #4]
 80045e2:	3f01      	subs	r7, #1
 80045e4:	d504      	bpl.n	80045f0 <_fwalk_sglue+0x1c>
 80045e6:	6824      	ldr	r4, [r4, #0]
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	d1f8      	bne.n	80045de <_fwalk_sglue+0xa>
 80045ec:	0030      	movs	r0, r6
 80045ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045f0:	89ab      	ldrh	r3, [r5, #12]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d908      	bls.n	8004608 <_fwalk_sglue+0x34>
 80045f6:	220e      	movs	r2, #14
 80045f8:	5eab      	ldrsh	r3, [r5, r2]
 80045fa:	3301      	adds	r3, #1
 80045fc:	d004      	beq.n	8004608 <_fwalk_sglue+0x34>
 80045fe:	0029      	movs	r1, r5
 8004600:	9800      	ldr	r0, [sp, #0]
 8004602:	9b01      	ldr	r3, [sp, #4]
 8004604:	4798      	blx	r3
 8004606:	4306      	orrs	r6, r0
 8004608:	3568      	adds	r5, #104	@ 0x68
 800460a:	e7ea      	b.n	80045e2 <_fwalk_sglue+0xe>

0800460c <__sread>:
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	000c      	movs	r4, r1
 8004610:	250e      	movs	r5, #14
 8004612:	5f49      	ldrsh	r1, [r1, r5]
 8004614:	f000 f874 	bl	8004700 <_read_r>
 8004618:	2800      	cmp	r0, #0
 800461a:	db03      	blt.n	8004624 <__sread+0x18>
 800461c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800461e:	181b      	adds	r3, r3, r0
 8004620:	6563      	str	r3, [r4, #84]	@ 0x54
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	4a02      	ldr	r2, [pc, #8]	@ (8004630 <__sread+0x24>)
 8004628:	4013      	ands	r3, r2
 800462a:	81a3      	strh	r3, [r4, #12]
 800462c:	e7f9      	b.n	8004622 <__sread+0x16>
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	ffffefff 	.word	0xffffefff

08004634 <__swrite>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	001f      	movs	r7, r3
 8004638:	898b      	ldrh	r3, [r1, #12]
 800463a:	0005      	movs	r5, r0
 800463c:	000c      	movs	r4, r1
 800463e:	0016      	movs	r6, r2
 8004640:	05db      	lsls	r3, r3, #23
 8004642:	d505      	bpl.n	8004650 <__swrite+0x1c>
 8004644:	230e      	movs	r3, #14
 8004646:	5ec9      	ldrsh	r1, [r1, r3]
 8004648:	2200      	movs	r2, #0
 800464a:	2302      	movs	r3, #2
 800464c:	f000 f844 	bl	80046d8 <_lseek_r>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	4a05      	ldr	r2, [pc, #20]	@ (8004668 <__swrite+0x34>)
 8004654:	0028      	movs	r0, r5
 8004656:	4013      	ands	r3, r2
 8004658:	81a3      	strh	r3, [r4, #12]
 800465a:	0032      	movs	r2, r6
 800465c:	230e      	movs	r3, #14
 800465e:	5ee1      	ldrsh	r1, [r4, r3]
 8004660:	003b      	movs	r3, r7
 8004662:	f000 f861 	bl	8004728 <_write_r>
 8004666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004668:	ffffefff 	.word	0xffffefff

0800466c <__sseek>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	000c      	movs	r4, r1
 8004670:	250e      	movs	r5, #14
 8004672:	5f49      	ldrsh	r1, [r1, r5]
 8004674:	f000 f830 	bl	80046d8 <_lseek_r>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	1c42      	adds	r2, r0, #1
 800467c:	d103      	bne.n	8004686 <__sseek+0x1a>
 800467e:	4a05      	ldr	r2, [pc, #20]	@ (8004694 <__sseek+0x28>)
 8004680:	4013      	ands	r3, r2
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	2280      	movs	r2, #128	@ 0x80
 8004688:	0152      	lsls	r2, r2, #5
 800468a:	4313      	orrs	r3, r2
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004690:	e7f8      	b.n	8004684 <__sseek+0x18>
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	ffffefff 	.word	0xffffefff

08004698 <__sclose>:
 8004698:	b510      	push	{r4, lr}
 800469a:	230e      	movs	r3, #14
 800469c:	5ec9      	ldrsh	r1, [r1, r3]
 800469e:	f000 f809 	bl	80046b4 <_close_r>
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <memset>:
 80046a4:	0003      	movs	r3, r0
 80046a6:	1882      	adds	r2, r0, r2
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d100      	bne.n	80046ae <memset+0xa>
 80046ac:	4770      	bx	lr
 80046ae:	7019      	strb	r1, [r3, #0]
 80046b0:	3301      	adds	r3, #1
 80046b2:	e7f9      	b.n	80046a8 <memset+0x4>

080046b4 <_close_r>:
 80046b4:	2300      	movs	r3, #0
 80046b6:	b570      	push	{r4, r5, r6, lr}
 80046b8:	4d06      	ldr	r5, [pc, #24]	@ (80046d4 <_close_r+0x20>)
 80046ba:	0004      	movs	r4, r0
 80046bc:	0008      	movs	r0, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fc fde0 	bl	8001284 <_close>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d103      	bne.n	80046d0 <_close_r+0x1c>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d000      	beq.n	80046d0 <_close_r+0x1c>
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	46c0      	nop			@ (mov r8, r8)
 80046d4:	200005f8 	.word	0x200005f8

080046d8 <_lseek_r>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	0004      	movs	r4, r0
 80046dc:	0008      	movs	r0, r1
 80046de:	0011      	movs	r1, r2
 80046e0:	001a      	movs	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	4d05      	ldr	r5, [pc, #20]	@ (80046fc <_lseek_r+0x24>)
 80046e6:	602b      	str	r3, [r5, #0]
 80046e8:	f7fc fded 	bl	80012c6 <_lseek>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d103      	bne.n	80046f8 <_lseek_r+0x20>
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d000      	beq.n	80046f8 <_lseek_r+0x20>
 80046f6:	6023      	str	r3, [r4, #0]
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	200005f8 	.word	0x200005f8

08004700 <_read_r>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	0004      	movs	r4, r0
 8004704:	0008      	movs	r0, r1
 8004706:	0011      	movs	r1, r2
 8004708:	001a      	movs	r2, r3
 800470a:	2300      	movs	r3, #0
 800470c:	4d05      	ldr	r5, [pc, #20]	@ (8004724 <_read_r+0x24>)
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	f7fc fd7f 	bl	8001212 <_read>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d103      	bne.n	8004720 <_read_r+0x20>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d000      	beq.n	8004720 <_read_r+0x20>
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	200005f8 	.word	0x200005f8

08004728 <_write_r>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	0004      	movs	r4, r0
 800472c:	0008      	movs	r0, r1
 800472e:	0011      	movs	r1, r2
 8004730:	001a      	movs	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	4d05      	ldr	r5, [pc, #20]	@ (800474c <_write_r+0x24>)
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc fd88 	bl	800124c <_write>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d103      	bne.n	8004748 <_write_r+0x20>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d000      	beq.n	8004748 <_write_r+0x20>
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	bd70      	pop	{r4, r5, r6, pc}
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	200005f8 	.word	0x200005f8

08004750 <__errno>:
 8004750:	4b01      	ldr	r3, [pc, #4]	@ (8004758 <__errno+0x8>)
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	4770      	bx	lr
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	20000120 	.word	0x20000120

0800475c <__libc_init_array>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	2600      	movs	r6, #0
 8004760:	4c0c      	ldr	r4, [pc, #48]	@ (8004794 <__libc_init_array+0x38>)
 8004762:	4d0d      	ldr	r5, [pc, #52]	@ (8004798 <__libc_init_array+0x3c>)
 8004764:	1b64      	subs	r4, r4, r5
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	42a6      	cmp	r6, r4
 800476a:	d109      	bne.n	8004780 <__libc_init_array+0x24>
 800476c:	2600      	movs	r6, #0
 800476e:	f000 fe63 	bl	8005438 <_init>
 8004772:	4c0a      	ldr	r4, [pc, #40]	@ (800479c <__libc_init_array+0x40>)
 8004774:	4d0a      	ldr	r5, [pc, #40]	@ (80047a0 <__libc_init_array+0x44>)
 8004776:	1b64      	subs	r4, r4, r5
 8004778:	10a4      	asrs	r4, r4, #2
 800477a:	42a6      	cmp	r6, r4
 800477c:	d105      	bne.n	800478a <__libc_init_array+0x2e>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	00b3      	lsls	r3, r6, #2
 8004782:	58eb      	ldr	r3, [r5, r3]
 8004784:	4798      	blx	r3
 8004786:	3601      	adds	r6, #1
 8004788:	e7ee      	b.n	8004768 <__libc_init_array+0xc>
 800478a:	00b3      	lsls	r3, r6, #2
 800478c:	58eb      	ldr	r3, [r5, r3]
 800478e:	4798      	blx	r3
 8004790:	3601      	adds	r6, #1
 8004792:	e7f2      	b.n	800477a <__libc_init_array+0x1e>
 8004794:	08005580 	.word	0x08005580
 8004798:	08005580 	.word	0x08005580
 800479c:	08005584 	.word	0x08005584
 80047a0:	08005580 	.word	0x08005580

080047a4 <__retarget_lock_init_recursive>:
 80047a4:	4770      	bx	lr

080047a6 <__retarget_lock_acquire_recursive>:
 80047a6:	4770      	bx	lr

080047a8 <__retarget_lock_release_recursive>:
 80047a8:	4770      	bx	lr
	...

080047ac <__assert_func>:
 80047ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80047ae:	0014      	movs	r4, r2
 80047b0:	001a      	movs	r2, r3
 80047b2:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <__assert_func+0x2c>)
 80047b4:	0005      	movs	r5, r0
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	000e      	movs	r6, r1
 80047ba:	68d8      	ldr	r0, [r3, #12]
 80047bc:	4b07      	ldr	r3, [pc, #28]	@ (80047dc <__assert_func+0x30>)
 80047be:	2c00      	cmp	r4, #0
 80047c0:	d101      	bne.n	80047c6 <__assert_func+0x1a>
 80047c2:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <__assert_func+0x34>)
 80047c4:	001c      	movs	r4, r3
 80047c6:	4907      	ldr	r1, [pc, #28]	@ (80047e4 <__assert_func+0x38>)
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	9402      	str	r4, [sp, #8]
 80047cc:	002b      	movs	r3, r5
 80047ce:	9600      	str	r6, [sp, #0]
 80047d0:	f000 f9c2 	bl	8004b58 <fiprintf>
 80047d4:	f000 f9e2 	bl	8004b9c <abort>
 80047d8:	20000120 	.word	0x20000120
 80047dc:	0800550f 	.word	0x0800550f
 80047e0:	0800554a 	.word	0x0800554a
 80047e4:	0800551c 	.word	0x0800551c

080047e8 <_free_r>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	0005      	movs	r5, r0
 80047ec:	1e0c      	subs	r4, r1, #0
 80047ee:	d010      	beq.n	8004812 <_free_r+0x2a>
 80047f0:	3c04      	subs	r4, #4
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da00      	bge.n	80047fa <_free_r+0x12>
 80047f8:	18e4      	adds	r4, r4, r3
 80047fa:	0028      	movs	r0, r5
 80047fc:	f000 f8ea 	bl	80049d4 <__malloc_lock>
 8004800:	4a1d      	ldr	r2, [pc, #116]	@ (8004878 <_free_r+0x90>)
 8004802:	6813      	ldr	r3, [r2, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d105      	bne.n	8004814 <_free_r+0x2c>
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	6014      	str	r4, [r2, #0]
 800480c:	0028      	movs	r0, r5
 800480e:	f000 f8e9 	bl	80049e4 <__malloc_unlock>
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	42a3      	cmp	r3, r4
 8004816:	d908      	bls.n	800482a <_free_r+0x42>
 8004818:	6820      	ldr	r0, [r4, #0]
 800481a:	1821      	adds	r1, r4, r0
 800481c:	428b      	cmp	r3, r1
 800481e:	d1f3      	bne.n	8004808 <_free_r+0x20>
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	1809      	adds	r1, r1, r0
 8004826:	6021      	str	r1, [r4, #0]
 8004828:	e7ee      	b.n	8004808 <_free_r+0x20>
 800482a:	001a      	movs	r2, r3
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <_free_r+0x4e>
 8004832:	42a3      	cmp	r3, r4
 8004834:	d9f9      	bls.n	800482a <_free_r+0x42>
 8004836:	6811      	ldr	r1, [r2, #0]
 8004838:	1850      	adds	r0, r2, r1
 800483a:	42a0      	cmp	r0, r4
 800483c:	d10b      	bne.n	8004856 <_free_r+0x6e>
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	1809      	adds	r1, r1, r0
 8004842:	1850      	adds	r0, r2, r1
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	4283      	cmp	r3, r0
 8004848:	d1e0      	bne.n	800480c <_free_r+0x24>
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	1841      	adds	r1, r0, r1
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	6053      	str	r3, [r2, #4]
 8004854:	e7da      	b.n	800480c <_free_r+0x24>
 8004856:	42a0      	cmp	r0, r4
 8004858:	d902      	bls.n	8004860 <_free_r+0x78>
 800485a:	230c      	movs	r3, #12
 800485c:	602b      	str	r3, [r5, #0]
 800485e:	e7d5      	b.n	800480c <_free_r+0x24>
 8004860:	6820      	ldr	r0, [r4, #0]
 8004862:	1821      	adds	r1, r4, r0
 8004864:	428b      	cmp	r3, r1
 8004866:	d103      	bne.n	8004870 <_free_r+0x88>
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	1809      	adds	r1, r1, r0
 800486e:	6021      	str	r1, [r4, #0]
 8004870:	6063      	str	r3, [r4, #4]
 8004872:	6054      	str	r4, [r2, #4]
 8004874:	e7ca      	b.n	800480c <_free_r+0x24>
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	20000604 	.word	0x20000604

0800487c <malloc>:
 800487c:	b510      	push	{r4, lr}
 800487e:	4b03      	ldr	r3, [pc, #12]	@ (800488c <malloc+0x10>)
 8004880:	0001      	movs	r1, r0
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	f000 f826 	bl	80048d4 <_malloc_r>
 8004888:	bd10      	pop	{r4, pc}
 800488a:	46c0      	nop			@ (mov r8, r8)
 800488c:	20000120 	.word	0x20000120

08004890 <sbrk_aligned>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	4e0f      	ldr	r6, [pc, #60]	@ (80048d0 <sbrk_aligned+0x40>)
 8004894:	000d      	movs	r5, r1
 8004896:	6831      	ldr	r1, [r6, #0]
 8004898:	0004      	movs	r4, r0
 800489a:	2900      	cmp	r1, #0
 800489c:	d102      	bne.n	80048a4 <sbrk_aligned+0x14>
 800489e:	f000 f96b 	bl	8004b78 <_sbrk_r>
 80048a2:	6030      	str	r0, [r6, #0]
 80048a4:	0029      	movs	r1, r5
 80048a6:	0020      	movs	r0, r4
 80048a8:	f000 f966 	bl	8004b78 <_sbrk_r>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d103      	bne.n	80048b8 <sbrk_aligned+0x28>
 80048b0:	2501      	movs	r5, #1
 80048b2:	426d      	negs	r5, r5
 80048b4:	0028      	movs	r0, r5
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	2303      	movs	r3, #3
 80048ba:	1cc5      	adds	r5, r0, #3
 80048bc:	439d      	bics	r5, r3
 80048be:	42a8      	cmp	r0, r5
 80048c0:	d0f8      	beq.n	80048b4 <sbrk_aligned+0x24>
 80048c2:	1a29      	subs	r1, r5, r0
 80048c4:	0020      	movs	r0, r4
 80048c6:	f000 f957 	bl	8004b78 <_sbrk_r>
 80048ca:	3001      	adds	r0, #1
 80048cc:	d1f2      	bne.n	80048b4 <sbrk_aligned+0x24>
 80048ce:	e7ef      	b.n	80048b0 <sbrk_aligned+0x20>
 80048d0:	20000600 	.word	0x20000600

080048d4 <_malloc_r>:
 80048d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048d6:	2203      	movs	r2, #3
 80048d8:	1ccb      	adds	r3, r1, #3
 80048da:	4393      	bics	r3, r2
 80048dc:	3308      	adds	r3, #8
 80048de:	0005      	movs	r5, r0
 80048e0:	001f      	movs	r7, r3
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	d234      	bcs.n	8004950 <_malloc_r+0x7c>
 80048e6:	270c      	movs	r7, #12
 80048e8:	42b9      	cmp	r1, r7
 80048ea:	d833      	bhi.n	8004954 <_malloc_r+0x80>
 80048ec:	0028      	movs	r0, r5
 80048ee:	f000 f871 	bl	80049d4 <__malloc_lock>
 80048f2:	4e37      	ldr	r6, [pc, #220]	@ (80049d0 <_malloc_r+0xfc>)
 80048f4:	6833      	ldr	r3, [r6, #0]
 80048f6:	001c      	movs	r4, r3
 80048f8:	2c00      	cmp	r4, #0
 80048fa:	d12f      	bne.n	800495c <_malloc_r+0x88>
 80048fc:	0039      	movs	r1, r7
 80048fe:	0028      	movs	r0, r5
 8004900:	f7ff ffc6 	bl	8004890 <sbrk_aligned>
 8004904:	0004      	movs	r4, r0
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	d15f      	bne.n	80049ca <_malloc_r+0xf6>
 800490a:	6834      	ldr	r4, [r6, #0]
 800490c:	9400      	str	r4, [sp, #0]
 800490e:	9b00      	ldr	r3, [sp, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d14a      	bne.n	80049aa <_malloc_r+0xd6>
 8004914:	2c00      	cmp	r4, #0
 8004916:	d052      	beq.n	80049be <_malloc_r+0xea>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	0028      	movs	r0, r5
 800491c:	18e3      	adds	r3, r4, r3
 800491e:	9900      	ldr	r1, [sp, #0]
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	f000 f929 	bl	8004b78 <_sbrk_r>
 8004926:	9b01      	ldr	r3, [sp, #4]
 8004928:	4283      	cmp	r3, r0
 800492a:	d148      	bne.n	80049be <_malloc_r+0xea>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	0028      	movs	r0, r5
 8004930:	1aff      	subs	r7, r7, r3
 8004932:	0039      	movs	r1, r7
 8004934:	f7ff ffac 	bl	8004890 <sbrk_aligned>
 8004938:	3001      	adds	r0, #1
 800493a:	d040      	beq.n	80049be <_malloc_r+0xea>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	19db      	adds	r3, r3, r7
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	6833      	ldr	r3, [r6, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	2a00      	cmp	r2, #0
 8004948:	d133      	bne.n	80049b2 <_malloc_r+0xde>
 800494a:	9b00      	ldr	r3, [sp, #0]
 800494c:	6033      	str	r3, [r6, #0]
 800494e:	e019      	b.n	8004984 <_malloc_r+0xb0>
 8004950:	2b00      	cmp	r3, #0
 8004952:	dac9      	bge.n	80048e8 <_malloc_r+0x14>
 8004954:	230c      	movs	r3, #12
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	2000      	movs	r0, #0
 800495a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800495c:	6821      	ldr	r1, [r4, #0]
 800495e:	1bc9      	subs	r1, r1, r7
 8004960:	d420      	bmi.n	80049a4 <_malloc_r+0xd0>
 8004962:	290b      	cmp	r1, #11
 8004964:	d90a      	bls.n	800497c <_malloc_r+0xa8>
 8004966:	19e2      	adds	r2, r4, r7
 8004968:	6027      	str	r7, [r4, #0]
 800496a:	42a3      	cmp	r3, r4
 800496c:	d104      	bne.n	8004978 <_malloc_r+0xa4>
 800496e:	6032      	str	r2, [r6, #0]
 8004970:	6863      	ldr	r3, [r4, #4]
 8004972:	6011      	str	r1, [r2, #0]
 8004974:	6053      	str	r3, [r2, #4]
 8004976:	e005      	b.n	8004984 <_malloc_r+0xb0>
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	e7f9      	b.n	8004970 <_malloc_r+0x9c>
 800497c:	6862      	ldr	r2, [r4, #4]
 800497e:	42a3      	cmp	r3, r4
 8004980:	d10e      	bne.n	80049a0 <_malloc_r+0xcc>
 8004982:	6032      	str	r2, [r6, #0]
 8004984:	0028      	movs	r0, r5
 8004986:	f000 f82d 	bl	80049e4 <__malloc_unlock>
 800498a:	0020      	movs	r0, r4
 800498c:	2207      	movs	r2, #7
 800498e:	300b      	adds	r0, #11
 8004990:	1d23      	adds	r3, r4, #4
 8004992:	4390      	bics	r0, r2
 8004994:	1ac2      	subs	r2, r0, r3
 8004996:	4298      	cmp	r0, r3
 8004998:	d0df      	beq.n	800495a <_malloc_r+0x86>
 800499a:	1a1b      	subs	r3, r3, r0
 800499c:	50a3      	str	r3, [r4, r2]
 800499e:	e7dc      	b.n	800495a <_malloc_r+0x86>
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	e7ef      	b.n	8004984 <_malloc_r+0xb0>
 80049a4:	0023      	movs	r3, r4
 80049a6:	6864      	ldr	r4, [r4, #4]
 80049a8:	e7a6      	b.n	80048f8 <_malloc_r+0x24>
 80049aa:	9c00      	ldr	r4, [sp, #0]
 80049ac:	6863      	ldr	r3, [r4, #4]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	e7ad      	b.n	800490e <_malloc_r+0x3a>
 80049b2:	001a      	movs	r2, r3
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	d1fb      	bne.n	80049b2 <_malloc_r+0xde>
 80049ba:	2300      	movs	r3, #0
 80049bc:	e7da      	b.n	8004974 <_malloc_r+0xa0>
 80049be:	230c      	movs	r3, #12
 80049c0:	0028      	movs	r0, r5
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	f000 f80e 	bl	80049e4 <__malloc_unlock>
 80049c8:	e7c6      	b.n	8004958 <_malloc_r+0x84>
 80049ca:	6007      	str	r7, [r0, #0]
 80049cc:	e7da      	b.n	8004984 <_malloc_r+0xb0>
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	20000604 	.word	0x20000604

080049d4 <__malloc_lock>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4802      	ldr	r0, [pc, #8]	@ (80049e0 <__malloc_lock+0xc>)
 80049d8:	f7ff fee5 	bl	80047a6 <__retarget_lock_acquire_recursive>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	200005fc 	.word	0x200005fc

080049e4 <__malloc_unlock>:
 80049e4:	b510      	push	{r4, lr}
 80049e6:	4802      	ldr	r0, [pc, #8]	@ (80049f0 <__malloc_unlock+0xc>)
 80049e8:	f7ff fede 	bl	80047a8 <__retarget_lock_release_recursive>
 80049ec:	bd10      	pop	{r4, pc}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	200005fc 	.word	0x200005fc

080049f4 <__sflush_r>:
 80049f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049f6:	220c      	movs	r2, #12
 80049f8:	5e8b      	ldrsh	r3, [r1, r2]
 80049fa:	0005      	movs	r5, r0
 80049fc:	000c      	movs	r4, r1
 80049fe:	071a      	lsls	r2, r3, #28
 8004a00:	d456      	bmi.n	8004ab0 <__sflush_r+0xbc>
 8004a02:	684a      	ldr	r2, [r1, #4]
 8004a04:	2a00      	cmp	r2, #0
 8004a06:	dc02      	bgt.n	8004a0e <__sflush_r+0x1a>
 8004a08:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	dd4e      	ble.n	8004aac <__sflush_r+0xb8>
 8004a0e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a10:	2f00      	cmp	r7, #0
 8004a12:	d04b      	beq.n	8004aac <__sflush_r+0xb8>
 8004a14:	2200      	movs	r2, #0
 8004a16:	2080      	movs	r0, #128	@ 0x80
 8004a18:	682e      	ldr	r6, [r5, #0]
 8004a1a:	602a      	str	r2, [r5, #0]
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	0140      	lsls	r0, r0, #5
 8004a20:	6a21      	ldr	r1, [r4, #32]
 8004a22:	4002      	ands	r2, r0
 8004a24:	4203      	tst	r3, r0
 8004a26:	d033      	beq.n	8004a90 <__sflush_r+0x9c>
 8004a28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	075b      	lsls	r3, r3, #29
 8004a2e:	d506      	bpl.n	8004a3e <__sflush_r+0x4a>
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <__sflush_r+0x4a>
 8004a3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a3c:	1ad2      	subs	r2, r2, r3
 8004a3e:	2300      	movs	r3, #0
 8004a40:	0028      	movs	r0, r5
 8004a42:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a44:	6a21      	ldr	r1, [r4, #32]
 8004a46:	47b8      	blx	r7
 8004a48:	89a2      	ldrh	r2, [r4, #12]
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	d106      	bne.n	8004a5c <__sflush_r+0x68>
 8004a4e:	6829      	ldr	r1, [r5, #0]
 8004a50:	291d      	cmp	r1, #29
 8004a52:	d846      	bhi.n	8004ae2 <__sflush_r+0xee>
 8004a54:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <__sflush_r+0x108>)
 8004a56:	410b      	asrs	r3, r1
 8004a58:	07db      	lsls	r3, r3, #31
 8004a5a:	d442      	bmi.n	8004ae2 <__sflush_r+0xee>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6063      	str	r3, [r4, #4]
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	04d2      	lsls	r2, r2, #19
 8004a66:	d505      	bpl.n	8004a74 <__sflush_r+0x80>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <__sflush_r+0x7e>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d100      	bne.n	8004a74 <__sflush_r+0x80>
 8004a72:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a76:	602e      	str	r6, [r5, #0]
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	d017      	beq.n	8004aac <__sflush_r+0xb8>
 8004a7c:	0023      	movs	r3, r4
 8004a7e:	3344      	adds	r3, #68	@ 0x44
 8004a80:	4299      	cmp	r1, r3
 8004a82:	d002      	beq.n	8004a8a <__sflush_r+0x96>
 8004a84:	0028      	movs	r0, r5
 8004a86:	f7ff feaf 	bl	80047e8 <_free_r>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a8e:	e00d      	b.n	8004aac <__sflush_r+0xb8>
 8004a90:	2301      	movs	r3, #1
 8004a92:	0028      	movs	r0, r5
 8004a94:	47b8      	blx	r7
 8004a96:	0002      	movs	r2, r0
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d1c6      	bne.n	8004a2a <__sflush_r+0x36>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0c3      	beq.n	8004a2a <__sflush_r+0x36>
 8004aa2:	2b1d      	cmp	r3, #29
 8004aa4:	d001      	beq.n	8004aaa <__sflush_r+0xb6>
 8004aa6:	2b16      	cmp	r3, #22
 8004aa8:	d11a      	bne.n	8004ae0 <__sflush_r+0xec>
 8004aaa:	602e      	str	r6, [r5, #0]
 8004aac:	2000      	movs	r0, #0
 8004aae:	e01e      	b.n	8004aee <__sflush_r+0xfa>
 8004ab0:	690e      	ldr	r6, [r1, #16]
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	d0fa      	beq.n	8004aac <__sflush_r+0xb8>
 8004ab6:	680f      	ldr	r7, [r1, #0]
 8004ab8:	600e      	str	r6, [r1, #0]
 8004aba:	1bba      	subs	r2, r7, r6
 8004abc:	9201      	str	r2, [sp, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	079b      	lsls	r3, r3, #30
 8004ac2:	d100      	bne.n	8004ac6 <__sflush_r+0xd2>
 8004ac4:	694a      	ldr	r2, [r1, #20]
 8004ac6:	60a2      	str	r2, [r4, #8]
 8004ac8:	9b01      	ldr	r3, [sp, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	ddee      	ble.n	8004aac <__sflush_r+0xb8>
 8004ace:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ad0:	0032      	movs	r2, r6
 8004ad2:	001f      	movs	r7, r3
 8004ad4:	0028      	movs	r0, r5
 8004ad6:	9b01      	ldr	r3, [sp, #4]
 8004ad8:	6a21      	ldr	r1, [r4, #32]
 8004ada:	47b8      	blx	r7
 8004adc:	2800      	cmp	r0, #0
 8004ade:	dc07      	bgt.n	8004af0 <__sflush_r+0xfc>
 8004ae0:	89a2      	ldrh	r2, [r4, #12]
 8004ae2:	2340      	movs	r3, #64	@ 0x40
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	4240      	negs	r0, r0
 8004aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004af0:	9b01      	ldr	r3, [sp, #4]
 8004af2:	1836      	adds	r6, r6, r0
 8004af4:	1a1b      	subs	r3, r3, r0
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	e7e6      	b.n	8004ac8 <__sflush_r+0xd4>
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	dfbffffe 	.word	0xdfbffffe

08004b00 <_fflush_r>:
 8004b00:	690b      	ldr	r3, [r1, #16]
 8004b02:	b570      	push	{r4, r5, r6, lr}
 8004b04:	0005      	movs	r5, r0
 8004b06:	000c      	movs	r4, r1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <_fflush_r+0x12>
 8004b0c:	2500      	movs	r5, #0
 8004b0e:	0028      	movs	r0, r5
 8004b10:	bd70      	pop	{r4, r5, r6, pc}
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d004      	beq.n	8004b20 <_fflush_r+0x20>
 8004b16:	6a03      	ldr	r3, [r0, #32]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <_fflush_r+0x20>
 8004b1c:	f7ff fd42 	bl	80045a4 <__sinit>
 8004b20:	220c      	movs	r2, #12
 8004b22:	5ea3      	ldrsh	r3, [r4, r2]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f1      	beq.n	8004b0c <_fflush_r+0xc>
 8004b28:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b2a:	07d2      	lsls	r2, r2, #31
 8004b2c:	d404      	bmi.n	8004b38 <_fflush_r+0x38>
 8004b2e:	059b      	lsls	r3, r3, #22
 8004b30:	d402      	bmi.n	8004b38 <_fflush_r+0x38>
 8004b32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b34:	f7ff fe37 	bl	80047a6 <__retarget_lock_acquire_recursive>
 8004b38:	0028      	movs	r0, r5
 8004b3a:	0021      	movs	r1, r4
 8004b3c:	f7ff ff5a 	bl	80049f4 <__sflush_r>
 8004b40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b42:	0005      	movs	r5, r0
 8004b44:	07db      	lsls	r3, r3, #31
 8004b46:	d4e2      	bmi.n	8004b0e <_fflush_r+0xe>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	059b      	lsls	r3, r3, #22
 8004b4c:	d4df      	bmi.n	8004b0e <_fflush_r+0xe>
 8004b4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b50:	f7ff fe2a 	bl	80047a8 <__retarget_lock_release_recursive>
 8004b54:	e7db      	b.n	8004b0e <_fflush_r+0xe>
	...

08004b58 <fiprintf>:
 8004b58:	b40e      	push	{r1, r2, r3}
 8004b5a:	b517      	push	{r0, r1, r2, r4, lr}
 8004b5c:	4c05      	ldr	r4, [pc, #20]	@ (8004b74 <fiprintf+0x1c>)
 8004b5e:	ab05      	add	r3, sp, #20
 8004b60:	cb04      	ldmia	r3!, {r2}
 8004b62:	0001      	movs	r1, r0
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	f000 f846 	bl	8004bf8 <_vfiprintf_r>
 8004b6c:	bc1e      	pop	{r1, r2, r3, r4}
 8004b6e:	bc08      	pop	{r3}
 8004b70:	b003      	add	sp, #12
 8004b72:	4718      	bx	r3
 8004b74:	20000120 	.word	0x20000120

08004b78 <_sbrk_r>:
 8004b78:	2300      	movs	r3, #0
 8004b7a:	b570      	push	{r4, r5, r6, lr}
 8004b7c:	4d06      	ldr	r5, [pc, #24]	@ (8004b98 <_sbrk_r+0x20>)
 8004b7e:	0004      	movs	r4, r0
 8004b80:	0008      	movs	r0, r1
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f7fc fbaa 	bl	80012dc <_sbrk>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d103      	bne.n	8004b94 <_sbrk_r+0x1c>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d000      	beq.n	8004b94 <_sbrk_r+0x1c>
 8004b92:	6023      	str	r3, [r4, #0]
 8004b94:	bd70      	pop	{r4, r5, r6, pc}
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	200005f8 	.word	0x200005f8

08004b9c <abort>:
 8004b9c:	2006      	movs	r0, #6
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	f000 fb8e 	bl	80052c0 <raise>
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f7fc fb27 	bl	80011f8 <_exit>

08004baa <__sfputc_r>:
 8004baa:	6893      	ldr	r3, [r2, #8]
 8004bac:	b510      	push	{r4, lr}
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	6093      	str	r3, [r2, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da04      	bge.n	8004bc0 <__sfputc_r+0x16>
 8004bb6:	6994      	ldr	r4, [r2, #24]
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	db07      	blt.n	8004bcc <__sfputc_r+0x22>
 8004bbc:	290a      	cmp	r1, #10
 8004bbe:	d005      	beq.n	8004bcc <__sfputc_r+0x22>
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	1c58      	adds	r0, r3, #1
 8004bc4:	6010      	str	r0, [r2, #0]
 8004bc6:	7019      	strb	r1, [r3, #0]
 8004bc8:	0008      	movs	r0, r1
 8004bca:	bd10      	pop	{r4, pc}
 8004bcc:	f000 faae 	bl	800512c <__swbuf_r>
 8004bd0:	0001      	movs	r1, r0
 8004bd2:	e7f9      	b.n	8004bc8 <__sfputc_r+0x1e>

08004bd4 <__sfputs_r>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	0006      	movs	r6, r0
 8004bd8:	000f      	movs	r7, r1
 8004bda:	0014      	movs	r4, r2
 8004bdc:	18d5      	adds	r5, r2, r3
 8004bde:	42ac      	cmp	r4, r5
 8004be0:	d101      	bne.n	8004be6 <__sfputs_r+0x12>
 8004be2:	2000      	movs	r0, #0
 8004be4:	e007      	b.n	8004bf6 <__sfputs_r+0x22>
 8004be6:	7821      	ldrb	r1, [r4, #0]
 8004be8:	003a      	movs	r2, r7
 8004bea:	0030      	movs	r0, r6
 8004bec:	f7ff ffdd 	bl	8004baa <__sfputc_r>
 8004bf0:	3401      	adds	r4, #1
 8004bf2:	1c43      	adds	r3, r0, #1
 8004bf4:	d1f3      	bne.n	8004bde <__sfputs_r+0xa>
 8004bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bf8 <_vfiprintf_r>:
 8004bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfa:	b0a1      	sub	sp, #132	@ 0x84
 8004bfc:	000f      	movs	r7, r1
 8004bfe:	0015      	movs	r5, r2
 8004c00:	001e      	movs	r6, r3
 8004c02:	9003      	str	r0, [sp, #12]
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d004      	beq.n	8004c12 <_vfiprintf_r+0x1a>
 8004c08:	6a03      	ldr	r3, [r0, #32]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <_vfiprintf_r+0x1a>
 8004c0e:	f7ff fcc9 	bl	80045a4 <__sinit>
 8004c12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c14:	07db      	lsls	r3, r3, #31
 8004c16:	d405      	bmi.n	8004c24 <_vfiprintf_r+0x2c>
 8004c18:	89bb      	ldrh	r3, [r7, #12]
 8004c1a:	059b      	lsls	r3, r3, #22
 8004c1c:	d402      	bmi.n	8004c24 <_vfiprintf_r+0x2c>
 8004c1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004c20:	f7ff fdc1 	bl	80047a6 <__retarget_lock_acquire_recursive>
 8004c24:	89bb      	ldrh	r3, [r7, #12]
 8004c26:	071b      	lsls	r3, r3, #28
 8004c28:	d502      	bpl.n	8004c30 <_vfiprintf_r+0x38>
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d113      	bne.n	8004c58 <_vfiprintf_r+0x60>
 8004c30:	0039      	movs	r1, r7
 8004c32:	9803      	ldr	r0, [sp, #12]
 8004c34:	f000 fabc 	bl	80051b0 <__swsetup_r>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d00d      	beq.n	8004c58 <_vfiprintf_r+0x60>
 8004c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c3e:	07db      	lsls	r3, r3, #31
 8004c40:	d503      	bpl.n	8004c4a <_vfiprintf_r+0x52>
 8004c42:	2001      	movs	r0, #1
 8004c44:	4240      	negs	r0, r0
 8004c46:	b021      	add	sp, #132	@ 0x84
 8004c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c4a:	89bb      	ldrh	r3, [r7, #12]
 8004c4c:	059b      	lsls	r3, r3, #22
 8004c4e:	d4f8      	bmi.n	8004c42 <_vfiprintf_r+0x4a>
 8004c50:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004c52:	f7ff fda9 	bl	80047a8 <__retarget_lock_release_recursive>
 8004c56:	e7f4      	b.n	8004c42 <_vfiprintf_r+0x4a>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	ac08      	add	r4, sp, #32
 8004c5c:	6163      	str	r3, [r4, #20]
 8004c5e:	3320      	adds	r3, #32
 8004c60:	7663      	strb	r3, [r4, #25]
 8004c62:	3310      	adds	r3, #16
 8004c64:	76a3      	strb	r3, [r4, #26]
 8004c66:	9607      	str	r6, [sp, #28]
 8004c68:	002e      	movs	r6, r5
 8004c6a:	7833      	ldrb	r3, [r6, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <_vfiprintf_r+0x7c>
 8004c70:	2b25      	cmp	r3, #37	@ 0x25
 8004c72:	d148      	bne.n	8004d06 <_vfiprintf_r+0x10e>
 8004c74:	1b73      	subs	r3, r6, r5
 8004c76:	9305      	str	r3, [sp, #20]
 8004c78:	42ae      	cmp	r6, r5
 8004c7a:	d00b      	beq.n	8004c94 <_vfiprintf_r+0x9c>
 8004c7c:	002a      	movs	r2, r5
 8004c7e:	0039      	movs	r1, r7
 8004c80:	9803      	ldr	r0, [sp, #12]
 8004c82:	f7ff ffa7 	bl	8004bd4 <__sfputs_r>
 8004c86:	3001      	adds	r0, #1
 8004c88:	d100      	bne.n	8004c8c <_vfiprintf_r+0x94>
 8004c8a:	e0ae      	b.n	8004dea <_vfiprintf_r+0x1f2>
 8004c8c:	6963      	ldr	r3, [r4, #20]
 8004c8e:	9a05      	ldr	r2, [sp, #20]
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	6163      	str	r3, [r4, #20]
 8004c94:	7833      	ldrb	r3, [r6, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d100      	bne.n	8004c9c <_vfiprintf_r+0xa4>
 8004c9a:	e0a6      	b.n	8004dea <_vfiprintf_r+0x1f2>
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4252      	negs	r2, r2
 8004ca2:	6062      	str	r2, [r4, #4]
 8004ca4:	a904      	add	r1, sp, #16
 8004ca6:	3254      	adds	r2, #84	@ 0x54
 8004ca8:	1852      	adds	r2, r2, r1
 8004caa:	1c75      	adds	r5, r6, #1
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	60e3      	str	r3, [r4, #12]
 8004cb0:	60a3      	str	r3, [r4, #8]
 8004cb2:	7013      	strb	r3, [r2, #0]
 8004cb4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004cb6:	4b59      	ldr	r3, [pc, #356]	@ (8004e1c <_vfiprintf_r+0x224>)
 8004cb8:	2205      	movs	r2, #5
 8004cba:	0018      	movs	r0, r3
 8004cbc:	7829      	ldrb	r1, [r5, #0]
 8004cbe:	9305      	str	r3, [sp, #20]
 8004cc0:	f000 fb1e 	bl	8005300 <memchr>
 8004cc4:	1c6e      	adds	r6, r5, #1
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d11f      	bne.n	8004d0a <_vfiprintf_r+0x112>
 8004cca:	6822      	ldr	r2, [r4, #0]
 8004ccc:	06d3      	lsls	r3, r2, #27
 8004cce:	d504      	bpl.n	8004cda <_vfiprintf_r+0xe2>
 8004cd0:	2353      	movs	r3, #83	@ 0x53
 8004cd2:	a904      	add	r1, sp, #16
 8004cd4:	185b      	adds	r3, r3, r1
 8004cd6:	2120      	movs	r1, #32
 8004cd8:	7019      	strb	r1, [r3, #0]
 8004cda:	0713      	lsls	r3, r2, #28
 8004cdc:	d504      	bpl.n	8004ce8 <_vfiprintf_r+0xf0>
 8004cde:	2353      	movs	r3, #83	@ 0x53
 8004ce0:	a904      	add	r1, sp, #16
 8004ce2:	185b      	adds	r3, r3, r1
 8004ce4:	212b      	movs	r1, #43	@ 0x2b
 8004ce6:	7019      	strb	r1, [r3, #0]
 8004ce8:	782b      	ldrb	r3, [r5, #0]
 8004cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cec:	d016      	beq.n	8004d1c <_vfiprintf_r+0x124>
 8004cee:	002e      	movs	r6, r5
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	200a      	movs	r0, #10
 8004cf4:	68e3      	ldr	r3, [r4, #12]
 8004cf6:	7832      	ldrb	r2, [r6, #0]
 8004cf8:	1c75      	adds	r5, r6, #1
 8004cfa:	3a30      	subs	r2, #48	@ 0x30
 8004cfc:	2a09      	cmp	r2, #9
 8004cfe:	d950      	bls.n	8004da2 <_vfiprintf_r+0x1aa>
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d111      	bne.n	8004d28 <_vfiprintf_r+0x130>
 8004d04:	e017      	b.n	8004d36 <_vfiprintf_r+0x13e>
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7af      	b.n	8004c6a <_vfiprintf_r+0x72>
 8004d0a:	9b05      	ldr	r3, [sp, #20]
 8004d0c:	6822      	ldr	r2, [r4, #0]
 8004d0e:	1ac0      	subs	r0, r0, r3
 8004d10:	2301      	movs	r3, #1
 8004d12:	4083      	lsls	r3, r0
 8004d14:	4313      	orrs	r3, r2
 8004d16:	0035      	movs	r5, r6
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	e7cc      	b.n	8004cb6 <_vfiprintf_r+0xbe>
 8004d1c:	9b07      	ldr	r3, [sp, #28]
 8004d1e:	1d19      	adds	r1, r3, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	9107      	str	r1, [sp, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	db01      	blt.n	8004d2c <_vfiprintf_r+0x134>
 8004d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d2a:	e004      	b.n	8004d36 <_vfiprintf_r+0x13e>
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	60e3      	str	r3, [r4, #12]
 8004d30:	2302      	movs	r3, #2
 8004d32:	4313      	orrs	r3, r2
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	7833      	ldrb	r3, [r6, #0]
 8004d38:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d3a:	d10c      	bne.n	8004d56 <_vfiprintf_r+0x15e>
 8004d3c:	7873      	ldrb	r3, [r6, #1]
 8004d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d40:	d134      	bne.n	8004dac <_vfiprintf_r+0x1b4>
 8004d42:	9b07      	ldr	r3, [sp, #28]
 8004d44:	3602      	adds	r6, #2
 8004d46:	1d1a      	adds	r2, r3, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	9207      	str	r2, [sp, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da01      	bge.n	8004d54 <_vfiprintf_r+0x15c>
 8004d50:	2301      	movs	r3, #1
 8004d52:	425b      	negs	r3, r3
 8004d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d56:	4d32      	ldr	r5, [pc, #200]	@ (8004e20 <_vfiprintf_r+0x228>)
 8004d58:	2203      	movs	r2, #3
 8004d5a:	0028      	movs	r0, r5
 8004d5c:	7831      	ldrb	r1, [r6, #0]
 8004d5e:	f000 facf 	bl	8005300 <memchr>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d006      	beq.n	8004d74 <_vfiprintf_r+0x17c>
 8004d66:	2340      	movs	r3, #64	@ 0x40
 8004d68:	1b40      	subs	r0, r0, r5
 8004d6a:	4083      	lsls	r3, r0
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	3601      	adds	r6, #1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	7831      	ldrb	r1, [r6, #0]
 8004d76:	2206      	movs	r2, #6
 8004d78:	482a      	ldr	r0, [pc, #168]	@ (8004e24 <_vfiprintf_r+0x22c>)
 8004d7a:	1c75      	adds	r5, r6, #1
 8004d7c:	7621      	strb	r1, [r4, #24]
 8004d7e:	f000 fabf 	bl	8005300 <memchr>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d040      	beq.n	8004e08 <_vfiprintf_r+0x210>
 8004d86:	4b28      	ldr	r3, [pc, #160]	@ (8004e28 <_vfiprintf_r+0x230>)
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d122      	bne.n	8004dd2 <_vfiprintf_r+0x1da>
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	9b07      	ldr	r3, [sp, #28]
 8004d90:	3307      	adds	r3, #7
 8004d92:	4393      	bics	r3, r2
 8004d94:	3308      	adds	r3, #8
 8004d96:	9307      	str	r3, [sp, #28]
 8004d98:	6963      	ldr	r3, [r4, #20]
 8004d9a:	9a04      	ldr	r2, [sp, #16]
 8004d9c:	189b      	adds	r3, r3, r2
 8004d9e:	6163      	str	r3, [r4, #20]
 8004da0:	e762      	b.n	8004c68 <_vfiprintf_r+0x70>
 8004da2:	4343      	muls	r3, r0
 8004da4:	002e      	movs	r6, r5
 8004da6:	2101      	movs	r1, #1
 8004da8:	189b      	adds	r3, r3, r2
 8004daa:	e7a4      	b.n	8004cf6 <_vfiprintf_r+0xfe>
 8004dac:	2300      	movs	r3, #0
 8004dae:	200a      	movs	r0, #10
 8004db0:	0019      	movs	r1, r3
 8004db2:	3601      	adds	r6, #1
 8004db4:	6063      	str	r3, [r4, #4]
 8004db6:	7832      	ldrb	r2, [r6, #0]
 8004db8:	1c75      	adds	r5, r6, #1
 8004dba:	3a30      	subs	r2, #48	@ 0x30
 8004dbc:	2a09      	cmp	r2, #9
 8004dbe:	d903      	bls.n	8004dc8 <_vfiprintf_r+0x1d0>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0c8      	beq.n	8004d56 <_vfiprintf_r+0x15e>
 8004dc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dc6:	e7c6      	b.n	8004d56 <_vfiprintf_r+0x15e>
 8004dc8:	4341      	muls	r1, r0
 8004dca:	002e      	movs	r6, r5
 8004dcc:	2301      	movs	r3, #1
 8004dce:	1889      	adds	r1, r1, r2
 8004dd0:	e7f1      	b.n	8004db6 <_vfiprintf_r+0x1be>
 8004dd2:	aa07      	add	r2, sp, #28
 8004dd4:	9200      	str	r2, [sp, #0]
 8004dd6:	0021      	movs	r1, r4
 8004dd8:	003a      	movs	r2, r7
 8004dda:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <_vfiprintf_r+0x234>)
 8004ddc:	9803      	ldr	r0, [sp, #12]
 8004dde:	e000      	b.n	8004de2 <_vfiprintf_r+0x1ea>
 8004de0:	bf00      	nop
 8004de2:	9004      	str	r0, [sp, #16]
 8004de4:	9b04      	ldr	r3, [sp, #16]
 8004de6:	3301      	adds	r3, #1
 8004de8:	d1d6      	bne.n	8004d98 <_vfiprintf_r+0x1a0>
 8004dea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dec:	07db      	lsls	r3, r3, #31
 8004dee:	d405      	bmi.n	8004dfc <_vfiprintf_r+0x204>
 8004df0:	89bb      	ldrh	r3, [r7, #12]
 8004df2:	059b      	lsls	r3, r3, #22
 8004df4:	d402      	bmi.n	8004dfc <_vfiprintf_r+0x204>
 8004df6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004df8:	f7ff fcd6 	bl	80047a8 <__retarget_lock_release_recursive>
 8004dfc:	89bb      	ldrh	r3, [r7, #12]
 8004dfe:	065b      	lsls	r3, r3, #25
 8004e00:	d500      	bpl.n	8004e04 <_vfiprintf_r+0x20c>
 8004e02:	e71e      	b.n	8004c42 <_vfiprintf_r+0x4a>
 8004e04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e06:	e71e      	b.n	8004c46 <_vfiprintf_r+0x4e>
 8004e08:	aa07      	add	r2, sp, #28
 8004e0a:	9200      	str	r2, [sp, #0]
 8004e0c:	0021      	movs	r1, r4
 8004e0e:	003a      	movs	r2, r7
 8004e10:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <_vfiprintf_r+0x234>)
 8004e12:	9803      	ldr	r0, [sp, #12]
 8004e14:	f000 f87c 	bl	8004f10 <_printf_i>
 8004e18:	e7e3      	b.n	8004de2 <_vfiprintf_r+0x1ea>
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	0800554b 	.word	0x0800554b
 8004e20:	08005551 	.word	0x08005551
 8004e24:	08005555 	.word	0x08005555
 8004e28:	00000000 	.word	0x00000000
 8004e2c:	08004bd5 	.word	0x08004bd5

08004e30 <_printf_common>:
 8004e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e32:	0016      	movs	r6, r2
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	688a      	ldr	r2, [r1, #8]
 8004e38:	690b      	ldr	r3, [r1, #16]
 8004e3a:	000c      	movs	r4, r1
 8004e3c:	9000      	str	r0, [sp, #0]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	da00      	bge.n	8004e44 <_printf_common+0x14>
 8004e42:	0013      	movs	r3, r2
 8004e44:	0022      	movs	r2, r4
 8004e46:	6033      	str	r3, [r6, #0]
 8004e48:	3243      	adds	r2, #67	@ 0x43
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	d001      	beq.n	8004e54 <_printf_common+0x24>
 8004e50:	3301      	adds	r3, #1
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	069b      	lsls	r3, r3, #26
 8004e58:	d502      	bpl.n	8004e60 <_printf_common+0x30>
 8004e5a:	6833      	ldr	r3, [r6, #0]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	6033      	str	r3, [r6, #0]
 8004e60:	6822      	ldr	r2, [r4, #0]
 8004e62:	2306      	movs	r3, #6
 8004e64:	0015      	movs	r5, r2
 8004e66:	401d      	ands	r5, r3
 8004e68:	421a      	tst	r2, r3
 8004e6a:	d027      	beq.n	8004ebc <_printf_common+0x8c>
 8004e6c:	0023      	movs	r3, r4
 8004e6e:	3343      	adds	r3, #67	@ 0x43
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	1e5a      	subs	r2, r3, #1
 8004e74:	4193      	sbcs	r3, r2
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	0692      	lsls	r2, r2, #26
 8004e7a:	d430      	bmi.n	8004ede <_printf_common+0xae>
 8004e7c:	0022      	movs	r2, r4
 8004e7e:	9901      	ldr	r1, [sp, #4]
 8004e80:	9800      	ldr	r0, [sp, #0]
 8004e82:	9d08      	ldr	r5, [sp, #32]
 8004e84:	3243      	adds	r2, #67	@ 0x43
 8004e86:	47a8      	blx	r5
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d025      	beq.n	8004ed8 <_printf_common+0xa8>
 8004e8c:	2206      	movs	r2, #6
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	2500      	movs	r5, #0
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d105      	bne.n	8004ea4 <_printf_common+0x74>
 8004e98:	6833      	ldr	r3, [r6, #0]
 8004e9a:	68e5      	ldr	r5, [r4, #12]
 8004e9c:	1aed      	subs	r5, r5, r3
 8004e9e:	43eb      	mvns	r3, r5
 8004ea0:	17db      	asrs	r3, r3, #31
 8004ea2:	401d      	ands	r5, r3
 8004ea4:	68a3      	ldr	r3, [r4, #8]
 8004ea6:	6922      	ldr	r2, [r4, #16]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	dd01      	ble.n	8004eb0 <_printf_common+0x80>
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	18ed      	adds	r5, r5, r3
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42b5      	cmp	r5, r6
 8004eb4:	d120      	bne.n	8004ef8 <_printf_common+0xc8>
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	e010      	b.n	8004edc <_printf_common+0xac>
 8004eba:	3501      	adds	r5, #1
 8004ebc:	68e3      	ldr	r3, [r4, #12]
 8004ebe:	6832      	ldr	r2, [r6, #0]
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	42ab      	cmp	r3, r5
 8004ec4:	ddd2      	ble.n	8004e6c <_printf_common+0x3c>
 8004ec6:	0022      	movs	r2, r4
 8004ec8:	2301      	movs	r3, #1
 8004eca:	9901      	ldr	r1, [sp, #4]
 8004ecc:	9800      	ldr	r0, [sp, #0]
 8004ece:	9f08      	ldr	r7, [sp, #32]
 8004ed0:	3219      	adds	r2, #25
 8004ed2:	47b8      	blx	r7
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d1f0      	bne.n	8004eba <_printf_common+0x8a>
 8004ed8:	2001      	movs	r0, #1
 8004eda:	4240      	negs	r0, r0
 8004edc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ede:	2030      	movs	r0, #48	@ 0x30
 8004ee0:	18e1      	adds	r1, r4, r3
 8004ee2:	3143      	adds	r1, #67	@ 0x43
 8004ee4:	7008      	strb	r0, [r1, #0]
 8004ee6:	0021      	movs	r1, r4
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	3145      	adds	r1, #69	@ 0x45
 8004eec:	7809      	ldrb	r1, [r1, #0]
 8004eee:	18a2      	adds	r2, r4, r2
 8004ef0:	3243      	adds	r2, #67	@ 0x43
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	7011      	strb	r1, [r2, #0]
 8004ef6:	e7c1      	b.n	8004e7c <_printf_common+0x4c>
 8004ef8:	0022      	movs	r2, r4
 8004efa:	2301      	movs	r3, #1
 8004efc:	9901      	ldr	r1, [sp, #4]
 8004efe:	9800      	ldr	r0, [sp, #0]
 8004f00:	9f08      	ldr	r7, [sp, #32]
 8004f02:	321a      	adds	r2, #26
 8004f04:	47b8      	blx	r7
 8004f06:	3001      	adds	r0, #1
 8004f08:	d0e6      	beq.n	8004ed8 <_printf_common+0xa8>
 8004f0a:	3601      	adds	r6, #1
 8004f0c:	e7d1      	b.n	8004eb2 <_printf_common+0x82>
	...

08004f10 <_printf_i>:
 8004f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f12:	b08b      	sub	sp, #44	@ 0x2c
 8004f14:	9206      	str	r2, [sp, #24]
 8004f16:	000a      	movs	r2, r1
 8004f18:	3243      	adds	r2, #67	@ 0x43
 8004f1a:	9307      	str	r3, [sp, #28]
 8004f1c:	9005      	str	r0, [sp, #20]
 8004f1e:	9203      	str	r2, [sp, #12]
 8004f20:	7e0a      	ldrb	r2, [r1, #24]
 8004f22:	000c      	movs	r4, r1
 8004f24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f26:	2a78      	cmp	r2, #120	@ 0x78
 8004f28:	d809      	bhi.n	8004f3e <_printf_i+0x2e>
 8004f2a:	2a62      	cmp	r2, #98	@ 0x62
 8004f2c:	d80b      	bhi.n	8004f46 <_printf_i+0x36>
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	d100      	bne.n	8004f34 <_printf_i+0x24>
 8004f32:	e0bc      	b.n	80050ae <_printf_i+0x19e>
 8004f34:	497b      	ldr	r1, [pc, #492]	@ (8005124 <_printf_i+0x214>)
 8004f36:	9104      	str	r1, [sp, #16]
 8004f38:	2a58      	cmp	r2, #88	@ 0x58
 8004f3a:	d100      	bne.n	8004f3e <_printf_i+0x2e>
 8004f3c:	e090      	b.n	8005060 <_printf_i+0x150>
 8004f3e:	0025      	movs	r5, r4
 8004f40:	3542      	adds	r5, #66	@ 0x42
 8004f42:	702a      	strb	r2, [r5, #0]
 8004f44:	e022      	b.n	8004f8c <_printf_i+0x7c>
 8004f46:	0010      	movs	r0, r2
 8004f48:	3863      	subs	r0, #99	@ 0x63
 8004f4a:	2815      	cmp	r0, #21
 8004f4c:	d8f7      	bhi.n	8004f3e <_printf_i+0x2e>
 8004f4e:	f7fb f8db 	bl	8000108 <__gnu_thumb1_case_shi>
 8004f52:	0016      	.short	0x0016
 8004f54:	fff6001f 	.word	0xfff6001f
 8004f58:	fff6fff6 	.word	0xfff6fff6
 8004f5c:	001ffff6 	.word	0x001ffff6
 8004f60:	fff6fff6 	.word	0xfff6fff6
 8004f64:	fff6fff6 	.word	0xfff6fff6
 8004f68:	003600a1 	.word	0x003600a1
 8004f6c:	fff60080 	.word	0xfff60080
 8004f70:	00b2fff6 	.word	0x00b2fff6
 8004f74:	0036fff6 	.word	0x0036fff6
 8004f78:	fff6fff6 	.word	0xfff6fff6
 8004f7c:	0084      	.short	0x0084
 8004f7e:	0025      	movs	r5, r4
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	3542      	adds	r5, #66	@ 0x42
 8004f84:	1d11      	adds	r1, r2, #4
 8004f86:	6019      	str	r1, [r3, #0]
 8004f88:	6813      	ldr	r3, [r2, #0]
 8004f8a:	702b      	strb	r3, [r5, #0]
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0a0      	b.n	80050d2 <_printf_i+0x1c2>
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	6809      	ldr	r1, [r1, #0]
 8004f94:	1d02      	adds	r2, r0, #4
 8004f96:	060d      	lsls	r5, r1, #24
 8004f98:	d50b      	bpl.n	8004fb2 <_printf_i+0xa2>
 8004f9a:	6806      	ldr	r6, [r0, #0]
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	2e00      	cmp	r6, #0
 8004fa0:	da03      	bge.n	8004faa <_printf_i+0x9a>
 8004fa2:	232d      	movs	r3, #45	@ 0x2d
 8004fa4:	9a03      	ldr	r2, [sp, #12]
 8004fa6:	4276      	negs	r6, r6
 8004fa8:	7013      	strb	r3, [r2, #0]
 8004faa:	4b5e      	ldr	r3, [pc, #376]	@ (8005124 <_printf_i+0x214>)
 8004fac:	270a      	movs	r7, #10
 8004fae:	9304      	str	r3, [sp, #16]
 8004fb0:	e018      	b.n	8004fe4 <_printf_i+0xd4>
 8004fb2:	6806      	ldr	r6, [r0, #0]
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	0649      	lsls	r1, r1, #25
 8004fb8:	d5f1      	bpl.n	8004f9e <_printf_i+0x8e>
 8004fba:	b236      	sxth	r6, r6
 8004fbc:	e7ef      	b.n	8004f9e <_printf_i+0x8e>
 8004fbe:	6808      	ldr	r0, [r1, #0]
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	c940      	ldmia	r1!, {r6}
 8004fc4:	0605      	lsls	r5, r0, #24
 8004fc6:	d402      	bmi.n	8004fce <_printf_i+0xbe>
 8004fc8:	0640      	lsls	r0, r0, #25
 8004fca:	d500      	bpl.n	8004fce <_printf_i+0xbe>
 8004fcc:	b2b6      	uxth	r6, r6
 8004fce:	6019      	str	r1, [r3, #0]
 8004fd0:	4b54      	ldr	r3, [pc, #336]	@ (8005124 <_printf_i+0x214>)
 8004fd2:	270a      	movs	r7, #10
 8004fd4:	9304      	str	r3, [sp, #16]
 8004fd6:	2a6f      	cmp	r2, #111	@ 0x6f
 8004fd8:	d100      	bne.n	8004fdc <_printf_i+0xcc>
 8004fda:	3f02      	subs	r7, #2
 8004fdc:	0023      	movs	r3, r4
 8004fde:	2200      	movs	r2, #0
 8004fe0:	3343      	adds	r3, #67	@ 0x43
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	60a3      	str	r3, [r4, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db03      	blt.n	8004ff4 <_printf_i+0xe4>
 8004fec:	2104      	movs	r1, #4
 8004fee:	6822      	ldr	r2, [r4, #0]
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	6022      	str	r2, [r4, #0]
 8004ff4:	2e00      	cmp	r6, #0
 8004ff6:	d102      	bne.n	8004ffe <_printf_i+0xee>
 8004ff8:	9d03      	ldr	r5, [sp, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <_printf_i+0x108>
 8004ffe:	9d03      	ldr	r5, [sp, #12]
 8005000:	0030      	movs	r0, r6
 8005002:	0039      	movs	r1, r7
 8005004:	f7fb f910 	bl	8000228 <__aeabi_uidivmod>
 8005008:	9b04      	ldr	r3, [sp, #16]
 800500a:	3d01      	subs	r5, #1
 800500c:	5c5b      	ldrb	r3, [r3, r1]
 800500e:	702b      	strb	r3, [r5, #0]
 8005010:	0033      	movs	r3, r6
 8005012:	0006      	movs	r6, r0
 8005014:	429f      	cmp	r7, r3
 8005016:	d9f3      	bls.n	8005000 <_printf_i+0xf0>
 8005018:	2f08      	cmp	r7, #8
 800501a:	d109      	bne.n	8005030 <_printf_i+0x120>
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	07db      	lsls	r3, r3, #31
 8005020:	d506      	bpl.n	8005030 <_printf_i+0x120>
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	6923      	ldr	r3, [r4, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	dc02      	bgt.n	8005030 <_printf_i+0x120>
 800502a:	2330      	movs	r3, #48	@ 0x30
 800502c:	3d01      	subs	r5, #1
 800502e:	702b      	strb	r3, [r5, #0]
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	1b5b      	subs	r3, r3, r5
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	9b07      	ldr	r3, [sp, #28]
 8005038:	0021      	movs	r1, r4
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	9805      	ldr	r0, [sp, #20]
 800503e:	9b06      	ldr	r3, [sp, #24]
 8005040:	aa09      	add	r2, sp, #36	@ 0x24
 8005042:	f7ff fef5 	bl	8004e30 <_printf_common>
 8005046:	3001      	adds	r0, #1
 8005048:	d148      	bne.n	80050dc <_printf_i+0x1cc>
 800504a:	2001      	movs	r0, #1
 800504c:	4240      	negs	r0, r0
 800504e:	b00b      	add	sp, #44	@ 0x2c
 8005050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005052:	2220      	movs	r2, #32
 8005054:	6809      	ldr	r1, [r1, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	6022      	str	r2, [r4, #0]
 800505a:	2278      	movs	r2, #120	@ 0x78
 800505c:	4932      	ldr	r1, [pc, #200]	@ (8005128 <_printf_i+0x218>)
 800505e:	9104      	str	r1, [sp, #16]
 8005060:	0021      	movs	r1, r4
 8005062:	3145      	adds	r1, #69	@ 0x45
 8005064:	700a      	strb	r2, [r1, #0]
 8005066:	6819      	ldr	r1, [r3, #0]
 8005068:	6822      	ldr	r2, [r4, #0]
 800506a:	c940      	ldmia	r1!, {r6}
 800506c:	0610      	lsls	r0, r2, #24
 800506e:	d402      	bmi.n	8005076 <_printf_i+0x166>
 8005070:	0650      	lsls	r0, r2, #25
 8005072:	d500      	bpl.n	8005076 <_printf_i+0x166>
 8005074:	b2b6      	uxth	r6, r6
 8005076:	6019      	str	r1, [r3, #0]
 8005078:	07d3      	lsls	r3, r2, #31
 800507a:	d502      	bpl.n	8005082 <_printf_i+0x172>
 800507c:	2320      	movs	r3, #32
 800507e:	4313      	orrs	r3, r2
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	2e00      	cmp	r6, #0
 8005084:	d001      	beq.n	800508a <_printf_i+0x17a>
 8005086:	2710      	movs	r7, #16
 8005088:	e7a8      	b.n	8004fdc <_printf_i+0xcc>
 800508a:	2220      	movs	r2, #32
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	4393      	bics	r3, r2
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	e7f8      	b.n	8005086 <_printf_i+0x176>
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	680d      	ldr	r5, [r1, #0]
 8005098:	1d10      	adds	r0, r2, #4
 800509a:	6949      	ldr	r1, [r1, #20]
 800509c:	6018      	str	r0, [r3, #0]
 800509e:	6813      	ldr	r3, [r2, #0]
 80050a0:	062e      	lsls	r6, r5, #24
 80050a2:	d501      	bpl.n	80050a8 <_printf_i+0x198>
 80050a4:	6019      	str	r1, [r3, #0]
 80050a6:	e002      	b.n	80050ae <_printf_i+0x19e>
 80050a8:	066d      	lsls	r5, r5, #25
 80050aa:	d5fb      	bpl.n	80050a4 <_printf_i+0x194>
 80050ac:	8019      	strh	r1, [r3, #0]
 80050ae:	2300      	movs	r3, #0
 80050b0:	9d03      	ldr	r5, [sp, #12]
 80050b2:	6123      	str	r3, [r4, #16]
 80050b4:	e7bf      	b.n	8005036 <_printf_i+0x126>
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	1d11      	adds	r1, r2, #4
 80050ba:	6019      	str	r1, [r3, #0]
 80050bc:	6815      	ldr	r5, [r2, #0]
 80050be:	2100      	movs	r1, #0
 80050c0:	0028      	movs	r0, r5
 80050c2:	6862      	ldr	r2, [r4, #4]
 80050c4:	f000 f91c 	bl	8005300 <memchr>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d001      	beq.n	80050d0 <_printf_i+0x1c0>
 80050cc:	1b40      	subs	r0, r0, r5
 80050ce:	6060      	str	r0, [r4, #4]
 80050d0:	6863      	ldr	r3, [r4, #4]
 80050d2:	6123      	str	r3, [r4, #16]
 80050d4:	2300      	movs	r3, #0
 80050d6:	9a03      	ldr	r2, [sp, #12]
 80050d8:	7013      	strb	r3, [r2, #0]
 80050da:	e7ac      	b.n	8005036 <_printf_i+0x126>
 80050dc:	002a      	movs	r2, r5
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	9906      	ldr	r1, [sp, #24]
 80050e2:	9805      	ldr	r0, [sp, #20]
 80050e4:	9d07      	ldr	r5, [sp, #28]
 80050e6:	47a8      	blx	r5
 80050e8:	3001      	adds	r0, #1
 80050ea:	d0ae      	beq.n	800504a <_printf_i+0x13a>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	079b      	lsls	r3, r3, #30
 80050f0:	d415      	bmi.n	800511e <_printf_i+0x20e>
 80050f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050f4:	68e0      	ldr	r0, [r4, #12]
 80050f6:	4298      	cmp	r0, r3
 80050f8:	daa9      	bge.n	800504e <_printf_i+0x13e>
 80050fa:	0018      	movs	r0, r3
 80050fc:	e7a7      	b.n	800504e <_printf_i+0x13e>
 80050fe:	0022      	movs	r2, r4
 8005100:	2301      	movs	r3, #1
 8005102:	9906      	ldr	r1, [sp, #24]
 8005104:	9805      	ldr	r0, [sp, #20]
 8005106:	9e07      	ldr	r6, [sp, #28]
 8005108:	3219      	adds	r2, #25
 800510a:	47b0      	blx	r6
 800510c:	3001      	adds	r0, #1
 800510e:	d09c      	beq.n	800504a <_printf_i+0x13a>
 8005110:	3501      	adds	r5, #1
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	42ab      	cmp	r3, r5
 800511a:	dcf0      	bgt.n	80050fe <_printf_i+0x1ee>
 800511c:	e7e9      	b.n	80050f2 <_printf_i+0x1e2>
 800511e:	2500      	movs	r5, #0
 8005120:	e7f7      	b.n	8005112 <_printf_i+0x202>
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	0800555c 	.word	0x0800555c
 8005128:	0800556d 	.word	0x0800556d

0800512c <__swbuf_r>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	0006      	movs	r6, r0
 8005130:	000d      	movs	r5, r1
 8005132:	0014      	movs	r4, r2
 8005134:	2800      	cmp	r0, #0
 8005136:	d004      	beq.n	8005142 <__swbuf_r+0x16>
 8005138:	6a03      	ldr	r3, [r0, #32]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <__swbuf_r+0x16>
 800513e:	f7ff fa31 	bl	80045a4 <__sinit>
 8005142:	69a3      	ldr	r3, [r4, #24]
 8005144:	60a3      	str	r3, [r4, #8]
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	071b      	lsls	r3, r3, #28
 800514a:	d502      	bpl.n	8005152 <__swbuf_r+0x26>
 800514c:	6923      	ldr	r3, [r4, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <__swbuf_r+0x3a>
 8005152:	0021      	movs	r1, r4
 8005154:	0030      	movs	r0, r6
 8005156:	f000 f82b 	bl	80051b0 <__swsetup_r>
 800515a:	2800      	cmp	r0, #0
 800515c:	d003      	beq.n	8005166 <__swbuf_r+0x3a>
 800515e:	2501      	movs	r5, #1
 8005160:	426d      	negs	r5, r5
 8005162:	0028      	movs	r0, r5
 8005164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	6820      	ldr	r0, [r4, #0]
 800516a:	b2ef      	uxtb	r7, r5
 800516c:	1ac0      	subs	r0, r0, r3
 800516e:	6963      	ldr	r3, [r4, #20]
 8005170:	b2ed      	uxtb	r5, r5
 8005172:	4283      	cmp	r3, r0
 8005174:	dc05      	bgt.n	8005182 <__swbuf_r+0x56>
 8005176:	0021      	movs	r1, r4
 8005178:	0030      	movs	r0, r6
 800517a:	f7ff fcc1 	bl	8004b00 <_fflush_r>
 800517e:	2800      	cmp	r0, #0
 8005180:	d1ed      	bne.n	800515e <__swbuf_r+0x32>
 8005182:	68a3      	ldr	r3, [r4, #8]
 8005184:	3001      	adds	r0, #1
 8005186:	3b01      	subs	r3, #1
 8005188:	60a3      	str	r3, [r4, #8]
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	701f      	strb	r7, [r3, #0]
 8005192:	6963      	ldr	r3, [r4, #20]
 8005194:	4283      	cmp	r3, r0
 8005196:	d004      	beq.n	80051a2 <__swbuf_r+0x76>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	07db      	lsls	r3, r3, #31
 800519c:	d5e1      	bpl.n	8005162 <__swbuf_r+0x36>
 800519e:	2d0a      	cmp	r5, #10
 80051a0:	d1df      	bne.n	8005162 <__swbuf_r+0x36>
 80051a2:	0021      	movs	r1, r4
 80051a4:	0030      	movs	r0, r6
 80051a6:	f7ff fcab 	bl	8004b00 <_fflush_r>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d0d9      	beq.n	8005162 <__swbuf_r+0x36>
 80051ae:	e7d6      	b.n	800515e <__swbuf_r+0x32>

080051b0 <__swsetup_r>:
 80051b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005268 <__swsetup_r+0xb8>)
 80051b2:	b570      	push	{r4, r5, r6, lr}
 80051b4:	0005      	movs	r5, r0
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	000c      	movs	r4, r1
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d004      	beq.n	80051c8 <__swsetup_r+0x18>
 80051be:	6a03      	ldr	r3, [r0, #32]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <__swsetup_r+0x18>
 80051c4:	f7ff f9ee 	bl	80045a4 <__sinit>
 80051c8:	230c      	movs	r3, #12
 80051ca:	5ee2      	ldrsh	r2, [r4, r3]
 80051cc:	0713      	lsls	r3, r2, #28
 80051ce:	d423      	bmi.n	8005218 <__swsetup_r+0x68>
 80051d0:	06d3      	lsls	r3, r2, #27
 80051d2:	d407      	bmi.n	80051e4 <__swsetup_r+0x34>
 80051d4:	2309      	movs	r3, #9
 80051d6:	602b      	str	r3, [r5, #0]
 80051d8:	2340      	movs	r3, #64	@ 0x40
 80051da:	2001      	movs	r0, #1
 80051dc:	4313      	orrs	r3, r2
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	4240      	negs	r0, r0
 80051e2:	e03a      	b.n	800525a <__swsetup_r+0xaa>
 80051e4:	0752      	lsls	r2, r2, #29
 80051e6:	d513      	bpl.n	8005210 <__swsetup_r+0x60>
 80051e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051ea:	2900      	cmp	r1, #0
 80051ec:	d008      	beq.n	8005200 <__swsetup_r+0x50>
 80051ee:	0023      	movs	r3, r4
 80051f0:	3344      	adds	r3, #68	@ 0x44
 80051f2:	4299      	cmp	r1, r3
 80051f4:	d002      	beq.n	80051fc <__swsetup_r+0x4c>
 80051f6:	0028      	movs	r0, r5
 80051f8:	f7ff faf6 	bl	80047e8 <_free_r>
 80051fc:	2300      	movs	r3, #0
 80051fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005200:	2224      	movs	r2, #36	@ 0x24
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	4393      	bics	r3, r2
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	2300      	movs	r3, #0
 800520a:	6063      	str	r3, [r4, #4]
 800520c:	6923      	ldr	r3, [r4, #16]
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	2308      	movs	r3, #8
 8005212:	89a2      	ldrh	r2, [r4, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <__swsetup_r+0x86>
 800521e:	21a0      	movs	r1, #160	@ 0xa0
 8005220:	2280      	movs	r2, #128	@ 0x80
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	0089      	lsls	r1, r1, #2
 8005226:	0092      	lsls	r2, r2, #2
 8005228:	400b      	ands	r3, r1
 800522a:	4293      	cmp	r3, r2
 800522c:	d003      	beq.n	8005236 <__swsetup_r+0x86>
 800522e:	0021      	movs	r1, r4
 8005230:	0028      	movs	r0, r5
 8005232:	f000 f89b 	bl	800536c <__smakebuf_r>
 8005236:	230c      	movs	r3, #12
 8005238:	5ee2      	ldrsh	r2, [r4, r3]
 800523a:	2101      	movs	r1, #1
 800523c:	0013      	movs	r3, r2
 800523e:	400b      	ands	r3, r1
 8005240:	420a      	tst	r2, r1
 8005242:	d00b      	beq.n	800525c <__swsetup_r+0xac>
 8005244:	2300      	movs	r3, #0
 8005246:	60a3      	str	r3, [r4, #8]
 8005248:	6963      	ldr	r3, [r4, #20]
 800524a:	425b      	negs	r3, r3
 800524c:	61a3      	str	r3, [r4, #24]
 800524e:	2000      	movs	r0, #0
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	4283      	cmp	r3, r0
 8005254:	d101      	bne.n	800525a <__swsetup_r+0xaa>
 8005256:	0613      	lsls	r3, r2, #24
 8005258:	d4be      	bmi.n	80051d8 <__swsetup_r+0x28>
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	0791      	lsls	r1, r2, #30
 800525e:	d400      	bmi.n	8005262 <__swsetup_r+0xb2>
 8005260:	6963      	ldr	r3, [r4, #20]
 8005262:	60a3      	str	r3, [r4, #8]
 8005264:	e7f3      	b.n	800524e <__swsetup_r+0x9e>
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	20000120 	.word	0x20000120

0800526c <_raise_r>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	0004      	movs	r4, r0
 8005270:	000d      	movs	r5, r1
 8005272:	291f      	cmp	r1, #31
 8005274:	d904      	bls.n	8005280 <_raise_r+0x14>
 8005276:	2316      	movs	r3, #22
 8005278:	6003      	str	r3, [r0, #0]
 800527a:	2001      	movs	r0, #1
 800527c:	4240      	negs	r0, r0
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <_raise_r+0x24>
 8005286:	008a      	lsls	r2, r1, #2
 8005288:	189b      	adds	r3, r3, r2
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	2a00      	cmp	r2, #0
 800528e:	d108      	bne.n	80052a2 <_raise_r+0x36>
 8005290:	0020      	movs	r0, r4
 8005292:	f000 f831 	bl	80052f8 <_getpid_r>
 8005296:	002a      	movs	r2, r5
 8005298:	0001      	movs	r1, r0
 800529a:	0020      	movs	r0, r4
 800529c:	f000 f81a 	bl	80052d4 <_kill_r>
 80052a0:	e7ed      	b.n	800527e <_raise_r+0x12>
 80052a2:	2a01      	cmp	r2, #1
 80052a4:	d009      	beq.n	80052ba <_raise_r+0x4e>
 80052a6:	1c51      	adds	r1, r2, #1
 80052a8:	d103      	bne.n	80052b2 <_raise_r+0x46>
 80052aa:	2316      	movs	r3, #22
 80052ac:	6003      	str	r3, [r0, #0]
 80052ae:	2001      	movs	r0, #1
 80052b0:	e7e5      	b.n	800527e <_raise_r+0x12>
 80052b2:	2100      	movs	r1, #0
 80052b4:	0028      	movs	r0, r5
 80052b6:	6019      	str	r1, [r3, #0]
 80052b8:	4790      	blx	r2
 80052ba:	2000      	movs	r0, #0
 80052bc:	e7df      	b.n	800527e <_raise_r+0x12>
	...

080052c0 <raise>:
 80052c0:	b510      	push	{r4, lr}
 80052c2:	4b03      	ldr	r3, [pc, #12]	@ (80052d0 <raise+0x10>)
 80052c4:	0001      	movs	r1, r0
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	f7ff ffd0 	bl	800526c <_raise_r>
 80052cc:	bd10      	pop	{r4, pc}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	20000120 	.word	0x20000120

080052d4 <_kill_r>:
 80052d4:	2300      	movs	r3, #0
 80052d6:	b570      	push	{r4, r5, r6, lr}
 80052d8:	4d06      	ldr	r5, [pc, #24]	@ (80052f4 <_kill_r+0x20>)
 80052da:	0004      	movs	r4, r0
 80052dc:	0008      	movs	r0, r1
 80052de:	0011      	movs	r1, r2
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	f7fb ff79 	bl	80011d8 <_kill>
 80052e6:	1c43      	adds	r3, r0, #1
 80052e8:	d103      	bne.n	80052f2 <_kill_r+0x1e>
 80052ea:	682b      	ldr	r3, [r5, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d000      	beq.n	80052f2 <_kill_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	200005f8 	.word	0x200005f8

080052f8 <_getpid_r>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	f7fb ff67 	bl	80011cc <_getpid>
 80052fe:	bd10      	pop	{r4, pc}

08005300 <memchr>:
 8005300:	b2c9      	uxtb	r1, r1
 8005302:	1882      	adds	r2, r0, r2
 8005304:	4290      	cmp	r0, r2
 8005306:	d101      	bne.n	800530c <memchr+0xc>
 8005308:	2000      	movs	r0, #0
 800530a:	4770      	bx	lr
 800530c:	7803      	ldrb	r3, [r0, #0]
 800530e:	428b      	cmp	r3, r1
 8005310:	d0fb      	beq.n	800530a <memchr+0xa>
 8005312:	3001      	adds	r0, #1
 8005314:	e7f6      	b.n	8005304 <memchr+0x4>
	...

08005318 <__swhatbuf_r>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	000e      	movs	r6, r1
 800531c:	001d      	movs	r5, r3
 800531e:	230e      	movs	r3, #14
 8005320:	5ec9      	ldrsh	r1, [r1, r3]
 8005322:	0014      	movs	r4, r2
 8005324:	b096      	sub	sp, #88	@ 0x58
 8005326:	2900      	cmp	r1, #0
 8005328:	da0c      	bge.n	8005344 <__swhatbuf_r+0x2c>
 800532a:	89b2      	ldrh	r2, [r6, #12]
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	0011      	movs	r1, r2
 8005330:	4019      	ands	r1, r3
 8005332:	421a      	tst	r2, r3
 8005334:	d114      	bne.n	8005360 <__swhatbuf_r+0x48>
 8005336:	2380      	movs	r3, #128	@ 0x80
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	2000      	movs	r0, #0
 800533c:	6029      	str	r1, [r5, #0]
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	b016      	add	sp, #88	@ 0x58
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	466a      	mov	r2, sp
 8005346:	f000 f853 	bl	80053f0 <_fstat_r>
 800534a:	2800      	cmp	r0, #0
 800534c:	dbed      	blt.n	800532a <__swhatbuf_r+0x12>
 800534e:	23f0      	movs	r3, #240	@ 0xf0
 8005350:	9901      	ldr	r1, [sp, #4]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	4019      	ands	r1, r3
 8005356:	4b04      	ldr	r3, [pc, #16]	@ (8005368 <__swhatbuf_r+0x50>)
 8005358:	18c9      	adds	r1, r1, r3
 800535a:	424b      	negs	r3, r1
 800535c:	4159      	adcs	r1, r3
 800535e:	e7ea      	b.n	8005336 <__swhatbuf_r+0x1e>
 8005360:	2100      	movs	r1, #0
 8005362:	2340      	movs	r3, #64	@ 0x40
 8005364:	e7e9      	b.n	800533a <__swhatbuf_r+0x22>
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	ffffe000 	.word	0xffffe000

0800536c <__smakebuf_r>:
 800536c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536e:	2602      	movs	r6, #2
 8005370:	898b      	ldrh	r3, [r1, #12]
 8005372:	0005      	movs	r5, r0
 8005374:	000c      	movs	r4, r1
 8005376:	b085      	sub	sp, #20
 8005378:	4233      	tst	r3, r6
 800537a:	d007      	beq.n	800538c <__smakebuf_r+0x20>
 800537c:	0023      	movs	r3, r4
 800537e:	3347      	adds	r3, #71	@ 0x47
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	6123      	str	r3, [r4, #16]
 8005384:	2301      	movs	r3, #1
 8005386:	6163      	str	r3, [r4, #20]
 8005388:	b005      	add	sp, #20
 800538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538c:	ab03      	add	r3, sp, #12
 800538e:	aa02      	add	r2, sp, #8
 8005390:	f7ff ffc2 	bl	8005318 <__swhatbuf_r>
 8005394:	9f02      	ldr	r7, [sp, #8]
 8005396:	9001      	str	r0, [sp, #4]
 8005398:	0039      	movs	r1, r7
 800539a:	0028      	movs	r0, r5
 800539c:	f7ff fa9a 	bl	80048d4 <_malloc_r>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d108      	bne.n	80053b6 <__smakebuf_r+0x4a>
 80053a4:	220c      	movs	r2, #12
 80053a6:	5ea3      	ldrsh	r3, [r4, r2]
 80053a8:	059a      	lsls	r2, r3, #22
 80053aa:	d4ed      	bmi.n	8005388 <__smakebuf_r+0x1c>
 80053ac:	2203      	movs	r2, #3
 80053ae:	4393      	bics	r3, r2
 80053b0:	431e      	orrs	r6, r3
 80053b2:	81a6      	strh	r6, [r4, #12]
 80053b4:	e7e2      	b.n	800537c <__smakebuf_r+0x10>
 80053b6:	2380      	movs	r3, #128	@ 0x80
 80053b8:	89a2      	ldrh	r2, [r4, #12]
 80053ba:	6020      	str	r0, [r4, #0]
 80053bc:	4313      	orrs	r3, r2
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	9b03      	ldr	r3, [sp, #12]
 80053c2:	6120      	str	r0, [r4, #16]
 80053c4:	6167      	str	r7, [r4, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <__smakebuf_r+0x78>
 80053ca:	0028      	movs	r0, r5
 80053cc:	230e      	movs	r3, #14
 80053ce:	5ee1      	ldrsh	r1, [r4, r3]
 80053d0:	f000 f820 	bl	8005414 <_isatty_r>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d005      	beq.n	80053e4 <__smakebuf_r+0x78>
 80053d8:	2303      	movs	r3, #3
 80053da:	89a2      	ldrh	r2, [r4, #12]
 80053dc:	439a      	bics	r2, r3
 80053de:	3b02      	subs	r3, #2
 80053e0:	4313      	orrs	r3, r2
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	9a01      	ldr	r2, [sp, #4]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	81a3      	strh	r3, [r4, #12]
 80053ec:	e7cc      	b.n	8005388 <__smakebuf_r+0x1c>
	...

080053f0 <_fstat_r>:
 80053f0:	2300      	movs	r3, #0
 80053f2:	b570      	push	{r4, r5, r6, lr}
 80053f4:	4d06      	ldr	r5, [pc, #24]	@ (8005410 <_fstat_r+0x20>)
 80053f6:	0004      	movs	r4, r0
 80053f8:	0008      	movs	r0, r1
 80053fa:	0011      	movs	r1, r2
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	f7fb ff4b 	bl	8001298 <_fstat>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	d103      	bne.n	800540e <_fstat_r+0x1e>
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d000      	beq.n	800540e <_fstat_r+0x1e>
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	200005f8 	.word	0x200005f8

08005414 <_isatty_r>:
 8005414:	2300      	movs	r3, #0
 8005416:	b570      	push	{r4, r5, r6, lr}
 8005418:	4d06      	ldr	r5, [pc, #24]	@ (8005434 <_isatty_r+0x20>)
 800541a:	0004      	movs	r4, r0
 800541c:	0008      	movs	r0, r1
 800541e:	602b      	str	r3, [r5, #0]
 8005420:	f7fb ff48 	bl	80012b4 <_isatty>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d103      	bne.n	8005430 <_isatty_r+0x1c>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d000      	beq.n	8005430 <_isatty_r+0x1c>
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	bd70      	pop	{r4, r5, r6, pc}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	200005f8 	.word	0x200005f8

08005438 <_init>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr

08005444 <_fini>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr
