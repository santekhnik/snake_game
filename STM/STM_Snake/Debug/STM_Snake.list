
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000518c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005364  08005364  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005364  08005364  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005368  08005368  00006368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800536c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  2000006c  080053d8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  080053d8  00007508  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e699  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002431  00000000  00000000  0001572d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00017b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7d  00000000  00000000  000188d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a98  00000000  00000000  0001934d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011250  00000000  00000000  0002cde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000730c4  00000000  00000000  0003e035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b10f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  000b113c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000b4a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005234 	.word	0x08005234

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005234 	.word	0x08005234

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <move_snake>:
uint8_t body_x[128];			//массив значень координат X змійки
uint8_t body_y[128];			//массив значень координат Y змійки
uint8_t length;					//значення довжини змійки

/* Функція руху змійки */
uint8_t move_snake(uint8_t command,uint8_t frog_x, uint8_t frog_y) {
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	b08d      	sub	sp, #52	@ 0x34
 8000468:	af00      	add	r7, sp, #0
 800046a:	0006      	movs	r6, r0
 800046c:	0008      	movs	r0, r1
 800046e:	0011      	movs	r1, r2
 8000470:	231f      	movs	r3, #31
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c32      	adds	r2, r6, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	261e      	movs	r6, #30
 800047a:	19bb      	adds	r3, r7, r6
 800047c:	1c02      	adds	r2, r0, #0
 800047e:	701a      	strb	r2, [r3, #0]
 8000480:	201d      	movs	r0, #29
 8000482:	183b      	adds	r3, r7, r0
 8000484:	1c0a      	adds	r2, r1, #0
 8000486:	701a      	strb	r2, [r3, #0]

    if (body_x[0] == frog_x && body_y[0] == frog_y) {
 8000488:	4b69      	ldr	r3, [pc, #420]	@ (8000630 <move_snake+0x1cc>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	19ba      	adds	r2, r7, r6
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	d10d      	bne.n	80004b0 <move_snake+0x4c>
 8000494:	4b67      	ldr	r3, [pc, #412]	@ (8000634 <move_snake+0x1d0>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	183a      	adds	r2, r7, r0
 800049a:	7812      	ldrb	r2, [r2, #0]
 800049c:	429a      	cmp	r2, r3
 800049e:	d107      	bne.n	80004b0 <move_snake+0x4c>
        length++;
 80004a0:	4b65      	ldr	r3, [pc, #404]	@ (8000638 <move_snake+0x1d4>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	4b63      	ldr	r3, [pc, #396]	@ (8000638 <move_snake+0x1d4>)
 80004aa:	701a      	strb	r2, [r3, #0]
        randomize_apple();
 80004ac:	f000 f8ca 	bl	8000644 <randomize_apple>
    }
    for (int i = length; i > 0; i--) {
 80004b0:	4b61      	ldr	r3, [pc, #388]	@ (8000638 <move_snake+0x1d4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80004b6:	e014      	b.n	80004e2 <move_snake+0x7e>
        body_x[i] = body_x[i - 1];
 80004b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004ba:	3b01      	subs	r3, #1
 80004bc:	4a5c      	ldr	r2, [pc, #368]	@ (8000630 <move_snake+0x1cc>)
 80004be:	5cd1      	ldrb	r1, [r2, r3]
 80004c0:	4a5b      	ldr	r2, [pc, #364]	@ (8000630 <move_snake+0x1cc>)
 80004c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004c4:	18d3      	adds	r3, r2, r3
 80004c6:	1c0a      	adds	r2, r1, #0
 80004c8:	701a      	strb	r2, [r3, #0]
        body_y[i] = body_y[i - 1];
 80004ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a59      	ldr	r2, [pc, #356]	@ (8000634 <move_snake+0x1d0>)
 80004d0:	5cd1      	ldrb	r1, [r2, r3]
 80004d2:	4a58      	ldr	r2, [pc, #352]	@ (8000634 <move_snake+0x1d0>)
 80004d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004d6:	18d3      	adds	r3, r2, r3
 80004d8:	1c0a      	adds	r2, r1, #0
 80004da:	701a      	strb	r2, [r3, #0]
    for (int i = length; i > 0; i--) {
 80004dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004de:	3b01      	subs	r3, #1
 80004e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80004e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dce7      	bgt.n	80004b8 <move_snake+0x54>
    }
switch (command) {
 80004e8:	231f      	movs	r3, #31
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d02f      	beq.n	8000552 <move_snake+0xee>
 80004f2:	dc3b      	bgt.n	800056c <move_snake+0x108>
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d01f      	beq.n	8000538 <move_snake+0xd4>
 80004f8:	dc38      	bgt.n	800056c <move_snake+0x108>
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d002      	beq.n	8000504 <move_snake+0xa0>
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d00d      	beq.n	800051e <move_snake+0xba>
    body_x[0]++;
    x++;
    break;
default:

    break;}
 8000502:	e033      	b.n	800056c <move_snake+0x108>
    body_y[0]++;
 8000504:	4b4b      	ldr	r3, [pc, #300]	@ (8000634 <move_snake+0x1d0>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b49      	ldr	r3, [pc, #292]	@ (8000634 <move_snake+0x1d0>)
 800050e:	701a      	strb	r2, [r3, #0]
    y++;
 8000510:	4b4a      	ldr	r3, [pc, #296]	@ (800063c <move_snake+0x1d8>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b48      	ldr	r3, [pc, #288]	@ (800063c <move_snake+0x1d8>)
 800051a:	701a      	strb	r2, [r3, #0]
    break;
 800051c:	e027      	b.n	800056e <move_snake+0x10a>
    body_y[0]--;
 800051e:	4b45      	ldr	r3, [pc, #276]	@ (8000634 <move_snake+0x1d0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	3b01      	subs	r3, #1
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b43      	ldr	r3, [pc, #268]	@ (8000634 <move_snake+0x1d0>)
 8000528:	701a      	strb	r2, [r3, #0]
    y--;
 800052a:	4b44      	ldr	r3, [pc, #272]	@ (800063c <move_snake+0x1d8>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	3b01      	subs	r3, #1
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b42      	ldr	r3, [pc, #264]	@ (800063c <move_snake+0x1d8>)
 8000534:	701a      	strb	r2, [r3, #0]
    break;
 8000536:	e01a      	b.n	800056e <move_snake+0x10a>
    body_x[0]--;
 8000538:	4b3d      	ldr	r3, [pc, #244]	@ (8000630 <move_snake+0x1cc>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3b01      	subs	r3, #1
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b3b      	ldr	r3, [pc, #236]	@ (8000630 <move_snake+0x1cc>)
 8000542:	701a      	strb	r2, [r3, #0]
    x--;
 8000544:	4b3e      	ldr	r3, [pc, #248]	@ (8000640 <move_snake+0x1dc>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b3c      	ldr	r3, [pc, #240]	@ (8000640 <move_snake+0x1dc>)
 800054e:	701a      	strb	r2, [r3, #0]
    break;
 8000550:	e00d      	b.n	800056e <move_snake+0x10a>
    body_x[0]++;
 8000552:	4b37      	ldr	r3, [pc, #220]	@ (8000630 <move_snake+0x1cc>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <move_snake+0x1cc>)
 800055c:	701a      	strb	r2, [r3, #0]
    x++;
 800055e:	4b38      	ldr	r3, [pc, #224]	@ (8000640 <move_snake+0x1dc>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b36      	ldr	r3, [pc, #216]	@ (8000640 <move_snake+0x1dc>)
 8000568:	701a      	strb	r2, [r3, #0]
    break;
 800056a:	e000      	b.n	800056e <move_snake+0x10a>
    break;}
 800056c:	46c0      	nop			@ (mov r8, r8)

    uint8_t payload[length * 2];  // Масив для об'єднаних даних
 800056e:	4b32      	ldr	r3, [pc, #200]	@ (8000638 <move_snake+0x1d4>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	466a      	mov	r2, sp
 8000576:	0010      	movs	r0, r2
 8000578:	1e5a      	subs	r2, r3, #1
 800057a:	627a      	str	r2, [r7, #36]	@ 0x24
 800057c:	001a      	movs	r2, r3
 800057e:	613a      	str	r2, [r7, #16]
 8000580:	2200      	movs	r2, #0
 8000582:	617a      	str	r2, [r7, #20]
 8000584:	693a      	ldr	r2, [r7, #16]
 8000586:	0f52      	lsrs	r2, r2, #29
 8000588:	6979      	ldr	r1, [r7, #20]
 800058a:	00c9      	lsls	r1, r1, #3
 800058c:	6079      	str	r1, [r7, #4]
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4311      	orrs	r1, r2
 8000592:	6079      	str	r1, [r7, #4]
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	00d2      	lsls	r2, r2, #3
 8000598:	603a      	str	r2, [r7, #0]
 800059a:	001a      	movs	r2, r3
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	2200      	movs	r2, #0
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	0f52      	lsrs	r2, r2, #29
 80005a6:	68f9      	ldr	r1, [r7, #12]
 80005a8:	00cd      	lsls	r5, r1, #3
 80005aa:	4315      	orrs	r5, r2
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	00d4      	lsls	r4, r2, #3
 80005b0:	3307      	adds	r3, #7
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	466a      	mov	r2, sp
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	469d      	mov	sp, r3
 80005bc:	466b      	mov	r3, sp
 80005be:	3300      	adds	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]

    for (uint8_t i = 0; i < length; i++) {
 80005c2:	2313      	movs	r3, #19
 80005c4:	2218      	movs	r2, #24
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	19db      	adds	r3, r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e01f      	b.n	8000610 <move_snake+0x1ac>
        payload[i * 2] = body_x[i];      // Записуємо елементи з першого масиву
 80005d0:	2413      	movs	r4, #19
 80005d2:	2518      	movs	r5, #24
 80005d4:	1963      	adds	r3, r4, r5
 80005d6:	19db      	adds	r3, r3, r7
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	1963      	adds	r3, r4, r5
 80005dc:	19db      	adds	r3, r3, r7
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4913      	ldr	r1, [pc, #76]	@ (8000630 <move_snake+0x1cc>)
 80005e4:	5c89      	ldrb	r1, [r1, r2]
 80005e6:	6a3a      	ldr	r2, [r7, #32]
 80005e8:	54d1      	strb	r1, [r2, r3]
        payload[i * 2 + 1] = body_y[i];  // Записуємо елементи з другого масиву
 80005ea:	1963      	adds	r3, r4, r5
 80005ec:	19db      	adds	r3, r3, r7
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	1963      	adds	r3, r4, r5
 80005f2:	19db      	adds	r3, r3, r7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	3301      	adds	r3, #1
 80005fa:	490e      	ldr	r1, [pc, #56]	@ (8000634 <move_snake+0x1d0>)
 80005fc:	5c89      	ldrb	r1, [r1, r2]
 80005fe:	6a3a      	ldr	r2, [r7, #32]
 8000600:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000602:	1963      	adds	r3, r4, r5
 8000604:	19db      	adds	r3, r3, r7
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	1963      	adds	r3, r4, r5
 800060a:	19db      	adds	r3, r3, r7
 800060c:	3201      	adds	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <move_snake+0x1d4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2213      	movs	r2, #19
 8000616:	2118      	movs	r1, #24
 8000618:	1852      	adds	r2, r2, r1
 800061a:	19d2      	adds	r2, r2, r7
 800061c:	7812      	ldrb	r2, [r2, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d3d6      	bcc.n	80005d0 <move_snake+0x16c>
    }
return payload;
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4685      	mov	sp, r0
}
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b00d      	add	sp, #52	@ 0x34
 800062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000630:	2000008c 	.word	0x2000008c
 8000634:	2000010c 	.word	0x2000010c
 8000638:	2000018c 	.word	0x2000018c
 800063c:	20000000 	.word	0x20000000
 8000640:	20000088 	.word	0x20000088

08000644 <randomize_apple>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t randomize_apple(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	//frog_x = rand() % 10;
	return *frog_y = rand() % 10;
 8000648:	f003 fddc 	bl	8004204 <rand>
 800064c:	0003      	movs	r3, r0
 800064e:	210a      	movs	r1, #10
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff fed3 	bl	80003fc <__aeabi_idivmod>
 8000656:	000b      	movs	r3, r1
 8000658:	001a      	movs	r2, r3
 800065a:	4b04      	ldr	r3, [pc, #16]	@ (800066c <randomize_apple+0x28>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	781b      	ldrb	r3, [r3, #0]
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	200003b0 	.word	0x200003b0

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fdc4 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f81a 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f91c 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000680:	f000 f8fc 	bl	800087c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000684:	f000 f8ca 	bl	800081c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000688:	f000 f872 	bl	8000770 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <main+0x34>)
 800068e:	0018      	movs	r0, r3
 8000690:	f002 f828 	bl	80026e4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1,rx_buffer,sizeof(rx_buffer));
 8000694:	4904      	ldr	r1, [pc, #16]	@ (80006a8 <main+0x38>)
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <main+0x3c>)
 8000698:	2205      	movs	r2, #5
 800069a:	0018      	movs	r0, r3
 800069c:	f002 fcdf 	bl	800305e <HAL_UART_Receive_DMA>
  //simulate_snake_game();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	e7fd      	b.n	80006a0 <main+0x30>
 80006a4:	20000190 	.word	0x20000190
 80006a8:	200003a4 	.word	0x200003a4
 80006ac:	200001d8 	.word	0x200001d8

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b097      	sub	sp, #92	@ 0x5c
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2428      	movs	r4, #40	@ 0x28
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2330      	movs	r3, #48	@ 0x30
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 feed 	bl	80044a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	2318      	movs	r3, #24
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	0018      	movs	r0, r3
 80006cc:	2310      	movs	r3, #16
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f003 fee5 	bl	80044a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	0018      	movs	r0, r3
 80006da:	2314      	movs	r3, #20
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f003 fede 	bl	80044a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	0021      	movs	r1, r4
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2202      	movs	r2, #2
 80006f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	0252      	lsls	r2, r2, #9
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2280      	movs	r2, #128	@ 0x80
 8000704:	0352      	lsls	r2, r2, #13
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	187b      	adds	r3, r7, r1
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fa5b 	bl	8001bcc <HAL_RCC_OscConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800071a:	f000 f9b3 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	2118      	movs	r1, #24
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2207      	movs	r2, #7
 8000724:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2202      	movs	r2, #2
 800072a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2101      	movs	r1, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fd5f 	bl	8002200 <HAL_RCC_ClockConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 f99d 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fe95 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000762:	f000 f98f 	bl	8000a84 <Error_Handler>
  }
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b017      	add	sp, #92	@ 0x5c
 800076c:	bd90      	pop	{r4, r7, pc}
	...

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	2308      	movs	r3, #8
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	0018      	movs	r0, r3
 800077c:	2310      	movs	r3, #16
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f003 fe8d 	bl	80044a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000786:	003b      	movs	r3, r7
 8000788:	0018      	movs	r0, r3
 800078a:	2308      	movs	r3, #8
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f003 fe86 	bl	80044a0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_TIM2_Init+0xa0>)
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	05d2      	lsls	r2, r2, #23
 800079a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6999;
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_TIM2_Init+0xa0>)
 800079e:	4a1d      	ldr	r2, [pc, #116]	@ (8000814 <MX_TIM2_Init+0xa4>)
 80007a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6856;
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <MX_TIM2_Init+0xa8>)
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 ff41 	bl	8002644 <HAL_TIM_Base_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007c6:	f000 f95d 	bl	8000a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	2108      	movs	r1, #8
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	0152      	lsls	r2, r2, #5
 80007d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 f8c2 	bl	8002964 <HAL_TIM_ConfigClockSource>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007e4:	f000 f94e 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ee:	003b      	movs	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f4:	003a      	movs	r2, r7
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 face 	bl	8002d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000804:	f000 f93e 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b006      	add	sp, #24
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000190 	.word	0x20000190
 8000814:	00001b57 	.word	0x00001b57
 8000818:	00001ac8 	.word	0x00001ac8

0800081c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	@ (8000878 <MX_USART1_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000828:	2296      	movs	r2, #150	@ 0x96
 800082a:	0192      	lsls	r2, r2, #6
 800082c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fb09 	bl	8002e78 <HAL_UART_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 f90b 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001d8 	.word	0x200001d8
 8000878:	40013800 	.word	0x40013800

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_DMA_Init+0x38>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_DMA_Init+0x38>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_DMA_Init+0x38>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200a      	movs	r0, #10
 80008a0:	f000 fdbe 	bl	8001420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fdd0 	bl	800144a <HAL_NVIC_EnableIRQ>

}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b089      	sub	sp, #36	@ 0x24
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	240c      	movs	r4, #12
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	0018      	movs	r0, r3
 80008c4:	2314      	movs	r3, #20
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f003 fde9 	bl	80044a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	03c9      	lsls	r1, r1, #15
 80008d8:	430a      	orrs	r2, r1
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008de:	695a      	ldr	r2, [r3, #20]
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	03db      	lsls	r3, r3, #15
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008f0:	2180      	movs	r1, #128	@ 0x80
 80008f2:	0309      	lsls	r1, r1, #12
 80008f4:	430a      	orrs	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	2380      	movs	r3, #128	@ 0x80
 80008fe:	031b      	lsls	r3, r3, #12
 8000900:	4013      	ands	r3, r2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_GPIO_Init+0xa8>)
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_GPIO_Init+0xa8>)
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	0289      	lsls	r1, r1, #10
 8000910:	430a      	orrs	r2, r1
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_GPIO_Init+0xa8>)
 8000916:	695a      	ldr	r2, [r3, #20]
 8000918:	2380      	movs	r3, #128	@ 0x80
 800091a:	029b      	lsls	r3, r3, #10
 800091c:	4013      	ands	r3, r2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000922:	23c0      	movs	r3, #192	@ 0xc0
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	480f      	ldr	r0, [pc, #60]	@ (8000964 <MX_GPIO_Init+0xac>)
 8000928:	2200      	movs	r2, #0
 800092a:	0019      	movs	r1, r3
 800092c:	f001 f930 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	22c0      	movs	r2, #192	@ 0xc0
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2201      	movs	r2, #1
 800093c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	193b      	adds	r3, r7, r4
 800094c:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <MX_GPIO_Init+0xac>)
 800094e:	0019      	movs	r1, r3
 8000950:	0010      	movs	r0, r2
 8000952:	f000 ffad 	bl	80018b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b009      	add	sp, #36	@ 0x24
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800

08000968 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a38      	ldr	r2, [pc, #224]	@ (8000a58 <HAL_UART_RxCpltCallback+0xf0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d16a      	bne.n	8000a50 <HAL_UART_RxCpltCallback+0xe8>

    //	uint8_t handler_prot = rx_buffer[1];
    	uint8_t handler_prot=3;
 800097a:	210f      	movs	r1, #15
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2203      	movs	r2, #3
 8000980:	701a      	strb	r2, [r3, #0]
    	switch(handler_prot){
 8000982:	187b      	adds	r3, r7, r1
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d002      	beq.n	8000990 <HAL_UART_RxCpltCallback+0x28>
 800098a:	2b03      	cmp	r3, #3
 800098c:	d027      	beq.n	80009de <HAL_UART_RxCpltCallback+0x76>
 800098e:	e059      	b.n	8000a44 <HAL_UART_RxCpltCallback+0xdc>
    		case(1):

			uint8_t test_receive = decode_frame(rx_buffer,sizeof(rx_buffer));
 8000990:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 8000992:	2105      	movs	r1, #5
 8000994:	0018      	movs	r0, r3
 8000996:	f000 f9f8 	bl	8000d8a <decode_frame>
 800099a:	0002      	movs	r2, r0
 800099c:	240b      	movs	r4, #11
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart1, rx_buffer,sizeof(rx_buffer), 100);
 80009a2:	492e      	ldr	r1, [pc, #184]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 80009a4:	482e      	ldr	r0, [pc, #184]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 80009a6:	2364      	movs	r3, #100	@ 0x64
 80009a8:	2205      	movs	r2, #5
 80009aa:	f002 fab9 	bl	8002f20 <HAL_UART_Transmit>
    		if (test_receive==0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d106      	bne.n	80009c4 <HAL_UART_RxCpltCallback+0x5c>
 80009b6:	2380      	movs	r3, #128	@ 0x80
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	482a      	ldr	r0, [pc, #168]	@ (8000a64 <HAL_UART_RxCpltCallback+0xfc>)
 80009bc:	2201      	movs	r2, #1
 80009be:	0019      	movs	r1, r3
 80009c0:	f001 f8e6 	bl	8001b90 <HAL_GPIO_WritePin>
    		if (test_receive==4) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
 80009c4:	230b      	movs	r3, #11
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d139      	bne.n	8000a42 <HAL_UART_RxCpltCallback+0xda>
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4824      	ldr	r0, [pc, #144]	@ (8000a64 <HAL_UART_RxCpltCallback+0xfc>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	0019      	movs	r1, r3
 80009d8:	f001 f8da 	bl	8001b90 <HAL_GPIO_WritePin>
    		//HAL_UART_Transmit(&huart1, &test_receive,1, 100);

    		break;
 80009dc:	e031      	b.n	8000a42 <HAL_UART_RxCpltCallback+0xda>

    		case(3):

		uint8_t command = rx_buffer[2];
 80009de:	200e      	movs	r0, #14
 80009e0:	183b      	adds	r3, r7, r0
 80009e2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 80009e4:	7892      	ldrb	r2, [r2, #2]
 80009e6:	701a      	strb	r2, [r3, #0]

		      uint8_t payload = move_snake(command, *frog_x, *frog_y);
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <HAL_UART_RxCpltCallback+0x100>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	7819      	ldrb	r1, [r3, #0]
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <HAL_UART_RxCpltCallback+0x104>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	250d      	movs	r5, #13
 80009f6:	197c      	adds	r4, r7, r5
 80009f8:	183b      	adds	r3, r7, r0
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fd31 	bl	8000464 <move_snake>
 8000a02:	0003      	movs	r3, r0
 8000a04:	7023      	strb	r3, [r4, #0]
		      uint8_t frame_length = encode_frame_snake(payload, sizeof(payload+1), tx_buffer, 0x02, frog_x, frog_y);
 8000a06:	197b      	adds	r3, r7, r5
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_UART_RxCpltCallback+0x100>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_UART_RxCpltCallback+0x104>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	250c      	movs	r5, #12
 8000a1a:	197c      	adds	r4, r7, r5
 8000a1c:	4914      	ldr	r1, [pc, #80]	@ (8000a70 <HAL_UART_RxCpltCallback+0x108>)
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	2302      	movs	r3, #2
 8000a24:	000a      	movs	r2, r1
 8000a26:	2104      	movs	r1, #4
 8000a28:	f000 f924 	bl	8000c74 <encode_frame_snake>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	7023      	strb	r3, [r4, #0]
		      HAL_UART_Transmit(&huart1, tx_buffer, frame_length, 100);
 8000a30:	197b      	adds	r3, r7, r5
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	490e      	ldr	r1, [pc, #56]	@ (8000a70 <HAL_UART_RxCpltCallback+0x108>)
 8000a38:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 8000a3a:	2364      	movs	r3, #100	@ 0x64
 8000a3c:	f002 fa70 	bl	8002f20 <HAL_UART_Transmit>
		      break;
 8000a40:	e000      	b.n	8000a44 <HAL_UART_RxCpltCallback+0xdc>
    		break;
 8000a42:	46c0      	nop			@ (mov r8, r8)

    	}
    	 HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 8000a44:	4905      	ldr	r1, [pc, #20]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 8000a48:	2205      	movs	r2, #5
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fb07 	bl	800305e <HAL_UART_Receive_DMA>
    }
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b004      	add	sp, #16
 8000a56:	bdb0      	pop	{r4, r5, r7, pc}
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	200003a4 	.word	0x200003a4
 8000a60:	200001d8 	.word	0x200001d8
 8000a64:	48000800 	.word	0x48000800
 8000a68:	200003ac 	.word	0x200003ac
 8000a6c:	200003b0 	.word	0x200003b0
 8000a70:	200002a4 	.word	0x200002a4

08000a74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
    //	uint8_t test_receive = decode_frame(rx_buffer,sizeof(rx_buffer));

    }
}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <crc16_ccitt_snake>:



// Функція обчислення CRC-16-CCITT для пакету змійки (поліном 0x1021, початкове значення 0xFFFF)
// Обчислення CRC-16-CCITT для пакету змійки
uint16_t crc16_ccitt_snake(const uint8_t *data, uint8_t len, uint8_t cmd, uint8_t frog_x, uint8_t frog_y) {
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	000c      	movs	r4, r1
 8000a9a:	0010      	movs	r0, r2
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	1cfb      	adds	r3, r7, #3
 8000aa0:	1c22      	adds	r2, r4, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	1cbb      	adds	r3, r7, #2
 8000aa6:	1c02      	adds	r2, r0, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	1c7b      	adds	r3, r7, #1
 8000aac:	1c0a      	adds	r2, r1, #0
 8000aae:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000ab0:	210e      	movs	r1, #14
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4252      	negs	r2, r2
 8000ab8:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);
 8000aba:	1cbb      	adds	r3, r7, #2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	5e1b      	ldrsh	r3, [r3, r0]
 8000ac8:	4053      	eors	r3, r2
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	801a      	strh	r2, [r3, #0]
    crc ^= (((uint16_t)frog_x << 8) | frog_y);
 8000ad0:	1c7b      	adds	r3, r7, #1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	2320      	movs	r3, #32
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	5e1b      	ldrsh	r3, [r3, r0]
 8000aea:	4053      	eors	r3, r2
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000af2:	230c      	movs	r3, #12
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	2200      	movs	r2, #0
 8000af8:	801a      	strh	r2, [r3, #0]
 8000afa:	e03b      	b.n	8000b74 <crc16_ccitt_snake+0xe4>
        crc ^= ((uint16_t)data[i] << 8);
 8000afc:	230c      	movs	r3, #12
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	210e      	movs	r1, #14
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2000      	movs	r0, #0
 8000b12:	5e1b      	ldrsh	r3, [r3, r0]
 8000b14:	4053      	eors	r3, r2
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	e01b      	b.n	8000b5e <crc16_ccitt_snake+0xce>
            if (crc & 0x8000)
 8000b26:	210e      	movs	r1, #14
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	5e9b      	ldrsh	r3, [r3, r2]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da09      	bge.n	8000b46 <crc16_ccitt_snake+0xb6>
                crc = (crc << 1) ^ 0x1021;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4a16      	ldr	r2, [pc, #88]	@ (8000b94 <crc16_ccitt_snake+0x104>)
 8000b3c:	4053      	eors	r3, r2
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	801a      	strh	r2, [r3, #0]
 8000b44:	e005      	b.n	8000b52 <crc16_ccitt_snake+0xc2>
            else
                crc <<= 1;
 8000b46:	230e      	movs	r3, #14
 8000b48:	18fa      	adds	r2, r7, r3
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	18db      	adds	r3, r3, r3
 8000b50:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000b52:	210b      	movs	r1, #11
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	3201      	adds	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	230b      	movs	r3, #11
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	d9de      	bls.n	8000b26 <crc16_ccitt_snake+0x96>
    for (uint16_t i = 0; i < len; i++) {
 8000b68:	210c      	movs	r1, #12
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	3201      	adds	r2, #1
 8000b72:	801a      	strh	r2, [r3, #0]
 8000b74:	1cfb      	adds	r3, r7, #3
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	18ba      	adds	r2, r7, r2
 8000b7e:	8812      	ldrh	r2, [r2, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d3bb      	bcc.n	8000afc <crc16_ccitt_snake+0x6c>
        }
    }
    return crc;
 8000b84:	230e      	movs	r3, #14
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	881b      	ldrh	r3, [r3, #0]
}
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b005      	add	sp, #20
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	00001021 	.word	0x00001021

08000b98 <crc16_ccitt>:
// Функція обчислення CRC-16-CCITT (поліном 0x1021, початкове значення 0xFFFF)
uint16_t crc16_ccitt(const uint8_t *data, uint16_t len, uint8_t cmd) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	0008      	movs	r0, r1
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	1cbb      	adds	r3, r7, #2
 8000ba6:	1c02      	adds	r2, r0, #0
 8000ba8:	801a      	strh	r2, [r3, #0]
 8000baa:	1c7b      	adds	r3, r7, #1
 8000bac:	1c0a      	adds	r2, r1, #0
 8000bae:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;									//початкове значення
 8000bb0:	210e      	movs	r1, #14
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4252      	negs	r2, r2
 8000bb8:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);							//команда cmd
 8000bba:	1c7b      	adds	r3, r7, #1
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	5e1b      	ldrsh	r3, [r3, r0]
 8000bc8:	4053      	eors	r3, r2
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	801a      	strh	r2, [r3, #0]
 8000bd8:	e03b      	b.n	8000c52 <crc16_ccitt+0xba>
        crc ^= ((uint16_t)data[i] << 8);
 8000bda:	230c      	movs	r3, #12
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	18d3      	adds	r3, r2, r3
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	210e      	movs	r1, #14
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2000      	movs	r0, #0
 8000bf0:	5e1b      	ldrsh	r3, [r3, r0]
 8000bf2:	4053      	eors	r3, r2
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e01b      	b.n	8000c3c <crc16_ccitt+0xa4>
            if (crc & 0x8000)
 8000c04:	210e      	movs	r1, #14
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	5e9b      	ldrsh	r3, [r3, r2]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da09      	bge.n	8000c24 <crc16_ccitt+0x8c>
                crc = (crc << 1) ^ 0x1021;					//поліном
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <crc16_ccitt+0xd8>)
 8000c1a:	4053      	eors	r3, r2
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	801a      	strh	r2, [r3, #0]
 8000c22:	e005      	b.n	8000c30 <crc16_ccitt+0x98>
            else
                crc <<= 1;
 8000c24:	230e      	movs	r3, #14
 8000c26:	18fa      	adds	r2, r7, r3
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	18db      	adds	r3, r3, r3
 8000c2e:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000c30:	210b      	movs	r1, #11
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	3201      	adds	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	230b      	movs	r3, #11
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d9de      	bls.n	8000c04 <crc16_ccitt+0x6c>
    for (uint16_t i = 0; i < len; i++) {
 8000c46:	210c      	movs	r1, #12
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	881a      	ldrh	r2, [r3, #0]
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	3201      	adds	r2, #1
 8000c50:	801a      	strh	r2, [r3, #0]
 8000c52:	230c      	movs	r3, #12
 8000c54:	18fa      	adds	r2, r7, r3
 8000c56:	1cbb      	adds	r3, r7, #2
 8000c58:	8812      	ldrh	r2, [r2, #0]
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d3bc      	bcc.n	8000bda <crc16_ccitt+0x42>
        }
    }
    return crc;
 8000c60:	230e      	movs	r3, #14
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	881b      	ldrh	r3, [r3, #0]
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b004      	add	sp, #16
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	00001021 	.word	0x00001021

08000c74 <encode_frame_snake>:

//функція кодування пакету змії
uint8_t encode_frame_snake(const uint8_t *payload, uint8_t payload_len, uint8_t *tx_buffer, uint8_t cmd_byte, uint8_t frog_x, uint8_t frog_y) {
 8000c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c76:	b089      	sub	sp, #36	@ 0x24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	0008      	movs	r0, r1
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	0019      	movs	r1, r3
 8000c82:	240b      	movs	r4, #11
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	1c02      	adds	r2, r0, #0
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	200a      	movs	r0, #10
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	1c0a      	adds	r2, r1, #0
 8000c90:	701a      	strb	r2, [r3, #0]

	tx_buffer[0] = START_BYTE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	227e      	movs	r2, #126	@ 0x7e
 8000c96:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = cmd_byte;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	183a      	adds	r2, r7, r0
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = payload_len;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	193a      	adds	r2, r7, r4
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < payload_len; i++) {
 8000cac:	2317      	movs	r3, #23
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e011      	b.n	8000cda <encode_frame_snake+0x66>
    tx_buffer[3 + i] = payload[i];
 8000cb6:	2017      	movs	r0, #23
 8000cb8:	183b      	adds	r3, r7, r0
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	18d2      	adds	r2, r2, r3
 8000cc0:	183b      	adds	r3, r7, r0
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3303      	adds	r3, #3
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	185b      	adds	r3, r3, r1
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < payload_len; i++) {
 8000cd0:	183b      	adds	r3, r7, r0
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	183b      	adds	r3, r7, r0
 8000cd6:	3201      	adds	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	2317      	movs	r3, #23
 8000cdc:	18fa      	adds	r2, r7, r3
 8000cde:	210b      	movs	r1, #11
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	7812      	ldrb	r2, [r2, #0]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3e5      	bcc.n	8000cb6 <encode_frame_snake+0x42>
    }

    tx_buffer[3 + payload_len] = frog_x;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3303      	adds	r3, #3
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	189a      	adds	r2, r3, r2
 8000cf6:	2528      	movs	r5, #40	@ 0x28
 8000cf8:	2008      	movs	r0, #8
 8000cfa:	182b      	adds	r3, r5, r0
 8000cfc:	19db      	adds	r3, r3, r7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	7013      	strb	r3, [r2, #0]
    tx_buffer[4 + payload_len] = frog_y;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	3304      	adds	r3, #4
 8000d08:	001a      	movs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	189b      	adds	r3, r3, r2
 8000d0e:	222c      	movs	r2, #44	@ 0x2c
 8000d10:	0006      	movs	r6, r0
 8000d12:	1812      	adds	r2, r2, r0
 8000d14:	19d2      	adds	r2, r2, r7
 8000d16:	7812      	ldrb	r2, [r2, #0]
 8000d18:	701a      	strb	r2, [r3, #0]

   uint16_t crc = crc16_ccitt_snake(payload, payload_len, cmd_byte, frog_x, frog_y);
 8000d1a:	2014      	movs	r0, #20
 8000d1c:	183c      	adds	r4, r7, r0
 8000d1e:	0030      	movs	r0, r6
 8000d20:	19ab      	adds	r3, r5, r6
 8000d22:	19db      	adds	r3, r3, r7
 8000d24:	781d      	ldrb	r5, [r3, #0]
 8000d26:	260a      	movs	r6, #10
 8000d28:	19bb      	adds	r3, r7, r6
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	000e      	movs	r6, r1
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	7819      	ldrb	r1, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	469c      	mov	ip, r3
 8000d36:	232c      	movs	r3, #44	@ 0x2c
 8000d38:	181b      	adds	r3, r3, r0
 8000d3a:	19db      	adds	r3, r3, r7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	002b      	movs	r3, r5
 8000d42:	4660      	mov	r0, ip
 8000d44:	f7ff fea4 	bl	8000a90 <crc16_ccitt_snake>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	8023      	strh	r3, [r4, #0]
   	tx_buffer[5 + payload_len] = (crc >> 8) & 0xFF;
 8000d4c:	2014      	movs	r0, #20
 8000d4e:	183b      	adds	r3, r7, r0
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	19bb      	adds	r3, r7, r6
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3305      	adds	r3, #5
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	185b      	adds	r3, r3, r1
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	701a      	strb	r2, [r3, #0]
    tx_buffer[6 + payload_len] = crc & 0xFF;
 8000d66:	19bb      	adds	r3, r7, r6
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3306      	adds	r3, #6
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	189b      	adds	r3, r3, r2
 8000d72:	183a      	adds	r2, r7, r0
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	701a      	strb	r2, [r3, #0]

    return (7+payload_len);
 8000d7a:	19bb      	adds	r3, r7, r6
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3307      	adds	r3, #7
 8000d80:	b2db      	uxtb	r3, r3
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b007      	add	sp, #28
 8000d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d8a <decode_frame>:
    tx_buffer[3 + payload_len] = (crc >> 8) & 0xFF; 			// crc high
    tx_buffer[4 + payload_len] = crc & 0xFF;        			// crc low
    return 5;
}

int decode_frame(const uint8_t *frame, uint8_t frame_len) {
 8000d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	000a      	movs	r2, r1
 8000d94:	1cfb      	adds	r3, r7, #3
 8000d96:	701a      	strb	r2, [r3, #0]
	// Кадр занадто короткий
    if (frame_len < 5){
 8000d98:	1cfb      	adds	r3, r7, #3
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d801      	bhi.n	8000da4 <decode_frame+0x1a>
    	return 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e034      	b.n	8000e0e <decode_frame+0x84>
    }
    // Невірний стартовий байт
    if (frame[0] != START_BYTE){
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b7e      	cmp	r3, #126	@ 0x7e
 8000daa:	d001      	beq.n	8000db0 <decode_frame+0x26>
    		return 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	e02e      	b.n	8000e0e <decode_frame+0x84>
    }

    uint8_t cmd_byte = frame[1];
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	210f      	movs	r1, #15
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	7812      	ldrb	r2, [r2, #0]
 8000dba:	701a      	strb	r2, [r3, #0]
   	uint8_t payload = frame[2];
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1c9a      	adds	r2, r3, #2
 8000dc0:	230e      	movs	r3, #14
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	701a      	strb	r2, [r3, #0]

    uint16_t received_crc = (frame[3] << 8) | frame[4];				// Отримання переданого CRC
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3303      	adds	r3, #3
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	250c      	movs	r5, #12
 8000de0:	197b      	adds	r3, r7, r5
 8000de2:	801a      	strh	r2, [r3, #0]
    uint16_t computed_crc = crc16_ccitt(&frame[2], 1, cmd_byte);    // Обчислення CRC на основі PAYLOAD
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	1c98      	adds	r0, r3, #2
 8000de8:	260a      	movs	r6, #10
 8000dea:	19bc      	adds	r4, r7, r6
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	001a      	movs	r2, r3
 8000df2:	2101      	movs	r1, #1
 8000df4:	f7ff fed0 	bl	8000b98 <crc16_ccitt>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	8023      	strh	r3, [r4, #0]
    return (received_crc == computed_crc) ? 0 : 4;
 8000dfc:	197a      	adds	r2, r7, r5
 8000dfe:	19bb      	adds	r3, r7, r6
 8000e00:	8812      	ldrh	r2, [r2, #0]
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d101      	bne.n	8000e0c <decode_frame+0x82>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e000      	b.n	8000e0e <decode_frame+0x84>
 8000e0c:	2304      	movs	r3, #4
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b005      	add	sp, #20
 8000e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e20:	699a      	ldr	r2, [r3, #24]
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	430a      	orrs	r2, r1
 8000e28:	619a      	str	r2, [r3, #24]
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e38:	69da      	ldr	r2, [r3, #28]
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	0549      	lsls	r1, r1, #21
 8000e40:	430a      	orrs	r2, r1
 8000e42:	61da      	str	r2, [r3, #28]
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_MspInit+0x44>)
 8000e46:	69da      	ldr	r2, [r3, #28]
 8000e48:	2380      	movs	r3, #128	@ 0x80
 8000e4a:	055b      	lsls	r3, r3, #21
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2380      	movs	r3, #128	@ 0x80
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d113      	bne.n	8000e9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x44>)
 8000e76:	69da      	ldr	r2, [r3, #28]
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x44>)
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	61da      	str	r2, [r3, #28]
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x44>)
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	2201      	movs	r2, #1
 8000e86:	4013      	ands	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	200f      	movs	r0, #15
 8000e92:	f000 fac5 	bl	8001420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 fad7 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e9c:	46c0      	nop			@ (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b004      	add	sp, #16
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b08b      	sub	sp, #44	@ 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	2414      	movs	r4, #20
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	2314      	movs	r3, #20
 8000eb8:	001a      	movs	r2, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	f003 faf0 	bl	80044a0 <memset>
  if(huart->Instance==USART1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <HAL_UART_MspInit+0xf0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d161      	bne.n	8000f8e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eca:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <HAL_UART_MspInit+0xf4>)
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	4b33      	ldr	r3, [pc, #204]	@ (8000f9c <HAL_UART_MspInit+0xf4>)
 8000ed0:	2180      	movs	r1, #128	@ 0x80
 8000ed2:	01c9      	lsls	r1, r1, #7
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	619a      	str	r2, [r3, #24]
 8000ed8:	4b30      	ldr	r3, [pc, #192]	@ (8000f9c <HAL_UART_MspInit+0xf4>)
 8000eda:	699a      	ldr	r2, [r3, #24]
 8000edc:	2380      	movs	r3, #128	@ 0x80
 8000ede:	01db      	lsls	r3, r3, #7
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f9c <HAL_UART_MspInit+0xf4>)
 8000ee8:	695a      	ldr	r2, [r3, #20]
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <HAL_UART_MspInit+0xf4>)
 8000eec:	2180      	movs	r1, #128	@ 0x80
 8000eee:	0289      	lsls	r1, r1, #10
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <HAL_UART_MspInit+0xf4>)
 8000ef6:	695a      	ldr	r2, [r3, #20]
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	22c0      	movs	r2, #192	@ 0xc0
 8000f06:	00d2      	lsls	r2, r2, #3
 8000f08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	0021      	movs	r1, r4
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2202      	movs	r2, #2
 8000f10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2201      	movs	r2, #1
 8000f22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	187a      	adds	r2, r7, r1
 8000f26:	2390      	movs	r3, #144	@ 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 fcbf 	bl	80018b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f34:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f50:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f58:	2220      	movs	r2, #32
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fa8d 	bl	8001484 <HAL_DMA_Init>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000f6e:	f7ff fd89 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f76:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201b      	movs	r0, #27
 8000f84:	f000 fa4c 	bl	8001420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f88:	201b      	movs	r0, #27
 8000f8a:	f000 fa5e 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b00b      	add	sp, #44	@ 0x2c
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	20000260 	.word	0x20000260
 8000fa4:	40020030 	.word	0x40020030

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f95e 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fe0:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fb79 	bl	80016da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	20000260 	.word	0x20000260

08000ff4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <TIM2_IRQHandler+0x14>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f001 fbc4 	bl	8002788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	20000190 	.word	0x20000190

0800100c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <USART1_IRQHandler+0x14>)
 8001012:	0018      	movs	r0, r3
 8001014:	f002 f87a 	bl	800310c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	200001d8 	.word	0x200001d8

08001024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	0018      	movs	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_kill>:

int _kill(int pid, int sig)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800103a:	f003 fa87 	bl	800454c <__errno>
 800103e:	0003      	movs	r3, r0
 8001040:	2216      	movs	r2, #22
 8001042:	601a      	str	r2, [r3, #0]
  return -1;
 8001044:	2301      	movs	r3, #1
 8001046:	425b      	negs	r3, r3
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}

08001050 <_exit>:

void _exit (int status)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001058:	2301      	movs	r3, #1
 800105a:	425a      	negs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ffe5 	bl	8001030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	e7fd      	b.n	8001066 <_exit+0x16>

0800106a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e00a      	b.n	8001092 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107c:	e000      	b.n	8001080 <_read+0x16>
 800107e:	bf00      	nop
 8001080:	0001      	movs	r1, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	60ba      	str	r2, [r7, #8]
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbf0      	blt.n	800107c <_read+0x12>
  }

  return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b006      	add	sp, #24
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e009      	b.n	80010ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	60ba      	str	r2, [r7, #8]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	0018      	movs	r0, r3
 80010c0:	e000      	b.n	80010c4 <_write+0x20>
 80010c2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbf1      	blt.n	80010b6 <_write+0x12>
  }
  return len;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b006      	add	sp, #24
 80010da:	bd80      	pop	{r7, pc}

080010dc <_close>:

int _close(int file)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b002      	add	sp, #8
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	0192      	lsls	r2, r2, #6
 8001100:	605a      	str	r2, [r3, #4]
  return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <_isatty>:

int _isatty(int file)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001114:	2301      	movs	r3, #1
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}

0800111e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b004      	add	sp, #16
 8001132:	bd80      	pop	{r7, pc}

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f003 f9f2 	bl	800454c <__errno>
 8001168:	0003      	movs	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	2301      	movs	r3, #1
 8001170:	425b      	negs	r3, r3
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	18d2      	adds	r2, r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <_sbrk+0x64>)
 8001184:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b006      	add	sp, #24
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20002000 	.word	0x20002000
 8001194:	00000400 	.word	0x00000400
 8001198:	200003b4 	.word	0x200003b4
 800119c:	20000508 	.word	0x20000508

080011a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <Reset_Handler>:
 80011ac:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <LoopForever+0x2>)
 80011ae:	4685      	mov	sp, r0
 80011b0:	f7ff fff6 	bl	80011a0 <SystemInit>
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <LoopForever+0x6>)
 80011b6:	490d      	ldr	r1, [pc, #52]	@ (80011ec <LoopForever+0xa>)
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <LoopForever+0xe>)
 80011ba:	2300      	movs	r3, #0
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:
 80011be:	58d4      	ldr	r4, [r2, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:
 80011c4:	18c4      	adds	r4, r0, r3
 80011c6:	428c      	cmp	r4, r1
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <LoopForever+0x12>)
 80011cc:	4c0a      	ldr	r4, [pc, #40]	@ (80011f8 <LoopForever+0x16>)
 80011ce:	2300      	movs	r3, #0
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:
 80011d6:	42a2      	cmp	r2, r4
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>
 80011da:	f003 f9bd 	bl	8004558 <__libc_init_array>
 80011de:	f7ff fa47 	bl	8000670 <main>

080011e2 <LoopForever>:
 80011e2:	e7fe      	b.n	80011e2 <LoopForever>
 80011e4:	20002000 	.word	0x20002000
 80011e8:	20000000 	.word	0x20000000
 80011ec:	2000006c 	.word	0x2000006c
 80011f0:	0800536c 	.word	0x0800536c
 80011f4:	2000006c 	.word	0x2000006c
 80011f8:	20000508 	.word	0x20000508

080011fc <ADC1_COMP_IRQHandler>:
 80011fc:	e7fe      	b.n	80011fc <ADC1_COMP_IRQHandler>
	...

08001200 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <HAL_Init+0x24>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_Init+0x24>)
 800120a:	2110      	movs	r1, #16
 800120c:	430a      	orrs	r2, r1
 800120e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f809 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001216:	f7ff fdff 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <HAL_InitTick+0x5c>)
 8001232:	681c      	ldr	r4, [r3, #0]
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_InitTick+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	0019      	movs	r1, r3
 800123a:	23fa      	movs	r3, #250	@ 0xfa
 800123c:	0098      	lsls	r0, r3, #2
 800123e:	f7fe ff6d 	bl	800011c <__udivsi3>
 8001242:	0003      	movs	r3, r0
 8001244:	0019      	movs	r1, r3
 8001246:	0020      	movs	r0, r4
 8001248:	f7fe ff68 	bl	800011c <__udivsi3>
 800124c:	0003      	movs	r3, r0
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f90b 	bl	800146a <HAL_SYSTICK_Config>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e00f      	b.n	800127c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d80b      	bhi.n	800127a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	2301      	movs	r3, #1
 8001266:	425b      	negs	r3, r3
 8001268:	2200      	movs	r2, #0
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f8d8 	bl	8001420 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_InitTick+0x64>)
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b003      	add	sp, #12
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	20000004 	.word	0x20000004
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000008 	.word	0x20000008

08001290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x1c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	001a      	movs	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_IncTick+0x20>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	18d2      	adds	r2, r2, r3
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_IncTick+0x20>)
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	200003b8 	.word	0x200003b8

080012b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b02      	ldr	r3, [pc, #8]	@ (80012c4 <HAL_GetTick+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	200003b8 	.word	0x200003b8

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	0002      	movs	r2, r0
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80012da:	d809      	bhi.n	80012f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	001a      	movs	r2, r3
 80012e2:	231f      	movs	r3, #31
 80012e4:	401a      	ands	r2, r3
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <__NVIC_EnableIRQ+0x30>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	4091      	lsls	r1, r2
 80012ec:	000a      	movs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
  }
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	0002      	movs	r2, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001310:	d828      	bhi.n	8001364 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001312:	4a2f      	ldr	r2, [pc, #188]	@ (80013d0 <__NVIC_SetPriority+0xd4>)
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b25b      	sxtb	r3, r3
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	33c0      	adds	r3, #192	@ 0xc0
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	589b      	ldr	r3, [r3, r2]
 8001322:	1dfa      	adds	r2, r7, #7
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	0011      	movs	r1, r2
 8001328:	2203      	movs	r2, #3
 800132a:	400a      	ands	r2, r1
 800132c:	00d2      	lsls	r2, r2, #3
 800132e:	21ff      	movs	r1, #255	@ 0xff
 8001330:	4091      	lsls	r1, r2
 8001332:	000a      	movs	r2, r1
 8001334:	43d2      	mvns	r2, r2
 8001336:	401a      	ands	r2, r3
 8001338:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	019b      	lsls	r3, r3, #6
 800133e:	22ff      	movs	r2, #255	@ 0xff
 8001340:	401a      	ands	r2, r3
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	0018      	movs	r0, r3
 8001348:	2303      	movs	r3, #3
 800134a:	4003      	ands	r3, r0
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001350:	481f      	ldr	r0, [pc, #124]	@ (80013d0 <__NVIC_SetPriority+0xd4>)
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	430a      	orrs	r2, r1
 800135c:	33c0      	adds	r3, #192	@ 0xc0
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001362:	e031      	b.n	80013c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <__NVIC_SetPriority+0xd8>)
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	0019      	movs	r1, r3
 800136c:	230f      	movs	r3, #15
 800136e:	400b      	ands	r3, r1
 8001370:	3b08      	subs	r3, #8
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3306      	adds	r3, #6
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	18d3      	adds	r3, r2, r3
 800137a:	3304      	adds	r3, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1dfa      	adds	r2, r7, #7
 8001380:	7812      	ldrb	r2, [r2, #0]
 8001382:	0011      	movs	r1, r2
 8001384:	2203      	movs	r2, #3
 8001386:	400a      	ands	r2, r1
 8001388:	00d2      	lsls	r2, r2, #3
 800138a:	21ff      	movs	r1, #255	@ 0xff
 800138c:	4091      	lsls	r1, r2
 800138e:	000a      	movs	r2, r1
 8001390:	43d2      	mvns	r2, r2
 8001392:	401a      	ands	r2, r3
 8001394:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	019b      	lsls	r3, r3, #6
 800139a:	22ff      	movs	r2, #255	@ 0xff
 800139c:	401a      	ands	r2, r3
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	0018      	movs	r0, r3
 80013a4:	2303      	movs	r3, #3
 80013a6:	4003      	ands	r3, r0
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ac:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <__NVIC_SetPriority+0xd8>)
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	001c      	movs	r4, r3
 80013b4:	230f      	movs	r3, #15
 80013b6:	4023      	ands	r3, r4
 80013b8:	3b08      	subs	r3, #8
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	430a      	orrs	r2, r1
 80013be:	3306      	adds	r3, #6
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	18c3      	adds	r3, r0, r3
 80013c4:	3304      	adds	r3, #4
 80013c6:	601a      	str	r2, [r3, #0]
}
 80013c8:	46c0      	nop			@ (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b003      	add	sp, #12
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	1e5a      	subs	r2, r3, #1
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	045b      	lsls	r3, r3, #17
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d301      	bcc.n	80013f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ec:	2301      	movs	r3, #1
 80013ee:	e010      	b.n	8001412 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <SysTick_Config+0x44>)
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	3a01      	subs	r2, #1
 80013f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f8:	2301      	movs	r3, #1
 80013fa:	425b      	negs	r3, r3
 80013fc:	2103      	movs	r1, #3
 80013fe:	0018      	movs	r0, r3
 8001400:	f7ff ff7c 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <SysTick_Config+0x44>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <SysTick_Config+0x44>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	0018      	movs	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	b002      	add	sp, #8
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	210f      	movs	r1, #15
 800142c:	187b      	adds	r3, r7, r1
 800142e:	1c02      	adds	r2, r0, #0
 8001430:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	187b      	adds	r3, r7, r1
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b004      	add	sp, #16
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	0002      	movs	r2, r0
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff ff33 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff ffaf 	bl	80013d8 <SysTick_Config>
 800147a:	0003      	movs	r3, r0
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e036      	b.n	8001508 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2221      	movs	r2, #33	@ 0x21
 800149e:	2102      	movs	r1, #2
 80014a0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <HAL_DMA_Init+0x8c>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 f9c4 	bl	8001878 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2221      	movs	r2, #33	@ 0x21
 80014fa:	2101      	movs	r1, #1
 80014fc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2220      	movs	r2, #32
 8001502:	2100      	movs	r1, #0
 8001504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b004      	add	sp, #16
 800150e:	bd80      	pop	{r7, pc}
 8001510:	ffffc00f 	.word	0xffffc00f

08001514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2317      	movs	r3, #23
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2220      	movs	r2, #32
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_DMA_Start_IT+0x24>
 8001534:	2302      	movs	r3, #2
 8001536:	e04f      	b.n	80015d8 <HAL_DMA_Start_IT+0xc4>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2220      	movs	r2, #32
 800153c:	2101      	movs	r1, #1
 800153e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2221      	movs	r2, #33	@ 0x21
 8001544:	5c9b      	ldrb	r3, [r3, r2]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d13a      	bne.n	80015c2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2221      	movs	r2, #33	@ 0x21
 8001550:	2102      	movs	r1, #2
 8001552:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	438a      	bics	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f954 	bl	800181e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	210e      	movs	r1, #14
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e00f      	b.n	80015b0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	210a      	movs	r1, #10
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2104      	movs	r1, #4
 80015ac:	438a      	bics	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e007      	b.n	80015d2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2220      	movs	r2, #32
 80015c6:	2100      	movs	r1, #0
 80015c8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ca:	2317      	movs	r3, #23
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80015d2:	2317      	movs	r3, #23
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	781b      	ldrb	r3, [r3, #0]
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b006      	add	sp, #24
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2221      	movs	r2, #33	@ 0x21
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d008      	beq.n	8001606 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2204      	movs	r2, #4
 80015f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2220      	movs	r2, #32
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e020      	b.n	8001648 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	210e      	movs	r1, #14
 8001612:	438a      	bics	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	438a      	bics	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162e:	2101      	movs	r1, #1
 8001630:	4091      	lsls	r1, r2
 8001632:	000a      	movs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2221      	movs	r2, #33	@ 0x21
 800163a:	2101      	movs	r1, #1
 800163c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2220      	movs	r2, #32
 8001642:	2100      	movs	r1, #0
 8001644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001658:	210f      	movs	r1, #15
 800165a:	187b      	adds	r3, r7, r1
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2221      	movs	r2, #33	@ 0x21
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d006      	beq.n	800167a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	e028      	b.n	80016cc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	210e      	movs	r1, #14
 8001686:	438a      	bics	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	438a      	bics	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a2:	2101      	movs	r1, #1
 80016a4:	4091      	lsls	r1, r2
 80016a6:	000a      	movs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2221      	movs	r2, #33	@ 0x21
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2220      	movs	r2, #32
 80016b6:	2100      	movs	r1, #0
 80016b8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	0010      	movs	r0, r2
 80016ca:	4798      	blx	r3
    }
  }
  return status;
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	2204      	movs	r2, #4
 80016f8:	409a      	lsls	r2, r3
 80016fa:	0013      	movs	r3, r2
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	d024      	beq.n	800174c <HAL_DMA_IRQHandler+0x72>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2204      	movs	r2, #4
 8001706:	4013      	ands	r3, r2
 8001708:	d020      	beq.n	800174c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2220      	movs	r2, #32
 8001712:	4013      	ands	r3, r2
 8001714:	d107      	bne.n	8001726 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2104      	movs	r1, #4
 8001722:	438a      	bics	r2, r1
 8001724:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800172e:	2104      	movs	r1, #4
 8001730:	4091      	lsls	r1, r2
 8001732:	000a      	movs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <HAL_DMA_IRQHandler+0x66>
 800173e:	e06a      	b.n	8001816 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	0010      	movs	r0, r2
 8001748:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800174a:	e064      	b.n	8001816 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	2202      	movs	r2, #2
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4013      	ands	r3, r2
 800175a:	d02b      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xda>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2202      	movs	r2, #2
 8001760:	4013      	ands	r3, r2
 8001762:	d027      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2220      	movs	r2, #32
 800176c:	4013      	ands	r3, r2
 800176e:	d10b      	bne.n	8001788 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	210a      	movs	r1, #10
 800177c:	438a      	bics	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2221      	movs	r2, #33	@ 0x21
 8001784:	2101      	movs	r1, #1
 8001786:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001790:	2102      	movs	r1, #2
 8001792:	4091      	lsls	r1, r2
 8001794:	000a      	movs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2220      	movs	r2, #32
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d036      	beq.n	8001816 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	0010      	movs	r0, r2
 80017b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017b2:	e030      	b.n	8001816 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	2208      	movs	r2, #8
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	d028      	beq.n	8001816 <HAL_DMA_IRQHandler+0x13c>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2208      	movs	r2, #8
 80017c8:	4013      	ands	r3, r2
 80017ca:	d024      	beq.n	8001816 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	210e      	movs	r1, #14
 80017d8:	438a      	bics	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	2101      	movs	r1, #1
 80017e6:	4091      	lsls	r1, r2
 80017e8:	000a      	movs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2221      	movs	r2, #33	@ 0x21
 80017f6:	2101      	movs	r1, #1
 80017f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	2100      	movs	r1, #0
 8001800:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	0010      	movs	r0, r2
 8001812:	4798      	blx	r3
    }
  }
}
 8001814:	e7ff      	b.n	8001816 <HAL_DMA_IRQHandler+0x13c>
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bd80      	pop	{r7, pc}

0800181e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001834:	2101      	movs	r1, #1
 8001836:	4091      	lsls	r1, r2
 8001838:	000a      	movs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b10      	cmp	r3, #16
 800184a:	d108      	bne.n	800185e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800185c:	e007      	b.n	800186e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	60da      	str	r2, [r3, #12]
}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <DMA_CalcBaseAndBitshift+0x30>)
 8001886:	4694      	mov	ip, r2
 8001888:	4463      	add	r3, ip
 800188a:	2114      	movs	r1, #20
 800188c:	0018      	movs	r0, r3
 800188e:	f7fe fc45 	bl	800011c <__udivsi3>
 8001892:	0003      	movs	r3, r0
 8001894:	009a      	lsls	r2, r3, #2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a03      	ldr	r2, [pc, #12]	@ (80018ac <DMA_CalcBaseAndBitshift+0x34>)
 800189e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80018a0:	46c0      	nop			@ (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	bffdfff8 	.word	0xbffdfff8
 80018ac:	40020000 	.word	0x40020000

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e14f      	b.n	8001b60 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4091      	lsls	r1, r2
 80018ca:	000a      	movs	r2, r1
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d100      	bne.n	80018d8 <HAL_GPIO_Init+0x28>
 80018d6:	e140      	b.n	8001b5a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	4013      	ands	r3, r2
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2203      	movs	r2, #3
 80018ea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	409a      	lsls	r2, r3
 80018fe:	0013      	movs	r3, r2
 8001900:	43da      	mvns	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	409a      	lsls	r2, r3
 8001912:	0013      	movs	r3, r2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
 800192c:	0013      	movs	r3, r2
 800192e:	43da      	mvns	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	2201      	movs	r2, #1
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2203      	movs	r2, #3
 8001958:	4013      	ands	r3, r2
 800195a:	2b03      	cmp	r3, #3
 800195c:	d017      	beq.n	800198e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2203      	movs	r2, #3
 8001994:	4013      	ands	r3, r2
 8001996:	2b02      	cmp	r3, #2
 8001998:	d123      	bne.n	80019e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	0092      	lsls	r2, r2, #2
 80019a4:	58d3      	ldr	r3, [r2, r3]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2207      	movs	r2, #7
 80019ac:	4013      	ands	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	43da      	mvns	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2107      	movs	r1, #7
 80019c6:	400b      	ands	r3, r1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	6939      	ldr	r1, [r7, #16]
 80019e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	409a      	lsls	r2, r3
 80019f0:	0013      	movs	r3, r2
 80019f2:	43da      	mvns	r2, r3
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2203      	movs	r2, #3
 8001a00:	401a      	ands	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	0013      	movs	r3, r2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	23c0      	movs	r3, #192	@ 0xc0
 8001a1c:	029b      	lsls	r3, r3, #10
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d100      	bne.n	8001a24 <HAL_GPIO_Init+0x174>
 8001a22:	e09a      	b.n	8001b5a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	4b54      	ldr	r3, [pc, #336]	@ (8001b78 <HAL_GPIO_Init+0x2c8>)
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <HAL_GPIO_Init+0x2c8>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	619a      	str	r2, [r3, #24]
 8001a30:	4b51      	ldr	r3, [pc, #324]	@ (8001b78 <HAL_GPIO_Init+0x2c8>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	589b      	ldr	r3, [r3, r2]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4013      	ands	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	409a      	lsls	r2, r3
 8001a56:	0013      	movs	r3, r2
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	2390      	movs	r3, #144	@ 0x90
 8001a64:	05db      	lsls	r3, r3, #23
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0x1e2>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a44      	ldr	r2, [pc, #272]	@ (8001b80 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00d      	beq.n	8001a8e <HAL_GPIO_Init+0x1de>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a43      	ldr	r2, [pc, #268]	@ (8001b84 <HAL_GPIO_Init+0x2d4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x1da>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a42      	ldr	r2, [pc, #264]	@ (8001b88 <HAL_GPIO_Init+0x2d8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_GPIO_Init+0x1d6>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x1e4>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x1e4>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x1e4>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x1e4>
 8001a92:	2300      	movs	r3, #0
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	2103      	movs	r1, #3
 8001a98:	400a      	ands	r2, r1
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <HAL_GPIO_Init+0x2cc>)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b36      	ldr	r3, [pc, #216]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43da      	mvns	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	2380      	movs	r3, #128	@ 0x80
 8001ac8:	035b      	lsls	r3, r3, #13
 8001aca:	4013      	ands	r3, r2
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001adc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	039b      	lsls	r3, r3, #14
 8001af4:	4013      	ands	r3, r2
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b30:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	025b      	lsls	r3, r3, #9
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b54:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <HAL_GPIO_Init+0x2dc>)
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	40da      	lsrs	r2, r3
 8001b68:	1e13      	subs	r3, r2, #0
 8001b6a:	d000      	beq.n	8001b6e <HAL_GPIO_Init+0x2be>
 8001b6c:	e6a8      	b.n	80018c0 <HAL_GPIO_Init+0x10>
  } 
}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46c0      	nop			@ (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b006      	add	sp, #24
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	0008      	movs	r0, r1
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	1cbb      	adds	r3, r7, #2
 8001b9e:	1c02      	adds	r2, r0, #0
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	1c7b      	adds	r3, r7, #1
 8001ba4:	1c0a      	adds	r2, r1, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba8:	1c7b      	adds	r3, r7, #1
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb0:	1cbb      	adds	r3, r7, #2
 8001bb2:	881a      	ldrh	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bba:	1cbb      	adds	r3, r7, #2
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e301      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2201      	movs	r2, #1
 8001be4:	4013      	ands	r3, r2
 8001be6:	d100      	bne.n	8001bea <HAL_RCC_OscConfig+0x1e>
 8001be8:	e08d      	b.n	8001d06 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bea:	4bc3      	ldr	r3, [pc, #780]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	220c      	movs	r2, #12
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d00e      	beq.n	8001c14 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf6:	4bc0      	ldr	r3, [pc, #768]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d116      	bne.n	8001c30 <HAL_RCC_OscConfig+0x64>
 8001c02:	4bbd      	ldr	r3, [pc, #756]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	025b      	lsls	r3, r3, #9
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	025b      	lsls	r3, r3, #9
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4bb8      	ldr	r3, [pc, #736]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	029b      	lsls	r3, r3, #10
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x56>
 8001c20:	e070      	b.n	8001d04 <HAL_RCC_OscConfig+0x138>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d000      	beq.n	8001c2c <HAL_RCC_OscConfig+0x60>
 8001c2a:	e06b      	b.n	8001d04 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e2d8      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x7c>
 8001c38:	4baf      	ldr	r3, [pc, #700]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4bae      	ldr	r3, [pc, #696]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	2180      	movs	r1, #128	@ 0x80
 8001c40:	0249      	lsls	r1, r1, #9
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e02f      	b.n	8001ca8 <HAL_RCC_OscConfig+0xdc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x9e>
 8001c50:	4ba9      	ldr	r3, [pc, #676]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4ba8      	ldr	r3, [pc, #672]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	49a9      	ldr	r1, [pc, #676]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	4ba6      	ldr	r3, [pc, #664]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4ba5      	ldr	r3, [pc, #660]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	49a7      	ldr	r1, [pc, #668]	@ (8001f00 <HAL_RCC_OscConfig+0x334>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e01e      	b.n	8001ca8 <HAL_RCC_OscConfig+0xdc>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10e      	bne.n	8001c90 <HAL_RCC_OscConfig+0xc4>
 8001c72:	4ba1      	ldr	r3, [pc, #644]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	02c9      	lsls	r1, r1, #11
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b9c      	ldr	r3, [pc, #624]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c86:	2180      	movs	r1, #128	@ 0x80
 8001c88:	0249      	lsls	r1, r1, #9
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xdc>
 8001c90:	4b99      	ldr	r3, [pc, #612]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b98      	ldr	r3, [pc, #608]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	4999      	ldr	r1, [pc, #612]	@ (8001efc <HAL_RCC_OscConfig+0x330>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b96      	ldr	r3, [pc, #600]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b95      	ldr	r3, [pc, #596]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	4997      	ldr	r1, [pc, #604]	@ (8001f00 <HAL_RCC_OscConfig+0x334>)
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fb00 	bl	80012b4 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cba:	f7ff fafb 	bl	80012b4 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b64      	cmp	r3, #100	@ 0x64
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e28a      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0xee>
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff faeb 	bl	80012b4 <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fae6 	bl	80012b4 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e275      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	4b80      	ldr	r3, [pc, #512]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	@ 0x80
 8001cfc:	029b      	lsls	r3, r3, #10
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x118>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x146>
 8001d10:	e069      	b.n	8001de6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d12:	4b79      	ldr	r3, [pc, #484]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	220c      	movs	r2, #12
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d00b      	beq.n	8001d34 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d1c:	4b76      	ldr	r3, [pc, #472]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	220c      	movs	r2, #12
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d11c      	bne.n	8001d62 <HAL_RCC_OscConfig+0x196>
 8001d28:	4b73      	ldr	r3, [pc, #460]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	025b      	lsls	r3, r3, #9
 8001d30:	4013      	ands	r3, r2
 8001d32:	d116      	bne.n	8001d62 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d34:	4b70      	ldr	r3, [pc, #448]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x17e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e24b      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	22f8      	movs	r2, #248	@ 0xf8
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	00da      	lsls	r2, r3, #3
 8001d5a:	4b67      	ldr	r3, [pc, #412]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d60:	e041      	b.n	8001de6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d024      	beq.n	8001db4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b62      	ldr	r3, [pc, #392]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fa9d 	bl	80012b4 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fa98 	bl	80012b4 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e227      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d92:	4b59      	ldr	r3, [pc, #356]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d0f1      	beq.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b56      	ldr	r3, [pc, #344]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	22f8      	movs	r2, #248	@ 0xf8
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00da      	lsls	r2, r3, #3
 8001dac:	4b52      	ldr	r3, [pc, #328]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e018      	b.n	8001de6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db4:	4b50      	ldr	r3, [pc, #320]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa78 	bl	80012b4 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dca:	f7ff fa73 	bl	80012b4 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e202      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ddc:	4b46      	ldr	r3, [pc, #280]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2202      	movs	r2, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	d1f1      	bne.n	8001dca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2208      	movs	r2, #8
 8001dec:	4013      	ands	r3, r2
 8001dee:	d036      	beq.n	8001e5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d019      	beq.n	8001e2c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	430a      	orrs	r2, r1
 8001e02:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fa56 	bl	80012b4 <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fa51 	bl	80012b4 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e1e0      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e20:	4b35      	ldr	r3, [pc, #212]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	2202      	movs	r2, #2
 8001e26:	4013      	ands	r3, r2
 8001e28:	d0f1      	beq.n	8001e0e <HAL_RCC_OscConfig+0x242>
 8001e2a:	e018      	b.n	8001e5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2c:	4b32      	ldr	r3, [pc, #200]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e30:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	438a      	bics	r2, r1
 8001e36:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa3c 	bl	80012b4 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e42:	f7ff fa37 	bl	80012b4 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1c6      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b28      	ldr	r3, [pc, #160]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d1f1      	bne.n	8001e42 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2204      	movs	r2, #4
 8001e64:	4013      	ands	r3, r2
 8001e66:	d100      	bne.n	8001e6a <HAL_RCC_OscConfig+0x29e>
 8001e68:	e0b4      	b.n	8001fd4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	201f      	movs	r0, #31
 8001e6c:	183b      	adds	r3, r7, r0
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	055b      	lsls	r3, r3, #21
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d110      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	0549      	lsls	r1, r1, #21
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	61da      	str	r2, [r3, #28]
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	055b      	lsls	r3, r3, #21
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e9a:	183b      	adds	r3, r7, r0
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d11a      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eac:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001eb2:	2180      	movs	r1, #128	@ 0x80
 8001eb4:	0049      	lsls	r1, r1, #1
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7ff f9fb 	bl	80012b4 <HAL_GetTick>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7ff f9f6 	bl	80012b4 <HAL_GetTick>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	@ 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e185      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <HAL_RCC_OscConfig+0x338>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10e      	bne.n	8001f08 <HAL_RCC_OscConfig+0x33c>
 8001eea:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	4b02      	ldr	r3, [pc, #8]	@ (8001ef8 <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	621a      	str	r2, [r3, #32]
 8001ef6:	e035      	b.n	8001f64 <HAL_RCC_OscConfig+0x398>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	fffeffff 	.word	0xfffeffff
 8001f00:	fffbffff 	.word	0xfffbffff
 8001f04:	40007000 	.word	0x40007000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x35e>
 8001f10:	4bb6      	ldr	r3, [pc, #728]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f12:	6a1a      	ldr	r2, [r3, #32]
 8001f14:	4bb5      	ldr	r3, [pc, #724]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	438a      	bics	r2, r1
 8001f1a:	621a      	str	r2, [r3, #32]
 8001f1c:	4bb3      	ldr	r3, [pc, #716]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f1e:	6a1a      	ldr	r2, [r3, #32]
 8001f20:	4bb2      	ldr	r3, [pc, #712]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f22:	2104      	movs	r1, #4
 8001f24:	438a      	bics	r2, r1
 8001f26:	621a      	str	r2, [r3, #32]
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x398>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x380>
 8001f32:	4bae      	ldr	r3, [pc, #696]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f34:	6a1a      	ldr	r2, [r3, #32]
 8001f36:	4bad      	ldr	r3, [pc, #692]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f38:	2104      	movs	r1, #4
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	621a      	str	r2, [r3, #32]
 8001f3e:	4bab      	ldr	r3, [pc, #684]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	4baa      	ldr	r3, [pc, #680]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	430a      	orrs	r2, r1
 8001f48:	621a      	str	r2, [r3, #32]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x398>
 8001f4c:	4ba7      	ldr	r3, [pc, #668]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	4ba6      	ldr	r3, [pc, #664]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	438a      	bics	r2, r1
 8001f56:	621a      	str	r2, [r3, #32]
 8001f58:	4ba4      	ldr	r3, [pc, #656]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	4ba3      	ldr	r3, [pc, #652]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f5e:	2104      	movs	r1, #4
 8001f60:	438a      	bics	r2, r1
 8001f62:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d014      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f9a2 	bl	80012b4 <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	e009      	b.n	8001f8a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff f99d 	bl	80012b4 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4a9b      	ldr	r2, [pc, #620]	@ (80021f0 <HAL_RCC_OscConfig+0x624>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e12b      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	4b98      	ldr	r3, [pc, #608]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
 8001f94:	e013      	b.n	8001fbe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7ff f98d 	bl	80012b4 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f988 	bl	80012b4 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4a91      	ldr	r2, [pc, #580]	@ (80021f0 <HAL_RCC_OscConfig+0x624>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e116      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb4:	4b8d      	ldr	r3, [pc, #564]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fbe:	231f      	movs	r3, #31
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b88      	ldr	r3, [pc, #544]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	4b87      	ldr	r3, [pc, #540]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001fce:	4989      	ldr	r1, [pc, #548]	@ (80021f4 <HAL_RCC_OscConfig+0x628>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d063      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d12a      	bne.n	800203c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fe6:	4b81      	ldr	r3, [pc, #516]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fea:	4b80      	ldr	r3, [pc, #512]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001fec:	2104      	movs	r1, #4
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ff2:	4b7e      	ldr	r3, [pc, #504]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ff6:	4b7d      	ldr	r3, [pc, #500]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff f959 	bl	80012b4 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002008:	f7ff f954 	bl	80012b4 <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0e3      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800201a:	4b74      	ldr	r3, [pc, #464]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800201c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201e:	2202      	movs	r2, #2
 8002020:	4013      	ands	r3, r2
 8002022:	d0f1      	beq.n	8002008 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002024:	4b71      	ldr	r3, [pc, #452]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002028:	22f8      	movs	r2, #248	@ 0xf8
 800202a:	4393      	bics	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	4b6d      	ldr	r3, [pc, #436]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002036:	430a      	orrs	r2, r1
 8002038:	635a      	str	r2, [r3, #52]	@ 0x34
 800203a:	e034      	b.n	80020a6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	3305      	adds	r3, #5
 8002042:	d111      	bne.n	8002068 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002044:	4b69      	ldr	r3, [pc, #420]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002048:	4b68      	ldr	r3, [pc, #416]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800204a:	2104      	movs	r1, #4
 800204c:	438a      	bics	r2, r1
 800204e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002050:	4b66      	ldr	r3, [pc, #408]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002054:	22f8      	movs	r2, #248	@ 0xf8
 8002056:	4393      	bics	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	00da      	lsls	r2, r3, #3
 8002060:	4b62      	ldr	r3, [pc, #392]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002062:	430a      	orrs	r2, r1
 8002064:	635a      	str	r2, [r3, #52]	@ 0x34
 8002066:	e01e      	b.n	80020a6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002068:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800206a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800206c:	4b5f      	ldr	r3, [pc, #380]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800206e:	2104      	movs	r1, #4
 8002070:	430a      	orrs	r2, r1
 8002072:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002074:	4b5d      	ldr	r3, [pc, #372]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002078:	4b5c      	ldr	r3, [pc, #368]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7ff f918 	bl	80012b4 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800208a:	f7ff f913 	bl	80012b4 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0a2      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800209e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f1      	bne.n	800208a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d100      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4e4>
 80020ae:	e097      	b.n	80021e0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	220c      	movs	r2, #12
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d100      	bne.n	80020be <HAL_RCC_OscConfig+0x4f2>
 80020bc:	e06b      	b.n	8002196 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d14c      	bne.n	8002160 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b49      	ldr	r3, [pc, #292]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 80020cc:	494a      	ldr	r1, [pc, #296]	@ (80021f8 <HAL_RCC_OscConfig+0x62c>)
 80020ce:	400a      	ands	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff f8ef 	bl	80012b4 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff f8ea 	bl	80012b4 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e079      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	4b3f      	ldr	r3, [pc, #252]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	049b      	lsls	r3, r3, #18
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fa:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	220f      	movs	r2, #15
 8002100:	4393      	bics	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002108:	4b38      	ldr	r3, [pc, #224]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800210a:	430a      	orrs	r2, r1
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800210e:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a3a      	ldr	r2, [pc, #232]	@ (80021fc <HAL_RCC_OscConfig+0x630>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	431a      	orrs	r2, r3
 8002122:	4b32      	ldr	r3, [pc, #200]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b30      	ldr	r3, [pc, #192]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800212e:	2180      	movs	r1, #128	@ 0x80
 8002130:	0449      	lsls	r1, r1, #17
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff f8bd 	bl	80012b4 <HAL_GetTick>
 800213a:	0003      	movs	r3, r0
 800213c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff f8b8 	bl	80012b4 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e047      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	2380      	movs	r3, #128	@ 0x80
 8002158:	049b      	lsls	r3, r3, #18
 800215a:	4013      	ands	r3, r2
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x574>
 800215e:	e03f      	b.n	80021e0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 8002166:	4924      	ldr	r1, [pc, #144]	@ (80021f8 <HAL_RCC_OscConfig+0x62c>)
 8002168:	400a      	ands	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff f8a2 	bl	80012b4 <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002176:	f7ff f89d 	bl	80012b4 <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e02c      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002188:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	049b      	lsls	r3, r3, #18
 8002190:	4013      	ands	r3, r2
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x5aa>
 8002194:	e024      	b.n	80021e0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e01f      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021a8:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_RCC_OscConfig+0x620>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	025b      	lsls	r3, r3, #9
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d10e      	bne.n	80021dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	220f      	movs	r2, #15
 80021c2:	401a      	ands	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	23f0      	movs	r3, #240	@ 0xf0
 80021d0:	039b      	lsls	r3, r3, #14
 80021d2:	401a      	ands	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b008      	add	sp, #32
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	40021000 	.word	0x40021000
 80021f0:	00001388 	.word	0x00001388
 80021f4:	efffffff 	.word	0xefffffff
 80021f8:	feffffff 	.word	0xfeffffff
 80021fc:	ffc2ffff 	.word	0xffc2ffff

08002200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b3      	b.n	800237c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b5b      	ldr	r3, [pc, #364]	@ (8002384 <HAL_RCC_ClockConfig+0x184>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d911      	bls.n	8002246 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b58      	ldr	r3, [pc, #352]	@ (8002384 <HAL_RCC_ClockConfig+0x184>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	4393      	bics	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	4b55      	ldr	r3, [pc, #340]	@ (8002384 <HAL_RCC_ClockConfig+0x184>)
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_ClockConfig+0x184>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2201      	movs	r2, #1
 800223a:	4013      	ands	r3, r2
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e09a      	b.n	800237c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d015      	beq.n	800227c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2204      	movs	r2, #4
 8002256:	4013      	ands	r3, r2
 8002258:	d006      	beq.n	8002268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800225a:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	4b4a      	ldr	r3, [pc, #296]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 8002260:	21e0      	movs	r1, #224	@ 0xe0
 8002262:	00c9      	lsls	r1, r1, #3
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b47      	ldr	r3, [pc, #284]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	22f0      	movs	r2, #240	@ 0xf0
 800226e:	4393      	bics	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	4b44      	ldr	r3, [pc, #272]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d040      	beq.n	8002308 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b3e      	ldr	r3, [pc, #248]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	029b      	lsls	r3, r3, #10
 8002296:	4013      	ands	r3, r2
 8002298:	d114      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06e      	b.n	800237c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b38      	ldr	r3, [pc, #224]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	049b      	lsls	r3, r3, #18
 80022ae:	4013      	ands	r3, r2
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e062      	b.n	800237c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e05b      	b.n	800237c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c4:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	4393      	bics	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7fe ffec 	bl	80012b4 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e0:	e009      	b.n	80022f6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e2:	f7fe ffe7 	bl	80012b4 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	4a27      	ldr	r2, [pc, #156]	@ (800238c <HAL_RCC_ClockConfig+0x18c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e042      	b.n	800237c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	220c      	movs	r2, #12
 80022fc:	401a      	ands	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1ec      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <HAL_RCC_ClockConfig+0x184>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d211      	bcs.n	800233a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_RCC_ClockConfig+0x184>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	4393      	bics	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <HAL_RCC_ClockConfig+0x184>)
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002328:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <HAL_RCC_ClockConfig+0x184>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e020      	b.n	800237c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2204      	movs	r2, #4
 8002340:	4013      	ands	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a11      	ldr	r2, [pc, #68]	@ (8002390 <HAL_RCC_ClockConfig+0x190>)
 800234a:	4013      	ands	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 8002354:	430a      	orrs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002358:	f000 f820 	bl	800239c <HAL_RCC_GetSysClockFreq>
 800235c:	0001      	movs	r1, r0
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x188>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	220f      	movs	r2, #15
 8002366:	4013      	ands	r3, r2
 8002368:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <HAL_RCC_ClockConfig+0x194>)
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	000a      	movs	r2, r1
 800236e:	40da      	lsrs	r2, r3
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_ClockConfig+0x198>)
 8002372:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002374:	2003      	movs	r0, #3
 8002376:	f7fe ff57 	bl	8001228 <HAL_InitTick>
  
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b004      	add	sp, #16
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40022000 	.word	0x40022000
 8002388:	40021000 	.word	0x40021000
 800238c:	00001388 	.word	0x00001388
 8002390:	fffff8ff 	.word	0xfffff8ff
 8002394:	0800524c 	.word	0x0800524c
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	220c      	movs	r2, #12
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x30>
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ca:	e02c      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	e02c      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0c9b      	lsrs	r3, r3, #18
 80023d6:	220f      	movs	r2, #15
 80023d8:	4013      	ands	r3, r2
 80023da:	4a19      	ldr	r2, [pc, #100]	@ (8002440 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	220f      	movs	r2, #15
 80023e6:	4013      	ands	r3, r2
 80023e8:	4a16      	ldr	r2, [pc, #88]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xa8>)
 80023ea:	5cd3      	ldrb	r3, [r2, r3]
 80023ec:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	025b      	lsls	r3, r3, #9
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	4810      	ldr	r0, [pc, #64]	@ (800243c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023fc:	f7fd fe8e 	bl	800011c <__udivsi3>
 8002400:	0003      	movs	r3, r0
 8002402:	001a      	movs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4353      	muls	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e009      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	000a      	movs	r2, r1
 8002410:	0152      	lsls	r2, r2, #5
 8002412:	1a52      	subs	r2, r2, r1
 8002414:	0193      	lsls	r3, r2, #6
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	185b      	adds	r3, r3, r1
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	613b      	str	r3, [r7, #16]
      break;
 8002424:	e002      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002426:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002428:	613b      	str	r3, [r7, #16]
      break;
 800242a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800242c:	693b      	ldr	r3, [r7, #16]
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b006      	add	sp, #24
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	40021000 	.word	0x40021000
 800243c:	007a1200 	.word	0x007a1200
 8002440:	08005264 	.word	0x08005264
 8002444:	08005274 	.word	0x08005274

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b02      	ldr	r3, [pc, #8]	@ (8002458 <HAL_RCC_GetHCLKFreq+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002460:	f7ff fff2 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002464:	0001      	movs	r1, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	2207      	movs	r2, #7
 800246e:	4013      	ands	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	40d9      	lsrs	r1, r3
 8002476:	000b      	movs	r3, r1
}    
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	0800525c 	.word	0x0800525c

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024a4:	e08e      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2017      	movs	r0, #23
 80024a8:	183b      	adds	r3, r7, r0
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	2380      	movs	r3, #128	@ 0x80
 80024b4:	055b      	lsls	r3, r3, #21
 80024b6:	4013      	ands	r3, r2
 80024b8:	d110      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b5c      	ldr	r3, [pc, #368]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	4b5b      	ldr	r3, [pc, #364]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024c0:	2180      	movs	r1, #128	@ 0x80
 80024c2:	0549      	lsls	r1, r1, #21
 80024c4:	430a      	orrs	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
 80024c8:	4b58      	ldr	r3, [pc, #352]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	055b      	lsls	r3, r3, #21
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	183b      	adds	r3, r7, r0
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b54      	ldr	r3, [pc, #336]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d11a      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e8:	4b51      	ldr	r3, [pc, #324]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	0049      	lsls	r1, r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fedd 	bl	80012b4 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	e008      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002500:	f7fe fed8 	bl	80012b4 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e087      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d0f0      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800251e:	4b43      	ldr	r3, [pc, #268]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	23c0      	movs	r3, #192	@ 0xc0
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4013      	ands	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d034      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	23c0      	movs	r3, #192	@ 0xc0
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4013      	ands	r3, r2
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d02c      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b3a      	ldr	r3, [pc, #232]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a3b      	ldr	r2, [pc, #236]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b38      	ldr	r3, [pc, #224]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	4b37      	ldr	r3, [pc, #220]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002550:	2180      	movs	r1, #128	@ 0x80
 8002552:	0249      	lsls	r1, r1, #9
 8002554:	430a      	orrs	r2, r1
 8002556:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002558:	4b34      	ldr	r3, [pc, #208]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	4b33      	ldr	r3, [pc, #204]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800255e:	4936      	ldr	r1, [pc, #216]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002560:	400a      	ands	r2, r1
 8002562:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002564:	4b31      	ldr	r3, [pc, #196]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fe9f 	bl	80012b4 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e009      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fe9a 	bl	80012b4 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	4a2d      	ldr	r2, [pc, #180]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e048      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	4b26      	ldr	r3, [pc, #152]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d0f0      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259a:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a25      	ldr	r2, [pc, #148]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025aa:	430a      	orrs	r2, r1
 80025ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ae:	2317      	movs	r3, #23
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025be:	4920      	ldr	r1, [pc, #128]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	2203      	movs	r2, #3
 80025d4:	4393      	bics	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2220      	movs	r2, #32
 80025e8:	4013      	ands	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ec:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	2210      	movs	r2, #16
 80025f2:	4393      	bics	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4013      	ands	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	2240      	movs	r2, #64	@ 0x40
 8002612:	4393      	bics	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	4b04      	ldr	r3, [pc, #16]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b006      	add	sp, #24
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	40021000 	.word	0x40021000
 8002630:	40007000 	.word	0x40007000
 8002634:	fffffcff 	.word	0xfffffcff
 8002638:	fffeffff 	.word	0xfffeffff
 800263c:	00001388 	.word	0x00001388
 8002640:	efffffff 	.word	0xefffffff

08002644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e042      	b.n	80026dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	223d      	movs	r2, #61	@ 0x3d
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223c      	movs	r2, #60	@ 0x3c
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	0018      	movs	r0, r3
 800266e:	f7fe fbf7 	bl	8000e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	223d      	movs	r2, #61	@ 0x3d
 8002676:	2102      	movs	r1, #2
 8002678:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	0019      	movs	r1, r3
 8002684:	0010      	movs	r0, r2
 8002686:	f000 fa61 	bl	8002b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2246      	movs	r2, #70	@ 0x46
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	223e      	movs	r2, #62	@ 0x3e
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223f      	movs	r2, #63	@ 0x3f
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2240      	movs	r2, #64	@ 0x40
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2241      	movs	r2, #65	@ 0x41
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2242      	movs	r2, #66	@ 0x42
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2243      	movs	r2, #67	@ 0x43
 80026be:	2101      	movs	r1, #1
 80026c0:	5499      	strb	r1, [r3, r2]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2244      	movs	r2, #68	@ 0x44
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2245      	movs	r2, #69	@ 0x45
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223d      	movs	r2, #61	@ 0x3d
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	223d      	movs	r2, #61	@ 0x3d
 80026f0:	5c9b      	ldrb	r3, [r3, r2]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d001      	beq.n	80026fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e03b      	b.n	8002774 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	223d      	movs	r2, #61	@ 0x3d
 8002700:	2102      	movs	r1, #2
 8002702:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2101      	movs	r1, #1
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_TIM_Base_Start_IT+0x98>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00f      	beq.n	800273e <HAL_TIM_Base_Start_IT+0x5a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	@ 0x80
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	429a      	cmp	r2, r3
 8002728:	d009      	beq.n	800273e <HAL_TIM_Base_Start_IT+0x5a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <HAL_TIM_Base_Start_IT+0x9c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d004      	beq.n	800273e <HAL_TIM_Base_Start_IT+0x5a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a12      	ldr	r2, [pc, #72]	@ (8002784 <HAL_TIM_Base_Start_IT+0xa0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d111      	bne.n	8002762 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2207      	movs	r2, #7
 8002746:	4013      	ands	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b06      	cmp	r3, #6
 800274e:	d010      	beq.n	8002772 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002760:	e007      	b.n	8002772 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	430a      	orrs	r2, r1
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b004      	add	sp, #16
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40012c00 	.word	0x40012c00
 8002780:	40000400 	.word	0x40000400
 8002784:	40014000 	.word	0x40014000

08002788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2202      	movs	r2, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d021      	beq.n	80027ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d01d      	beq.n	80027ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4252      	negs	r2, r2
 80027b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2203      	movs	r2, #3
 80027c8:	4013      	ands	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 f9a4 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 80027d4:	e007      	b.n	80027e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 f997 	bl	8002b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 f9a3 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2204      	movs	r2, #4
 80027f0:	4013      	ands	r3, r2
 80027f2:	d022      	beq.n	800283a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2204      	movs	r2, #4
 80027f8:	4013      	ands	r3, r2
 80027fa:	d01e      	beq.n	800283a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2205      	movs	r2, #5
 8002802:	4252      	negs	r2, r2
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2202      	movs	r2, #2
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	23c0      	movs	r3, #192	@ 0xc0
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4013      	ands	r3, r2
 8002818:	d004      	beq.n	8002824 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f97d 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 8002822:	e007      	b.n	8002834 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 f970 	bl	8002b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0018      	movs	r0, r3
 8002830:	f000 f97c 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2208      	movs	r2, #8
 800283e:	4013      	ands	r3, r2
 8002840:	d021      	beq.n	8002886 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2208      	movs	r2, #8
 8002846:	4013      	ands	r3, r2
 8002848:	d01d      	beq.n	8002886 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2209      	movs	r2, #9
 8002850:	4252      	negs	r2, r2
 8002852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2204      	movs	r2, #4
 8002858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2203      	movs	r2, #3
 8002862:	4013      	ands	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f957 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 800286e:	e007      	b.n	8002880 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 f94a 	bl	8002b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f956 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2210      	movs	r2, #16
 800288a:	4013      	ands	r3, r2
 800288c:	d022      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2210      	movs	r2, #16
 8002892:	4013      	ands	r3, r2
 8002894:	d01e      	beq.n	80028d4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2211      	movs	r2, #17
 800289c:	4252      	negs	r2, r2
 800289e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2208      	movs	r2, #8
 80028a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	23c0      	movs	r3, #192	@ 0xc0
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f930 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 80028bc:	e007      	b.n	80028ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 f923 	bl	8002b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 f92f 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	d00c      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	4013      	ands	r3, r2
 80028e2:	d008      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2202      	movs	r2, #2
 80028ea:	4252      	negs	r2, r2
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7fe f8bf 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2280      	movs	r2, #128	@ 0x80
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00c      	beq.n	8002918 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	4013      	ands	r3, r2
 8002904:	d008      	beq.n	8002918 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2281      	movs	r2, #129	@ 0x81
 800290c:	4252      	negs	r2, r2
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 faa8 	bl	8002e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2240      	movs	r2, #64	@ 0x40
 800291c:	4013      	ands	r3, r2
 800291e:	d00c      	beq.n	800293a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2240      	movs	r2, #64	@ 0x40
 8002924:	4013      	ands	r3, r2
 8002926:	d008      	beq.n	800293a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2241      	movs	r2, #65	@ 0x41
 800292e:	4252      	negs	r2, r2
 8002930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 f901 	bl	8002b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2220      	movs	r2, #32
 800293e:	4013      	ands	r3, r2
 8002940:	d00c      	beq.n	800295c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	4013      	ands	r3, r2
 8002948:	d008      	beq.n	800295c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2221      	movs	r2, #33	@ 0x21
 8002950:	4252      	negs	r2, r2
 8002952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0018      	movs	r0, r3
 8002958:	f000 fa7e 	bl	8002e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800295c:	46c0      	nop			@ (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	230f      	movs	r3, #15
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	223c      	movs	r2, #60	@ 0x3c
 800297a:	5c9b      	ldrb	r3, [r3, r2]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_TIM_ConfigClockSource+0x20>
 8002980:	2302      	movs	r3, #2
 8002982:	e0bc      	b.n	8002afe <HAL_TIM_ConfigClockSource+0x19a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	223c      	movs	r2, #60	@ 0x3c
 8002988:	2101      	movs	r1, #1
 800298a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	223d      	movs	r2, #61	@ 0x3d
 8002990:	2102      	movs	r1, #2
 8002992:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2277      	movs	r2, #119	@ 0x77
 80029a0:	4393      	bics	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <HAL_TIM_ConfigClockSource+0x1a4>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2280      	movs	r2, #128	@ 0x80
 80029ba:	0192      	lsls	r2, r2, #6
 80029bc:	4293      	cmp	r3, r2
 80029be:	d040      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0xde>
 80029c0:	2280      	movs	r2, #128	@ 0x80
 80029c2:	0192      	lsls	r2, r2, #6
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d900      	bls.n	80029ca <HAL_TIM_ConfigClockSource+0x66>
 80029c8:	e088      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	0152      	lsls	r2, r2, #5
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d100      	bne.n	80029d4 <HAL_TIM_ConfigClockSource+0x70>
 80029d2:	e088      	b.n	8002ae6 <HAL_TIM_ConfigClockSource+0x182>
 80029d4:	2280      	movs	r2, #128	@ 0x80
 80029d6:	0152      	lsls	r2, r2, #5
 80029d8:	4293      	cmp	r3, r2
 80029da:	d900      	bls.n	80029de <HAL_TIM_ConfigClockSource+0x7a>
 80029dc:	e07e      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
 80029de:	2b70      	cmp	r3, #112	@ 0x70
 80029e0:	d018      	beq.n	8002a14 <HAL_TIM_ConfigClockSource+0xb0>
 80029e2:	d900      	bls.n	80029e6 <HAL_TIM_ConfigClockSource+0x82>
 80029e4:	e07a      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
 80029e6:	2b60      	cmp	r3, #96	@ 0x60
 80029e8:	d04f      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x126>
 80029ea:	d900      	bls.n	80029ee <HAL_TIM_ConfigClockSource+0x8a>
 80029ec:	e076      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
 80029ee:	2b50      	cmp	r3, #80	@ 0x50
 80029f0:	d03b      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x106>
 80029f2:	d900      	bls.n	80029f6 <HAL_TIM_ConfigClockSource+0x92>
 80029f4:	e072      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
 80029f6:	2b40      	cmp	r3, #64	@ 0x40
 80029f8:	d057      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x146>
 80029fa:	d900      	bls.n	80029fe <HAL_TIM_ConfigClockSource+0x9a>
 80029fc:	e06e      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
 80029fe:	2b30      	cmp	r3, #48	@ 0x30
 8002a00:	d063      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x166>
 8002a02:	d86b      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d060      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x166>
 8002a08:	d868      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d05d      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x166>
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d05b      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x166>
 8002a12:	e063      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a24:	f000 f99a 	bl	8002d5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2277      	movs	r2, #119	@ 0x77
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	609a      	str	r2, [r3, #8]
      break;
 8002a40:	e052      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a52:	f000 f983 	bl	8002d5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2180      	movs	r1, #128	@ 0x80
 8002a62:	01c9      	lsls	r1, r1, #7
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
      break;
 8002a68:	e03e      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	001a      	movs	r2, r3
 8002a78:	f000 f8f6 	bl	8002c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2150      	movs	r1, #80	@ 0x50
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f950 	bl	8002d28 <TIM_ITRx_SetConfig>
      break;
 8002a88:	e02e      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a96:	001a      	movs	r2, r3
 8002a98:	f000 f914 	bl	8002cc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2160      	movs	r1, #96	@ 0x60
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 f940 	bl	8002d28 <TIM_ITRx_SetConfig>
      break;
 8002aa8:	e01e      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	f000 f8d6 	bl	8002c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2140      	movs	r1, #64	@ 0x40
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 f930 	bl	8002d28 <TIM_ITRx_SetConfig>
      break;
 8002ac8:	e00e      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	f000 f927 	bl	8002d28 <TIM_ITRx_SetConfig>
      break;
 8002ada:	e005      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002adc:	230f      	movs	r3, #15
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
      break;
 8002ae4:	e000      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002ae6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	223d      	movs	r2, #61	@ 0x3d
 8002aec:	2101      	movs	r1, #1
 8002aee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	223c      	movs	r2, #60	@ 0x3c
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]

  return status;
 8002af8:	230f      	movs	r3, #15
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	781b      	ldrb	r3, [r3, #0]
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b004      	add	sp, #16
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	ffff00ff 	.word	0xffff00ff

08002b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b34:	46c0      	nop			@ (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b44:	46c0      	nop			@ (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c4c <TIM_Base_SetConfig+0x100>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d008      	beq.n	8002b76 <TIM_Base_SetConfig+0x2a>
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	05db      	lsls	r3, r3, #23
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0x2a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a37      	ldr	r2, [pc, #220]	@ (8002c50 <TIM_Base_SetConfig+0x104>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2270      	movs	r2, #112	@ 0x70
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a30      	ldr	r2, [pc, #192]	@ (8002c4c <TIM_Base_SetConfig+0x100>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d018      	beq.n	8002bc2 <TIM_Base_SetConfig+0x76>
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	05db      	lsls	r3, r3, #23
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d013      	beq.n	8002bc2 <TIM_Base_SetConfig+0x76>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c50 <TIM_Base_SetConfig+0x104>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00f      	beq.n	8002bc2 <TIM_Base_SetConfig+0x76>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c54 <TIM_Base_SetConfig+0x108>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00b      	beq.n	8002bc2 <TIM_Base_SetConfig+0x76>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a2a      	ldr	r2, [pc, #168]	@ (8002c58 <TIM_Base_SetConfig+0x10c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <TIM_Base_SetConfig+0x76>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a29      	ldr	r2, [pc, #164]	@ (8002c5c <TIM_Base_SetConfig+0x110>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d003      	beq.n	8002bc2 <TIM_Base_SetConfig+0x76>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a28      	ldr	r2, [pc, #160]	@ (8002c60 <TIM_Base_SetConfig+0x114>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d108      	bne.n	8002bd4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a27      	ldr	r2, [pc, #156]	@ (8002c64 <TIM_Base_SetConfig+0x118>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2280      	movs	r2, #128	@ 0x80
 8002bd8:	4393      	bics	r3, r2
 8002bda:	001a      	movs	r2, r3
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a13      	ldr	r2, [pc, #76]	@ (8002c4c <TIM_Base_SetConfig+0x100>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00b      	beq.n	8002c1a <TIM_Base_SetConfig+0xce>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <TIM_Base_SetConfig+0x10c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <TIM_Base_SetConfig+0xce>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a13      	ldr	r2, [pc, #76]	@ (8002c5c <TIM_Base_SetConfig+0x110>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d003      	beq.n	8002c1a <TIM_Base_SetConfig+0xce>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <TIM_Base_SetConfig+0x114>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d103      	bne.n	8002c22 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4393      	bics	r3, r2
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
  }
}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b004      	add	sp, #16
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40002000 	.word	0x40002000
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40014800 	.word	0x40014800
 8002c64:	fffffcff 	.word	0xfffffcff

08002c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4393      	bics	r3, r2
 8002c82:	001a      	movs	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	22f0      	movs	r2, #240	@ 0xf0
 8002c92:	4393      	bics	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	220a      	movs	r2, #10
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	621a      	str	r2, [r3, #32]
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b006      	add	sp, #24
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	2210      	movs	r2, #16
 8002cdc:	4393      	bics	r3, r2
 8002cde:	001a      	movs	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	@ (8002d24 <TIM_TI2_ConfigInputStage+0x60>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	031b      	lsls	r3, r3, #12
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	22a0      	movs	r2, #160	@ 0xa0
 8002d00:	4393      	bics	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b006      	add	sp, #24
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	ffff0fff 	.word	0xffff0fff

08002d28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2270      	movs	r2, #112	@ 0x70
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	2207      	movs	r2, #7
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	609a      	str	r2, [r3, #8]
}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b004      	add	sp, #16
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <TIM_ETR_SetConfig+0x3c>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	021a      	lsls	r2, r3, #8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b006      	add	sp, #24
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	ffff00ff 	.word	0xffff00ff

08002d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	223c      	movs	r2, #60	@ 0x3c
 8002daa:	5c9b      	ldrb	r3, [r3, r2]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e047      	b.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	223c      	movs	r2, #60	@ 0x3c
 8002db8:	2101      	movs	r1, #1
 8002dba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	223d      	movs	r2, #61	@ 0x3d
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2270      	movs	r2, #112	@ 0x70
 8002dd8:	4393      	bics	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a16      	ldr	r2, [pc, #88]	@ (8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00f      	beq.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	05db      	lsls	r3, r3, #23
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d009      	beq.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a11      	ldr	r2, [pc, #68]	@ (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a10      	ldr	r2, [pc, #64]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10c      	bne.n	8002e32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2280      	movs	r2, #128	@ 0x80
 8002e1c:	4393      	bics	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	223d      	movs	r2, #61	@ 0x3d
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223c      	movs	r2, #60	@ 0x3c
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40014000 	.word	0x40014000

08002e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e044      	b.n	8002f14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2278      	movs	r2, #120	@ 0x78
 8002e96:	2100      	movs	r1, #0
 8002e98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7fe f803 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2224      	movs	r2, #36	@ 0x24
 8002ea6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 fd66 	bl	8003994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fc22 	bl	8003714 <UART_SetConfig>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e01c      	b.n	8002f14 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	490d      	ldr	r1, [pc, #52]	@ (8002f1c <HAL_UART_Init+0xa4>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	212a      	movs	r1, #42	@ 0x2a
 8002ef6:	438a      	bics	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 fdf5 	bl	8003afc <UART_CheckIdleState>
 8002f12:	0003      	movs	r3, r0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	ffffb7ff 	.word	0xffffb7ff

08002f20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	@ 0x28
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d000      	beq.n	8002f3a <HAL_UART_Transmit+0x1a>
 8002f38:	e08c      	b.n	8003054 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_UART_Transmit+0x28>
 8002f40:	1dbb      	adds	r3, r7, #6
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e084      	b.n	8003056 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	015b      	lsls	r3, r3, #5
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d109      	bne.n	8002f6c <HAL_UART_Transmit+0x4c>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2201      	movs	r2, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	d001      	beq.n	8002f6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e074      	b.n	8003056 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2284      	movs	r2, #132	@ 0x84
 8002f70:	2100      	movs	r1, #0
 8002f72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2221      	movs	r2, #33	@ 0x21
 8002f78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f7a:	f7fe f99b 	bl	80012b4 <HAL_GetTick>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1dba      	adds	r2, r7, #6
 8002f86:	2150      	movs	r1, #80	@ 0x50
 8002f88:	8812      	ldrh	r2, [r2, #0]
 8002f8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1dba      	adds	r2, r7, #6
 8002f90:	2152      	movs	r1, #82	@ 0x52
 8002f92:	8812      	ldrh	r2, [r2, #0]
 8002f94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	015b      	lsls	r3, r3, #5
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d108      	bne.n	8002fb4 <HAL_UART_Transmit+0x94>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e003      	b.n	8002fbc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fbc:	e02f      	b.n	800301e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	0013      	movs	r3, r2
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	@ 0x80
 8002fcc:	f000 fe3e 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8002fd0:	1e03      	subs	r3, r0, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e03b      	b.n	8003056 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	05d2      	lsls	r2, r2, #23
 8002fee:	0dd2      	lsrs	r2, r2, #23
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e007      	b.n	800300c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3301      	adds	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2252      	movs	r2, #82	@ 0x52
 8003010:	5a9b      	ldrh	r3, [r3, r2]
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b299      	uxth	r1, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2252      	movs	r2, #82	@ 0x52
 800301c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2252      	movs	r2, #82	@ 0x52
 8003022:	5a9b      	ldrh	r3, [r3, r2]
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1c9      	bne.n	8002fbe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	0013      	movs	r3, r2
 8003034:	2200      	movs	r2, #0
 8003036:	2140      	movs	r1, #64	@ 0x40
 8003038:	f000 fe08 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d004      	beq.n	800304a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e005      	b.n	8003056 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b008      	add	sp, #32
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b088      	sub	sp, #32
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	1dbb      	adds	r3, r7, #6
 800306a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2280      	movs	r2, #128	@ 0x80
 8003070:	589b      	ldr	r3, [r3, r2]
 8003072:	2b20      	cmp	r3, #32
 8003074:	d145      	bne.n	8003102 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_UART_Receive_DMA+0x26>
 800307c:	1dbb      	adds	r3, r7, #6
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e03d      	b.n	8003104 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	2380      	movs	r3, #128	@ 0x80
 800308e:	015b      	lsls	r3, r3, #5
 8003090:	429a      	cmp	r2, r3
 8003092:	d109      	bne.n	80030a8 <HAL_UART_Receive_DMA+0x4a>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	d001      	beq.n	80030a8 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e02d      	b.n	8003104 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	2380      	movs	r3, #128	@ 0x80
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	4013      	ands	r3, r2
 80030ba:	d019      	beq.n	80030f0 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030bc:	f3ef 8310 	mrs	r3, PRIMASK
 80030c0:	613b      	str	r3, [r7, #16]
  return(result);
 80030c2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	2301      	movs	r3, #1
 80030c8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f383 8810 	msr	PRIMASK, r3
}
 80030d0:	46c0      	nop			@ (mov r8, r8)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2180      	movs	r1, #128	@ 0x80
 80030de:	04c9      	lsls	r1, r1, #19
 80030e0:	430a      	orrs	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80030f0:	1dbb      	adds	r3, r7, #6
 80030f2:	881a      	ldrh	r2, [r3, #0]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fe17 	bl	8003d2c <UART_Start_Receive_DMA>
 80030fe:	0003      	movs	r3, r0
 8003100:	e000      	b.n	8003104 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b008      	add	sp, #32
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b0ab      	sub	sp, #172	@ 0xac
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	22a4      	movs	r2, #164	@ 0xa4
 800311c:	18b9      	adds	r1, r7, r2
 800311e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	20a0      	movs	r0, #160	@ 0xa0
 8003128:	1839      	adds	r1, r7, r0
 800312a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	219c      	movs	r1, #156	@ 0x9c
 8003134:	1879      	adds	r1, r7, r1
 8003136:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003138:	0011      	movs	r1, r2
 800313a:	18bb      	adds	r3, r7, r2
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a99      	ldr	r2, [pc, #612]	@ (80033a4 <HAL_UART_IRQHandler+0x298>)
 8003140:	4013      	ands	r3, r2
 8003142:	2298      	movs	r2, #152	@ 0x98
 8003144:	18bc      	adds	r4, r7, r2
 8003146:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003148:	18bb      	adds	r3, r7, r2
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d114      	bne.n	800317a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003150:	187b      	adds	r3, r7, r1
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2220      	movs	r2, #32
 8003156:	4013      	ands	r3, r2
 8003158:	d00f      	beq.n	800317a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800315a:	183b      	adds	r3, r7, r0
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2220      	movs	r2, #32
 8003160:	4013      	ands	r3, r2
 8003162:	d00a      	beq.n	800317a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003168:	2b00      	cmp	r3, #0
 800316a:	d100      	bne.n	800316e <HAL_UART_IRQHandler+0x62>
 800316c:	e29e      	b.n	80036ac <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	0010      	movs	r0, r2
 8003176:	4798      	blx	r3
      }
      return;
 8003178:	e298      	b.n	80036ac <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800317a:	2398      	movs	r3, #152	@ 0x98
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d100      	bne.n	8003186 <HAL_UART_IRQHandler+0x7a>
 8003184:	e114      	b.n	80033b0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003186:	239c      	movs	r3, #156	@ 0x9c
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d106      	bne.n	80031a0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003192:	23a0      	movs	r3, #160	@ 0xa0
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a83      	ldr	r2, [pc, #524]	@ (80033a8 <HAL_UART_IRQHandler+0x29c>)
 800319a:	4013      	ands	r3, r2
 800319c:	d100      	bne.n	80031a0 <HAL_UART_IRQHandler+0x94>
 800319e:	e107      	b.n	80033b0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031a0:	23a4      	movs	r3, #164	@ 0xa4
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	4013      	ands	r3, r2
 80031aa:	d012      	beq.n	80031d2 <HAL_UART_IRQHandler+0xc6>
 80031ac:	23a0      	movs	r3, #160	@ 0xa0
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	2380      	movs	r3, #128	@ 0x80
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2284      	movs	r2, #132	@ 0x84
 80031c6:	589b      	ldr	r3, [r3, r2]
 80031c8:	2201      	movs	r2, #1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2184      	movs	r1, #132	@ 0x84
 80031d0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d2:	23a4      	movs	r3, #164	@ 0xa4
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	d011      	beq.n	8003202 <HAL_UART_IRQHandler+0xf6>
 80031de:	239c      	movs	r3, #156	@ 0x9c
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4013      	ands	r3, r2
 80031e8:	d00b      	beq.n	8003202 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2202      	movs	r2, #2
 80031f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2284      	movs	r2, #132	@ 0x84
 80031f6:	589b      	ldr	r3, [r3, r2]
 80031f8:	2204      	movs	r2, #4
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2184      	movs	r1, #132	@ 0x84
 8003200:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003202:	23a4      	movs	r3, #164	@ 0xa4
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2204      	movs	r2, #4
 800320a:	4013      	ands	r3, r2
 800320c:	d011      	beq.n	8003232 <HAL_UART_IRQHandler+0x126>
 800320e:	239c      	movs	r3, #156	@ 0x9c
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2201      	movs	r2, #1
 8003216:	4013      	ands	r3, r2
 8003218:	d00b      	beq.n	8003232 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2204      	movs	r2, #4
 8003220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2284      	movs	r2, #132	@ 0x84
 8003226:	589b      	ldr	r3, [r3, r2]
 8003228:	2202      	movs	r2, #2
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2184      	movs	r1, #132	@ 0x84
 8003230:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003232:	23a4      	movs	r3, #164	@ 0xa4
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2208      	movs	r2, #8
 800323a:	4013      	ands	r3, r2
 800323c:	d017      	beq.n	800326e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800323e:	23a0      	movs	r3, #160	@ 0xa0
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2220      	movs	r2, #32
 8003246:	4013      	ands	r3, r2
 8003248:	d105      	bne.n	8003256 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800324a:	239c      	movs	r3, #156	@ 0x9c
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2208      	movs	r2, #8
 800325c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2284      	movs	r2, #132	@ 0x84
 8003262:	589b      	ldr	r3, [r3, r2]
 8003264:	2208      	movs	r2, #8
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2184      	movs	r1, #132	@ 0x84
 800326c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800326e:	23a4      	movs	r3, #164	@ 0xa4
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	@ 0x80
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	4013      	ands	r3, r2
 800327a:	d013      	beq.n	80032a4 <HAL_UART_IRQHandler+0x198>
 800327c:	23a0      	movs	r3, #160	@ 0xa0
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	04db      	lsls	r3, r3, #19
 8003286:	4013      	ands	r3, r2
 8003288:	d00c      	beq.n	80032a4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2280      	movs	r2, #128	@ 0x80
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2284      	movs	r2, #132	@ 0x84
 8003298:	589b      	ldr	r3, [r3, r2]
 800329a:	2220      	movs	r2, #32
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2184      	movs	r1, #132	@ 0x84
 80032a2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2284      	movs	r2, #132	@ 0x84
 80032a8:	589b      	ldr	r3, [r3, r2]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d100      	bne.n	80032b0 <HAL_UART_IRQHandler+0x1a4>
 80032ae:	e1ff      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032b0:	23a4      	movs	r3, #164	@ 0xa4
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2220      	movs	r2, #32
 80032b8:	4013      	ands	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032bc:	23a0      	movs	r3, #160	@ 0xa0
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2220      	movs	r2, #32
 80032c4:	4013      	ands	r3, r2
 80032c6:	d008      	beq.n	80032da <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	0010      	movs	r0, r2
 80032d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2284      	movs	r2, #132	@ 0x84
 80032de:	589b      	ldr	r3, [r3, r2]
 80032e0:	2194      	movs	r1, #148	@ 0x94
 80032e2:	187a      	adds	r2, r7, r1
 80032e4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2240      	movs	r2, #64	@ 0x40
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b40      	cmp	r3, #64	@ 0x40
 80032f2:	d004      	beq.n	80032fe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2228      	movs	r2, #40	@ 0x28
 80032fa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fc:	d047      	beq.n	800338e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	f000 fdd7 	bl	8003eb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2240      	movs	r2, #64	@ 0x40
 800330e:	4013      	ands	r3, r2
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	d137      	bne.n	8003384 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003314:	f3ef 8310 	mrs	r3, PRIMASK
 8003318:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800331a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800331c:	2090      	movs	r0, #144	@ 0x90
 800331e:	183a      	adds	r2, r7, r0
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	2301      	movs	r3, #1
 8003324:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			@ (mov r8, r8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2140      	movs	r1, #64	@ 0x40
 800333a:	438a      	bics	r2, r1
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	183b      	adds	r3, r7, r0
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003346:	f383 8810 	msr	PRIMASK, r3
}
 800334a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003350:	2b00      	cmp	r3, #0
 8003352:	d012      	beq.n	800337a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003358:	4a14      	ldr	r2, [pc, #80]	@ (80033ac <HAL_UART_IRQHandler+0x2a0>)
 800335a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003360:	0018      	movs	r0, r3
 8003362:	f7fe f975 	bl	8001650 <HAL_DMA_Abort_IT>
 8003366:	1e03      	subs	r3, r0, #0
 8003368:	d01a      	beq.n	80033a0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003374:	0018      	movs	r0, r3
 8003376:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e012      	b.n	80033a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0018      	movs	r0, r3
 800337e:	f000 f9b5 	bl	80036ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003382:	e00d      	b.n	80033a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	0018      	movs	r0, r3
 8003388:	f000 f9b0 	bl	80036ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338c:	e008      	b.n	80033a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f000 f9ab 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2284      	movs	r2, #132	@ 0x84
 800339a:	2100      	movs	r1, #0
 800339c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800339e:	e187      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	46c0      	nop			@ (mov r8, r8)
    return;
 80033a2:	e185      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a4>
 80033a4:	0000080f 	.word	0x0000080f
 80033a8:	04000120 	.word	0x04000120
 80033ac:	0800416f 	.word	0x0800416f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d000      	beq.n	80033ba <HAL_UART_IRQHandler+0x2ae>
 80033b8:	e139      	b.n	800362e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033ba:	23a4      	movs	r3, #164	@ 0xa4
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2210      	movs	r2, #16
 80033c2:	4013      	ands	r3, r2
 80033c4:	d100      	bne.n	80033c8 <HAL_UART_IRQHandler+0x2bc>
 80033c6:	e132      	b.n	800362e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033c8:	23a0      	movs	r3, #160	@ 0xa0
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2210      	movs	r2, #16
 80033d0:	4013      	ands	r3, r2
 80033d2:	d100      	bne.n	80033d6 <HAL_UART_IRQHandler+0x2ca>
 80033d4:	e12b      	b.n	800362e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2210      	movs	r2, #16
 80033dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2240      	movs	r2, #64	@ 0x40
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b40      	cmp	r3, #64	@ 0x40
 80033ea:	d000      	beq.n	80033ee <HAL_UART_IRQHandler+0x2e2>
 80033ec:	e09f      	b.n	800352e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	217e      	movs	r1, #126	@ 0x7e
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d100      	bne.n	8003406 <HAL_UART_IRQHandler+0x2fa>
 8003404:	e156      	b.n	80036b4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2258      	movs	r2, #88	@ 0x58
 800340a:	5a9b      	ldrh	r3, [r3, r2]
 800340c:	187a      	adds	r2, r7, r1
 800340e:	8812      	ldrh	r2, [r2, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d300      	bcc.n	8003416 <HAL_UART_IRQHandler+0x30a>
 8003414:	e14e      	b.n	80036b4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	187a      	adds	r2, r7, r1
 800341a:	215a      	movs	r1, #90	@ 0x5a
 800341c:	8812      	ldrh	r2, [r2, #0]
 800341e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b20      	cmp	r3, #32
 8003428:	d06f      	beq.n	800350a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003432:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003434:	2301      	movs	r3, #1
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	499e      	ldr	r1, [pc, #632]	@ (80036c4 <HAL_UART_IRQHandler+0x5b8>)
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003452:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345c:	f3ef 8310 	mrs	r3, PRIMASK
 8003460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	677b      	str	r3, [r7, #116]	@ 0x74
 8003466:	2301      	movs	r3, #1
 8003468:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	438a      	bics	r2, r1
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003484:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348e:	f3ef 8310 	mrs	r3, PRIMASK
 8003492:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003496:	673b      	str	r3, [r7, #112]	@ 0x70
 8003498:	2301      	movs	r3, #1
 800349a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800349e:	f383 8810 	msr	PRIMASK, r3
}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2140      	movs	r1, #64	@ 0x40
 80034b0:	438a      	bics	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034b6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034ba:	f383 8810 	msr	PRIMASK, r3
}
 80034be:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	@ 0x80
 80034c4:	2120      	movs	r1, #32
 80034c6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ce:	f3ef 8310 	mrs	r3, PRIMASK
 80034d2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80034d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034d8:	2301      	movs	r3, #1
 80034da:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2110      	movs	r1, #16
 80034f0:	438a      	bics	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003504:	0018      	movs	r0, r3
 8003506:	f7fe f86b 	bl	80015e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2258      	movs	r2, #88	@ 0x58
 8003514:	5a9a      	ldrh	r2, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	215a      	movs	r1, #90	@ 0x5a
 800351a:	5a5b      	ldrh	r3, [r3, r1]
 800351c:	b29b      	uxth	r3, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0011      	movs	r1, r2
 8003526:	0018      	movs	r0, r3
 8003528:	f000 f8e8 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800352c:	e0c2      	b.n	80036b4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2258      	movs	r2, #88	@ 0x58
 8003532:	5a99      	ldrh	r1, [r3, r2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	225a      	movs	r2, #90	@ 0x5a
 8003538:	5a9b      	ldrh	r3, [r3, r2]
 800353a:	b29a      	uxth	r2, r3
 800353c:	208e      	movs	r0, #142	@ 0x8e
 800353e:	183b      	adds	r3, r7, r0
 8003540:	1a8a      	subs	r2, r1, r2
 8003542:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	225a      	movs	r2, #90	@ 0x5a
 8003548:	5a9b      	ldrh	r3, [r3, r2]
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d100      	bne.n	8003552 <HAL_UART_IRQHandler+0x446>
 8003550:	e0b2      	b.n	80036b8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003552:	183b      	adds	r3, r7, r0
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d100      	bne.n	800355c <HAL_UART_IRQHandler+0x450>
 800355a:	e0ad      	b.n	80036b8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355c:	f3ef 8310 	mrs	r3, PRIMASK
 8003560:	60fb      	str	r3, [r7, #12]
  return(result);
 8003562:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003564:	2488      	movs	r4, #136	@ 0x88
 8003566:	193a      	adds	r2, r7, r4
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	2301      	movs	r3, #1
 800356c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f383 8810 	msr	PRIMASK, r3
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4951      	ldr	r1, [pc, #324]	@ (80036c8 <HAL_UART_IRQHandler+0x5bc>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	193b      	adds	r3, r7, r4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003594:	f3ef 8310 	mrs	r3, PRIMASK
 8003598:	61bb      	str	r3, [r7, #24]
  return(result);
 800359a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	2484      	movs	r4, #132	@ 0x84
 800359e:	193a      	adds	r2, r7, r4
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	438a      	bics	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f383 8810 	msr	PRIMASK, r3
}
 80035ca:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2280      	movs	r2, #128	@ 0x80
 80035d0:	2120      	movs	r1, #32
 80035d2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e0:	f3ef 8310 	mrs	r3, PRIMASK
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	2480      	movs	r4, #128	@ 0x80
 80035ea:	193a      	adds	r2, r7, r4
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	2301      	movs	r3, #1
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			@ (mov r8, r8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2110      	movs	r1, #16
 8003606:	438a      	bics	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	193b      	adds	r3, r7, r4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361e:	183b      	adds	r3, r7, r0
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f868 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800362c:	e044      	b.n	80036b8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362e:	23a4      	movs	r3, #164	@ 0xa4
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	035b      	lsls	r3, r3, #13
 8003638:	4013      	ands	r3, r2
 800363a:	d010      	beq.n	800365e <HAL_UART_IRQHandler+0x552>
 800363c:	239c      	movs	r3, #156	@ 0x9c
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	03db      	lsls	r3, r3, #15
 8003646:	4013      	ands	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	0352      	lsls	r2, r2, #13
 8003652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	0018      	movs	r0, r3
 8003658:	f000 fdcb 	bl	80041f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800365c:	e02f      	b.n	80036be <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800365e:	23a4      	movs	r3, #164	@ 0xa4
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2280      	movs	r2, #128	@ 0x80
 8003666:	4013      	ands	r3, r2
 8003668:	d00f      	beq.n	800368a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800366a:	23a0      	movs	r3, #160	@ 0xa0
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2280      	movs	r2, #128	@ 0x80
 8003672:	4013      	ands	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01e      	beq.n	80036bc <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	0010      	movs	r0, r2
 8003686:	4798      	blx	r3
    }
    return;
 8003688:	e018      	b.n	80036bc <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800368a:	23a4      	movs	r3, #164	@ 0xa4
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2240      	movs	r2, #64	@ 0x40
 8003692:	4013      	ands	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_UART_IRQHandler+0x5b2>
 8003696:	23a0      	movs	r3, #160	@ 0xa0
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2240      	movs	r2, #64	@ 0x40
 800369e:	4013      	ands	r3, r2
 80036a0:	d00d      	beq.n	80036be <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 fd79 	bl	800419c <UART_EndTransmit_IT>
    return;
 80036aa:	e008      	b.n	80036be <HAL_UART_IRQHandler+0x5b2>
      return;
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	e006      	b.n	80036be <HAL_UART_IRQHandler+0x5b2>
    return;
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	e004      	b.n	80036be <HAL_UART_IRQHandler+0x5b2>
      return;
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	e002      	b.n	80036be <HAL_UART_IRQHandler+0x5b2>
      return;
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	e000      	b.n	80036be <HAL_UART_IRQHandler+0x5b2>
    return;
 80036bc:	46c0      	nop			@ (mov r8, r8)
  }

}
 80036be:	46bd      	mov	sp, r7
 80036c0:	b02b      	add	sp, #172	@ 0xac
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	fffffeff 	.word	0xfffffeff
 80036c8:	fffffedf 	.word	0xfffffedf

080036cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80036e4:	46c0      	nop			@ (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b002      	add	sp, #8
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	000a      	movs	r2, r1
 8003706:	1cbb      	adds	r3, r7, #2
 8003708:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b002      	add	sp, #8
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800371c:	231e      	movs	r3, #30
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a8d      	ldr	r2, [pc, #564]	@ (8003978 <UART_SetConfig+0x264>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a88      	ldr	r2, [pc, #544]	@ (800397c <UART_SetConfig+0x268>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a7f      	ldr	r2, [pc, #508]	@ (8003980 <UART_SetConfig+0x26c>)
 8003782:	4013      	ands	r3, r2
 8003784:	0019      	movs	r1, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	430a      	orrs	r2, r1
 800378e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a7b      	ldr	r2, [pc, #492]	@ (8003984 <UART_SetConfig+0x270>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d127      	bne.n	80037ea <UART_SetConfig+0xd6>
 800379a:	4b7b      	ldr	r3, [pc, #492]	@ (8003988 <UART_SetConfig+0x274>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	2203      	movs	r2, #3
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d00d      	beq.n	80037c2 <UART_SetConfig+0xae>
 80037a6:	d81b      	bhi.n	80037e0 <UART_SetConfig+0xcc>
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d014      	beq.n	80037d6 <UART_SetConfig+0xc2>
 80037ac:	d818      	bhi.n	80037e0 <UART_SetConfig+0xcc>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <UART_SetConfig+0xa4>
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d00a      	beq.n	80037cc <UART_SetConfig+0xb8>
 80037b6:	e013      	b.n	80037e0 <UART_SetConfig+0xcc>
 80037b8:	231f      	movs	r3, #31
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e021      	b.n	8003806 <UART_SetConfig+0xf2>
 80037c2:	231f      	movs	r3, #31
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2202      	movs	r2, #2
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e01c      	b.n	8003806 <UART_SetConfig+0xf2>
 80037cc:	231f      	movs	r3, #31
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2204      	movs	r2, #4
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e017      	b.n	8003806 <UART_SetConfig+0xf2>
 80037d6:	231f      	movs	r3, #31
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2208      	movs	r2, #8
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e012      	b.n	8003806 <UART_SetConfig+0xf2>
 80037e0:	231f      	movs	r3, #31
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	2210      	movs	r2, #16
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e00d      	b.n	8003806 <UART_SetConfig+0xf2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a67      	ldr	r2, [pc, #412]	@ (800398c <UART_SetConfig+0x278>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d104      	bne.n	80037fe <UART_SetConfig+0xea>
 80037f4:	231f      	movs	r3, #31
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	e003      	b.n	8003806 <UART_SetConfig+0xf2>
 80037fe:	231f      	movs	r3, #31
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	2210      	movs	r2, #16
 8003804:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	2380      	movs	r3, #128	@ 0x80
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	429a      	cmp	r2, r3
 8003810:	d15c      	bne.n	80038cc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003812:	231f      	movs	r3, #31
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d015      	beq.n	8003848 <UART_SetConfig+0x134>
 800381c:	dc18      	bgt.n	8003850 <UART_SetConfig+0x13c>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00d      	beq.n	800383e <UART_SetConfig+0x12a>
 8003822:	dc15      	bgt.n	8003850 <UART_SetConfig+0x13c>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <UART_SetConfig+0x11a>
 8003828:	2b02      	cmp	r3, #2
 800382a:	d005      	beq.n	8003838 <UART_SetConfig+0x124>
 800382c:	e010      	b.n	8003850 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382e:	f7fe fe15 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003832:	0003      	movs	r3, r0
 8003834:	61bb      	str	r3, [r7, #24]
        break;
 8003836:	e012      	b.n	800385e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b55      	ldr	r3, [pc, #340]	@ (8003990 <UART_SetConfig+0x27c>)
 800383a:	61bb      	str	r3, [r7, #24]
        break;
 800383c:	e00f      	b.n	800385e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe fdad 	bl	800239c <HAL_RCC_GetSysClockFreq>
 8003842:	0003      	movs	r3, r0
 8003844:	61bb      	str	r3, [r7, #24]
        break;
 8003846:	e00a      	b.n	800385e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	61bb      	str	r3, [r7, #24]
        break;
 800384e:	e006      	b.n	800385e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003854:	231e      	movs	r3, #30
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]
        break;
 800385c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d100      	bne.n	8003866 <UART_SetConfig+0x152>
 8003864:	e07a      	b.n	800395c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	005a      	lsls	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	18d2      	adds	r2, r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	0019      	movs	r1, r3
 8003878:	0010      	movs	r0, r2
 800387a:	f7fc fc4f 	bl	800011c <__udivsi3>
 800387e:	0003      	movs	r3, r0
 8003880:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d91c      	bls.n	80038c2 <UART_SetConfig+0x1ae>
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	025b      	lsls	r3, r3, #9
 800388e:	429a      	cmp	r2, r3
 8003890:	d217      	bcs.n	80038c2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	b29a      	uxth	r2, r3
 8003896:	200e      	movs	r0, #14
 8003898:	183b      	adds	r3, r7, r0
 800389a:	210f      	movs	r1, #15
 800389c:	438a      	bics	r2, r1
 800389e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2207      	movs	r2, #7
 80038a8:	4013      	ands	r3, r2
 80038aa:	b299      	uxth	r1, r3
 80038ac:	183b      	adds	r3, r7, r0
 80038ae:	183a      	adds	r2, r7, r0
 80038b0:	8812      	ldrh	r2, [r2, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	183a      	adds	r2, r7, r0
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	e04c      	b.n	800395c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80038c2:	231e      	movs	r3, #30
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e047      	b.n	800395c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038cc:	231f      	movs	r3, #31
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d015      	beq.n	8003902 <UART_SetConfig+0x1ee>
 80038d6:	dc18      	bgt.n	800390a <UART_SetConfig+0x1f6>
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d00d      	beq.n	80038f8 <UART_SetConfig+0x1e4>
 80038dc:	dc15      	bgt.n	800390a <UART_SetConfig+0x1f6>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <UART_SetConfig+0x1d4>
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d005      	beq.n	80038f2 <UART_SetConfig+0x1de>
 80038e6:	e010      	b.n	800390a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e8:	f7fe fdb8 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 80038ec:	0003      	movs	r3, r0
 80038ee:	61bb      	str	r3, [r7, #24]
        break;
 80038f0:	e012      	b.n	8003918 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f2:	4b27      	ldr	r3, [pc, #156]	@ (8003990 <UART_SetConfig+0x27c>)
 80038f4:	61bb      	str	r3, [r7, #24]
        break;
 80038f6:	e00f      	b.n	8003918 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f8:	f7fe fd50 	bl	800239c <HAL_RCC_GetSysClockFreq>
 80038fc:	0003      	movs	r3, r0
 80038fe:	61bb      	str	r3, [r7, #24]
        break;
 8003900:	e00a      	b.n	8003918 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003902:	2380      	movs	r3, #128	@ 0x80
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	61bb      	str	r3, [r7, #24]
        break;
 8003908:	e006      	b.n	8003918 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800390e:	231e      	movs	r3, #30
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
        break;
 8003916:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d01e      	beq.n	800395c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	085a      	lsrs	r2, r3, #1
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	18d2      	adds	r2, r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	0019      	movs	r1, r3
 800392e:	0010      	movs	r0, r2
 8003930:	f7fc fbf4 	bl	800011c <__udivsi3>
 8003934:	0003      	movs	r3, r0
 8003936:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b0f      	cmp	r3, #15
 800393c:	d90a      	bls.n	8003954 <UART_SetConfig+0x240>
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	2380      	movs	r3, #128	@ 0x80
 8003942:	025b      	lsls	r3, r3, #9
 8003944:	429a      	cmp	r2, r3
 8003946:	d205      	bcs.n	8003954 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	e003      	b.n	800395c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003954:	231e      	movs	r3, #30
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003968:	231e      	movs	r3, #30
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	781b      	ldrb	r3, [r3, #0]
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b008      	add	sp, #32
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	ffff69f3 	.word	0xffff69f3
 800397c:	ffffcfff 	.word	0xffffcfff
 8003980:	fffff4ff 	.word	0xfffff4ff
 8003984:	40013800 	.word	0x40013800
 8003988:	40021000 	.word	0x40021000
 800398c:	40004400 	.word	0x40004400
 8003990:	007a1200 	.word	0x007a1200

08003994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	2208      	movs	r2, #8
 80039a2:	4013      	ands	r3, r2
 80039a4:	d00b      	beq.n	80039be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a4a      	ldr	r2, [pc, #296]	@ (8003ad8 <UART_AdvFeatureConfig+0x144>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	2201      	movs	r2, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a43      	ldr	r2, [pc, #268]	@ (8003adc <UART_AdvFeatureConfig+0x148>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2202      	movs	r2, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ae0 <UART_AdvFeatureConfig+0x14c>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	2204      	movs	r2, #4
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4a34      	ldr	r2, [pc, #208]	@ (8003ae4 <UART_AdvFeatureConfig+0x150>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	2210      	movs	r2, #16
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d00b      	beq.n	8003a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae8 <UART_AdvFeatureConfig+0x154>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	4a25      	ldr	r2, [pc, #148]	@ (8003aec <UART_AdvFeatureConfig+0x158>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	2240      	movs	r2, #64	@ 0x40
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d01d      	beq.n	8003aae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	@ (8003af0 <UART_AdvFeatureConfig+0x15c>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a8e:	2380      	movs	r3, #128	@ 0x80
 8003a90:	035b      	lsls	r3, r3, #13
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d10b      	bne.n	8003aae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	@ (8003af4 <UART_AdvFeatureConfig+0x160>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	2280      	movs	r2, #128	@ 0x80
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4a0e      	ldr	r2, [pc, #56]	@ (8003af8 <UART_AdvFeatureConfig+0x164>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	ffff7fff 	.word	0xffff7fff
 8003adc:	fffdffff 	.word	0xfffdffff
 8003ae0:	fffeffff 	.word	0xfffeffff
 8003ae4:	fffbffff 	.word	0xfffbffff
 8003ae8:	ffffefff 	.word	0xffffefff
 8003aec:	ffffdfff 	.word	0xffffdfff
 8003af0:	ffefffff 	.word	0xffefffff
 8003af4:	ff9fffff 	.word	0xff9fffff
 8003af8:	fff7ffff 	.word	0xfff7ffff

08003afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b092      	sub	sp, #72	@ 0x48
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2284      	movs	r2, #132	@ 0x84
 8003b08:	2100      	movs	r1, #0
 8003b0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b0c:	f7fd fbd2 	bl	80012b4 <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d12c      	bne.n	8003b7c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b24:	2280      	movs	r2, #128	@ 0x80
 8003b26:	0391      	lsls	r1, r2, #14
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4a46      	ldr	r2, [pc, #280]	@ (8003c44 <UART_CheckIdleState+0x148>)
 8003b2c:	9200      	str	r2, [sp, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f000 f88c 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d021      	beq.n	8003b7c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b38:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b42:	2301      	movs	r3, #1
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b48:	f383 8810 	msr	PRIMASK, r3
}
 8003b4c:	46c0      	nop			@ (mov r8, r8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2180      	movs	r1, #128	@ 0x80
 8003b5a:	438a      	bics	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b64:	f383 8810 	msr	PRIMASK, r3
}
 8003b68:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2278      	movs	r2, #120	@ 0x78
 8003b74:	2100      	movs	r1, #0
 8003b76:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e05f      	b.n	8003c3c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2204      	movs	r2, #4
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d146      	bne.n	8003c18 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8c:	2280      	movs	r2, #128	@ 0x80
 8003b8e:	03d1      	lsls	r1, r2, #15
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4a2c      	ldr	r2, [pc, #176]	@ (8003c44 <UART_CheckIdleState+0x148>)
 8003b94:	9200      	str	r2, [sp, #0]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f000 f858 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003b9c:	1e03      	subs	r3, r0, #0
 8003b9e:	d03b      	beq.n	8003c18 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003baa:	2301      	movs	r3, #1
 8003bac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f383 8810 	msr	PRIMASK, r3
}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4921      	ldr	r1, [pc, #132]	@ (8003c48 <UART_CheckIdleState+0x14c>)
 8003bc2:	400a      	ands	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bdc:	2301      	movs	r3, #1
 8003bde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	438a      	bics	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	@ 0x80
 8003c08:	2120      	movs	r1, #32
 8003c0a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2278      	movs	r2, #120	@ 0x78
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e011      	b.n	8003c3c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	2120      	movs	r1, #32
 8003c24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2278      	movs	r2, #120	@ 0x78
 8003c36:	2100      	movs	r1, #0
 8003c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b010      	add	sp, #64	@ 0x40
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	01ffffff 	.word	0x01ffffff
 8003c48:	fffffedf 	.word	0xfffffedf

08003c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5c:	e051      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	3301      	adds	r3, #1
 8003c62:	d04e      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c64:	f7fd fb26 	bl	80012b4 <HAL_GetTick>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d302      	bcc.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e051      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2204      	movs	r2, #4
 8003c86:	4013      	ands	r3, r2
 8003c88:	d03b      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b80      	cmp	r3, #128	@ 0x80
 8003c8e:	d038      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b40      	cmp	r3, #64	@ 0x40
 8003c94:	d035      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d111      	bne.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 f900 	bl	8003eb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2284      	movs	r2, #132	@ 0x84
 8003cb8:	2108      	movs	r1, #8
 8003cba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2278      	movs	r2, #120	@ 0x78
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e02c      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	2380      	movs	r3, #128	@ 0x80
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d112      	bne.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2280      	movs	r2, #128	@ 0x80
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 f8e3 	bl	8003eb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2284      	movs	r2, #132	@ 0x84
 8003cf2:	2120      	movs	r1, #32
 8003cf4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2278      	movs	r2, #120	@ 0x78
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e00f      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	425a      	negs	r2, r3
 8003d12:	4153      	adcs	r3, r2
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	001a      	movs	r2, r3
 8003d18:	1dfb      	adds	r3, r7, #7
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d09e      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b004      	add	sp, #16
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b090      	sub	sp, #64	@ 0x40
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	1dbb      	adds	r3, r7, #6
 8003d38:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1dba      	adds	r2, r7, #6
 8003d44:	2158      	movs	r1, #88	@ 0x58
 8003d46:	8812      	ldrh	r2, [r2, #0]
 8003d48:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2284      	movs	r2, #132	@ 0x84
 8003d4e:	2100      	movs	r1, #0
 8003d50:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2280      	movs	r2, #128	@ 0x80
 8003d56:	2122      	movs	r1, #34	@ 0x22
 8003d58:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d028      	beq.n	8003db4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d66:	4a3e      	ldr	r2, [pc, #248]	@ (8003e60 <UART_Start_Receive_DMA+0x134>)
 8003d68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8003e64 <UART_Start_Receive_DMA+0x138>)
 8003d70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d76:	4a3c      	ldr	r2, [pc, #240]	@ (8003e68 <UART_Start_Receive_DMA+0x13c>)
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7e:	2200      	movs	r2, #0
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3324      	adds	r3, #36	@ 0x24
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d92:	001a      	movs	r2, r3
 8003d94:	1dbb      	adds	r3, r7, #6
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f7fd fbbc 	bl	8001514 <HAL_DMA_Start_IT>
 8003d9c:	1e03      	subs	r3, r0, #0
 8003d9e:	d009      	beq.n	8003db4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2284      	movs	r2, #132	@ 0x84
 8003da4:	2110      	movs	r1, #16
 8003da6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2280      	movs	r2, #128	@ 0x80
 8003dac:	2120      	movs	r1, #32
 8003dae:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e050      	b.n	8003e56 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d019      	beq.n	8003df0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dcc:	f383 8810 	msr	PRIMASK, r3
}
 8003dd0:	46c0      	nop			@ (mov r8, r8)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2180      	movs	r1, #128	@ 0x80
 8003dde:	0049      	lsls	r1, r1, #1
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	f383 8810 	msr	PRIMASK, r3
}
 8003dee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df0:	f3ef 8310 	mrs	r3, PRIMASK
 8003df4:	613b      	str	r3, [r7, #16]
  return(result);
 8003df6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f383 8810 	msr	PRIMASK, r3
}
 8003e04:	46c0      	nop			@ (mov r8, r8)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	430a      	orrs	r2, r1
 8003e14:	609a      	str	r2, [r3, #8]
 8003e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	f383 8810 	msr	PRIMASK, r3
}
 8003e20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e22:	f3ef 8310 	mrs	r3, PRIMASK
 8003e26:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e28:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2140      	movs	r1, #64	@ 0x40
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	f383 8810 	msr	PRIMASK, r3
}
 8003e52:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b010      	add	sp, #64	@ 0x40
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	08003f7d 	.word	0x08003f7d
 8003e64:	080040a9 	.word	0x080040a9
 8003e68:	080040eb 	.word	0x080040eb

08003e6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e74:	f3ef 8310 	mrs	r3, PRIMASK
 8003e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	21c0      	movs	r1, #192	@ 0xc0
 8003e96:	438a      	bics	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003eac:	46c0      	nop			@ (mov r8, r8)
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b006      	add	sp, #24
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08e      	sub	sp, #56	@ 0x38
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ec2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f383 8810 	msr	PRIMASK, r3
}
 8003ed0:	46c0      	nop			@ (mov r8, r8)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4926      	ldr	r1, [pc, #152]	@ (8003f78 <UART_EndRxTransfer+0xc4>)
 8003ede:	400a      	ands	r2, r1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f383 8810 	msr	PRIMASK, r3
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef2:	623b      	str	r3, [r7, #32]
  return(result);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	f383 8810 	msr	PRIMASK, r3
}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	438a      	bics	r2, r1
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	f383 8810 	msr	PRIMASK, r3
}
 8003f1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d118      	bne.n	8003f5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f28:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f32:	2301      	movs	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	46c0      	nop			@ (mov r8, r8)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2110      	movs	r1, #16
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2280      	movs	r2, #128	@ 0x80
 8003f5e:	2120      	movs	r1, #32
 8003f60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f6e:	46c0      	nop			@ (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b00e      	add	sp, #56	@ 0x38
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	fffffedf 	.word	0xfffffedf

08003f7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b094      	sub	sp, #80	@ 0x50
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d06f      	beq.n	8004072 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f94:	225a      	movs	r2, #90	@ 0x5a
 8003f96:	2100      	movs	r1, #0
 8003f98:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fa0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f383 8810 	msr	PRIMASK, r3
}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	493a      	ldr	r1, [pc, #232]	@ (80040a4 <UART_DMAReceiveCplt+0x128>)
 8003fbc:	400a      	ands	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	f383 8810 	msr	PRIMASK, r3
}
 8003fca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			@ (mov r8, r8)
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	438a      	bics	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004006:	643b      	str	r3, [r7, #64]	@ 0x40
 8004008:	2301      	movs	r3, #1
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400e:	f383 8810 	msr	PRIMASK, r3
}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2140      	movs	r1, #64	@ 0x40
 8004020:	438a      	bics	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004026:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402a:	f383 8810 	msr	PRIMASK, r3
}
 800402e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004032:	2280      	movs	r2, #128	@ 0x80
 8004034:	2120      	movs	r1, #32
 8004036:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403c:	2b01      	cmp	r3, #1
 800403e:	d118      	bne.n	8004072 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004040:	f3ef 8310 	mrs	r3, PRIMASK
 8004044:	60fb      	str	r3, [r7, #12]
  return(result);
 8004046:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404a:	2301      	movs	r3, #1
 800404c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2110      	movs	r1, #16
 8004062:	438a      	bics	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004074:	2200      	movs	r2, #0
 8004076:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800407a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800407c:	2b01      	cmp	r3, #1
 800407e:	d108      	bne.n	8004092 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004082:	2258      	movs	r2, #88	@ 0x58
 8004084:	5a9a      	ldrh	r2, [r3, r2]
 8004086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004088:	0011      	movs	r1, r2
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff fb36 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004090:	e003      	b.n	800409a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004094:	0018      	movs	r0, r3
 8004096:	f7fc fc67 	bl	8000968 <HAL_UART_RxCpltCallback>
}
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	46bd      	mov	sp, r7
 800409e:	b014      	add	sp, #80	@ 0x50
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			@ (mov r8, r8)
 80040a4:	fffffeff 	.word	0xfffffeff

080040a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10a      	bne.n	80040da <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2258      	movs	r2, #88	@ 0x58
 80040c8:	5a9b      	ldrh	r3, [r3, r2]
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7ff fb12 	bl	80036fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040d8:	e003      	b.n	80040e2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7ff fafd 	bl	80036dc <HAL_UART_RxHalfCpltCallback>
}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b004      	add	sp, #16
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2280      	movs	r2, #128	@ 0x80
 8004102:	589b      	ldr	r3, [r3, r2]
 8004104:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2280      	movs	r2, #128	@ 0x80
 800410e:	4013      	ands	r3, r2
 8004110:	2b80      	cmp	r3, #128	@ 0x80
 8004112:	d10a      	bne.n	800412a <UART_DMAError+0x40>
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b21      	cmp	r3, #33	@ 0x21
 8004118:	d107      	bne.n	800412a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2252      	movs	r2, #82	@ 0x52
 800411e:	2100      	movs	r1, #0
 8004120:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	0018      	movs	r0, r3
 8004126:	f7ff fea1 	bl	8003e6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2240      	movs	r2, #64	@ 0x40
 8004132:	4013      	ands	r3, r2
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	d10a      	bne.n	800414e <UART_DMAError+0x64>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b22      	cmp	r3, #34	@ 0x22
 800413c:	d107      	bne.n	800414e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	225a      	movs	r2, #90	@ 0x5a
 8004142:	2100      	movs	r1, #0
 8004144:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	0018      	movs	r0, r3
 800414a:	f7ff feb3 	bl	8003eb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2284      	movs	r2, #132	@ 0x84
 8004152:	589b      	ldr	r3, [r3, r2]
 8004154:	2210      	movs	r2, #16
 8004156:	431a      	orrs	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2184      	movs	r1, #132	@ 0x84
 800415c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff fac3 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b006      	add	sp, #24
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	225a      	movs	r2, #90	@ 0x5a
 8004180:	2100      	movs	r1, #0
 8004182:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2252      	movs	r2, #82	@ 0x52
 8004188:	2100      	movs	r1, #0
 800418a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	0018      	movs	r0, r3
 8004190:	f7ff faac 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004194:	46c0      	nop			@ (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b004      	add	sp, #16
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a4:	f3ef 8310 	mrs	r3, PRIMASK
 80041a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80041aa:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	2301      	movs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f383 8810 	msr	PRIMASK, r3
}
 80041b8:	46c0      	nop			@ (mov r8, r8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2140      	movs	r1, #64	@ 0x40
 80041c6:	438a      	bics	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7ff fa71 	bl	80036cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b006      	add	sp, #24
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b002      	add	sp, #8
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <rand>:
 8004204:	4b16      	ldr	r3, [pc, #88]	@ (8004260 <rand+0x5c>)
 8004206:	b510      	push	{r4, lr}
 8004208:	681c      	ldr	r4, [r3, #0]
 800420a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <rand+0x3a>
 8004210:	2018      	movs	r0, #24
 8004212:	f000 fa31 	bl	8004678 <malloc>
 8004216:	1e02      	subs	r2, r0, #0
 8004218:	6320      	str	r0, [r4, #48]	@ 0x30
 800421a:	d104      	bne.n	8004226 <rand+0x22>
 800421c:	2152      	movs	r1, #82	@ 0x52
 800421e:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <rand+0x60>)
 8004220:	4811      	ldr	r0, [pc, #68]	@ (8004268 <rand+0x64>)
 8004222:	f000 f9c1 	bl	80045a8 <__assert_func>
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <rand+0x68>)
 8004228:	2100      	movs	r1, #0
 800422a:	6003      	str	r3, [r0, #0]
 800422c:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <rand+0x6c>)
 800422e:	6043      	str	r3, [r0, #4]
 8004230:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <rand+0x70>)
 8004232:	6083      	str	r3, [r0, #8]
 8004234:	230b      	movs	r3, #11
 8004236:	8183      	strh	r3, [r0, #12]
 8004238:	2001      	movs	r0, #1
 800423a:	6110      	str	r0, [r2, #16]
 800423c:	6151      	str	r1, [r2, #20]
 800423e:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8004240:	4a0d      	ldr	r2, [pc, #52]	@ (8004278 <rand+0x74>)
 8004242:	6920      	ldr	r0, [r4, #16]
 8004244:	6961      	ldr	r1, [r4, #20]
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <rand+0x78>)
 8004248:	f7fc f8de 	bl	8000408 <__aeabi_lmul>
 800424c:	2201      	movs	r2, #1
 800424e:	2300      	movs	r3, #0
 8004250:	1880      	adds	r0, r0, r2
 8004252:	4159      	adcs	r1, r3
 8004254:	6120      	str	r0, [r4, #16]
 8004256:	6161      	str	r1, [r4, #20]
 8004258:	0048      	lsls	r0, r1, #1
 800425a:	0840      	lsrs	r0, r0, #1
 800425c:	bd10      	pop	{r4, pc}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	2000001c 	.word	0x2000001c
 8004264:	08005284 	.word	0x08005284
 8004268:	0800529b 	.word	0x0800529b
 800426c:	abcd330e 	.word	0xabcd330e
 8004270:	e66d1234 	.word	0xe66d1234
 8004274:	0005deec 	.word	0x0005deec
 8004278:	4c957f2d 	.word	0x4c957f2d
 800427c:	5851f42d 	.word	0x5851f42d

08004280 <std>:
 8004280:	2300      	movs	r3, #0
 8004282:	b510      	push	{r4, lr}
 8004284:	0004      	movs	r4, r0
 8004286:	6003      	str	r3, [r0, #0]
 8004288:	6043      	str	r3, [r0, #4]
 800428a:	6083      	str	r3, [r0, #8]
 800428c:	8181      	strh	r1, [r0, #12]
 800428e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004290:	81c2      	strh	r2, [r0, #14]
 8004292:	6103      	str	r3, [r0, #16]
 8004294:	6143      	str	r3, [r0, #20]
 8004296:	6183      	str	r3, [r0, #24]
 8004298:	0019      	movs	r1, r3
 800429a:	2208      	movs	r2, #8
 800429c:	305c      	adds	r0, #92	@ 0x5c
 800429e:	f000 f8ff 	bl	80044a0 <memset>
 80042a2:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <std+0x50>)
 80042a4:	6224      	str	r4, [r4, #32]
 80042a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80042a8:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <std+0x54>)
 80042aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ac:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <std+0x58>)
 80042ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042b0:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <std+0x5c>)
 80042b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80042b4:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <std+0x60>)
 80042b6:	429c      	cmp	r4, r3
 80042b8:	d005      	beq.n	80042c6 <std+0x46>
 80042ba:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <std+0x64>)
 80042bc:	429c      	cmp	r4, r3
 80042be:	d002      	beq.n	80042c6 <std+0x46>
 80042c0:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <std+0x68>)
 80042c2:	429c      	cmp	r4, r3
 80042c4:	d103      	bne.n	80042ce <std+0x4e>
 80042c6:	0020      	movs	r0, r4
 80042c8:	3058      	adds	r0, #88	@ 0x58
 80042ca:	f000 f969 	bl	80045a0 <__retarget_lock_init_recursive>
 80042ce:	bd10      	pop	{r4, pc}
 80042d0:	08004409 	.word	0x08004409
 80042d4:	08004431 	.word	0x08004431
 80042d8:	08004469 	.word	0x08004469
 80042dc:	08004495 	.word	0x08004495
 80042e0:	200003bc 	.word	0x200003bc
 80042e4:	20000424 	.word	0x20000424
 80042e8:	2000048c 	.word	0x2000048c

080042ec <stdio_exit_handler>:
 80042ec:	b510      	push	{r4, lr}
 80042ee:	4a03      	ldr	r2, [pc, #12]	@ (80042fc <stdio_exit_handler+0x10>)
 80042f0:	4903      	ldr	r1, [pc, #12]	@ (8004300 <stdio_exit_handler+0x14>)
 80042f2:	4804      	ldr	r0, [pc, #16]	@ (8004304 <stdio_exit_handler+0x18>)
 80042f4:	f000 f86c 	bl	80043d0 <_fwalk_sglue>
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	20000010 	.word	0x20000010
 8004300:	080048fd 	.word	0x080048fd
 8004304:	20000020 	.word	0x20000020

08004308 <cleanup_stdio>:
 8004308:	6841      	ldr	r1, [r0, #4]
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <cleanup_stdio+0x30>)
 800430c:	b510      	push	{r4, lr}
 800430e:	0004      	movs	r4, r0
 8004310:	4299      	cmp	r1, r3
 8004312:	d001      	beq.n	8004318 <cleanup_stdio+0x10>
 8004314:	f000 faf2 	bl	80048fc <_fflush_r>
 8004318:	68a1      	ldr	r1, [r4, #8]
 800431a:	4b08      	ldr	r3, [pc, #32]	@ (800433c <cleanup_stdio+0x34>)
 800431c:	4299      	cmp	r1, r3
 800431e:	d002      	beq.n	8004326 <cleanup_stdio+0x1e>
 8004320:	0020      	movs	r0, r4
 8004322:	f000 faeb 	bl	80048fc <_fflush_r>
 8004326:	68e1      	ldr	r1, [r4, #12]
 8004328:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <cleanup_stdio+0x38>)
 800432a:	4299      	cmp	r1, r3
 800432c:	d002      	beq.n	8004334 <cleanup_stdio+0x2c>
 800432e:	0020      	movs	r0, r4
 8004330:	f000 fae4 	bl	80048fc <_fflush_r>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	200003bc 	.word	0x200003bc
 800433c:	20000424 	.word	0x20000424
 8004340:	2000048c 	.word	0x2000048c

08004344 <global_stdio_init.part.0>:
 8004344:	b510      	push	{r4, lr}
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <global_stdio_init.part.0+0x28>)
 8004348:	4a09      	ldr	r2, [pc, #36]	@ (8004370 <global_stdio_init.part.0+0x2c>)
 800434a:	2104      	movs	r1, #4
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	4809      	ldr	r0, [pc, #36]	@ (8004374 <global_stdio_init.part.0+0x30>)
 8004350:	2200      	movs	r2, #0
 8004352:	f7ff ff95 	bl	8004280 <std>
 8004356:	2201      	movs	r2, #1
 8004358:	2109      	movs	r1, #9
 800435a:	4807      	ldr	r0, [pc, #28]	@ (8004378 <global_stdio_init.part.0+0x34>)
 800435c:	f7ff ff90 	bl	8004280 <std>
 8004360:	2202      	movs	r2, #2
 8004362:	2112      	movs	r1, #18
 8004364:	4805      	ldr	r0, [pc, #20]	@ (800437c <global_stdio_init.part.0+0x38>)
 8004366:	f7ff ff8b 	bl	8004280 <std>
 800436a:	bd10      	pop	{r4, pc}
 800436c:	200004f4 	.word	0x200004f4
 8004370:	080042ed 	.word	0x080042ed
 8004374:	200003bc 	.word	0x200003bc
 8004378:	20000424 	.word	0x20000424
 800437c:	2000048c 	.word	0x2000048c

08004380 <__sfp_lock_acquire>:
 8004380:	b510      	push	{r4, lr}
 8004382:	4802      	ldr	r0, [pc, #8]	@ (800438c <__sfp_lock_acquire+0xc>)
 8004384:	f000 f90d 	bl	80045a2 <__retarget_lock_acquire_recursive>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	200004fd 	.word	0x200004fd

08004390 <__sfp_lock_release>:
 8004390:	b510      	push	{r4, lr}
 8004392:	4802      	ldr	r0, [pc, #8]	@ (800439c <__sfp_lock_release+0xc>)
 8004394:	f000 f906 	bl	80045a4 <__retarget_lock_release_recursive>
 8004398:	bd10      	pop	{r4, pc}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	200004fd 	.word	0x200004fd

080043a0 <__sinit>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	0004      	movs	r4, r0
 80043a4:	f7ff ffec 	bl	8004380 <__sfp_lock_acquire>
 80043a8:	6a23      	ldr	r3, [r4, #32]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <__sinit+0x14>
 80043ae:	f7ff ffef 	bl	8004390 <__sfp_lock_release>
 80043b2:	bd10      	pop	{r4, pc}
 80043b4:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <__sinit+0x28>)
 80043b6:	6223      	str	r3, [r4, #32]
 80043b8:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <__sinit+0x2c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f6      	bne.n	80043ae <__sinit+0xe>
 80043c0:	f7ff ffc0 	bl	8004344 <global_stdio_init.part.0>
 80043c4:	e7f3      	b.n	80043ae <__sinit+0xe>
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	08004309 	.word	0x08004309
 80043cc:	200004f4 	.word	0x200004f4

080043d0 <_fwalk_sglue>:
 80043d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043d2:	0014      	movs	r4, r2
 80043d4:	2600      	movs	r6, #0
 80043d6:	9000      	str	r0, [sp, #0]
 80043d8:	9101      	str	r1, [sp, #4]
 80043da:	68a5      	ldr	r5, [r4, #8]
 80043dc:	6867      	ldr	r7, [r4, #4]
 80043de:	3f01      	subs	r7, #1
 80043e0:	d504      	bpl.n	80043ec <_fwalk_sglue+0x1c>
 80043e2:	6824      	ldr	r4, [r4, #0]
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	d1f8      	bne.n	80043da <_fwalk_sglue+0xa>
 80043e8:	0030      	movs	r0, r6
 80043ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043ec:	89ab      	ldrh	r3, [r5, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d908      	bls.n	8004404 <_fwalk_sglue+0x34>
 80043f2:	220e      	movs	r2, #14
 80043f4:	5eab      	ldrsh	r3, [r5, r2]
 80043f6:	3301      	adds	r3, #1
 80043f8:	d004      	beq.n	8004404 <_fwalk_sglue+0x34>
 80043fa:	0029      	movs	r1, r5
 80043fc:	9800      	ldr	r0, [sp, #0]
 80043fe:	9b01      	ldr	r3, [sp, #4]
 8004400:	4798      	blx	r3
 8004402:	4306      	orrs	r6, r0
 8004404:	3568      	adds	r5, #104	@ 0x68
 8004406:	e7ea      	b.n	80043de <_fwalk_sglue+0xe>

08004408 <__sread>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	000c      	movs	r4, r1
 800440c:	250e      	movs	r5, #14
 800440e:	5f49      	ldrsh	r1, [r1, r5]
 8004410:	f000 f874 	bl	80044fc <_read_r>
 8004414:	2800      	cmp	r0, #0
 8004416:	db03      	blt.n	8004420 <__sread+0x18>
 8004418:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800441a:	181b      	adds	r3, r3, r0
 800441c:	6563      	str	r3, [r4, #84]	@ 0x54
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	4a02      	ldr	r2, [pc, #8]	@ (800442c <__sread+0x24>)
 8004424:	4013      	ands	r3, r2
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	e7f9      	b.n	800441e <__sread+0x16>
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	ffffefff 	.word	0xffffefff

08004430 <__swrite>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	001f      	movs	r7, r3
 8004434:	898b      	ldrh	r3, [r1, #12]
 8004436:	0005      	movs	r5, r0
 8004438:	000c      	movs	r4, r1
 800443a:	0016      	movs	r6, r2
 800443c:	05db      	lsls	r3, r3, #23
 800443e:	d505      	bpl.n	800444c <__swrite+0x1c>
 8004440:	230e      	movs	r3, #14
 8004442:	5ec9      	ldrsh	r1, [r1, r3]
 8004444:	2200      	movs	r2, #0
 8004446:	2302      	movs	r3, #2
 8004448:	f000 f844 	bl	80044d4 <_lseek_r>
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	4a05      	ldr	r2, [pc, #20]	@ (8004464 <__swrite+0x34>)
 8004450:	0028      	movs	r0, r5
 8004452:	4013      	ands	r3, r2
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	0032      	movs	r2, r6
 8004458:	230e      	movs	r3, #14
 800445a:	5ee1      	ldrsh	r1, [r4, r3]
 800445c:	003b      	movs	r3, r7
 800445e:	f000 f861 	bl	8004524 <_write_r>
 8004462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004464:	ffffefff 	.word	0xffffefff

08004468 <__sseek>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	000c      	movs	r4, r1
 800446c:	250e      	movs	r5, #14
 800446e:	5f49      	ldrsh	r1, [r1, r5]
 8004470:	f000 f830 	bl	80044d4 <_lseek_r>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	1c42      	adds	r2, r0, #1
 8004478:	d103      	bne.n	8004482 <__sseek+0x1a>
 800447a:	4a05      	ldr	r2, [pc, #20]	@ (8004490 <__sseek+0x28>)
 800447c:	4013      	ands	r3, r2
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	bd70      	pop	{r4, r5, r6, pc}
 8004482:	2280      	movs	r2, #128	@ 0x80
 8004484:	0152      	lsls	r2, r2, #5
 8004486:	4313      	orrs	r3, r2
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	6560      	str	r0, [r4, #84]	@ 0x54
 800448c:	e7f8      	b.n	8004480 <__sseek+0x18>
 800448e:	46c0      	nop			@ (mov r8, r8)
 8004490:	ffffefff 	.word	0xffffefff

08004494 <__sclose>:
 8004494:	b510      	push	{r4, lr}
 8004496:	230e      	movs	r3, #14
 8004498:	5ec9      	ldrsh	r1, [r1, r3]
 800449a:	f000 f809 	bl	80044b0 <_close_r>
 800449e:	bd10      	pop	{r4, pc}

080044a0 <memset>:
 80044a0:	0003      	movs	r3, r0
 80044a2:	1882      	adds	r2, r0, r2
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d100      	bne.n	80044aa <memset+0xa>
 80044a8:	4770      	bx	lr
 80044aa:	7019      	strb	r1, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	e7f9      	b.n	80044a4 <memset+0x4>

080044b0 <_close_r>:
 80044b0:	2300      	movs	r3, #0
 80044b2:	b570      	push	{r4, r5, r6, lr}
 80044b4:	4d06      	ldr	r5, [pc, #24]	@ (80044d0 <_close_r+0x20>)
 80044b6:	0004      	movs	r4, r0
 80044b8:	0008      	movs	r0, r1
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	f7fc fe0e 	bl	80010dc <_close>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d103      	bne.n	80044cc <_close_r+0x1c>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d000      	beq.n	80044cc <_close_r+0x1c>
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
 80044ce:	46c0      	nop			@ (mov r8, r8)
 80044d0:	200004f8 	.word	0x200004f8

080044d4 <_lseek_r>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	0004      	movs	r4, r0
 80044d8:	0008      	movs	r0, r1
 80044da:	0011      	movs	r1, r2
 80044dc:	001a      	movs	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	4d05      	ldr	r5, [pc, #20]	@ (80044f8 <_lseek_r+0x24>)
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	f7fc fe1b 	bl	800111e <_lseek>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d103      	bne.n	80044f4 <_lseek_r+0x20>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d000      	beq.n	80044f4 <_lseek_r+0x20>
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	200004f8 	.word	0x200004f8

080044fc <_read_r>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	0004      	movs	r4, r0
 8004500:	0008      	movs	r0, r1
 8004502:	0011      	movs	r1, r2
 8004504:	001a      	movs	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	4d05      	ldr	r5, [pc, #20]	@ (8004520 <_read_r+0x24>)
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	f7fc fdad 	bl	800106a <_read>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d103      	bne.n	800451c <_read_r+0x20>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d000      	beq.n	800451c <_read_r+0x20>
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	bd70      	pop	{r4, r5, r6, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	200004f8 	.word	0x200004f8

08004524 <_write_r>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	0004      	movs	r4, r0
 8004528:	0008      	movs	r0, r1
 800452a:	0011      	movs	r1, r2
 800452c:	001a      	movs	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	4d05      	ldr	r5, [pc, #20]	@ (8004548 <_write_r+0x24>)
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	f7fc fdb6 	bl	80010a4 <_write>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d103      	bne.n	8004544 <_write_r+0x20>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d000      	beq.n	8004544 <_write_r+0x20>
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	200004f8 	.word	0x200004f8

0800454c <__errno>:
 800454c:	4b01      	ldr	r3, [pc, #4]	@ (8004554 <__errno+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	2000001c 	.word	0x2000001c

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	2600      	movs	r6, #0
 800455c:	4c0c      	ldr	r4, [pc, #48]	@ (8004590 <__libc_init_array+0x38>)
 800455e:	4d0d      	ldr	r5, [pc, #52]	@ (8004594 <__libc_init_array+0x3c>)
 8004560:	1b64      	subs	r4, r4, r5
 8004562:	10a4      	asrs	r4, r4, #2
 8004564:	42a6      	cmp	r6, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	2600      	movs	r6, #0
 800456a:	f000 fe63 	bl	8005234 <_init>
 800456e:	4c0a      	ldr	r4, [pc, #40]	@ (8004598 <__libc_init_array+0x40>)
 8004570:	4d0a      	ldr	r5, [pc, #40]	@ (800459c <__libc_init_array+0x44>)
 8004572:	1b64      	subs	r4, r4, r5
 8004574:	10a4      	asrs	r4, r4, #2
 8004576:	42a6      	cmp	r6, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	00b3      	lsls	r3, r6, #2
 800457e:	58eb      	ldr	r3, [r5, r3]
 8004580:	4798      	blx	r3
 8004582:	3601      	adds	r6, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	00b3      	lsls	r3, r6, #2
 8004588:	58eb      	ldr	r3, [r5, r3]
 800458a:	4798      	blx	r3
 800458c:	3601      	adds	r6, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	08005364 	.word	0x08005364
 8004594:	08005364 	.word	0x08005364
 8004598:	08005368 	.word	0x08005368
 800459c:	08005364 	.word	0x08005364

080045a0 <__retarget_lock_init_recursive>:
 80045a0:	4770      	bx	lr

080045a2 <__retarget_lock_acquire_recursive>:
 80045a2:	4770      	bx	lr

080045a4 <__retarget_lock_release_recursive>:
 80045a4:	4770      	bx	lr
	...

080045a8 <__assert_func>:
 80045a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80045aa:	0014      	movs	r4, r2
 80045ac:	001a      	movs	r2, r3
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <__assert_func+0x2c>)
 80045b0:	0005      	movs	r5, r0
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	000e      	movs	r6, r1
 80045b6:	68d8      	ldr	r0, [r3, #12]
 80045b8:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <__assert_func+0x30>)
 80045ba:	2c00      	cmp	r4, #0
 80045bc:	d101      	bne.n	80045c2 <__assert_func+0x1a>
 80045be:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <__assert_func+0x34>)
 80045c0:	001c      	movs	r4, r3
 80045c2:	4907      	ldr	r1, [pc, #28]	@ (80045e0 <__assert_func+0x38>)
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	9402      	str	r4, [sp, #8]
 80045c8:	002b      	movs	r3, r5
 80045ca:	9600      	str	r6, [sp, #0]
 80045cc:	f000 f9c2 	bl	8004954 <fiprintf>
 80045d0:	f000 f9e2 	bl	8004998 <abort>
 80045d4:	2000001c 	.word	0x2000001c
 80045d8:	080052f3 	.word	0x080052f3
 80045dc:	0800532e 	.word	0x0800532e
 80045e0:	08005300 	.word	0x08005300

080045e4 <_free_r>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	0005      	movs	r5, r0
 80045e8:	1e0c      	subs	r4, r1, #0
 80045ea:	d010      	beq.n	800460e <_free_r+0x2a>
 80045ec:	3c04      	subs	r4, #4
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	da00      	bge.n	80045f6 <_free_r+0x12>
 80045f4:	18e4      	adds	r4, r4, r3
 80045f6:	0028      	movs	r0, r5
 80045f8:	f000 f8ea 	bl	80047d0 <__malloc_lock>
 80045fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <_free_r+0x90>)
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <_free_r+0x2c>
 8004604:	6063      	str	r3, [r4, #4]
 8004606:	6014      	str	r4, [r2, #0]
 8004608:	0028      	movs	r0, r5
 800460a:	f000 f8e9 	bl	80047e0 <__malloc_unlock>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	42a3      	cmp	r3, r4
 8004612:	d908      	bls.n	8004626 <_free_r+0x42>
 8004614:	6820      	ldr	r0, [r4, #0]
 8004616:	1821      	adds	r1, r4, r0
 8004618:	428b      	cmp	r3, r1
 800461a:	d1f3      	bne.n	8004604 <_free_r+0x20>
 800461c:	6819      	ldr	r1, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	1809      	adds	r1, r1, r0
 8004622:	6021      	str	r1, [r4, #0]
 8004624:	e7ee      	b.n	8004604 <_free_r+0x20>
 8004626:	001a      	movs	r2, r3
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <_free_r+0x4e>
 800462e:	42a3      	cmp	r3, r4
 8004630:	d9f9      	bls.n	8004626 <_free_r+0x42>
 8004632:	6811      	ldr	r1, [r2, #0]
 8004634:	1850      	adds	r0, r2, r1
 8004636:	42a0      	cmp	r0, r4
 8004638:	d10b      	bne.n	8004652 <_free_r+0x6e>
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	1809      	adds	r1, r1, r0
 800463e:	1850      	adds	r0, r2, r1
 8004640:	6011      	str	r1, [r2, #0]
 8004642:	4283      	cmp	r3, r0
 8004644:	d1e0      	bne.n	8004608 <_free_r+0x24>
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	1841      	adds	r1, r0, r1
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	6053      	str	r3, [r2, #4]
 8004650:	e7da      	b.n	8004608 <_free_r+0x24>
 8004652:	42a0      	cmp	r0, r4
 8004654:	d902      	bls.n	800465c <_free_r+0x78>
 8004656:	230c      	movs	r3, #12
 8004658:	602b      	str	r3, [r5, #0]
 800465a:	e7d5      	b.n	8004608 <_free_r+0x24>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	1821      	adds	r1, r4, r0
 8004660:	428b      	cmp	r3, r1
 8004662:	d103      	bne.n	800466c <_free_r+0x88>
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	1809      	adds	r1, r1, r0
 800466a:	6021      	str	r1, [r4, #0]
 800466c:	6063      	str	r3, [r4, #4]
 800466e:	6054      	str	r4, [r2, #4]
 8004670:	e7ca      	b.n	8004608 <_free_r+0x24>
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	20000504 	.word	0x20000504

08004678 <malloc>:
 8004678:	b510      	push	{r4, lr}
 800467a:	4b03      	ldr	r3, [pc, #12]	@ (8004688 <malloc+0x10>)
 800467c:	0001      	movs	r1, r0
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	f000 f826 	bl	80046d0 <_malloc_r>
 8004684:	bd10      	pop	{r4, pc}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	2000001c 	.word	0x2000001c

0800468c <sbrk_aligned>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4e0f      	ldr	r6, [pc, #60]	@ (80046cc <sbrk_aligned+0x40>)
 8004690:	000d      	movs	r5, r1
 8004692:	6831      	ldr	r1, [r6, #0]
 8004694:	0004      	movs	r4, r0
 8004696:	2900      	cmp	r1, #0
 8004698:	d102      	bne.n	80046a0 <sbrk_aligned+0x14>
 800469a:	f000 f96b 	bl	8004974 <_sbrk_r>
 800469e:	6030      	str	r0, [r6, #0]
 80046a0:	0029      	movs	r1, r5
 80046a2:	0020      	movs	r0, r4
 80046a4:	f000 f966 	bl	8004974 <_sbrk_r>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d103      	bne.n	80046b4 <sbrk_aligned+0x28>
 80046ac:	2501      	movs	r5, #1
 80046ae:	426d      	negs	r5, r5
 80046b0:	0028      	movs	r0, r5
 80046b2:	bd70      	pop	{r4, r5, r6, pc}
 80046b4:	2303      	movs	r3, #3
 80046b6:	1cc5      	adds	r5, r0, #3
 80046b8:	439d      	bics	r5, r3
 80046ba:	42a8      	cmp	r0, r5
 80046bc:	d0f8      	beq.n	80046b0 <sbrk_aligned+0x24>
 80046be:	1a29      	subs	r1, r5, r0
 80046c0:	0020      	movs	r0, r4
 80046c2:	f000 f957 	bl	8004974 <_sbrk_r>
 80046c6:	3001      	adds	r0, #1
 80046c8:	d1f2      	bne.n	80046b0 <sbrk_aligned+0x24>
 80046ca:	e7ef      	b.n	80046ac <sbrk_aligned+0x20>
 80046cc:	20000500 	.word	0x20000500

080046d0 <_malloc_r>:
 80046d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d2:	2203      	movs	r2, #3
 80046d4:	1ccb      	adds	r3, r1, #3
 80046d6:	4393      	bics	r3, r2
 80046d8:	3308      	adds	r3, #8
 80046da:	0005      	movs	r5, r0
 80046dc:	001f      	movs	r7, r3
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d234      	bcs.n	800474c <_malloc_r+0x7c>
 80046e2:	270c      	movs	r7, #12
 80046e4:	42b9      	cmp	r1, r7
 80046e6:	d833      	bhi.n	8004750 <_malloc_r+0x80>
 80046e8:	0028      	movs	r0, r5
 80046ea:	f000 f871 	bl	80047d0 <__malloc_lock>
 80046ee:	4e37      	ldr	r6, [pc, #220]	@ (80047cc <_malloc_r+0xfc>)
 80046f0:	6833      	ldr	r3, [r6, #0]
 80046f2:	001c      	movs	r4, r3
 80046f4:	2c00      	cmp	r4, #0
 80046f6:	d12f      	bne.n	8004758 <_malloc_r+0x88>
 80046f8:	0039      	movs	r1, r7
 80046fa:	0028      	movs	r0, r5
 80046fc:	f7ff ffc6 	bl	800468c <sbrk_aligned>
 8004700:	0004      	movs	r4, r0
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	d15f      	bne.n	80047c6 <_malloc_r+0xf6>
 8004706:	6834      	ldr	r4, [r6, #0]
 8004708:	9400      	str	r4, [sp, #0]
 800470a:	9b00      	ldr	r3, [sp, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d14a      	bne.n	80047a6 <_malloc_r+0xd6>
 8004710:	2c00      	cmp	r4, #0
 8004712:	d052      	beq.n	80047ba <_malloc_r+0xea>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	0028      	movs	r0, r5
 8004718:	18e3      	adds	r3, r4, r3
 800471a:	9900      	ldr	r1, [sp, #0]
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	f000 f929 	bl	8004974 <_sbrk_r>
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	4283      	cmp	r3, r0
 8004726:	d148      	bne.n	80047ba <_malloc_r+0xea>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	0028      	movs	r0, r5
 800472c:	1aff      	subs	r7, r7, r3
 800472e:	0039      	movs	r1, r7
 8004730:	f7ff ffac 	bl	800468c <sbrk_aligned>
 8004734:	3001      	adds	r0, #1
 8004736:	d040      	beq.n	80047ba <_malloc_r+0xea>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	19db      	adds	r3, r3, r7
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	6833      	ldr	r3, [r6, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	2a00      	cmp	r2, #0
 8004744:	d133      	bne.n	80047ae <_malloc_r+0xde>
 8004746:	9b00      	ldr	r3, [sp, #0]
 8004748:	6033      	str	r3, [r6, #0]
 800474a:	e019      	b.n	8004780 <_malloc_r+0xb0>
 800474c:	2b00      	cmp	r3, #0
 800474e:	dac9      	bge.n	80046e4 <_malloc_r+0x14>
 8004750:	230c      	movs	r3, #12
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	2000      	movs	r0, #0
 8004756:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004758:	6821      	ldr	r1, [r4, #0]
 800475a:	1bc9      	subs	r1, r1, r7
 800475c:	d420      	bmi.n	80047a0 <_malloc_r+0xd0>
 800475e:	290b      	cmp	r1, #11
 8004760:	d90a      	bls.n	8004778 <_malloc_r+0xa8>
 8004762:	19e2      	adds	r2, r4, r7
 8004764:	6027      	str	r7, [r4, #0]
 8004766:	42a3      	cmp	r3, r4
 8004768:	d104      	bne.n	8004774 <_malloc_r+0xa4>
 800476a:	6032      	str	r2, [r6, #0]
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	6011      	str	r1, [r2, #0]
 8004770:	6053      	str	r3, [r2, #4]
 8004772:	e005      	b.n	8004780 <_malloc_r+0xb0>
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	e7f9      	b.n	800476c <_malloc_r+0x9c>
 8004778:	6862      	ldr	r2, [r4, #4]
 800477a:	42a3      	cmp	r3, r4
 800477c:	d10e      	bne.n	800479c <_malloc_r+0xcc>
 800477e:	6032      	str	r2, [r6, #0]
 8004780:	0028      	movs	r0, r5
 8004782:	f000 f82d 	bl	80047e0 <__malloc_unlock>
 8004786:	0020      	movs	r0, r4
 8004788:	2207      	movs	r2, #7
 800478a:	300b      	adds	r0, #11
 800478c:	1d23      	adds	r3, r4, #4
 800478e:	4390      	bics	r0, r2
 8004790:	1ac2      	subs	r2, r0, r3
 8004792:	4298      	cmp	r0, r3
 8004794:	d0df      	beq.n	8004756 <_malloc_r+0x86>
 8004796:	1a1b      	subs	r3, r3, r0
 8004798:	50a3      	str	r3, [r4, r2]
 800479a:	e7dc      	b.n	8004756 <_malloc_r+0x86>
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	e7ef      	b.n	8004780 <_malloc_r+0xb0>
 80047a0:	0023      	movs	r3, r4
 80047a2:	6864      	ldr	r4, [r4, #4]
 80047a4:	e7a6      	b.n	80046f4 <_malloc_r+0x24>
 80047a6:	9c00      	ldr	r4, [sp, #0]
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	e7ad      	b.n	800470a <_malloc_r+0x3a>
 80047ae:	001a      	movs	r2, r3
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	42a3      	cmp	r3, r4
 80047b4:	d1fb      	bne.n	80047ae <_malloc_r+0xde>
 80047b6:	2300      	movs	r3, #0
 80047b8:	e7da      	b.n	8004770 <_malloc_r+0xa0>
 80047ba:	230c      	movs	r3, #12
 80047bc:	0028      	movs	r0, r5
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	f000 f80e 	bl	80047e0 <__malloc_unlock>
 80047c4:	e7c6      	b.n	8004754 <_malloc_r+0x84>
 80047c6:	6007      	str	r7, [r0, #0]
 80047c8:	e7da      	b.n	8004780 <_malloc_r+0xb0>
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	20000504 	.word	0x20000504

080047d0 <__malloc_lock>:
 80047d0:	b510      	push	{r4, lr}
 80047d2:	4802      	ldr	r0, [pc, #8]	@ (80047dc <__malloc_lock+0xc>)
 80047d4:	f7ff fee5 	bl	80045a2 <__retarget_lock_acquire_recursive>
 80047d8:	bd10      	pop	{r4, pc}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	200004fc 	.word	0x200004fc

080047e0 <__malloc_unlock>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4802      	ldr	r0, [pc, #8]	@ (80047ec <__malloc_unlock+0xc>)
 80047e4:	f7ff fede 	bl	80045a4 <__retarget_lock_release_recursive>
 80047e8:	bd10      	pop	{r4, pc}
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	200004fc 	.word	0x200004fc

080047f0 <__sflush_r>:
 80047f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f2:	220c      	movs	r2, #12
 80047f4:	5e8b      	ldrsh	r3, [r1, r2]
 80047f6:	0005      	movs	r5, r0
 80047f8:	000c      	movs	r4, r1
 80047fa:	071a      	lsls	r2, r3, #28
 80047fc:	d456      	bmi.n	80048ac <__sflush_r+0xbc>
 80047fe:	684a      	ldr	r2, [r1, #4]
 8004800:	2a00      	cmp	r2, #0
 8004802:	dc02      	bgt.n	800480a <__sflush_r+0x1a>
 8004804:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004806:	2a00      	cmp	r2, #0
 8004808:	dd4e      	ble.n	80048a8 <__sflush_r+0xb8>
 800480a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800480c:	2f00      	cmp	r7, #0
 800480e:	d04b      	beq.n	80048a8 <__sflush_r+0xb8>
 8004810:	2200      	movs	r2, #0
 8004812:	2080      	movs	r0, #128	@ 0x80
 8004814:	682e      	ldr	r6, [r5, #0]
 8004816:	602a      	str	r2, [r5, #0]
 8004818:	001a      	movs	r2, r3
 800481a:	0140      	lsls	r0, r0, #5
 800481c:	6a21      	ldr	r1, [r4, #32]
 800481e:	4002      	ands	r2, r0
 8004820:	4203      	tst	r3, r0
 8004822:	d033      	beq.n	800488c <__sflush_r+0x9c>
 8004824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	075b      	lsls	r3, r3, #29
 800482a:	d506      	bpl.n	800483a <__sflush_r+0x4a>
 800482c:	6863      	ldr	r3, [r4, #4]
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <__sflush_r+0x4a>
 8004836:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004838:	1ad2      	subs	r2, r2, r3
 800483a:	2300      	movs	r3, #0
 800483c:	0028      	movs	r0, r5
 800483e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004840:	6a21      	ldr	r1, [r4, #32]
 8004842:	47b8      	blx	r7
 8004844:	89a2      	ldrh	r2, [r4, #12]
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	d106      	bne.n	8004858 <__sflush_r+0x68>
 800484a:	6829      	ldr	r1, [r5, #0]
 800484c:	291d      	cmp	r1, #29
 800484e:	d846      	bhi.n	80048de <__sflush_r+0xee>
 8004850:	4b29      	ldr	r3, [pc, #164]	@ (80048f8 <__sflush_r+0x108>)
 8004852:	410b      	asrs	r3, r1
 8004854:	07db      	lsls	r3, r3, #31
 8004856:	d442      	bmi.n	80048de <__sflush_r+0xee>
 8004858:	2300      	movs	r3, #0
 800485a:	6063      	str	r3, [r4, #4]
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	04d2      	lsls	r2, r2, #19
 8004862:	d505      	bpl.n	8004870 <__sflush_r+0x80>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <__sflush_r+0x7e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d100      	bne.n	8004870 <__sflush_r+0x80>
 800486e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004872:	602e      	str	r6, [r5, #0]
 8004874:	2900      	cmp	r1, #0
 8004876:	d017      	beq.n	80048a8 <__sflush_r+0xb8>
 8004878:	0023      	movs	r3, r4
 800487a:	3344      	adds	r3, #68	@ 0x44
 800487c:	4299      	cmp	r1, r3
 800487e:	d002      	beq.n	8004886 <__sflush_r+0x96>
 8004880:	0028      	movs	r0, r5
 8004882:	f7ff feaf 	bl	80045e4 <_free_r>
 8004886:	2300      	movs	r3, #0
 8004888:	6363      	str	r3, [r4, #52]	@ 0x34
 800488a:	e00d      	b.n	80048a8 <__sflush_r+0xb8>
 800488c:	2301      	movs	r3, #1
 800488e:	0028      	movs	r0, r5
 8004890:	47b8      	blx	r7
 8004892:	0002      	movs	r2, r0
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d1c6      	bne.n	8004826 <__sflush_r+0x36>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0c3      	beq.n	8004826 <__sflush_r+0x36>
 800489e:	2b1d      	cmp	r3, #29
 80048a0:	d001      	beq.n	80048a6 <__sflush_r+0xb6>
 80048a2:	2b16      	cmp	r3, #22
 80048a4:	d11a      	bne.n	80048dc <__sflush_r+0xec>
 80048a6:	602e      	str	r6, [r5, #0]
 80048a8:	2000      	movs	r0, #0
 80048aa:	e01e      	b.n	80048ea <__sflush_r+0xfa>
 80048ac:	690e      	ldr	r6, [r1, #16]
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	d0fa      	beq.n	80048a8 <__sflush_r+0xb8>
 80048b2:	680f      	ldr	r7, [r1, #0]
 80048b4:	600e      	str	r6, [r1, #0]
 80048b6:	1bba      	subs	r2, r7, r6
 80048b8:	9201      	str	r2, [sp, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	079b      	lsls	r3, r3, #30
 80048be:	d100      	bne.n	80048c2 <__sflush_r+0xd2>
 80048c0:	694a      	ldr	r2, [r1, #20]
 80048c2:	60a2      	str	r2, [r4, #8]
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	ddee      	ble.n	80048a8 <__sflush_r+0xb8>
 80048ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80048cc:	0032      	movs	r2, r6
 80048ce:	001f      	movs	r7, r3
 80048d0:	0028      	movs	r0, r5
 80048d2:	9b01      	ldr	r3, [sp, #4]
 80048d4:	6a21      	ldr	r1, [r4, #32]
 80048d6:	47b8      	blx	r7
 80048d8:	2800      	cmp	r0, #0
 80048da:	dc07      	bgt.n	80048ec <__sflush_r+0xfc>
 80048dc:	89a2      	ldrh	r2, [r4, #12]
 80048de:	2340      	movs	r3, #64	@ 0x40
 80048e0:	2001      	movs	r0, #1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	81a3      	strh	r3, [r4, #12]
 80048e8:	4240      	negs	r0, r0
 80048ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048ec:	9b01      	ldr	r3, [sp, #4]
 80048ee:	1836      	adds	r6, r6, r0
 80048f0:	1a1b      	subs	r3, r3, r0
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	e7e6      	b.n	80048c4 <__sflush_r+0xd4>
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	dfbffffe 	.word	0xdfbffffe

080048fc <_fflush_r>:
 80048fc:	690b      	ldr	r3, [r1, #16]
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	0005      	movs	r5, r0
 8004902:	000c      	movs	r4, r1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <_fflush_r+0x12>
 8004908:	2500      	movs	r5, #0
 800490a:	0028      	movs	r0, r5
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	2800      	cmp	r0, #0
 8004910:	d004      	beq.n	800491c <_fflush_r+0x20>
 8004912:	6a03      	ldr	r3, [r0, #32]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <_fflush_r+0x20>
 8004918:	f7ff fd42 	bl	80043a0 <__sinit>
 800491c:	220c      	movs	r2, #12
 800491e:	5ea3      	ldrsh	r3, [r4, r2]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f1      	beq.n	8004908 <_fflush_r+0xc>
 8004924:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004926:	07d2      	lsls	r2, r2, #31
 8004928:	d404      	bmi.n	8004934 <_fflush_r+0x38>
 800492a:	059b      	lsls	r3, r3, #22
 800492c:	d402      	bmi.n	8004934 <_fflush_r+0x38>
 800492e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004930:	f7ff fe37 	bl	80045a2 <__retarget_lock_acquire_recursive>
 8004934:	0028      	movs	r0, r5
 8004936:	0021      	movs	r1, r4
 8004938:	f7ff ff5a 	bl	80047f0 <__sflush_r>
 800493c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800493e:	0005      	movs	r5, r0
 8004940:	07db      	lsls	r3, r3, #31
 8004942:	d4e2      	bmi.n	800490a <_fflush_r+0xe>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	059b      	lsls	r3, r3, #22
 8004948:	d4df      	bmi.n	800490a <_fflush_r+0xe>
 800494a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800494c:	f7ff fe2a 	bl	80045a4 <__retarget_lock_release_recursive>
 8004950:	e7db      	b.n	800490a <_fflush_r+0xe>
	...

08004954 <fiprintf>:
 8004954:	b40e      	push	{r1, r2, r3}
 8004956:	b517      	push	{r0, r1, r2, r4, lr}
 8004958:	4c05      	ldr	r4, [pc, #20]	@ (8004970 <fiprintf+0x1c>)
 800495a:	ab05      	add	r3, sp, #20
 800495c:	cb04      	ldmia	r3!, {r2}
 800495e:	0001      	movs	r1, r0
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	f000 f846 	bl	80049f4 <_vfiprintf_r>
 8004968:	bc1e      	pop	{r1, r2, r3, r4}
 800496a:	bc08      	pop	{r3}
 800496c:	b003      	add	sp, #12
 800496e:	4718      	bx	r3
 8004970:	2000001c 	.word	0x2000001c

08004974 <_sbrk_r>:
 8004974:	2300      	movs	r3, #0
 8004976:	b570      	push	{r4, r5, r6, lr}
 8004978:	4d06      	ldr	r5, [pc, #24]	@ (8004994 <_sbrk_r+0x20>)
 800497a:	0004      	movs	r4, r0
 800497c:	0008      	movs	r0, r1
 800497e:	602b      	str	r3, [r5, #0]
 8004980:	f7fc fbd8 	bl	8001134 <_sbrk>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d103      	bne.n	8004990 <_sbrk_r+0x1c>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d000      	beq.n	8004990 <_sbrk_r+0x1c>
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	bd70      	pop	{r4, r5, r6, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	200004f8 	.word	0x200004f8

08004998 <abort>:
 8004998:	2006      	movs	r0, #6
 800499a:	b510      	push	{r4, lr}
 800499c:	f000 fb8e 	bl	80050bc <raise>
 80049a0:	2001      	movs	r0, #1
 80049a2:	f7fc fb55 	bl	8001050 <_exit>

080049a6 <__sfputc_r>:
 80049a6:	6893      	ldr	r3, [r2, #8]
 80049a8:	b510      	push	{r4, lr}
 80049aa:	3b01      	subs	r3, #1
 80049ac:	6093      	str	r3, [r2, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da04      	bge.n	80049bc <__sfputc_r+0x16>
 80049b2:	6994      	ldr	r4, [r2, #24]
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	db07      	blt.n	80049c8 <__sfputc_r+0x22>
 80049b8:	290a      	cmp	r1, #10
 80049ba:	d005      	beq.n	80049c8 <__sfputc_r+0x22>
 80049bc:	6813      	ldr	r3, [r2, #0]
 80049be:	1c58      	adds	r0, r3, #1
 80049c0:	6010      	str	r0, [r2, #0]
 80049c2:	7019      	strb	r1, [r3, #0]
 80049c4:	0008      	movs	r0, r1
 80049c6:	bd10      	pop	{r4, pc}
 80049c8:	f000 faae 	bl	8004f28 <__swbuf_r>
 80049cc:	0001      	movs	r1, r0
 80049ce:	e7f9      	b.n	80049c4 <__sfputc_r+0x1e>

080049d0 <__sfputs_r>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	0006      	movs	r6, r0
 80049d4:	000f      	movs	r7, r1
 80049d6:	0014      	movs	r4, r2
 80049d8:	18d5      	adds	r5, r2, r3
 80049da:	42ac      	cmp	r4, r5
 80049dc:	d101      	bne.n	80049e2 <__sfputs_r+0x12>
 80049de:	2000      	movs	r0, #0
 80049e0:	e007      	b.n	80049f2 <__sfputs_r+0x22>
 80049e2:	7821      	ldrb	r1, [r4, #0]
 80049e4:	003a      	movs	r2, r7
 80049e6:	0030      	movs	r0, r6
 80049e8:	f7ff ffdd 	bl	80049a6 <__sfputc_r>
 80049ec:	3401      	adds	r4, #1
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	d1f3      	bne.n	80049da <__sfputs_r+0xa>
 80049f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049f4 <_vfiprintf_r>:
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f6:	b0a1      	sub	sp, #132	@ 0x84
 80049f8:	000f      	movs	r7, r1
 80049fa:	0015      	movs	r5, r2
 80049fc:	001e      	movs	r6, r3
 80049fe:	9003      	str	r0, [sp, #12]
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d004      	beq.n	8004a0e <_vfiprintf_r+0x1a>
 8004a04:	6a03      	ldr	r3, [r0, #32]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <_vfiprintf_r+0x1a>
 8004a0a:	f7ff fcc9 	bl	80043a0 <__sinit>
 8004a0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a10:	07db      	lsls	r3, r3, #31
 8004a12:	d405      	bmi.n	8004a20 <_vfiprintf_r+0x2c>
 8004a14:	89bb      	ldrh	r3, [r7, #12]
 8004a16:	059b      	lsls	r3, r3, #22
 8004a18:	d402      	bmi.n	8004a20 <_vfiprintf_r+0x2c>
 8004a1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a1c:	f7ff fdc1 	bl	80045a2 <__retarget_lock_acquire_recursive>
 8004a20:	89bb      	ldrh	r3, [r7, #12]
 8004a22:	071b      	lsls	r3, r3, #28
 8004a24:	d502      	bpl.n	8004a2c <_vfiprintf_r+0x38>
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d113      	bne.n	8004a54 <_vfiprintf_r+0x60>
 8004a2c:	0039      	movs	r1, r7
 8004a2e:	9803      	ldr	r0, [sp, #12]
 8004a30:	f000 fabc 	bl	8004fac <__swsetup_r>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d00d      	beq.n	8004a54 <_vfiprintf_r+0x60>
 8004a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a3a:	07db      	lsls	r3, r3, #31
 8004a3c:	d503      	bpl.n	8004a46 <_vfiprintf_r+0x52>
 8004a3e:	2001      	movs	r0, #1
 8004a40:	4240      	negs	r0, r0
 8004a42:	b021      	add	sp, #132	@ 0x84
 8004a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a46:	89bb      	ldrh	r3, [r7, #12]
 8004a48:	059b      	lsls	r3, r3, #22
 8004a4a:	d4f8      	bmi.n	8004a3e <_vfiprintf_r+0x4a>
 8004a4c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a4e:	f7ff fda9 	bl	80045a4 <__retarget_lock_release_recursive>
 8004a52:	e7f4      	b.n	8004a3e <_vfiprintf_r+0x4a>
 8004a54:	2300      	movs	r3, #0
 8004a56:	ac08      	add	r4, sp, #32
 8004a58:	6163      	str	r3, [r4, #20]
 8004a5a:	3320      	adds	r3, #32
 8004a5c:	7663      	strb	r3, [r4, #25]
 8004a5e:	3310      	adds	r3, #16
 8004a60:	76a3      	strb	r3, [r4, #26]
 8004a62:	9607      	str	r6, [sp, #28]
 8004a64:	002e      	movs	r6, r5
 8004a66:	7833      	ldrb	r3, [r6, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <_vfiprintf_r+0x7c>
 8004a6c:	2b25      	cmp	r3, #37	@ 0x25
 8004a6e:	d148      	bne.n	8004b02 <_vfiprintf_r+0x10e>
 8004a70:	1b73      	subs	r3, r6, r5
 8004a72:	9305      	str	r3, [sp, #20]
 8004a74:	42ae      	cmp	r6, r5
 8004a76:	d00b      	beq.n	8004a90 <_vfiprintf_r+0x9c>
 8004a78:	002a      	movs	r2, r5
 8004a7a:	0039      	movs	r1, r7
 8004a7c:	9803      	ldr	r0, [sp, #12]
 8004a7e:	f7ff ffa7 	bl	80049d0 <__sfputs_r>
 8004a82:	3001      	adds	r0, #1
 8004a84:	d100      	bne.n	8004a88 <_vfiprintf_r+0x94>
 8004a86:	e0ae      	b.n	8004be6 <_vfiprintf_r+0x1f2>
 8004a88:	6963      	ldr	r3, [r4, #20]
 8004a8a:	9a05      	ldr	r2, [sp, #20]
 8004a8c:	189b      	adds	r3, r3, r2
 8004a8e:	6163      	str	r3, [r4, #20]
 8004a90:	7833      	ldrb	r3, [r6, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d100      	bne.n	8004a98 <_vfiprintf_r+0xa4>
 8004a96:	e0a6      	b.n	8004be6 <_vfiprintf_r+0x1f2>
 8004a98:	2201      	movs	r2, #1
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	4252      	negs	r2, r2
 8004a9e:	6062      	str	r2, [r4, #4]
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	3254      	adds	r2, #84	@ 0x54
 8004aa4:	1852      	adds	r2, r2, r1
 8004aa6:	1c75      	adds	r5, r6, #1
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	60e3      	str	r3, [r4, #12]
 8004aac:	60a3      	str	r3, [r4, #8]
 8004aae:	7013      	strb	r3, [r2, #0]
 8004ab0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004ab2:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <_vfiprintf_r+0x224>)
 8004ab4:	2205      	movs	r2, #5
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	7829      	ldrb	r1, [r5, #0]
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	f000 fb1e 	bl	80050fc <memchr>
 8004ac0:	1c6e      	adds	r6, r5, #1
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d11f      	bne.n	8004b06 <_vfiprintf_r+0x112>
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	06d3      	lsls	r3, r2, #27
 8004aca:	d504      	bpl.n	8004ad6 <_vfiprintf_r+0xe2>
 8004acc:	2353      	movs	r3, #83	@ 0x53
 8004ace:	a904      	add	r1, sp, #16
 8004ad0:	185b      	adds	r3, r3, r1
 8004ad2:	2120      	movs	r1, #32
 8004ad4:	7019      	strb	r1, [r3, #0]
 8004ad6:	0713      	lsls	r3, r2, #28
 8004ad8:	d504      	bpl.n	8004ae4 <_vfiprintf_r+0xf0>
 8004ada:	2353      	movs	r3, #83	@ 0x53
 8004adc:	a904      	add	r1, sp, #16
 8004ade:	185b      	adds	r3, r3, r1
 8004ae0:	212b      	movs	r1, #43	@ 0x2b
 8004ae2:	7019      	strb	r1, [r3, #0]
 8004ae4:	782b      	ldrb	r3, [r5, #0]
 8004ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ae8:	d016      	beq.n	8004b18 <_vfiprintf_r+0x124>
 8004aea:	002e      	movs	r6, r5
 8004aec:	2100      	movs	r1, #0
 8004aee:	200a      	movs	r0, #10
 8004af0:	68e3      	ldr	r3, [r4, #12]
 8004af2:	7832      	ldrb	r2, [r6, #0]
 8004af4:	1c75      	adds	r5, r6, #1
 8004af6:	3a30      	subs	r2, #48	@ 0x30
 8004af8:	2a09      	cmp	r2, #9
 8004afa:	d950      	bls.n	8004b9e <_vfiprintf_r+0x1aa>
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d111      	bne.n	8004b24 <_vfiprintf_r+0x130>
 8004b00:	e017      	b.n	8004b32 <_vfiprintf_r+0x13e>
 8004b02:	3601      	adds	r6, #1
 8004b04:	e7af      	b.n	8004a66 <_vfiprintf_r+0x72>
 8004b06:	9b05      	ldr	r3, [sp, #20]
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	1ac0      	subs	r0, r0, r3
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4083      	lsls	r3, r0
 8004b10:	4313      	orrs	r3, r2
 8004b12:	0035      	movs	r5, r6
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	e7cc      	b.n	8004ab2 <_vfiprintf_r+0xbe>
 8004b18:	9b07      	ldr	r3, [sp, #28]
 8004b1a:	1d19      	adds	r1, r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	9107      	str	r1, [sp, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db01      	blt.n	8004b28 <_vfiprintf_r+0x134>
 8004b24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b26:	e004      	b.n	8004b32 <_vfiprintf_r+0x13e>
 8004b28:	425b      	negs	r3, r3
 8004b2a:	60e3      	str	r3, [r4, #12]
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	7833      	ldrb	r3, [r6, #0]
 8004b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b36:	d10c      	bne.n	8004b52 <_vfiprintf_r+0x15e>
 8004b38:	7873      	ldrb	r3, [r6, #1]
 8004b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b3c:	d134      	bne.n	8004ba8 <_vfiprintf_r+0x1b4>
 8004b3e:	9b07      	ldr	r3, [sp, #28]
 8004b40:	3602      	adds	r6, #2
 8004b42:	1d1a      	adds	r2, r3, #4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	9207      	str	r2, [sp, #28]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da01      	bge.n	8004b50 <_vfiprintf_r+0x15c>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	425b      	negs	r3, r3
 8004b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b52:	4d32      	ldr	r5, [pc, #200]	@ (8004c1c <_vfiprintf_r+0x228>)
 8004b54:	2203      	movs	r2, #3
 8004b56:	0028      	movs	r0, r5
 8004b58:	7831      	ldrb	r1, [r6, #0]
 8004b5a:	f000 facf 	bl	80050fc <memchr>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d006      	beq.n	8004b70 <_vfiprintf_r+0x17c>
 8004b62:	2340      	movs	r3, #64	@ 0x40
 8004b64:	1b40      	subs	r0, r0, r5
 8004b66:	4083      	lsls	r3, r0
 8004b68:	6822      	ldr	r2, [r4, #0]
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	7831      	ldrb	r1, [r6, #0]
 8004b72:	2206      	movs	r2, #6
 8004b74:	482a      	ldr	r0, [pc, #168]	@ (8004c20 <_vfiprintf_r+0x22c>)
 8004b76:	1c75      	adds	r5, r6, #1
 8004b78:	7621      	strb	r1, [r4, #24]
 8004b7a:	f000 fabf 	bl	80050fc <memchr>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d040      	beq.n	8004c04 <_vfiprintf_r+0x210>
 8004b82:	4b28      	ldr	r3, [pc, #160]	@ (8004c24 <_vfiprintf_r+0x230>)
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d122      	bne.n	8004bce <_vfiprintf_r+0x1da>
 8004b88:	2207      	movs	r2, #7
 8004b8a:	9b07      	ldr	r3, [sp, #28]
 8004b8c:	3307      	adds	r3, #7
 8004b8e:	4393      	bics	r3, r2
 8004b90:	3308      	adds	r3, #8
 8004b92:	9307      	str	r3, [sp, #28]
 8004b94:	6963      	ldr	r3, [r4, #20]
 8004b96:	9a04      	ldr	r2, [sp, #16]
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	6163      	str	r3, [r4, #20]
 8004b9c:	e762      	b.n	8004a64 <_vfiprintf_r+0x70>
 8004b9e:	4343      	muls	r3, r0
 8004ba0:	002e      	movs	r6, r5
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	189b      	adds	r3, r3, r2
 8004ba6:	e7a4      	b.n	8004af2 <_vfiprintf_r+0xfe>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	200a      	movs	r0, #10
 8004bac:	0019      	movs	r1, r3
 8004bae:	3601      	adds	r6, #1
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	7832      	ldrb	r2, [r6, #0]
 8004bb4:	1c75      	adds	r5, r6, #1
 8004bb6:	3a30      	subs	r2, #48	@ 0x30
 8004bb8:	2a09      	cmp	r2, #9
 8004bba:	d903      	bls.n	8004bc4 <_vfiprintf_r+0x1d0>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0c8      	beq.n	8004b52 <_vfiprintf_r+0x15e>
 8004bc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bc2:	e7c6      	b.n	8004b52 <_vfiprintf_r+0x15e>
 8004bc4:	4341      	muls	r1, r0
 8004bc6:	002e      	movs	r6, r5
 8004bc8:	2301      	movs	r3, #1
 8004bca:	1889      	adds	r1, r1, r2
 8004bcc:	e7f1      	b.n	8004bb2 <_vfiprintf_r+0x1be>
 8004bce:	aa07      	add	r2, sp, #28
 8004bd0:	9200      	str	r2, [sp, #0]
 8004bd2:	0021      	movs	r1, r4
 8004bd4:	003a      	movs	r2, r7
 8004bd6:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <_vfiprintf_r+0x234>)
 8004bd8:	9803      	ldr	r0, [sp, #12]
 8004bda:	e000      	b.n	8004bde <_vfiprintf_r+0x1ea>
 8004bdc:	bf00      	nop
 8004bde:	9004      	str	r0, [sp, #16]
 8004be0:	9b04      	ldr	r3, [sp, #16]
 8004be2:	3301      	adds	r3, #1
 8004be4:	d1d6      	bne.n	8004b94 <_vfiprintf_r+0x1a0>
 8004be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be8:	07db      	lsls	r3, r3, #31
 8004bea:	d405      	bmi.n	8004bf8 <_vfiprintf_r+0x204>
 8004bec:	89bb      	ldrh	r3, [r7, #12]
 8004bee:	059b      	lsls	r3, r3, #22
 8004bf0:	d402      	bmi.n	8004bf8 <_vfiprintf_r+0x204>
 8004bf2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004bf4:	f7ff fcd6 	bl	80045a4 <__retarget_lock_release_recursive>
 8004bf8:	89bb      	ldrh	r3, [r7, #12]
 8004bfa:	065b      	lsls	r3, r3, #25
 8004bfc:	d500      	bpl.n	8004c00 <_vfiprintf_r+0x20c>
 8004bfe:	e71e      	b.n	8004a3e <_vfiprintf_r+0x4a>
 8004c00:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004c02:	e71e      	b.n	8004a42 <_vfiprintf_r+0x4e>
 8004c04:	aa07      	add	r2, sp, #28
 8004c06:	9200      	str	r2, [sp, #0]
 8004c08:	0021      	movs	r1, r4
 8004c0a:	003a      	movs	r2, r7
 8004c0c:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <_vfiprintf_r+0x234>)
 8004c0e:	9803      	ldr	r0, [sp, #12]
 8004c10:	f000 f87c 	bl	8004d0c <_printf_i>
 8004c14:	e7e3      	b.n	8004bde <_vfiprintf_r+0x1ea>
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	0800532f 	.word	0x0800532f
 8004c1c:	08005335 	.word	0x08005335
 8004c20:	08005339 	.word	0x08005339
 8004c24:	00000000 	.word	0x00000000
 8004c28:	080049d1 	.word	0x080049d1

08004c2c <_printf_common>:
 8004c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c2e:	0016      	movs	r6, r2
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	688a      	ldr	r2, [r1, #8]
 8004c34:	690b      	ldr	r3, [r1, #16]
 8004c36:	000c      	movs	r4, r1
 8004c38:	9000      	str	r0, [sp, #0]
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	da00      	bge.n	8004c40 <_printf_common+0x14>
 8004c3e:	0013      	movs	r3, r2
 8004c40:	0022      	movs	r2, r4
 8004c42:	6033      	str	r3, [r6, #0]
 8004c44:	3243      	adds	r2, #67	@ 0x43
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	d001      	beq.n	8004c50 <_printf_common+0x24>
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	6033      	str	r3, [r6, #0]
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	069b      	lsls	r3, r3, #26
 8004c54:	d502      	bpl.n	8004c5c <_printf_common+0x30>
 8004c56:	6833      	ldr	r3, [r6, #0]
 8004c58:	3302      	adds	r3, #2
 8004c5a:	6033      	str	r3, [r6, #0]
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	2306      	movs	r3, #6
 8004c60:	0015      	movs	r5, r2
 8004c62:	401d      	ands	r5, r3
 8004c64:	421a      	tst	r2, r3
 8004c66:	d027      	beq.n	8004cb8 <_printf_common+0x8c>
 8004c68:	0023      	movs	r3, r4
 8004c6a:	3343      	adds	r3, #67	@ 0x43
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	4193      	sbcs	r3, r2
 8004c72:	6822      	ldr	r2, [r4, #0]
 8004c74:	0692      	lsls	r2, r2, #26
 8004c76:	d430      	bmi.n	8004cda <_printf_common+0xae>
 8004c78:	0022      	movs	r2, r4
 8004c7a:	9901      	ldr	r1, [sp, #4]
 8004c7c:	9800      	ldr	r0, [sp, #0]
 8004c7e:	9d08      	ldr	r5, [sp, #32]
 8004c80:	3243      	adds	r2, #67	@ 0x43
 8004c82:	47a8      	blx	r5
 8004c84:	3001      	adds	r0, #1
 8004c86:	d025      	beq.n	8004cd4 <_printf_common+0xa8>
 8004c88:	2206      	movs	r2, #6
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	2500      	movs	r5, #0
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d105      	bne.n	8004ca0 <_printf_common+0x74>
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	68e5      	ldr	r5, [r4, #12]
 8004c98:	1aed      	subs	r5, r5, r3
 8004c9a:	43eb      	mvns	r3, r5
 8004c9c:	17db      	asrs	r3, r3, #31
 8004c9e:	401d      	ands	r5, r3
 8004ca0:	68a3      	ldr	r3, [r4, #8]
 8004ca2:	6922      	ldr	r2, [r4, #16]
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	dd01      	ble.n	8004cac <_printf_common+0x80>
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	18ed      	adds	r5, r5, r3
 8004cac:	2600      	movs	r6, #0
 8004cae:	42b5      	cmp	r5, r6
 8004cb0:	d120      	bne.n	8004cf4 <_printf_common+0xc8>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e010      	b.n	8004cd8 <_printf_common+0xac>
 8004cb6:	3501      	adds	r5, #1
 8004cb8:	68e3      	ldr	r3, [r4, #12]
 8004cba:	6832      	ldr	r2, [r6, #0]
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	42ab      	cmp	r3, r5
 8004cc0:	ddd2      	ble.n	8004c68 <_printf_common+0x3c>
 8004cc2:	0022      	movs	r2, r4
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	9901      	ldr	r1, [sp, #4]
 8004cc8:	9800      	ldr	r0, [sp, #0]
 8004cca:	9f08      	ldr	r7, [sp, #32]
 8004ccc:	3219      	adds	r2, #25
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d1f0      	bne.n	8004cb6 <_printf_common+0x8a>
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	4240      	negs	r0, r0
 8004cd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cda:	2030      	movs	r0, #48	@ 0x30
 8004cdc:	18e1      	adds	r1, r4, r3
 8004cde:	3143      	adds	r1, #67	@ 0x43
 8004ce0:	7008      	strb	r0, [r1, #0]
 8004ce2:	0021      	movs	r1, r4
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	3145      	adds	r1, #69	@ 0x45
 8004ce8:	7809      	ldrb	r1, [r1, #0]
 8004cea:	18a2      	adds	r2, r4, r2
 8004cec:	3243      	adds	r2, #67	@ 0x43
 8004cee:	3302      	adds	r3, #2
 8004cf0:	7011      	strb	r1, [r2, #0]
 8004cf2:	e7c1      	b.n	8004c78 <_printf_common+0x4c>
 8004cf4:	0022      	movs	r2, r4
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	9901      	ldr	r1, [sp, #4]
 8004cfa:	9800      	ldr	r0, [sp, #0]
 8004cfc:	9f08      	ldr	r7, [sp, #32]
 8004cfe:	321a      	adds	r2, #26
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	d0e6      	beq.n	8004cd4 <_printf_common+0xa8>
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7d1      	b.n	8004cae <_printf_common+0x82>
	...

08004d0c <_printf_i>:
 8004d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d0e:	b08b      	sub	sp, #44	@ 0x2c
 8004d10:	9206      	str	r2, [sp, #24]
 8004d12:	000a      	movs	r2, r1
 8004d14:	3243      	adds	r2, #67	@ 0x43
 8004d16:	9307      	str	r3, [sp, #28]
 8004d18:	9005      	str	r0, [sp, #20]
 8004d1a:	9203      	str	r2, [sp, #12]
 8004d1c:	7e0a      	ldrb	r2, [r1, #24]
 8004d1e:	000c      	movs	r4, r1
 8004d20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d22:	2a78      	cmp	r2, #120	@ 0x78
 8004d24:	d809      	bhi.n	8004d3a <_printf_i+0x2e>
 8004d26:	2a62      	cmp	r2, #98	@ 0x62
 8004d28:	d80b      	bhi.n	8004d42 <_printf_i+0x36>
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d100      	bne.n	8004d30 <_printf_i+0x24>
 8004d2e:	e0bc      	b.n	8004eaa <_printf_i+0x19e>
 8004d30:	497b      	ldr	r1, [pc, #492]	@ (8004f20 <_printf_i+0x214>)
 8004d32:	9104      	str	r1, [sp, #16]
 8004d34:	2a58      	cmp	r2, #88	@ 0x58
 8004d36:	d100      	bne.n	8004d3a <_printf_i+0x2e>
 8004d38:	e090      	b.n	8004e5c <_printf_i+0x150>
 8004d3a:	0025      	movs	r5, r4
 8004d3c:	3542      	adds	r5, #66	@ 0x42
 8004d3e:	702a      	strb	r2, [r5, #0]
 8004d40:	e022      	b.n	8004d88 <_printf_i+0x7c>
 8004d42:	0010      	movs	r0, r2
 8004d44:	3863      	subs	r0, #99	@ 0x63
 8004d46:	2815      	cmp	r0, #21
 8004d48:	d8f7      	bhi.n	8004d3a <_printf_i+0x2e>
 8004d4a:	f7fb f9dd 	bl	8000108 <__gnu_thumb1_case_shi>
 8004d4e:	0016      	.short	0x0016
 8004d50:	fff6001f 	.word	0xfff6001f
 8004d54:	fff6fff6 	.word	0xfff6fff6
 8004d58:	001ffff6 	.word	0x001ffff6
 8004d5c:	fff6fff6 	.word	0xfff6fff6
 8004d60:	fff6fff6 	.word	0xfff6fff6
 8004d64:	003600a1 	.word	0x003600a1
 8004d68:	fff60080 	.word	0xfff60080
 8004d6c:	00b2fff6 	.word	0x00b2fff6
 8004d70:	0036fff6 	.word	0x0036fff6
 8004d74:	fff6fff6 	.word	0xfff6fff6
 8004d78:	0084      	.short	0x0084
 8004d7a:	0025      	movs	r5, r4
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	3542      	adds	r5, #66	@ 0x42
 8004d80:	1d11      	adds	r1, r2, #4
 8004d82:	6019      	str	r1, [r3, #0]
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	702b      	strb	r3, [r5, #0]
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0a0      	b.n	8004ece <_printf_i+0x1c2>
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	6809      	ldr	r1, [r1, #0]
 8004d90:	1d02      	adds	r2, r0, #4
 8004d92:	060d      	lsls	r5, r1, #24
 8004d94:	d50b      	bpl.n	8004dae <_printf_i+0xa2>
 8004d96:	6806      	ldr	r6, [r0, #0]
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	2e00      	cmp	r6, #0
 8004d9c:	da03      	bge.n	8004da6 <_printf_i+0x9a>
 8004d9e:	232d      	movs	r3, #45	@ 0x2d
 8004da0:	9a03      	ldr	r2, [sp, #12]
 8004da2:	4276      	negs	r6, r6
 8004da4:	7013      	strb	r3, [r2, #0]
 8004da6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f20 <_printf_i+0x214>)
 8004da8:	270a      	movs	r7, #10
 8004daa:	9304      	str	r3, [sp, #16]
 8004dac:	e018      	b.n	8004de0 <_printf_i+0xd4>
 8004dae:	6806      	ldr	r6, [r0, #0]
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	0649      	lsls	r1, r1, #25
 8004db4:	d5f1      	bpl.n	8004d9a <_printf_i+0x8e>
 8004db6:	b236      	sxth	r6, r6
 8004db8:	e7ef      	b.n	8004d9a <_printf_i+0x8e>
 8004dba:	6808      	ldr	r0, [r1, #0]
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	c940      	ldmia	r1!, {r6}
 8004dc0:	0605      	lsls	r5, r0, #24
 8004dc2:	d402      	bmi.n	8004dca <_printf_i+0xbe>
 8004dc4:	0640      	lsls	r0, r0, #25
 8004dc6:	d500      	bpl.n	8004dca <_printf_i+0xbe>
 8004dc8:	b2b6      	uxth	r6, r6
 8004dca:	6019      	str	r1, [r3, #0]
 8004dcc:	4b54      	ldr	r3, [pc, #336]	@ (8004f20 <_printf_i+0x214>)
 8004dce:	270a      	movs	r7, #10
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	2a6f      	cmp	r2, #111	@ 0x6f
 8004dd4:	d100      	bne.n	8004dd8 <_printf_i+0xcc>
 8004dd6:	3f02      	subs	r7, #2
 8004dd8:	0023      	movs	r3, r4
 8004dda:	2200      	movs	r2, #0
 8004ddc:	3343      	adds	r3, #67	@ 0x43
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	60a3      	str	r3, [r4, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	db03      	blt.n	8004df0 <_printf_i+0xe4>
 8004de8:	2104      	movs	r1, #4
 8004dea:	6822      	ldr	r2, [r4, #0]
 8004dec:	438a      	bics	r2, r1
 8004dee:	6022      	str	r2, [r4, #0]
 8004df0:	2e00      	cmp	r6, #0
 8004df2:	d102      	bne.n	8004dfa <_printf_i+0xee>
 8004df4:	9d03      	ldr	r5, [sp, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <_printf_i+0x108>
 8004dfa:	9d03      	ldr	r5, [sp, #12]
 8004dfc:	0030      	movs	r0, r6
 8004dfe:	0039      	movs	r1, r7
 8004e00:	f7fb fa12 	bl	8000228 <__aeabi_uidivmod>
 8004e04:	9b04      	ldr	r3, [sp, #16]
 8004e06:	3d01      	subs	r5, #1
 8004e08:	5c5b      	ldrb	r3, [r3, r1]
 8004e0a:	702b      	strb	r3, [r5, #0]
 8004e0c:	0033      	movs	r3, r6
 8004e0e:	0006      	movs	r6, r0
 8004e10:	429f      	cmp	r7, r3
 8004e12:	d9f3      	bls.n	8004dfc <_printf_i+0xf0>
 8004e14:	2f08      	cmp	r7, #8
 8004e16:	d109      	bne.n	8004e2c <_printf_i+0x120>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	07db      	lsls	r3, r3, #31
 8004e1c:	d506      	bpl.n	8004e2c <_printf_i+0x120>
 8004e1e:	6862      	ldr	r2, [r4, #4]
 8004e20:	6923      	ldr	r3, [r4, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	dc02      	bgt.n	8004e2c <_printf_i+0x120>
 8004e26:	2330      	movs	r3, #48	@ 0x30
 8004e28:	3d01      	subs	r5, #1
 8004e2a:	702b      	strb	r3, [r5, #0]
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	1b5b      	subs	r3, r3, r5
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	9b07      	ldr	r3, [sp, #28]
 8004e34:	0021      	movs	r1, r4
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	9805      	ldr	r0, [sp, #20]
 8004e3a:	9b06      	ldr	r3, [sp, #24]
 8004e3c:	aa09      	add	r2, sp, #36	@ 0x24
 8004e3e:	f7ff fef5 	bl	8004c2c <_printf_common>
 8004e42:	3001      	adds	r0, #1
 8004e44:	d148      	bne.n	8004ed8 <_printf_i+0x1cc>
 8004e46:	2001      	movs	r0, #1
 8004e48:	4240      	negs	r0, r0
 8004e4a:	b00b      	add	sp, #44	@ 0x2c
 8004e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4e:	2220      	movs	r2, #32
 8004e50:	6809      	ldr	r1, [r1, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	6022      	str	r2, [r4, #0]
 8004e56:	2278      	movs	r2, #120	@ 0x78
 8004e58:	4932      	ldr	r1, [pc, #200]	@ (8004f24 <_printf_i+0x218>)
 8004e5a:	9104      	str	r1, [sp, #16]
 8004e5c:	0021      	movs	r1, r4
 8004e5e:	3145      	adds	r1, #69	@ 0x45
 8004e60:	700a      	strb	r2, [r1, #0]
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	6822      	ldr	r2, [r4, #0]
 8004e66:	c940      	ldmia	r1!, {r6}
 8004e68:	0610      	lsls	r0, r2, #24
 8004e6a:	d402      	bmi.n	8004e72 <_printf_i+0x166>
 8004e6c:	0650      	lsls	r0, r2, #25
 8004e6e:	d500      	bpl.n	8004e72 <_printf_i+0x166>
 8004e70:	b2b6      	uxth	r6, r6
 8004e72:	6019      	str	r1, [r3, #0]
 8004e74:	07d3      	lsls	r3, r2, #31
 8004e76:	d502      	bpl.n	8004e7e <_printf_i+0x172>
 8004e78:	2320      	movs	r3, #32
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	d001      	beq.n	8004e86 <_printf_i+0x17a>
 8004e82:	2710      	movs	r7, #16
 8004e84:	e7a8      	b.n	8004dd8 <_printf_i+0xcc>
 8004e86:	2220      	movs	r2, #32
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	4393      	bics	r3, r2
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	e7f8      	b.n	8004e82 <_printf_i+0x176>
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	680d      	ldr	r5, [r1, #0]
 8004e94:	1d10      	adds	r0, r2, #4
 8004e96:	6949      	ldr	r1, [r1, #20]
 8004e98:	6018      	str	r0, [r3, #0]
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	062e      	lsls	r6, r5, #24
 8004e9e:	d501      	bpl.n	8004ea4 <_printf_i+0x198>
 8004ea0:	6019      	str	r1, [r3, #0]
 8004ea2:	e002      	b.n	8004eaa <_printf_i+0x19e>
 8004ea4:	066d      	lsls	r5, r5, #25
 8004ea6:	d5fb      	bpl.n	8004ea0 <_printf_i+0x194>
 8004ea8:	8019      	strh	r1, [r3, #0]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9d03      	ldr	r5, [sp, #12]
 8004eae:	6123      	str	r3, [r4, #16]
 8004eb0:	e7bf      	b.n	8004e32 <_printf_i+0x126>
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	1d11      	adds	r1, r2, #4
 8004eb6:	6019      	str	r1, [r3, #0]
 8004eb8:	6815      	ldr	r5, [r2, #0]
 8004eba:	2100      	movs	r1, #0
 8004ebc:	0028      	movs	r0, r5
 8004ebe:	6862      	ldr	r2, [r4, #4]
 8004ec0:	f000 f91c 	bl	80050fc <memchr>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d001      	beq.n	8004ecc <_printf_i+0x1c0>
 8004ec8:	1b40      	subs	r0, r0, r5
 8004eca:	6060      	str	r0, [r4, #4]
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	9a03      	ldr	r2, [sp, #12]
 8004ed4:	7013      	strb	r3, [r2, #0]
 8004ed6:	e7ac      	b.n	8004e32 <_printf_i+0x126>
 8004ed8:	002a      	movs	r2, r5
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	9906      	ldr	r1, [sp, #24]
 8004ede:	9805      	ldr	r0, [sp, #20]
 8004ee0:	9d07      	ldr	r5, [sp, #28]
 8004ee2:	47a8      	blx	r5
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d0ae      	beq.n	8004e46 <_printf_i+0x13a>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	079b      	lsls	r3, r3, #30
 8004eec:	d415      	bmi.n	8004f1a <_printf_i+0x20e>
 8004eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef0:	68e0      	ldr	r0, [r4, #12]
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	daa9      	bge.n	8004e4a <_printf_i+0x13e>
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	e7a7      	b.n	8004e4a <_printf_i+0x13e>
 8004efa:	0022      	movs	r2, r4
 8004efc:	2301      	movs	r3, #1
 8004efe:	9906      	ldr	r1, [sp, #24]
 8004f00:	9805      	ldr	r0, [sp, #20]
 8004f02:	9e07      	ldr	r6, [sp, #28]
 8004f04:	3219      	adds	r2, #25
 8004f06:	47b0      	blx	r6
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d09c      	beq.n	8004e46 <_printf_i+0x13a>
 8004f0c:	3501      	adds	r5, #1
 8004f0e:	68e3      	ldr	r3, [r4, #12]
 8004f10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	42ab      	cmp	r3, r5
 8004f16:	dcf0      	bgt.n	8004efa <_printf_i+0x1ee>
 8004f18:	e7e9      	b.n	8004eee <_printf_i+0x1e2>
 8004f1a:	2500      	movs	r5, #0
 8004f1c:	e7f7      	b.n	8004f0e <_printf_i+0x202>
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	08005340 	.word	0x08005340
 8004f24:	08005351 	.word	0x08005351

08004f28 <__swbuf_r>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	0006      	movs	r6, r0
 8004f2c:	000d      	movs	r5, r1
 8004f2e:	0014      	movs	r4, r2
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d004      	beq.n	8004f3e <__swbuf_r+0x16>
 8004f34:	6a03      	ldr	r3, [r0, #32]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <__swbuf_r+0x16>
 8004f3a:	f7ff fa31 	bl	80043a0 <__sinit>
 8004f3e:	69a3      	ldr	r3, [r4, #24]
 8004f40:	60a3      	str	r3, [r4, #8]
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	071b      	lsls	r3, r3, #28
 8004f46:	d502      	bpl.n	8004f4e <__swbuf_r+0x26>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d109      	bne.n	8004f62 <__swbuf_r+0x3a>
 8004f4e:	0021      	movs	r1, r4
 8004f50:	0030      	movs	r0, r6
 8004f52:	f000 f82b 	bl	8004fac <__swsetup_r>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d003      	beq.n	8004f62 <__swbuf_r+0x3a>
 8004f5a:	2501      	movs	r5, #1
 8004f5c:	426d      	negs	r5, r5
 8004f5e:	0028      	movs	r0, r5
 8004f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f62:	6923      	ldr	r3, [r4, #16]
 8004f64:	6820      	ldr	r0, [r4, #0]
 8004f66:	b2ef      	uxtb	r7, r5
 8004f68:	1ac0      	subs	r0, r0, r3
 8004f6a:	6963      	ldr	r3, [r4, #20]
 8004f6c:	b2ed      	uxtb	r5, r5
 8004f6e:	4283      	cmp	r3, r0
 8004f70:	dc05      	bgt.n	8004f7e <__swbuf_r+0x56>
 8004f72:	0021      	movs	r1, r4
 8004f74:	0030      	movs	r0, r6
 8004f76:	f7ff fcc1 	bl	80048fc <_fflush_r>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d1ed      	bne.n	8004f5a <__swbuf_r+0x32>
 8004f7e:	68a3      	ldr	r3, [r4, #8]
 8004f80:	3001      	adds	r0, #1
 8004f82:	3b01      	subs	r3, #1
 8004f84:	60a3      	str	r3, [r4, #8]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	6022      	str	r2, [r4, #0]
 8004f8c:	701f      	strb	r7, [r3, #0]
 8004f8e:	6963      	ldr	r3, [r4, #20]
 8004f90:	4283      	cmp	r3, r0
 8004f92:	d004      	beq.n	8004f9e <__swbuf_r+0x76>
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	07db      	lsls	r3, r3, #31
 8004f98:	d5e1      	bpl.n	8004f5e <__swbuf_r+0x36>
 8004f9a:	2d0a      	cmp	r5, #10
 8004f9c:	d1df      	bne.n	8004f5e <__swbuf_r+0x36>
 8004f9e:	0021      	movs	r1, r4
 8004fa0:	0030      	movs	r0, r6
 8004fa2:	f7ff fcab 	bl	80048fc <_fflush_r>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d0d9      	beq.n	8004f5e <__swbuf_r+0x36>
 8004faa:	e7d6      	b.n	8004f5a <__swbuf_r+0x32>

08004fac <__swsetup_r>:
 8004fac:	4b2d      	ldr	r3, [pc, #180]	@ (8005064 <__swsetup_r+0xb8>)
 8004fae:	b570      	push	{r4, r5, r6, lr}
 8004fb0:	0005      	movs	r5, r0
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	000c      	movs	r4, r1
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d004      	beq.n	8004fc4 <__swsetup_r+0x18>
 8004fba:	6a03      	ldr	r3, [r0, #32]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <__swsetup_r+0x18>
 8004fc0:	f7ff f9ee 	bl	80043a0 <__sinit>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	5ee2      	ldrsh	r2, [r4, r3]
 8004fc8:	0713      	lsls	r3, r2, #28
 8004fca:	d423      	bmi.n	8005014 <__swsetup_r+0x68>
 8004fcc:	06d3      	lsls	r3, r2, #27
 8004fce:	d407      	bmi.n	8004fe0 <__swsetup_r+0x34>
 8004fd0:	2309      	movs	r3, #9
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	2340      	movs	r3, #64	@ 0x40
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	4240      	negs	r0, r0
 8004fde:	e03a      	b.n	8005056 <__swsetup_r+0xaa>
 8004fe0:	0752      	lsls	r2, r2, #29
 8004fe2:	d513      	bpl.n	800500c <__swsetup_r+0x60>
 8004fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fe6:	2900      	cmp	r1, #0
 8004fe8:	d008      	beq.n	8004ffc <__swsetup_r+0x50>
 8004fea:	0023      	movs	r3, r4
 8004fec:	3344      	adds	r3, #68	@ 0x44
 8004fee:	4299      	cmp	r1, r3
 8004ff0:	d002      	beq.n	8004ff8 <__swsetup_r+0x4c>
 8004ff2:	0028      	movs	r0, r5
 8004ff4:	f7ff faf6 	bl	80045e4 <_free_r>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ffc:	2224      	movs	r2, #36	@ 0x24
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	4393      	bics	r3, r2
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	2300      	movs	r3, #0
 8005006:	6063      	str	r3, [r4, #4]
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	2308      	movs	r3, #8
 800500e:	89a2      	ldrh	r2, [r4, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	81a3      	strh	r3, [r4, #12]
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10b      	bne.n	8005032 <__swsetup_r+0x86>
 800501a:	21a0      	movs	r1, #160	@ 0xa0
 800501c:	2280      	movs	r2, #128	@ 0x80
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	0089      	lsls	r1, r1, #2
 8005022:	0092      	lsls	r2, r2, #2
 8005024:	400b      	ands	r3, r1
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <__swsetup_r+0x86>
 800502a:	0021      	movs	r1, r4
 800502c:	0028      	movs	r0, r5
 800502e:	f000 f89b 	bl	8005168 <__smakebuf_r>
 8005032:	230c      	movs	r3, #12
 8005034:	5ee2      	ldrsh	r2, [r4, r3]
 8005036:	2101      	movs	r1, #1
 8005038:	0013      	movs	r3, r2
 800503a:	400b      	ands	r3, r1
 800503c:	420a      	tst	r2, r1
 800503e:	d00b      	beq.n	8005058 <__swsetup_r+0xac>
 8005040:	2300      	movs	r3, #0
 8005042:	60a3      	str	r3, [r4, #8]
 8005044:	6963      	ldr	r3, [r4, #20]
 8005046:	425b      	negs	r3, r3
 8005048:	61a3      	str	r3, [r4, #24]
 800504a:	2000      	movs	r0, #0
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	4283      	cmp	r3, r0
 8005050:	d101      	bne.n	8005056 <__swsetup_r+0xaa>
 8005052:	0613      	lsls	r3, r2, #24
 8005054:	d4be      	bmi.n	8004fd4 <__swsetup_r+0x28>
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	0791      	lsls	r1, r2, #30
 800505a:	d400      	bmi.n	800505e <__swsetup_r+0xb2>
 800505c:	6963      	ldr	r3, [r4, #20]
 800505e:	60a3      	str	r3, [r4, #8]
 8005060:	e7f3      	b.n	800504a <__swsetup_r+0x9e>
 8005062:	46c0      	nop			@ (mov r8, r8)
 8005064:	2000001c 	.word	0x2000001c

08005068 <_raise_r>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	0004      	movs	r4, r0
 800506c:	000d      	movs	r5, r1
 800506e:	291f      	cmp	r1, #31
 8005070:	d904      	bls.n	800507c <_raise_r+0x14>
 8005072:	2316      	movs	r3, #22
 8005074:	6003      	str	r3, [r0, #0]
 8005076:	2001      	movs	r0, #1
 8005078:	4240      	negs	r0, r0
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <_raise_r+0x24>
 8005082:	008a      	lsls	r2, r1, #2
 8005084:	189b      	adds	r3, r3, r2
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	2a00      	cmp	r2, #0
 800508a:	d108      	bne.n	800509e <_raise_r+0x36>
 800508c:	0020      	movs	r0, r4
 800508e:	f000 f831 	bl	80050f4 <_getpid_r>
 8005092:	002a      	movs	r2, r5
 8005094:	0001      	movs	r1, r0
 8005096:	0020      	movs	r0, r4
 8005098:	f000 f81a 	bl	80050d0 <_kill_r>
 800509c:	e7ed      	b.n	800507a <_raise_r+0x12>
 800509e:	2a01      	cmp	r2, #1
 80050a0:	d009      	beq.n	80050b6 <_raise_r+0x4e>
 80050a2:	1c51      	adds	r1, r2, #1
 80050a4:	d103      	bne.n	80050ae <_raise_r+0x46>
 80050a6:	2316      	movs	r3, #22
 80050a8:	6003      	str	r3, [r0, #0]
 80050aa:	2001      	movs	r0, #1
 80050ac:	e7e5      	b.n	800507a <_raise_r+0x12>
 80050ae:	2100      	movs	r1, #0
 80050b0:	0028      	movs	r0, r5
 80050b2:	6019      	str	r1, [r3, #0]
 80050b4:	4790      	blx	r2
 80050b6:	2000      	movs	r0, #0
 80050b8:	e7df      	b.n	800507a <_raise_r+0x12>
	...

080050bc <raise>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	4b03      	ldr	r3, [pc, #12]	@ (80050cc <raise+0x10>)
 80050c0:	0001      	movs	r1, r0
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	f7ff ffd0 	bl	8005068 <_raise_r>
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	2000001c 	.word	0x2000001c

080050d0 <_kill_r>:
 80050d0:	2300      	movs	r3, #0
 80050d2:	b570      	push	{r4, r5, r6, lr}
 80050d4:	4d06      	ldr	r5, [pc, #24]	@ (80050f0 <_kill_r+0x20>)
 80050d6:	0004      	movs	r4, r0
 80050d8:	0008      	movs	r0, r1
 80050da:	0011      	movs	r1, r2
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	f7fb ffa7 	bl	8001030 <_kill>
 80050e2:	1c43      	adds	r3, r0, #1
 80050e4:	d103      	bne.n	80050ee <_kill_r+0x1e>
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d000      	beq.n	80050ee <_kill_r+0x1e>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	200004f8 	.word	0x200004f8

080050f4 <_getpid_r>:
 80050f4:	b510      	push	{r4, lr}
 80050f6:	f7fb ff95 	bl	8001024 <_getpid>
 80050fa:	bd10      	pop	{r4, pc}

080050fc <memchr>:
 80050fc:	b2c9      	uxtb	r1, r1
 80050fe:	1882      	adds	r2, r0, r2
 8005100:	4290      	cmp	r0, r2
 8005102:	d101      	bne.n	8005108 <memchr+0xc>
 8005104:	2000      	movs	r0, #0
 8005106:	4770      	bx	lr
 8005108:	7803      	ldrb	r3, [r0, #0]
 800510a:	428b      	cmp	r3, r1
 800510c:	d0fb      	beq.n	8005106 <memchr+0xa>
 800510e:	3001      	adds	r0, #1
 8005110:	e7f6      	b.n	8005100 <memchr+0x4>
	...

08005114 <__swhatbuf_r>:
 8005114:	b570      	push	{r4, r5, r6, lr}
 8005116:	000e      	movs	r6, r1
 8005118:	001d      	movs	r5, r3
 800511a:	230e      	movs	r3, #14
 800511c:	5ec9      	ldrsh	r1, [r1, r3]
 800511e:	0014      	movs	r4, r2
 8005120:	b096      	sub	sp, #88	@ 0x58
 8005122:	2900      	cmp	r1, #0
 8005124:	da0c      	bge.n	8005140 <__swhatbuf_r+0x2c>
 8005126:	89b2      	ldrh	r2, [r6, #12]
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	0011      	movs	r1, r2
 800512c:	4019      	ands	r1, r3
 800512e:	421a      	tst	r2, r3
 8005130:	d114      	bne.n	800515c <__swhatbuf_r+0x48>
 8005132:	2380      	movs	r3, #128	@ 0x80
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	2000      	movs	r0, #0
 8005138:	6029      	str	r1, [r5, #0]
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	b016      	add	sp, #88	@ 0x58
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	466a      	mov	r2, sp
 8005142:	f000 f853 	bl	80051ec <_fstat_r>
 8005146:	2800      	cmp	r0, #0
 8005148:	dbed      	blt.n	8005126 <__swhatbuf_r+0x12>
 800514a:	23f0      	movs	r3, #240	@ 0xf0
 800514c:	9901      	ldr	r1, [sp, #4]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	4019      	ands	r1, r3
 8005152:	4b04      	ldr	r3, [pc, #16]	@ (8005164 <__swhatbuf_r+0x50>)
 8005154:	18c9      	adds	r1, r1, r3
 8005156:	424b      	negs	r3, r1
 8005158:	4159      	adcs	r1, r3
 800515a:	e7ea      	b.n	8005132 <__swhatbuf_r+0x1e>
 800515c:	2100      	movs	r1, #0
 800515e:	2340      	movs	r3, #64	@ 0x40
 8005160:	e7e9      	b.n	8005136 <__swhatbuf_r+0x22>
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	ffffe000 	.word	0xffffe000

08005168 <__smakebuf_r>:
 8005168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516a:	2602      	movs	r6, #2
 800516c:	898b      	ldrh	r3, [r1, #12]
 800516e:	0005      	movs	r5, r0
 8005170:	000c      	movs	r4, r1
 8005172:	b085      	sub	sp, #20
 8005174:	4233      	tst	r3, r6
 8005176:	d007      	beq.n	8005188 <__smakebuf_r+0x20>
 8005178:	0023      	movs	r3, r4
 800517a:	3347      	adds	r3, #71	@ 0x47
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	6123      	str	r3, [r4, #16]
 8005180:	2301      	movs	r3, #1
 8005182:	6163      	str	r3, [r4, #20]
 8005184:	b005      	add	sp, #20
 8005186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005188:	ab03      	add	r3, sp, #12
 800518a:	aa02      	add	r2, sp, #8
 800518c:	f7ff ffc2 	bl	8005114 <__swhatbuf_r>
 8005190:	9f02      	ldr	r7, [sp, #8]
 8005192:	9001      	str	r0, [sp, #4]
 8005194:	0039      	movs	r1, r7
 8005196:	0028      	movs	r0, r5
 8005198:	f7ff fa9a 	bl	80046d0 <_malloc_r>
 800519c:	2800      	cmp	r0, #0
 800519e:	d108      	bne.n	80051b2 <__smakebuf_r+0x4a>
 80051a0:	220c      	movs	r2, #12
 80051a2:	5ea3      	ldrsh	r3, [r4, r2]
 80051a4:	059a      	lsls	r2, r3, #22
 80051a6:	d4ed      	bmi.n	8005184 <__smakebuf_r+0x1c>
 80051a8:	2203      	movs	r2, #3
 80051aa:	4393      	bics	r3, r2
 80051ac:	431e      	orrs	r6, r3
 80051ae:	81a6      	strh	r6, [r4, #12]
 80051b0:	e7e2      	b.n	8005178 <__smakebuf_r+0x10>
 80051b2:	2380      	movs	r3, #128	@ 0x80
 80051b4:	89a2      	ldrh	r2, [r4, #12]
 80051b6:	6020      	str	r0, [r4, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	6120      	str	r0, [r4, #16]
 80051c0:	6167      	str	r7, [r4, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <__smakebuf_r+0x78>
 80051c6:	0028      	movs	r0, r5
 80051c8:	230e      	movs	r3, #14
 80051ca:	5ee1      	ldrsh	r1, [r4, r3]
 80051cc:	f000 f820 	bl	8005210 <_isatty_r>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d005      	beq.n	80051e0 <__smakebuf_r+0x78>
 80051d4:	2303      	movs	r3, #3
 80051d6:	89a2      	ldrh	r2, [r4, #12]
 80051d8:	439a      	bics	r2, r3
 80051da:	3b02      	subs	r3, #2
 80051dc:	4313      	orrs	r3, r2
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	9a01      	ldr	r2, [sp, #4]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	e7cc      	b.n	8005184 <__smakebuf_r+0x1c>
	...

080051ec <_fstat_r>:
 80051ec:	2300      	movs	r3, #0
 80051ee:	b570      	push	{r4, r5, r6, lr}
 80051f0:	4d06      	ldr	r5, [pc, #24]	@ (800520c <_fstat_r+0x20>)
 80051f2:	0004      	movs	r4, r0
 80051f4:	0008      	movs	r0, r1
 80051f6:	0011      	movs	r1, r2
 80051f8:	602b      	str	r3, [r5, #0]
 80051fa:	f7fb ff79 	bl	80010f0 <_fstat>
 80051fe:	1c43      	adds	r3, r0, #1
 8005200:	d103      	bne.n	800520a <_fstat_r+0x1e>
 8005202:	682b      	ldr	r3, [r5, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d000      	beq.n	800520a <_fstat_r+0x1e>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	200004f8 	.word	0x200004f8

08005210 <_isatty_r>:
 8005210:	2300      	movs	r3, #0
 8005212:	b570      	push	{r4, r5, r6, lr}
 8005214:	4d06      	ldr	r5, [pc, #24]	@ (8005230 <_isatty_r+0x20>)
 8005216:	0004      	movs	r4, r0
 8005218:	0008      	movs	r0, r1
 800521a:	602b      	str	r3, [r5, #0]
 800521c:	f7fb ff76 	bl	800110c <_isatty>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d103      	bne.n	800522c <_isatty_r+0x1c>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d000      	beq.n	800522c <_isatty_r+0x1c>
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	bd70      	pop	{r4, r5, r6, pc}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	200004f8 	.word	0x200004f8

08005234 <_init>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr

08005240 <_fini>:
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005246:	bc08      	pop	{r3}
 8005248:	469e      	mov	lr, r3
 800524a:	4770      	bx	lr
