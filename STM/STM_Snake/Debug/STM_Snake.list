
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005190  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005250  08005250  00006250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005368  08005368  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005368  08005368  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005368  08005368  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00006368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005370  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  2000006c  080053dc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  080053dc  00007508  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e699  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002431  00000000  00000000  0001572d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00017b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7d  00000000  00000000  000188d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a98  00000000  00000000  0001934d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011250  00000000  00000000  0002cde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000730c4  00000000  00000000  0003e035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b10f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  000b113c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000b4a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005238 	.word	0x08005238

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005238 	.word	0x08005238

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1824      	adds	r4, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	42a3      	cmp	r3, r4
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	@ 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c23      	lsrs	r3, r4, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0424      	lsls	r4, r4, #16
 8000456:	1960      	adds	r0, r4, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <move_snake>:
uint8_t body_x[128];			//массив значень координат X змійки
uint8_t body_y[128];			//массив значень координат Y змійки
uint8_t length;					//значення довжини змійки

/* Функція руху змійки */
uint8_t move_snake(uint8_t command,uint8_t frog_x, uint8_t frog_y) {
 8000464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000466:	b08d      	sub	sp, #52	@ 0x34
 8000468:	af00      	add	r7, sp, #0
 800046a:	0006      	movs	r6, r0
 800046c:	0008      	movs	r0, r1
 800046e:	0011      	movs	r1, r2
 8000470:	231f      	movs	r3, #31
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c32      	adds	r2, r6, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	261e      	movs	r6, #30
 800047a:	19bb      	adds	r3, r7, r6
 800047c:	1c02      	adds	r2, r0, #0
 800047e:	701a      	strb	r2, [r3, #0]
 8000480:	201d      	movs	r0, #29
 8000482:	183b      	adds	r3, r7, r0
 8000484:	1c0a      	adds	r2, r1, #0
 8000486:	701a      	strb	r2, [r3, #0]

    if (body_x[0] == frog_x && body_y[0] == frog_y) {
 8000488:	4b69      	ldr	r3, [pc, #420]	@ (8000630 <move_snake+0x1cc>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	19ba      	adds	r2, r7, r6
 800048e:	7812      	ldrb	r2, [r2, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	d10d      	bne.n	80004b0 <move_snake+0x4c>
 8000494:	4b67      	ldr	r3, [pc, #412]	@ (8000634 <move_snake+0x1d0>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	183a      	adds	r2, r7, r0
 800049a:	7812      	ldrb	r2, [r2, #0]
 800049c:	429a      	cmp	r2, r3
 800049e:	d107      	bne.n	80004b0 <move_snake+0x4c>
        length++;
 80004a0:	4b65      	ldr	r3, [pc, #404]	@ (8000638 <move_snake+0x1d4>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	4b63      	ldr	r3, [pc, #396]	@ (8000638 <move_snake+0x1d4>)
 80004aa:	701a      	strb	r2, [r3, #0]
        randomize_apple();
 80004ac:	f000 f8ca 	bl	8000644 <randomize_apple>
    }
    for (int i = length; i > 0; i--) {
 80004b0:	4b61      	ldr	r3, [pc, #388]	@ (8000638 <move_snake+0x1d4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80004b6:	e014      	b.n	80004e2 <move_snake+0x7e>
        body_x[i] = body_x[i - 1];
 80004b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004ba:	3b01      	subs	r3, #1
 80004bc:	4a5c      	ldr	r2, [pc, #368]	@ (8000630 <move_snake+0x1cc>)
 80004be:	5cd1      	ldrb	r1, [r2, r3]
 80004c0:	4a5b      	ldr	r2, [pc, #364]	@ (8000630 <move_snake+0x1cc>)
 80004c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004c4:	18d3      	adds	r3, r2, r3
 80004c6:	1c0a      	adds	r2, r1, #0
 80004c8:	701a      	strb	r2, [r3, #0]
        body_y[i] = body_y[i - 1];
 80004ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004cc:	3b01      	subs	r3, #1
 80004ce:	4a59      	ldr	r2, [pc, #356]	@ (8000634 <move_snake+0x1d0>)
 80004d0:	5cd1      	ldrb	r1, [r2, r3]
 80004d2:	4a58      	ldr	r2, [pc, #352]	@ (8000634 <move_snake+0x1d0>)
 80004d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004d6:	18d3      	adds	r3, r2, r3
 80004d8:	1c0a      	adds	r2, r1, #0
 80004da:	701a      	strb	r2, [r3, #0]
    for (int i = length; i > 0; i--) {
 80004dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004de:	3b01      	subs	r3, #1
 80004e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80004e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dce7      	bgt.n	80004b8 <move_snake+0x54>
    }
switch (command) {
 80004e8:	231f      	movs	r3, #31
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d02f      	beq.n	8000552 <move_snake+0xee>
 80004f2:	dc3b      	bgt.n	800056c <move_snake+0x108>
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d01f      	beq.n	8000538 <move_snake+0xd4>
 80004f8:	dc38      	bgt.n	800056c <move_snake+0x108>
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d002      	beq.n	8000504 <move_snake+0xa0>
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d00d      	beq.n	800051e <move_snake+0xba>
    body_x[0]++;
    x++;
    break;
default:

    break;}
 8000502:	e033      	b.n	800056c <move_snake+0x108>
    body_y[0]++;
 8000504:	4b4b      	ldr	r3, [pc, #300]	@ (8000634 <move_snake+0x1d0>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b49      	ldr	r3, [pc, #292]	@ (8000634 <move_snake+0x1d0>)
 800050e:	701a      	strb	r2, [r3, #0]
    y++;
 8000510:	4b4a      	ldr	r3, [pc, #296]	@ (800063c <move_snake+0x1d8>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b48      	ldr	r3, [pc, #288]	@ (800063c <move_snake+0x1d8>)
 800051a:	701a      	strb	r2, [r3, #0]
    break;
 800051c:	e027      	b.n	800056e <move_snake+0x10a>
    body_y[0]--;
 800051e:	4b45      	ldr	r3, [pc, #276]	@ (8000634 <move_snake+0x1d0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	3b01      	subs	r3, #1
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b43      	ldr	r3, [pc, #268]	@ (8000634 <move_snake+0x1d0>)
 8000528:	701a      	strb	r2, [r3, #0]
    y--;
 800052a:	4b44      	ldr	r3, [pc, #272]	@ (800063c <move_snake+0x1d8>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	3b01      	subs	r3, #1
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b42      	ldr	r3, [pc, #264]	@ (800063c <move_snake+0x1d8>)
 8000534:	701a      	strb	r2, [r3, #0]
    break;
 8000536:	e01a      	b.n	800056e <move_snake+0x10a>
    body_x[0]--;
 8000538:	4b3d      	ldr	r3, [pc, #244]	@ (8000630 <move_snake+0x1cc>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3b01      	subs	r3, #1
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b3b      	ldr	r3, [pc, #236]	@ (8000630 <move_snake+0x1cc>)
 8000542:	701a      	strb	r2, [r3, #0]
    x--;
 8000544:	4b3e      	ldr	r3, [pc, #248]	@ (8000640 <move_snake+0x1dc>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b3c      	ldr	r3, [pc, #240]	@ (8000640 <move_snake+0x1dc>)
 800054e:	701a      	strb	r2, [r3, #0]
    break;
 8000550:	e00d      	b.n	800056e <move_snake+0x10a>
    body_x[0]++;
 8000552:	4b37      	ldr	r3, [pc, #220]	@ (8000630 <move_snake+0x1cc>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <move_snake+0x1cc>)
 800055c:	701a      	strb	r2, [r3, #0]
    x++;
 800055e:	4b38      	ldr	r3, [pc, #224]	@ (8000640 <move_snake+0x1dc>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b36      	ldr	r3, [pc, #216]	@ (8000640 <move_snake+0x1dc>)
 8000568:	701a      	strb	r2, [r3, #0]
    break;
 800056a:	e000      	b.n	800056e <move_snake+0x10a>
    break;}
 800056c:	46c0      	nop			@ (mov r8, r8)

    uint8_t payload[length * 2];  // Масив для об'єднаних даних
 800056e:	4b32      	ldr	r3, [pc, #200]	@ (8000638 <move_snake+0x1d4>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	466a      	mov	r2, sp
 8000576:	0010      	movs	r0, r2
 8000578:	1e5a      	subs	r2, r3, #1
 800057a:	627a      	str	r2, [r7, #36]	@ 0x24
 800057c:	001a      	movs	r2, r3
 800057e:	613a      	str	r2, [r7, #16]
 8000580:	2200      	movs	r2, #0
 8000582:	617a      	str	r2, [r7, #20]
 8000584:	693a      	ldr	r2, [r7, #16]
 8000586:	0f52      	lsrs	r2, r2, #29
 8000588:	6979      	ldr	r1, [r7, #20]
 800058a:	00c9      	lsls	r1, r1, #3
 800058c:	6079      	str	r1, [r7, #4]
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4311      	orrs	r1, r2
 8000592:	6079      	str	r1, [r7, #4]
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	00d2      	lsls	r2, r2, #3
 8000598:	603a      	str	r2, [r7, #0]
 800059a:	001a      	movs	r2, r3
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	2200      	movs	r2, #0
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	0f52      	lsrs	r2, r2, #29
 80005a6:	68f9      	ldr	r1, [r7, #12]
 80005a8:	00cd      	lsls	r5, r1, #3
 80005aa:	4315      	orrs	r5, r2
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	00d4      	lsls	r4, r2, #3
 80005b0:	3307      	adds	r3, #7
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	466a      	mov	r2, sp
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	469d      	mov	sp, r3
 80005bc:	466b      	mov	r3, sp
 80005be:	3300      	adds	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]

    for (uint8_t i = 0; i < length; i++) {
 80005c2:	2313      	movs	r3, #19
 80005c4:	2218      	movs	r2, #24
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	19db      	adds	r3, r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e01f      	b.n	8000610 <move_snake+0x1ac>
        payload[i * 2] = body_x[i];      // Записуємо елементи з першого масиву
 80005d0:	2413      	movs	r4, #19
 80005d2:	2518      	movs	r5, #24
 80005d4:	1963      	adds	r3, r4, r5
 80005d6:	19db      	adds	r3, r3, r7
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	1963      	adds	r3, r4, r5
 80005dc:	19db      	adds	r3, r3, r7
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	4913      	ldr	r1, [pc, #76]	@ (8000630 <move_snake+0x1cc>)
 80005e4:	5c89      	ldrb	r1, [r1, r2]
 80005e6:	6a3a      	ldr	r2, [r7, #32]
 80005e8:	54d1      	strb	r1, [r2, r3]
        payload[i * 2 + 1] = body_y[i];  // Записуємо елементи з другого масиву
 80005ea:	1963      	adds	r3, r4, r5
 80005ec:	19db      	adds	r3, r3, r7
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	1963      	adds	r3, r4, r5
 80005f2:	19db      	adds	r3, r3, r7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	3301      	adds	r3, #1
 80005fa:	490e      	ldr	r1, [pc, #56]	@ (8000634 <move_snake+0x1d0>)
 80005fc:	5c89      	ldrb	r1, [r1, r2]
 80005fe:	6a3a      	ldr	r2, [r7, #32]
 8000600:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000602:	1963      	adds	r3, r4, r5
 8000604:	19db      	adds	r3, r3, r7
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	1963      	adds	r3, r4, r5
 800060a:	19db      	adds	r3, r3, r7
 800060c:	3201      	adds	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <move_snake+0x1d4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2213      	movs	r2, #19
 8000616:	2118      	movs	r1, #24
 8000618:	1852      	adds	r2, r2, r1
 800061a:	19d2      	adds	r2, r2, r7
 800061c:	7812      	ldrb	r2, [r2, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d3d6      	bcc.n	80005d0 <move_snake+0x16c>
    }
return payload;
 8000622:	6a3b      	ldr	r3, [r7, #32]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4685      	mov	sp, r0
}
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b00d      	add	sp, #52	@ 0x34
 800062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000630:	2000008c 	.word	0x2000008c
 8000634:	2000010c 	.word	0x2000010c
 8000638:	2000018c 	.word	0x2000018c
 800063c:	20000000 	.word	0x20000000
 8000640:	20000088 	.word	0x20000088

08000644 <randomize_apple>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t randomize_apple(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	//frog_x = rand() % 10;
	return *frog_y = rand() % 10;
 8000648:	f003 fdde 	bl	8004208 <rand>
 800064c:	0003      	movs	r3, r0
 800064e:	210a      	movs	r1, #10
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff fed3 	bl	80003fc <__aeabi_idivmod>
 8000656:	000b      	movs	r3, r1
 8000658:	001a      	movs	r2, r3
 800065a:	4b04      	ldr	r3, [pc, #16]	@ (800066c <randomize_apple+0x28>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	781b      	ldrb	r3, [r3, #0]
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	200003b0 	.word	0x200003b0

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fdc6 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f81a 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f91c 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000680:	f000 f8fc 	bl	800087c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000684:	f000 f8ca 	bl	800081c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000688:	f000 f872 	bl	8000770 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <main+0x34>)
 800068e:	0018      	movs	r0, r3
 8000690:	f002 f82a 	bl	80026e8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1,rx_buffer,sizeof(rx_buffer));
 8000694:	4904      	ldr	r1, [pc, #16]	@ (80006a8 <main+0x38>)
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <main+0x3c>)
 8000698:	2205      	movs	r2, #5
 800069a:	0018      	movs	r0, r3
 800069c:	f002 fce1 	bl	8003062 <HAL_UART_Receive_DMA>
  //simulate_snake_game();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	e7fd      	b.n	80006a0 <main+0x30>
 80006a4:	20000190 	.word	0x20000190
 80006a8:	200003a4 	.word	0x200003a4
 80006ac:	200001d8 	.word	0x200001d8

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b097      	sub	sp, #92	@ 0x5c
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	2428      	movs	r4, #40	@ 0x28
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2330      	movs	r3, #48	@ 0x30
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 feef 	bl	80044a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	2318      	movs	r3, #24
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	0018      	movs	r0, r3
 80006cc:	2310      	movs	r3, #16
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f003 fee7 	bl	80044a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	0018      	movs	r0, r3
 80006da:	2314      	movs	r3, #20
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f003 fee0 	bl	80044a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	0021      	movs	r1, r4
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2202      	movs	r2, #2
 80006f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	0252      	lsls	r2, r2, #9
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2280      	movs	r2, #128	@ 0x80
 8000704:	0352      	lsls	r2, r2, #13
 8000706:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	187b      	adds	r3, r7, r1
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fa5d 	bl	8001bd0 <HAL_RCC_OscConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800071a:	f000 f9b5 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	2118      	movs	r1, #24
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2207      	movs	r2, #7
 8000724:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2202      	movs	r2, #2
 800072a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2101      	movs	r1, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f001 fd61 	bl	8002204 <HAL_RCC_ClockConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 f99f 	bl	8000a88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fe97 	bl	800248c <HAL_RCCEx_PeriphCLKConfig>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000762:	f000 f991 	bl	8000a88 <Error_Handler>
  }
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b017      	add	sp, #92	@ 0x5c
 800076c:	bd90      	pop	{r4, r7, pc}
	...

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	2308      	movs	r3, #8
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	0018      	movs	r0, r3
 800077c:	2310      	movs	r3, #16
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f003 fe8f 	bl	80044a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000786:	003b      	movs	r3, r7
 8000788:	0018      	movs	r0, r3
 800078a:	2308      	movs	r3, #8
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f003 fe88 	bl	80044a4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_TIM2_Init+0xa0>)
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	05d2      	lsls	r2, r2, #23
 800079a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6999;
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_TIM2_Init+0xa0>)
 800079e:	4a1d      	ldr	r2, [pc, #116]	@ (8000814 <MX_TIM2_Init+0xa4>)
 80007a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6856;
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <MX_TIM2_Init+0xa8>)
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 ff43 	bl	8002648 <HAL_TIM_Base_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007c6:	f000 f95f 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	2108      	movs	r1, #8
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	0152      	lsls	r2, r2, #5
 80007d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 f8c4 	bl	8002968 <HAL_TIM_ConfigClockSource>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007e4:	f000 f950 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ee:	003b      	movs	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f4:	003a      	movs	r2, r7
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_TIM2_Init+0xa0>)
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 fad0 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000804:	f000 f940 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b006      	add	sp, #24
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000190 	.word	0x20000190
 8000814:	00001b57 	.word	0x00001b57
 8000818:	00001ac8 	.word	0x00001ac8

0800081c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000822:	4a15      	ldr	r2, [pc, #84]	@ (8000878 <MX_USART1_UART_Init+0x5c>)
 8000824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000828:	2296      	movs	r2, #150	@ 0x96
 800082a:	0192      	lsls	r2, r2, #6
 800082c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <MX_USART1_UART_Init+0x58>)
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fb0b 	bl	8002e7c <HAL_UART_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800086a:	f000 f90d 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001d8 	.word	0x200001d8
 8000878:	40013800 	.word	0x40013800

0800087c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_DMA_Init+0x38>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_DMA_Init+0x38>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_DMA_Init+0x38>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	200a      	movs	r0, #10
 80008a0:	f000 fdc0 	bl	8001424 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fdd2 	bl	800144e <HAL_NVIC_EnableIRQ>

}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	40021000 	.word	0x40021000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b089      	sub	sp, #36	@ 0x24
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	240c      	movs	r4, #12
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	0018      	movs	r0, r3
 80008c4:	2314      	movs	r3, #20
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f003 fdeb 	bl	80044a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	03c9      	lsls	r1, r1, #15
 80008d8:	430a      	orrs	r2, r1
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008de:	695a      	ldr	r2, [r3, #20]
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	03db      	lsls	r3, r3, #15
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008ec:	695a      	ldr	r2, [r3, #20]
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008f0:	2180      	movs	r1, #128	@ 0x80
 80008f2:	0309      	lsls	r1, r1, #12
 80008f4:	430a      	orrs	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_GPIO_Init+0xa8>)
 80008fa:	695a      	ldr	r2, [r3, #20]
 80008fc:	2380      	movs	r3, #128	@ 0x80
 80008fe:	031b      	lsls	r3, r3, #12
 8000900:	4013      	ands	r3, r2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_GPIO_Init+0xa8>)
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_GPIO_Init+0xa8>)
 800090c:	2180      	movs	r1, #128	@ 0x80
 800090e:	0289      	lsls	r1, r1, #10
 8000910:	430a      	orrs	r2, r1
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_GPIO_Init+0xa8>)
 8000916:	695a      	ldr	r2, [r3, #20]
 8000918:	2380      	movs	r3, #128	@ 0x80
 800091a:	029b      	lsls	r3, r3, #10
 800091c:	4013      	ands	r3, r2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000922:	23c0      	movs	r3, #192	@ 0xc0
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	480f      	ldr	r0, [pc, #60]	@ (8000964 <MX_GPIO_Init+0xac>)
 8000928:	2200      	movs	r2, #0
 800092a:	0019      	movs	r1, r3
 800092c:	f001 f932 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	22c0      	movs	r2, #192	@ 0xc0
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2201      	movs	r2, #1
 800093c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	193b      	adds	r3, r7, r4
 800094c:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <MX_GPIO_Init+0xac>)
 800094e:	0019      	movs	r1, r3
 8000950:	0010      	movs	r0, r2
 8000952:	f000 ffaf 	bl	80018b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b009      	add	sp, #36	@ 0x24
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800

08000968 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a39      	ldr	r2, [pc, #228]	@ (8000a5c <HAL_UART_RxCpltCallback+0xf4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d16b      	bne.n	8000a52 <HAL_UART_RxCpltCallback+0xea>

    //	uint8_t handler_prot = rx_buffer[1];
    	uint8_t handler_prot = rx_buffer[1];
 800097a:	210f      	movs	r1, #15
 800097c:	187b      	adds	r3, r7, r1
 800097e:	4a38      	ldr	r2, [pc, #224]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 8000980:	7852      	ldrb	r2, [r2, #1]
 8000982:	701a      	strb	r2, [r3, #0]
    	switch(handler_prot){
 8000984:	187b      	adds	r3, r7, r1
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d002      	beq.n	8000992 <HAL_UART_RxCpltCallback+0x2a>
 800098c:	2b03      	cmp	r3, #3
 800098e:	d027      	beq.n	80009e0 <HAL_UART_RxCpltCallback+0x78>
 8000990:	e059      	b.n	8000a46 <HAL_UART_RxCpltCallback+0xde>
    		case(1):

			uint8_t test_receive = decode_frame(rx_buffer,sizeof(rx_buffer));
 8000992:	4b33      	ldr	r3, [pc, #204]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 8000994:	2105      	movs	r1, #5
 8000996:	0018      	movs	r0, r3
 8000998:	f000 f9f9 	bl	8000d8e <decode_frame>
 800099c:	0002      	movs	r2, r0
 800099e:	240b      	movs	r4, #11
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart1, rx_buffer,sizeof(rx_buffer), 100);
 80009a4:	492e      	ldr	r1, [pc, #184]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 80009a6:	482f      	ldr	r0, [pc, #188]	@ (8000a64 <HAL_UART_RxCpltCallback+0xfc>)
 80009a8:	2364      	movs	r3, #100	@ 0x64
 80009aa:	2205      	movs	r2, #5
 80009ac:	f002 faba 	bl	8002f24 <HAL_UART_Transmit>
    		if (test_receive==0) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d106      	bne.n	80009c6 <HAL_UART_RxCpltCallback+0x5e>
 80009b8:	2380      	movs	r3, #128	@ 0x80
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	482a      	ldr	r0, [pc, #168]	@ (8000a68 <HAL_UART_RxCpltCallback+0x100>)
 80009be:	2201      	movs	r2, #1
 80009c0:	0019      	movs	r1, r3
 80009c2:	f001 f8e7 	bl	8001b94 <HAL_GPIO_WritePin>
    		if (test_receive==4) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
 80009c6:	230b      	movs	r3, #11
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d139      	bne.n	8000a44 <HAL_UART_RxCpltCallback+0xdc>
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4824      	ldr	r0, [pc, #144]	@ (8000a68 <HAL_UART_RxCpltCallback+0x100>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	0019      	movs	r1, r3
 80009da:	f001 f8db 	bl	8001b94 <HAL_GPIO_WritePin>
    		//HAL_UART_Transmit(&huart1, &test_receive,1, 100);

    		break;
 80009de:	e031      	b.n	8000a44 <HAL_UART_RxCpltCallback+0xdc>

    		case(3):

		uint8_t command = rx_buffer[2];
 80009e0:	200e      	movs	r0, #14
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 80009e6:	7892      	ldrb	r2, [r2, #2]
 80009e8:	701a      	strb	r2, [r3, #0]

		      uint8_t payload = move_snake(command, *frog_x, *frog_y);
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <HAL_UART_RxCpltCallback+0x104>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	7819      	ldrb	r1, [r3, #0]
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <HAL_UART_RxCpltCallback+0x108>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	250d      	movs	r5, #13
 80009f8:	197c      	adds	r4, r7, r5
 80009fa:	183b      	adds	r3, r7, r0
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fd30 	bl	8000464 <move_snake>
 8000a04:	0003      	movs	r3, r0
 8000a06:	7023      	strb	r3, [r4, #0]
		      uint8_t frame_length = encode_frame_snake(payload, sizeof(payload)+1, tx_buffer, 0x02, frog_x, frog_y);
 8000a08:	197b      	adds	r3, r7, r5
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_UART_RxCpltCallback+0x104>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <HAL_UART_RxCpltCallback+0x108>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	250c      	movs	r5, #12
 8000a1c:	197c      	adds	r4, r7, r5
 8000a1e:	4915      	ldr	r1, [pc, #84]	@ (8000a74 <HAL_UART_RxCpltCallback+0x10c>)
 8000a20:	9301      	str	r3, [sp, #4]
 8000a22:	9200      	str	r2, [sp, #0]
 8000a24:	2302      	movs	r3, #2
 8000a26:	000a      	movs	r2, r1
 8000a28:	2102      	movs	r1, #2
 8000a2a:	f000 f925 	bl	8000c78 <encode_frame_snake>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	7023      	strb	r3, [r4, #0]
		      HAL_UART_Transmit(&huart1, tx_buffer, frame_length, 100);
 8000a32:	197b      	adds	r3, r7, r5
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	490e      	ldr	r1, [pc, #56]	@ (8000a74 <HAL_UART_RxCpltCallback+0x10c>)
 8000a3a:	480a      	ldr	r0, [pc, #40]	@ (8000a64 <HAL_UART_RxCpltCallback+0xfc>)
 8000a3c:	2364      	movs	r3, #100	@ 0x64
 8000a3e:	f002 fa71 	bl	8002f24 <HAL_UART_Transmit>
		      break;
 8000a42:	e000      	b.n	8000a46 <HAL_UART_RxCpltCallback+0xde>
    		break;
 8000a44:	46c0      	nop			@ (mov r8, r8)

    	}
    	 HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 8000a46:	4906      	ldr	r1, [pc, #24]	@ (8000a60 <HAL_UART_RxCpltCallback+0xf8>)
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_UART_RxCpltCallback+0xfc>)
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fb08 	bl	8003062 <HAL_UART_Receive_DMA>
    }
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	40013800 	.word	0x40013800
 8000a60:	200003a4 	.word	0x200003a4
 8000a64:	200001d8 	.word	0x200001d8
 8000a68:	48000800 	.word	0x48000800
 8000a6c:	200003ac 	.word	0x200003ac
 8000a70:	200003b0 	.word	0x200003b0
 8000a74:	200002a4 	.word	0x200002a4

08000a78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
    //	uint8_t test_receive = decode_frame(rx_buffer,sizeof(rx_buffer));

    }
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <crc16_ccitt_snake>:



// Функція обчислення CRC-16-CCITT для пакету змійки (поліном 0x1021, початкове значення 0xFFFF)
// Обчислення CRC-16-CCITT для пакету змійки
uint16_t crc16_ccitt_snake(const uint8_t *data, uint8_t len, uint8_t cmd, uint8_t frog_x, uint8_t frog_y) {
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	0010      	movs	r0, r2
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	1cfb      	adds	r3, r7, #3
 8000aa4:	1c22      	adds	r2, r4, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	1cbb      	adds	r3, r7, #2
 8000aaa:	1c02      	adds	r2, r0, #0
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	1c7b      	adds	r3, r7, #1
 8000ab0:	1c0a      	adds	r2, r1, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000ab4:	210e      	movs	r1, #14
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4252      	negs	r2, r2
 8000abc:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);
 8000abe:	1cbb      	adds	r3, r7, #2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2000      	movs	r0, #0
 8000aca:	5e1b      	ldrsh	r3, [r3, r0]
 8000acc:	4053      	eors	r3, r2
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	801a      	strh	r2, [r3, #0]
    crc ^= (((uint16_t)frog_x << 8) | frog_y);
 8000ad4:	1c7b      	adds	r3, r7, #1
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	2320      	movs	r3, #32
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2000      	movs	r0, #0
 8000aec:	5e1b      	ldrsh	r3, [r3, r0]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000af6:	230c      	movs	r3, #12
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	2200      	movs	r2, #0
 8000afc:	801a      	strh	r2, [r3, #0]
 8000afe:	e03b      	b.n	8000b78 <crc16_ccitt_snake+0xe4>
        crc ^= ((uint16_t)data[i] << 8);
 8000b00:	230c      	movs	r3, #12
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	210e      	movs	r1, #14
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2000      	movs	r0, #0
 8000b16:	5e1b      	ldrsh	r3, [r3, r0]
 8000b18:	4053      	eors	r3, r2
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000b20:	230b      	movs	r3, #11
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e01b      	b.n	8000b62 <crc16_ccitt_snake+0xce>
            if (crc & 0x8000)
 8000b2a:	210e      	movs	r1, #14
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	5e9b      	ldrsh	r3, [r3, r2]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da09      	bge.n	8000b4a <crc16_ccitt_snake+0xb6>
                crc = (crc << 1) ^ 0x1021;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	4a16      	ldr	r2, [pc, #88]	@ (8000b98 <crc16_ccitt_snake+0x104>)
 8000b40:	4053      	eors	r3, r2
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	801a      	strh	r2, [r3, #0]
 8000b48:	e005      	b.n	8000b56 <crc16_ccitt_snake+0xc2>
            else
                crc <<= 1;
 8000b4a:	230e      	movs	r3, #14
 8000b4c:	18fa      	adds	r2, r7, r3
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	18db      	adds	r3, r3, r3
 8000b54:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000b56:	210b      	movs	r1, #11
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	3201      	adds	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	230b      	movs	r3, #11
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d9de      	bls.n	8000b2a <crc16_ccitt_snake+0x96>
    for (uint16_t i = 0; i < len; i++) {
 8000b6c:	210c      	movs	r1, #12
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	881a      	ldrh	r2, [r3, #0]
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	3201      	adds	r2, #1
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	1cfb      	adds	r3, r7, #3
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	220c      	movs	r2, #12
 8000b80:	18ba      	adds	r2, r7, r2
 8000b82:	8812      	ldrh	r2, [r2, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d3bb      	bcc.n	8000b00 <crc16_ccitt_snake+0x6c>
        }
    }
    return crc;
 8000b88:	230e      	movs	r3, #14
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	881b      	ldrh	r3, [r3, #0]
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b005      	add	sp, #20
 8000b94:	bd90      	pop	{r4, r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	00001021 	.word	0x00001021

08000b9c <crc16_ccitt>:
// Функція обчислення CRC-16-CCITT (поліном 0x1021, початкове значення 0xFFFF)
uint16_t crc16_ccitt(const uint8_t *data, uint16_t len, uint8_t cmd) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	0008      	movs	r0, r1
 8000ba6:	0011      	movs	r1, r2
 8000ba8:	1cbb      	adds	r3, r7, #2
 8000baa:	1c02      	adds	r2, r0, #0
 8000bac:	801a      	strh	r2, [r3, #0]
 8000bae:	1c7b      	adds	r3, r7, #1
 8000bb0:	1c0a      	adds	r2, r1, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;									//початкове значення
 8000bb4:	210e      	movs	r1, #14
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4252      	negs	r2, r2
 8000bbc:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);							//команда cmd
 8000bbe:	1c7b      	adds	r3, r7, #1
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2000      	movs	r0, #0
 8000bca:	5e1b      	ldrsh	r3, [r3, r0]
 8000bcc:	4053      	eors	r3, r2
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	801a      	strh	r2, [r3, #0]
 8000bdc:	e03b      	b.n	8000c56 <crc16_ccitt+0xba>
        crc ^= ((uint16_t)data[i] << 8);
 8000bde:	230c      	movs	r3, #12
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	210e      	movs	r1, #14
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	5e1b      	ldrsh	r3, [r3, r0]
 8000bf6:	4053      	eors	r3, r2
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000bfe:	230b      	movs	r3, #11
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e01b      	b.n	8000c40 <crc16_ccitt+0xa4>
            if (crc & 0x8000)
 8000c08:	210e      	movs	r1, #14
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	5e9b      	ldrsh	r3, [r3, r2]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	da09      	bge.n	8000c28 <crc16_ccitt+0x8c>
                crc = (crc << 1) ^ 0x1021;					//поліном
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	4a15      	ldr	r2, [pc, #84]	@ (8000c74 <crc16_ccitt+0xd8>)
 8000c1e:	4053      	eors	r3, r2
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	801a      	strh	r2, [r3, #0]
 8000c26:	e005      	b.n	8000c34 <crc16_ccitt+0x98>
            else
                crc <<= 1;
 8000c28:	230e      	movs	r3, #14
 8000c2a:	18fa      	adds	r2, r7, r3
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	18db      	adds	r3, r3, r3
 8000c32:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000c34:	210b      	movs	r1, #11
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	3201      	adds	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	230b      	movs	r3, #11
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	d9de      	bls.n	8000c08 <crc16_ccitt+0x6c>
    for (uint16_t i = 0; i < len; i++) {
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	3201      	adds	r2, #1
 8000c54:	801a      	strh	r2, [r3, #0]
 8000c56:	230c      	movs	r3, #12
 8000c58:	18fa      	adds	r2, r7, r3
 8000c5a:	1cbb      	adds	r3, r7, #2
 8000c5c:	8812      	ldrh	r2, [r2, #0]
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3bc      	bcc.n	8000bde <crc16_ccitt+0x42>
        }
    }
    return crc;
 8000c64:	230e      	movs	r3, #14
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	881b      	ldrh	r3, [r3, #0]
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	00001021 	.word	0x00001021

08000c78 <encode_frame_snake>:

//функція кодування пакету змії
uint8_t encode_frame_snake(const uint8_t *payload, uint8_t payload_len, uint8_t *tx_buffer, uint8_t cmd_byte, uint8_t frog_x, uint8_t frog_y) {
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	b089      	sub	sp, #36	@ 0x24
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	0008      	movs	r0, r1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	0019      	movs	r1, r3
 8000c86:	240b      	movs	r4, #11
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	1c02      	adds	r2, r0, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	200a      	movs	r0, #10
 8000c90:	183b      	adds	r3, r7, r0
 8000c92:	1c0a      	adds	r2, r1, #0
 8000c94:	701a      	strb	r2, [r3, #0]

	tx_buffer[0] = START_BYTE;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	227e      	movs	r2, #126	@ 0x7e
 8000c9a:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = cmd_byte;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	183a      	adds	r2, r7, r0
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = payload_len;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	193a      	adds	r2, r7, r4
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < payload_len; i++) {
 8000cb0:	2317      	movs	r3, #23
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	e011      	b.n	8000cde <encode_frame_snake+0x66>
    tx_buffer[3 + i] = payload[i];
 8000cba:	2017      	movs	r0, #23
 8000cbc:	183b      	adds	r3, r7, r0
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	18d2      	adds	r2, r2, r3
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	3303      	adds	r3, #3
 8000cca:	0019      	movs	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	185b      	adds	r3, r3, r1
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < payload_len; i++) {
 8000cd4:	183b      	adds	r3, r7, r0
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	183b      	adds	r3, r7, r0
 8000cda:	3201      	adds	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	2317      	movs	r3, #23
 8000ce0:	18fa      	adds	r2, r7, r3
 8000ce2:	210b      	movs	r1, #11
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3e5      	bcc.n	8000cba <encode_frame_snake+0x42>
    }

    tx_buffer[3 + payload_len] = frog_x;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3303      	adds	r3, #3
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	189a      	adds	r2, r3, r2
 8000cfa:	2528      	movs	r5, #40	@ 0x28
 8000cfc:	2008      	movs	r0, #8
 8000cfe:	182b      	adds	r3, r5, r0
 8000d00:	19db      	adds	r3, r3, r7
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	7013      	strb	r3, [r2, #0]
    tx_buffer[4 + payload_len] = frog_y;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	222c      	movs	r2, #44	@ 0x2c
 8000d14:	0006      	movs	r6, r0
 8000d16:	1812      	adds	r2, r2, r0
 8000d18:	19d2      	adds	r2, r2, r7
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	701a      	strb	r2, [r3, #0]

   uint16_t crc = crc16_ccitt_snake(payload, payload_len, cmd_byte, frog_x, frog_y);
 8000d1e:	2014      	movs	r0, #20
 8000d20:	183c      	adds	r4, r7, r0
 8000d22:	0030      	movs	r0, r6
 8000d24:	19ab      	adds	r3, r5, r6
 8000d26:	19db      	adds	r3, r3, r7
 8000d28:	781d      	ldrb	r5, [r3, #0]
 8000d2a:	260a      	movs	r6, #10
 8000d2c:	19bb      	adds	r3, r7, r6
 8000d2e:	781a      	ldrb	r2, [r3, #0]
 8000d30:	000e      	movs	r6, r1
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	7819      	ldrb	r1, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	469c      	mov	ip, r3
 8000d3a:	232c      	movs	r3, #44	@ 0x2c
 8000d3c:	181b      	adds	r3, r3, r0
 8000d3e:	19db      	adds	r3, r3, r7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	002b      	movs	r3, r5
 8000d46:	4660      	mov	r0, ip
 8000d48:	f7ff fea4 	bl	8000a94 <crc16_ccitt_snake>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	8023      	strh	r3, [r4, #0]
   	tx_buffer[5 + payload_len] = (crc >> 8) & 0xFF;
 8000d50:	2014      	movs	r0, #20
 8000d52:	183b      	adds	r3, r7, r0
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	0a1b      	lsrs	r3, r3, #8
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	19bb      	adds	r3, r7, r6
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3305      	adds	r3, #5
 8000d60:	0019      	movs	r1, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	185b      	adds	r3, r3, r1
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	701a      	strb	r2, [r3, #0]
    tx_buffer[6 + payload_len] = crc & 0xFF;
 8000d6a:	19bb      	adds	r3, r7, r6
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	3306      	adds	r3, #6
 8000d70:	001a      	movs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	189b      	adds	r3, r3, r2
 8000d76:	183a      	adds	r2, r7, r0
 8000d78:	8812      	ldrh	r2, [r2, #0]
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	701a      	strb	r2, [r3, #0]

    return (7+payload_len);
 8000d7e:	19bb      	adds	r3, r7, r6
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3307      	adds	r3, #7
 8000d84:	b2db      	uxtb	r3, r3
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b007      	add	sp, #28
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d8e <decode_frame>:
    tx_buffer[3 + payload_len] = (crc >> 8) & 0xFF; 			// crc high
    tx_buffer[4 + payload_len] = crc & 0xFF;        			// crc low
    return 5;
}

int decode_frame(const uint8_t *frame, uint8_t frame_len) {
 8000d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	000a      	movs	r2, r1
 8000d98:	1cfb      	adds	r3, r7, #3
 8000d9a:	701a      	strb	r2, [r3, #0]
	// Кадр занадто короткий
    if (frame_len < 5){
 8000d9c:	1cfb      	adds	r3, r7, #3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d801      	bhi.n	8000da8 <decode_frame+0x1a>
    	return 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e034      	b.n	8000e12 <decode_frame+0x84>
    }
    // Невірний стартовий байт
    if (frame[0] != START_BYTE){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b7e      	cmp	r3, #126	@ 0x7e
 8000dae:	d001      	beq.n	8000db4 <decode_frame+0x26>
    		return 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	e02e      	b.n	8000e12 <decode_frame+0x84>
    }

    uint8_t cmd_byte = frame[1];
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	210f      	movs	r1, #15
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	701a      	strb	r2, [r3, #0]
   	uint8_t payload = frame[2];
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	1c9a      	adds	r2, r3, #2
 8000dc4:	230e      	movs	r3, #14
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	701a      	strb	r2, [r3, #0]

    uint16_t received_crc = (frame[3] << 8) | frame[4];				// Отримання переданого CRC
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3303      	adds	r3, #3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	4313      	orrs	r3, r2
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	250c      	movs	r5, #12
 8000de4:	197b      	adds	r3, r7, r5
 8000de6:	801a      	strh	r2, [r3, #0]
    uint16_t computed_crc = crc16_ccitt(&frame[2], 1, cmd_byte);    // Обчислення CRC на основі PAYLOAD
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	1c98      	adds	r0, r3, #2
 8000dec:	260a      	movs	r6, #10
 8000dee:	19bc      	adds	r4, r7, r6
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	2101      	movs	r1, #1
 8000df8:	f7ff fed0 	bl	8000b9c <crc16_ccitt>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	8023      	strh	r3, [r4, #0]
    return (received_crc == computed_crc) ? 0 : 4;
 8000e00:	197a      	adds	r2, r7, r5
 8000e02:	19bb      	adds	r3, r7, r6
 8000e04:	8812      	ldrh	r2, [r2, #0]
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d101      	bne.n	8000e10 <decode_frame+0x82>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e000      	b.n	8000e12 <decode_frame+0x84>
 8000e10:	2304      	movs	r3, #4
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b005      	add	sp, #20
 8000e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4013      	ands	r3, r2
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	0549      	lsls	r1, r1, #21
 8000e44:	430a      	orrs	r2, r1
 8000e46:	61da      	str	r2, [r3, #28]
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e4a:	69da      	ldr	r2, [r3, #28]
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	055b      	lsls	r3, r3, #21
 8000e50:	4013      	ands	r3, r2
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d113      	bne.n	8000ea0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	430a      	orrs	r2, r1
 8000e82:	61da      	str	r2, [r3, #28]
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	200f      	movs	r0, #15
 8000e96:	f000 fac5 	bl	8001424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 fad7 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b08b      	sub	sp, #44	@ 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	2414      	movs	r4, #20
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2314      	movs	r3, #20
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f003 faf0 	bl	80044a4 <memset>
  if(huart->Instance==USART1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a34      	ldr	r2, [pc, #208]	@ (8000f9c <HAL_UART_MspInit+0xf0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d161      	bne.n	8000f92 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ece:	4b34      	ldr	r3, [pc, #208]	@ (8000fa0 <HAL_UART_MspInit+0xf4>)
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	4b33      	ldr	r3, [pc, #204]	@ (8000fa0 <HAL_UART_MspInit+0xf4>)
 8000ed4:	2180      	movs	r1, #128	@ 0x80
 8000ed6:	01c9      	lsls	r1, r1, #7
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <HAL_UART_MspInit+0xf4>)
 8000ede:	699a      	ldr	r2, [r3, #24]
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	01db      	lsls	r3, r3, #7
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <HAL_UART_MspInit+0xf4>)
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa0 <HAL_UART_MspInit+0xf4>)
 8000ef0:	2180      	movs	r1, #128	@ 0x80
 8000ef2:	0289      	lsls	r1, r1, #10
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	4b29      	ldr	r3, [pc, #164]	@ (8000fa0 <HAL_UART_MspInit+0xf4>)
 8000efa:	695a      	ldr	r2, [r3, #20]
 8000efc:	2380      	movs	r3, #128	@ 0x80
 8000efe:	029b      	lsls	r3, r3, #10
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	22c0      	movs	r2, #192	@ 0xc0
 8000f0a:	00d2      	lsls	r2, r2, #3
 8000f0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	0021      	movs	r1, r4
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2202      	movs	r2, #2
 8000f14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	187a      	adds	r2, r7, r1
 8000f2a:	2390      	movs	r3, #144	@ 0x90
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f000 fcbf 	bl	80018b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <HAL_UART_MspInit+0xfc>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f4a:	2280      	movs	r2, #128	@ 0x80
 8000f4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 fa8d 	bl	8001488 <HAL_DMA_Init>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000f72:	f7ff fd89 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f7a:	675a      	str	r2, [r3, #116]	@ 0x74
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_UART_MspInit+0xf8>)
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	201b      	movs	r0, #27
 8000f88:	f000 fa4c 	bl	8001424 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f8c:	201b      	movs	r0, #27
 8000f8e:	f000 fa5e 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b00b      	add	sp, #44	@ 0x2c
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	20000260 	.word	0x20000260
 8000fa8:	40020030 	.word	0x40020030

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc0:	46c0      	nop			@ (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f95e 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 fb79 	bl	80016de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	20000260 	.word	0x20000260

08000ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <TIM2_IRQHandler+0x14>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 fbc4 	bl	800278c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	20000190 	.word	0x20000190

08001010 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001014:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <USART1_IRQHandler+0x14>)
 8001016:	0018      	movs	r0, r3
 8001018:	f002 f87a 	bl	8003110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	200001d8 	.word	0x200001d8

08001028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  return 1;
 800102c:	2301      	movs	r3, #1
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_kill>:

int _kill(int pid, int sig)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800103e:	f003 fa87 	bl	8004550 <__errno>
 8001042:	0003      	movs	r3, r0
 8001044:	2216      	movs	r2, #22
 8001046:	601a      	str	r2, [r3, #0]
  return -1;
 8001048:	2301      	movs	r3, #1
 800104a:	425b      	negs	r3, r3
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b002      	add	sp, #8
 8001052:	bd80      	pop	{r7, pc}

08001054 <_exit>:

void _exit (int status)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800105c:	2301      	movs	r3, #1
 800105e:	425a      	negs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ffe5 	bl	8001034 <_kill>
  while (1) {}    /* Make sure we hang here */
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	e7fd      	b.n	800106a <_exit+0x16>

0800106e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e00a      	b.n	8001096 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001080:	e000      	b.n	8001084 <_read+0x16>
 8001082:	bf00      	nop
 8001084:	0001      	movs	r1, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	60ba      	str	r2, [r7, #8]
 800108c:	b2ca      	uxtb	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbf0      	blt.n	8001080 <_read+0x12>
  }

  return len;
 800109e:	687b      	ldr	r3, [r7, #4]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b006      	add	sp, #24
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e009      	b.n	80010ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0018      	movs	r0, r3
 80010c4:	e000      	b.n	80010c8 <_write+0x20>
 80010c6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbf1      	blt.n	80010ba <_write+0x12>
  }
  return len;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b006      	add	sp, #24
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_close>:

int _close(int file)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	425b      	negs	r3, r3
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2280      	movs	r2, #128	@ 0x80
 8001102:	0192      	lsls	r2, r2, #6
 8001104:	605a      	str	r2, [r3, #4]
  return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <_isatty>:

int _isatty(int file)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}

08001122 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800112e:	2300      	movs	r3, #0
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b004      	add	sp, #16
 8001136:	bd80      	pop	{r7, pc}

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	@ (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f003 f9f2 	bl	8004550 <__errno>
 800116c:	0003      	movs	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	2301      	movs	r3, #1
 8001174:	425b      	negs	r3, r3
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	18d2      	adds	r2, r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <_sbrk+0x64>)
 8001188:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b006      	add	sp, #24
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20002000 	.word	0x20002000
 8001198:	00000400 	.word	0x00000400
 800119c:	200003b4 	.word	0x200003b4
 80011a0:	20000508 	.word	0x20000508

080011a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <Reset_Handler>:
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <LoopForever+0x2>)
 80011b2:	4685      	mov	sp, r0
 80011b4:	f7ff fff6 	bl	80011a4 <SystemInit>
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <LoopForever+0x6>)
 80011ba:	490d      	ldr	r1, [pc, #52]	@ (80011f0 <LoopForever+0xa>)
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <LoopForever+0xe>)
 80011be:	2300      	movs	r3, #0
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:
 80011c2:	58d4      	ldr	r4, [r2, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:
 80011c8:	18c4      	adds	r4, r0, r3
 80011ca:	428c      	cmp	r4, r1
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <LoopForever+0x12>)
 80011d0:	4c0a      	ldr	r4, [pc, #40]	@ (80011fc <LoopForever+0x16>)
 80011d2:	2300      	movs	r3, #0
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:
 80011da:	42a2      	cmp	r2, r4
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>
 80011de:	f003 f9bd 	bl	800455c <__libc_init_array>
 80011e2:	f7ff fa45 	bl	8000670 <main>

080011e6 <LoopForever>:
 80011e6:	e7fe      	b.n	80011e6 <LoopForever>
 80011e8:	20002000 	.word	0x20002000
 80011ec:	20000000 	.word	0x20000000
 80011f0:	2000006c 	.word	0x2000006c
 80011f4:	08005370 	.word	0x08005370
 80011f8:	2000006c 	.word	0x2000006c
 80011fc:	20000508 	.word	0x20000508

08001200 <ADC1_COMP_IRQHandler>:
 8001200:	e7fe      	b.n	8001200 <ADC1_COMP_IRQHandler>
	...

08001204 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <HAL_Init+0x24>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_Init+0x24>)
 800120e:	2110      	movs	r1, #16
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f809 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121a:	f7ff fdff 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	40022000 	.word	0x40022000

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_InitTick+0x5c>)
 8001236:	681c      	ldr	r4, [r3, #0]
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_InitTick+0x60>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	0019      	movs	r1, r3
 800123e:	23fa      	movs	r3, #250	@ 0xfa
 8001240:	0098      	lsls	r0, r3, #2
 8001242:	f7fe ff6b 	bl	800011c <__udivsi3>
 8001246:	0003      	movs	r3, r0
 8001248:	0019      	movs	r1, r3
 800124a:	0020      	movs	r0, r4
 800124c:	f7fe ff66 	bl	800011c <__udivsi3>
 8001250:	0003      	movs	r3, r0
 8001252:	0018      	movs	r0, r3
 8001254:	f000 f90b 	bl	800146e <HAL_SYSTICK_Config>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d001      	beq.n	8001260 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e00f      	b.n	8001280 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d80b      	bhi.n	800127e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	2301      	movs	r3, #1
 800126a:	425b      	negs	r3, r3
 800126c:	2200      	movs	r2, #0
 800126e:	0018      	movs	r0, r3
 8001270:	f000 f8d8 	bl	8001424 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_InitTick+0x64>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	b003      	add	sp, #12
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	20000004 	.word	0x20000004
 800128c:	2000000c 	.word	0x2000000c
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_IncTick+0x1c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	001a      	movs	r2, r3
 800129e:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_IncTick+0x20>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	18d2      	adds	r2, r2, r3
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_IncTick+0x20>)
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	2000000c 	.word	0x2000000c
 80012b4:	200003b8 	.word	0x200003b8

080012b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b02      	ldr	r3, [pc, #8]	@ (80012c8 <HAL_GetTick+0x10>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	200003b8 	.word	0x200003b8

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	0002      	movs	r2, r0
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	1dfb      	adds	r3, r7, #7
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80012de:	d809      	bhi.n	80012f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	001a      	movs	r2, r3
 80012e6:	231f      	movs	r3, #31
 80012e8:	401a      	ands	r2, r3
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <__NVIC_EnableIRQ+0x30>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	4091      	lsls	r1, r2
 80012f0:	000a      	movs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
  }
}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	0002      	movs	r2, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b7f      	cmp	r3, #127	@ 0x7f
 8001314:	d828      	bhi.n	8001368 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001316:	4a2f      	ldr	r2, [pc, #188]	@ (80013d4 <__NVIC_SetPriority+0xd4>)
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b25b      	sxtb	r3, r3
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	33c0      	adds	r3, #192	@ 0xc0
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	589b      	ldr	r3, [r3, r2]
 8001326:	1dfa      	adds	r2, r7, #7
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	0011      	movs	r1, r2
 800132c:	2203      	movs	r2, #3
 800132e:	400a      	ands	r2, r1
 8001330:	00d2      	lsls	r2, r2, #3
 8001332:	21ff      	movs	r1, #255	@ 0xff
 8001334:	4091      	lsls	r1, r2
 8001336:	000a      	movs	r2, r1
 8001338:	43d2      	mvns	r2, r2
 800133a:	401a      	ands	r2, r3
 800133c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	22ff      	movs	r2, #255	@ 0xff
 8001344:	401a      	ands	r2, r3
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	2303      	movs	r3, #3
 800134e:	4003      	ands	r3, r0
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001354:	481f      	ldr	r0, [pc, #124]	@ (80013d4 <__NVIC_SetPriority+0xd4>)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	430a      	orrs	r2, r1
 8001360:	33c0      	adds	r3, #192	@ 0xc0
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001366:	e031      	b.n	80013cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001368:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <__NVIC_SetPriority+0xd8>)
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	0019      	movs	r1, r3
 8001370:	230f      	movs	r3, #15
 8001372:	400b      	ands	r3, r1
 8001374:	3b08      	subs	r3, #8
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3306      	adds	r3, #6
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	18d3      	adds	r3, r2, r3
 800137e:	3304      	adds	r3, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1dfa      	adds	r2, r7, #7
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	0011      	movs	r1, r2
 8001388:	2203      	movs	r2, #3
 800138a:	400a      	ands	r2, r1
 800138c:	00d2      	lsls	r2, r2, #3
 800138e:	21ff      	movs	r1, #255	@ 0xff
 8001390:	4091      	lsls	r1, r2
 8001392:	000a      	movs	r2, r1
 8001394:	43d2      	mvns	r2, r2
 8001396:	401a      	ands	r2, r3
 8001398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	22ff      	movs	r2, #255	@ 0xff
 80013a0:	401a      	ands	r2, r3
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0018      	movs	r0, r3
 80013a8:	2303      	movs	r3, #3
 80013aa:	4003      	ands	r3, r0
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b0:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <__NVIC_SetPriority+0xd8>)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	001c      	movs	r4, r3
 80013b8:	230f      	movs	r3, #15
 80013ba:	4023      	ands	r3, r4
 80013bc:	3b08      	subs	r3, #8
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	430a      	orrs	r2, r1
 80013c2:	3306      	adds	r3, #6
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	18c3      	adds	r3, r0, r3
 80013c8:	3304      	adds	r3, #4
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b003      	add	sp, #12
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	045b      	lsls	r3, r3, #17
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d301      	bcc.n	80013f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f0:	2301      	movs	r3, #1
 80013f2:	e010      	b.n	8001416 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <SysTick_Config+0x44>)
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	3a01      	subs	r2, #1
 80013fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fc:	2301      	movs	r3, #1
 80013fe:	425b      	negs	r3, r3
 8001400:	2103      	movs	r1, #3
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff ff7c 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <SysTick_Config+0x44>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <SysTick_Config+0x44>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	210f      	movs	r1, #15
 8001430:	187b      	adds	r3, r7, r1
 8001432:	1c02      	adds	r2, r0, #0
 8001434:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	187b      	adds	r3, r7, r1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff ff5d 	bl	8001300 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	b004      	add	sp, #16
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	0002      	movs	r2, r0
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b25b      	sxtb	r3, r3
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ff33 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff ffaf 	bl	80013dc <SysTick_Config>
 800147e:	0003      	movs	r3, r0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e036      	b.n	800150c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2221      	movs	r2, #33	@ 0x21
 80014a2:	2102      	movs	r1, #2
 80014a4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a18      	ldr	r2, [pc, #96]	@ (8001514 <HAL_DMA_Init+0x8c>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 f9c4 	bl	800187c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2221      	movs	r2, #33	@ 0x21
 80014fe:	2101      	movs	r1, #1
 8001500:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2220      	movs	r2, #32
 8001506:	2100      	movs	r1, #0
 8001508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b004      	add	sp, #16
 8001512:	bd80      	pop	{r7, pc}
 8001514:	ffffc00f 	.word	0xffffc00f

08001518 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001526:	2317      	movs	r3, #23
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2220      	movs	r2, #32
 8001532:	5c9b      	ldrb	r3, [r3, r2]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_DMA_Start_IT+0x24>
 8001538:	2302      	movs	r3, #2
 800153a:	e04f      	b.n	80015dc <HAL_DMA_Start_IT+0xc4>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2220      	movs	r2, #32
 8001540:	2101      	movs	r1, #1
 8001542:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2221      	movs	r2, #33	@ 0x21
 8001548:	5c9b      	ldrb	r3, [r3, r2]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d13a      	bne.n	80015c6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2221      	movs	r2, #33	@ 0x21
 8001554:	2102      	movs	r1, #2
 8001556:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	438a      	bics	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f954 	bl	8001822 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	210e      	movs	r1, #14
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e00f      	b.n	80015b4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	210a      	movs	r1, #10
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2104      	movs	r1, #4
 80015b0:	438a      	bics	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2101      	movs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e007      	b.n	80015d6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2220      	movs	r2, #32
 80015ca:	2100      	movs	r1, #0
 80015cc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ce:	2317      	movs	r3, #23
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80015d6:	2317      	movs	r3, #23
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	781b      	ldrb	r3, [r3, #0]
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b006      	add	sp, #24
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2221      	movs	r2, #33	@ 0x21
 80015f0:	5c9b      	ldrb	r3, [r3, r2]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d008      	beq.n	800160a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2204      	movs	r2, #4
 80015fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2220      	movs	r2, #32
 8001602:	2100      	movs	r1, #0
 8001604:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e020      	b.n	800164c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	210e      	movs	r1, #14
 8001616:	438a      	bics	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001632:	2101      	movs	r1, #1
 8001634:	4091      	lsls	r1, r2
 8001636:	000a      	movs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2221      	movs	r2, #33	@ 0x21
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	2100      	movs	r1, #0
 8001648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	210f      	movs	r1, #15
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2221      	movs	r2, #33	@ 0x21
 8001668:	5c9b      	ldrb	r3, [r3, r2]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d006      	beq.n	800167e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2204      	movs	r2, #4
 8001674:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e028      	b.n	80016d0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	210e      	movs	r1, #14
 800168a:	438a      	bics	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2101      	movs	r1, #1
 800169a:	438a      	bics	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a6:	2101      	movs	r1, #1
 80016a8:	4091      	lsls	r1, r2
 80016aa:	000a      	movs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2221      	movs	r2, #33	@ 0x21
 80016b2:	2101      	movs	r1, #1
 80016b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2220      	movs	r2, #32
 80016ba:	2100      	movs	r1, #0
 80016bc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	0010      	movs	r0, r2
 80016ce:	4798      	blx	r3
    }
  }
  return status;
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781b      	ldrb	r3, [r3, #0]
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b004      	add	sp, #16
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	2204      	movs	r2, #4
 80016fc:	409a      	lsls	r2, r3
 80016fe:	0013      	movs	r3, r2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4013      	ands	r3, r2
 8001704:	d024      	beq.n	8001750 <HAL_DMA_IRQHandler+0x72>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2204      	movs	r2, #4
 800170a:	4013      	ands	r3, r2
 800170c:	d020      	beq.n	8001750 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2220      	movs	r2, #32
 8001716:	4013      	ands	r3, r2
 8001718:	d107      	bne.n	800172a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2104      	movs	r1, #4
 8001726:	438a      	bics	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001732:	2104      	movs	r1, #4
 8001734:	4091      	lsls	r1, r2
 8001736:	000a      	movs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d100      	bne.n	8001744 <HAL_DMA_IRQHandler+0x66>
 8001742:	e06a      	b.n	800181a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	0010      	movs	r0, r2
 800174c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800174e:	e064      	b.n	800181a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	2202      	movs	r2, #2
 8001756:	409a      	lsls	r2, r3
 8001758:	0013      	movs	r3, r2
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	d02b      	beq.n	80017b8 <HAL_DMA_IRQHandler+0xda>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d027      	beq.n	80017b8 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2220      	movs	r2, #32
 8001770:	4013      	ands	r3, r2
 8001772:	d10b      	bne.n	800178c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	210a      	movs	r1, #10
 8001780:	438a      	bics	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2221      	movs	r2, #33	@ 0x21
 8001788:	2101      	movs	r1, #1
 800178a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	2102      	movs	r1, #2
 8001796:	4091      	lsls	r1, r2
 8001798:	000a      	movs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2220      	movs	r2, #32
 80017a0:	2100      	movs	r1, #0
 80017a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d036      	beq.n	800181a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	0010      	movs	r0, r2
 80017b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017b6:	e030      	b.n	800181a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4013      	ands	r3, r2
 80017c6:	d028      	beq.n	800181a <HAL_DMA_IRQHandler+0x13c>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2208      	movs	r2, #8
 80017cc:	4013      	ands	r3, r2
 80017ce:	d024      	beq.n	800181a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	210e      	movs	r1, #14
 80017dc:	438a      	bics	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e8:	2101      	movs	r1, #1
 80017ea:	4091      	lsls	r1, r2
 80017ec:	000a      	movs	r2, r1
 80017ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2221      	movs	r2, #33	@ 0x21
 80017fa:	2101      	movs	r1, #1
 80017fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2220      	movs	r2, #32
 8001802:	2100      	movs	r1, #0
 8001804:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	0010      	movs	r0, r2
 8001816:	4798      	blx	r3
    }
  }
}
 8001818:	e7ff      	b.n	800181a <HAL_DMA_IRQHandler+0x13c>
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	b004      	add	sp, #16
 8001820:	bd80      	pop	{r7, pc}

08001822 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001838:	2101      	movs	r1, #1
 800183a:	4091      	lsls	r1, r2
 800183c:	000a      	movs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b10      	cmp	r3, #16
 800184e:	d108      	bne.n	8001862 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001860:	e007      	b.n	8001872 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	60da      	str	r2, [r3, #12]
}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <DMA_CalcBaseAndBitshift+0x30>)
 800188a:	4694      	mov	ip, r2
 800188c:	4463      	add	r3, ip
 800188e:	2114      	movs	r1, #20
 8001890:	0018      	movs	r0, r3
 8001892:	f7fe fc43 	bl	800011c <__udivsi3>
 8001896:	0003      	movs	r3, r0
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a03      	ldr	r2, [pc, #12]	@ (80018b0 <DMA_CalcBaseAndBitshift+0x34>)
 80018a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80018a4:	46c0      	nop			@ (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b002      	add	sp, #8
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	bffdfff8 	.word	0xbffdfff8
 80018b0:	40020000 	.word	0x40020000

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e14f      	b.n	8001b64 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4091      	lsls	r1, r2
 80018ce:	000a      	movs	r2, r1
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d100      	bne.n	80018dc <HAL_GPIO_Init+0x28>
 80018da:	e140      	b.n	8001b5e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d005      	beq.n	80018f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	409a      	lsls	r2, r3
 8001902:	0013      	movs	r3, r2
 8001904:	43da      	mvns	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	43da      	mvns	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	2201      	movs	r2, #1
 8001942:	401a      	ands	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	409a      	lsls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	2b03      	cmp	r3, #3
 8001960:	d017      	beq.n	8001992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	409a      	lsls	r2, r3
 8001984:	0013      	movs	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	4013      	ands	r3, r2
 800199a:	2b02      	cmp	r3, #2
 800199c:	d123      	bne.n	80019e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	58d3      	ldr	r3, [r2, r3]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	220f      	movs	r2, #15
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	43da      	mvns	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2107      	movs	r1, #7
 80019ca:	400b      	ands	r3, r1
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	2203      	movs	r2, #3
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2203      	movs	r2, #3
 8001a04:	401a      	ands	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	23c0      	movs	r3, #192	@ 0xc0
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d100      	bne.n	8001a28 <HAL_GPIO_Init+0x174>
 8001a26:	e09a      	b.n	8001b5e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a28:	4b54      	ldr	r3, [pc, #336]	@ (8001b7c <HAL_GPIO_Init+0x2c8>)
 8001a2a:	699a      	ldr	r2, [r3, #24]
 8001a2c:	4b53      	ldr	r3, [pc, #332]	@ (8001b7c <HAL_GPIO_Init+0x2c8>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	619a      	str	r2, [r3, #24]
 8001a34:	4b51      	ldr	r3, [pc, #324]	@ (8001b7c <HAL_GPIO_Init+0x2c8>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a40:	4a4f      	ldr	r2, [pc, #316]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	589b      	ldr	r3, [r3, r2]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2203      	movs	r2, #3
 8001a52:	4013      	ands	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	0013      	movs	r3, r2
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	2390      	movs	r3, #144	@ 0x90
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x1e2>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a44      	ldr	r2, [pc, #272]	@ (8001b84 <HAL_GPIO_Init+0x2d0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x1de>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a43      	ldr	r2, [pc, #268]	@ (8001b88 <HAL_GPIO_Init+0x2d4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x1da>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a42      	ldr	r2, [pc, #264]	@ (8001b8c <HAL_GPIO_Init+0x2d8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x1d6>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x1e4>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x1e4>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x1e4>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x1e4>
 8001a96:	2300      	movs	r3, #0
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	@ (8001b80 <HAL_GPIO_Init+0x2cc>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	035b      	lsls	r3, r3, #13
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ada:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43da      	mvns	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	039b      	lsls	r3, r3, #14
 8001af8:	4013      	ands	r3, r2
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43da      	mvns	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	029b      	lsls	r3, r3, #10
 8001b22:	4013      	ands	r3, r2
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b34:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	025b      	lsls	r3, r3, #9
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_GPIO_Init+0x2dc>)
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	40da      	lsrs	r2, r3
 8001b6c:	1e13      	subs	r3, r2, #0
 8001b6e:	d000      	beq.n	8001b72 <HAL_GPIO_Init+0x2be>
 8001b70:	e6a8      	b.n	80018c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b006      	add	sp, #24
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	48000c00 	.word	0x48000c00
 8001b90:	40010400 	.word	0x40010400

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	0008      	movs	r0, r1
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	1cbb      	adds	r3, r7, #2
 8001ba2:	1c02      	adds	r2, r0, #0
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	1c7b      	adds	r3, r7, #1
 8001ba8:	1c0a      	adds	r2, r1, #0
 8001baa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bac:	1c7b      	adds	r3, r7, #1
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d004      	beq.n	8001bbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb4:	1cbb      	adds	r3, r7, #2
 8001bb6:	881a      	ldrh	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bbe:	1cbb      	adds	r3, r7, #2
 8001bc0:	881a      	ldrh	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e301      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d100      	bne.n	8001bee <HAL_RCC_OscConfig+0x1e>
 8001bec:	e08d      	b.n	8001d0a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bee:	4bc3      	ldr	r3, [pc, #780]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d00e      	beq.n	8001c18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bfa:	4bc0      	ldr	r3, [pc, #768]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	220c      	movs	r2, #12
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d116      	bne.n	8001c34 <HAL_RCC_OscConfig+0x64>
 8001c06:	4bbd      	ldr	r3, [pc, #756]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	401a      	ands	r2, r3
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10d      	bne.n	8001c34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4bb8      	ldr	r3, [pc, #736]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	029b      	lsls	r3, r3, #10
 8001c20:	4013      	ands	r3, r2
 8001c22:	d100      	bne.n	8001c26 <HAL_RCC_OscConfig+0x56>
 8001c24:	e070      	b.n	8001d08 <HAL_RCC_OscConfig+0x138>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d000      	beq.n	8001c30 <HAL_RCC_OscConfig+0x60>
 8001c2e:	e06b      	b.n	8001d08 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e2d8      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x7c>
 8001c3c:	4baf      	ldr	r3, [pc, #700]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4bae      	ldr	r3, [pc, #696]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	0249      	lsls	r1, r1, #9
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e02f      	b.n	8001cac <HAL_RCC_OscConfig+0xdc>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x9e>
 8001c54:	4ba9      	ldr	r3, [pc, #676]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4ba8      	ldr	r3, [pc, #672]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	49a9      	ldr	r1, [pc, #676]	@ (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	4ba6      	ldr	r3, [pc, #664]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4ba5      	ldr	r3, [pc, #660]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c66:	49a7      	ldr	r1, [pc, #668]	@ (8001f04 <HAL_RCC_OscConfig+0x334>)
 8001c68:	400a      	ands	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e01e      	b.n	8001cac <HAL_RCC_OscConfig+0xdc>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b05      	cmp	r3, #5
 8001c74:	d10e      	bne.n	8001c94 <HAL_RCC_OscConfig+0xc4>
 8001c76:	4ba1      	ldr	r3, [pc, #644]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4ba0      	ldr	r3, [pc, #640]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	02c9      	lsls	r1, r1, #11
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	4b9d      	ldr	r3, [pc, #628]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b9c      	ldr	r3, [pc, #624]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	2180      	movs	r1, #128	@ 0x80
 8001c8c:	0249      	lsls	r1, r1, #9
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0xdc>
 8001c94:	4b99      	ldr	r3, [pc, #612]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b98      	ldr	r3, [pc, #608]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	4999      	ldr	r1, [pc, #612]	@ (8001f00 <HAL_RCC_OscConfig+0x330>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	4b96      	ldr	r3, [pc, #600]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b95      	ldr	r3, [pc, #596]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	4997      	ldr	r1, [pc, #604]	@ (8001f04 <HAL_RCC_OscConfig+0x334>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d014      	beq.n	8001cde <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fb00 	bl	80012b8 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbe:	f7ff fafb 	bl	80012b8 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	@ 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e28a      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	029b      	lsls	r3, r3, #10
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0xee>
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff faeb 	bl	80012b8 <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fae6 	bl	80012b8 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e275      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b80      	ldr	r3, [pc, #512]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	2380      	movs	r3, #128	@ 0x80
 8001d00:	029b      	lsls	r3, r3, #10
 8001d02:	4013      	ands	r3, r2
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x118>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	d100      	bne.n	8001d16 <HAL_RCC_OscConfig+0x146>
 8001d14:	e069      	b.n	8001dea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d16:	4b79      	ldr	r3, [pc, #484]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d00b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d20:	4b76      	ldr	r3, [pc, #472]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	220c      	movs	r2, #12
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d11c      	bne.n	8001d66 <HAL_RCC_OscConfig+0x196>
 8001d2c:	4b73      	ldr	r3, [pc, #460]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	4013      	ands	r3, r2
 8001d36:	d116      	bne.n	8001d66 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d38:	4b70      	ldr	r3, [pc, #448]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e24b      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	22f8      	movs	r2, #248	@ 0xf8
 8001d54:	4393      	bics	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	00da      	lsls	r2, r3, #3
 8001d5e:	4b67      	ldr	r3, [pc, #412]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d64:	e041      	b.n	8001dea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d024      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6e:	4b63      	ldr	r3, [pc, #396]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b62      	ldr	r3, [pc, #392]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	430a      	orrs	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fa9d 	bl	80012b8 <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d84:	f7ff fa98 	bl	80012b8 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e227      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d96:	4b59      	ldr	r3, [pc, #356]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d0f1      	beq.n	8001d84 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b56      	ldr	r3, [pc, #344]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	22f8      	movs	r2, #248	@ 0xf8
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00da      	lsls	r2, r3, #3
 8001db0:	4b52      	ldr	r3, [pc, #328]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e018      	b.n	8001dea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db8:	4b50      	ldr	r3, [pc, #320]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fa78 	bl	80012b8 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fa73 	bl	80012b8 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e202      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de0:	4b46      	ldr	r3, [pc, #280]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d1f1      	bne.n	8001dce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2208      	movs	r2, #8
 8001df0:	4013      	ands	r3, r2
 8001df2:	d036      	beq.n	8001e62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d019      	beq.n	8001e30 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e00:	4b3e      	ldr	r3, [pc, #248]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff fa56 	bl	80012b8 <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e12:	f7ff fa51 	bl	80012b8 <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1e0      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e24:	4b35      	ldr	r3, [pc, #212]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d0f1      	beq.n	8001e12 <HAL_RCC_OscConfig+0x242>
 8001e2e:	e018      	b.n	8001e62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e30:	4b32      	ldr	r3, [pc, #200]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e34:	4b31      	ldr	r3, [pc, #196]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	438a      	bics	r2, r1
 8001e3a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fa3c 	bl	80012b8 <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e46:	f7ff fa37 	bl	80012b8 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1c6      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	4b28      	ldr	r3, [pc, #160]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d1f1      	bne.n	8001e46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2204      	movs	r2, #4
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d100      	bne.n	8001e6e <HAL_RCC_OscConfig+0x29e>
 8001e6c:	e0b4      	b.n	8001fd8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	201f      	movs	r0, #31
 8001e70:	183b      	adds	r3, r7, r0
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e76:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	055b      	lsls	r3, r3, #21
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d110      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e88:	2180      	movs	r1, #128	@ 0x80
 8001e8a:	0549      	lsls	r1, r1, #21
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	61da      	str	r2, [r3, #28]
 8001e90:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	055b      	lsls	r3, r3, #21
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d11a      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001eb6:	2180      	movs	r1, #128	@ 0x80
 8001eb8:	0049      	lsls	r1, r1, #1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f9fb 	bl	80012b8 <HAL_GetTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec8:	f7ff f9f6 	bl	80012b8 <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	@ 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e185      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x338>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	@ 0x80
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10e      	bne.n	8001f0c <HAL_RCC_OscConfig+0x33c>
 8001eee:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	4b02      	ldr	r3, [pc, #8]	@ (8001efc <HAL_RCC_OscConfig+0x32c>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	621a      	str	r2, [r3, #32]
 8001efa:	e035      	b.n	8001f68 <HAL_RCC_OscConfig+0x398>
 8001efc:	40021000 	.word	0x40021000
 8001f00:	fffeffff 	.word	0xfffeffff
 8001f04:	fffbffff 	.word	0xfffbffff
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x35e>
 8001f14:	4bb6      	ldr	r3, [pc, #728]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	4bb5      	ldr	r3, [pc, #724]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	438a      	bics	r2, r1
 8001f1e:	621a      	str	r2, [r3, #32]
 8001f20:	4bb3      	ldr	r3, [pc, #716]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	4bb2      	ldr	r3, [pc, #712]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f26:	2104      	movs	r1, #4
 8001f28:	438a      	bics	r2, r1
 8001f2a:	621a      	str	r2, [r3, #32]
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x398>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x380>
 8001f36:	4bae      	ldr	r3, [pc, #696]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f38:	6a1a      	ldr	r2, [r3, #32]
 8001f3a:	4bad      	ldr	r3, [pc, #692]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	621a      	str	r2, [r3, #32]
 8001f42:	4bab      	ldr	r3, [pc, #684]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	4baa      	ldr	r3, [pc, #680]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	621a      	str	r2, [r3, #32]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0x398>
 8001f50:	4ba7      	ldr	r3, [pc, #668]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4ba6      	ldr	r3, [pc, #664]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f56:	2101      	movs	r1, #1
 8001f58:	438a      	bics	r2, r1
 8001f5a:	621a      	str	r2, [r3, #32]
 8001f5c:	4ba4      	ldr	r3, [pc, #656]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f5e:	6a1a      	ldr	r2, [r3, #32]
 8001f60:	4ba3      	ldr	r3, [pc, #652]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f62:	2104      	movs	r1, #4
 8001f64:	438a      	bics	r2, r1
 8001f66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d014      	beq.n	8001f9a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7ff f9a2 	bl	80012b8 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7ff f99d 	bl	80012b8 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a9b      	ldr	r2, [pc, #620]	@ (80021f4 <HAL_RCC_OscConfig+0x624>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e12b      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8e:	4b98      	ldr	r3, [pc, #608]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x3aa>
 8001f98:	e013      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f98d 	bl	80012b8 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f988 	bl	80012b8 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	4a91      	ldr	r2, [pc, #580]	@ (80021f4 <HAL_RCC_OscConfig+0x624>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e116      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc2:	231f      	movs	r3, #31
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fcc:	4b88      	ldr	r3, [pc, #544]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	4b87      	ldr	r3, [pc, #540]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001fd2:	4989      	ldr	r1, [pc, #548]	@ (80021f8 <HAL_RCC_OscConfig+0x628>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d063      	beq.n	80020aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d12a      	bne.n	8002040 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fea:	4b81      	ldr	r3, [pc, #516]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fee:	4b80      	ldr	r3, [pc, #512]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	430a      	orrs	r2, r1
 8002000:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7ff f959 	bl	80012b8 <HAL_GetTick>
 8002006:	0003      	movs	r3, r0
 8002008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800200c:	f7ff f954 	bl	80012b8 <HAL_GetTick>
 8002010:	0002      	movs	r2, r0
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e0e3      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800201e:	4b74      	ldr	r3, [pc, #464]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002022:	2202      	movs	r2, #2
 8002024:	4013      	ands	r3, r2
 8002026:	d0f1      	beq.n	800200c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002028:	4b71      	ldr	r3, [pc, #452]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800202a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202c:	22f8      	movs	r2, #248	@ 0xf8
 800202e:	4393      	bics	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	00da      	lsls	r2, r3, #3
 8002038:	4b6d      	ldr	r3, [pc, #436]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800203a:	430a      	orrs	r2, r1
 800203c:	635a      	str	r2, [r3, #52]	@ 0x34
 800203e:	e034      	b.n	80020aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	3305      	adds	r3, #5
 8002046:	d111      	bne.n	800206c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002048:	4b69      	ldr	r3, [pc, #420]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800204a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800204c:	4b68      	ldr	r3, [pc, #416]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800204e:	2104      	movs	r1, #4
 8002050:	438a      	bics	r2, r1
 8002052:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002054:	4b66      	ldr	r3, [pc, #408]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002058:	22f8      	movs	r2, #248	@ 0xf8
 800205a:	4393      	bics	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	00da      	lsls	r2, r3, #3
 8002064:	4b62      	ldr	r3, [pc, #392]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002066:	430a      	orrs	r2, r1
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
 800206a:	e01e      	b.n	80020aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800206c:	4b60      	ldr	r3, [pc, #384]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800206e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002070:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002072:	2104      	movs	r1, #4
 8002074:	430a      	orrs	r2, r1
 8002076:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002078:	4b5d      	ldr	r3, [pc, #372]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800207a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800207c:	4b5c      	ldr	r3, [pc, #368]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800207e:	2101      	movs	r1, #1
 8002080:	438a      	bics	r2, r1
 8002082:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7ff f918 	bl	80012b8 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800208e:	f7ff f913 	bl	80012b8 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0a2      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020a0:	4b53      	ldr	r3, [pc, #332]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 80020a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d1f1      	bne.n	800208e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d100      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4e4>
 80020b2:	e097      	b.n	80021e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b4:	4b4e      	ldr	r3, [pc, #312]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	220c      	movs	r2, #12
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d100      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4f2>
 80020c0:	e06b      	b.n	800219a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d14c      	bne.n	8002164 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b49      	ldr	r3, [pc, #292]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b48      	ldr	r3, [pc, #288]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 80020d0:	494a      	ldr	r1, [pc, #296]	@ (80021fc <HAL_RCC_OscConfig+0x62c>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff f8ef 	bl	80012b8 <HAL_GetTick>
 80020da:	0003      	movs	r3, r0
 80020dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f8ea 	bl	80012b8 <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e079      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	@ 0x80
 80020f8:	049b      	lsls	r3, r3, #18
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fe:	4b3c      	ldr	r3, [pc, #240]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002102:	220f      	movs	r2, #15
 8002104:	4393      	bics	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210c:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800210e:	430a      	orrs	r2, r1
 8002110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002112:	4b37      	ldr	r3, [pc, #220]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a3a      	ldr	r2, [pc, #232]	@ (8002200 <HAL_RCC_OscConfig+0x630>)
 8002118:	4013      	ands	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	431a      	orrs	r2, r3
 8002126:	4b32      	ldr	r3, [pc, #200]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b30      	ldr	r3, [pc, #192]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b2f      	ldr	r3, [pc, #188]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002132:	2180      	movs	r1, #128	@ 0x80
 8002134:	0449      	lsls	r1, r1, #17
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7ff f8bd 	bl	80012b8 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f8b8 	bl	80012b8 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e047      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002156:	4b26      	ldr	r3, [pc, #152]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	2380      	movs	r3, #128	@ 0x80
 800215c:	049b      	lsls	r3, r3, #18
 800215e:	4013      	ands	r3, r2
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x574>
 8002162:	e03f      	b.n	80021e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002164:	4b22      	ldr	r3, [pc, #136]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800216a:	4924      	ldr	r1, [pc, #144]	@ (80021fc <HAL_RCC_OscConfig+0x62c>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f8a2 	bl	80012b8 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217a:	f7ff f89d 	bl	80012b8 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e02c      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218c:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	049b      	lsls	r3, r3, #18
 8002194:	4013      	ands	r3, r2
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0x5aa>
 8002198:	e024      	b.n	80021e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e01f      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021ac:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <HAL_RCC_OscConfig+0x620>)
 80021ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	401a      	ands	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	429a      	cmp	r2, r3
 80021c0:	d10e      	bne.n	80021e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	220f      	movs	r2, #15
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	23f0      	movs	r3, #240	@ 0xf0
 80021d4:	039b      	lsls	r3, r3, #14
 80021d6:	401a      	ands	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b008      	add	sp, #32
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	40021000 	.word	0x40021000
 80021f4:	00001388 	.word	0x00001388
 80021f8:	efffffff 	.word	0xefffffff
 80021fc:	feffffff 	.word	0xfeffffff
 8002200:	ffc2ffff 	.word	0xffc2ffff

08002204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b3      	b.n	8002380 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b5b      	ldr	r3, [pc, #364]	@ (8002388 <HAL_RCC_ClockConfig+0x184>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2201      	movs	r2, #1
 800221e:	4013      	ands	r3, r2
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d911      	bls.n	800224a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b58      	ldr	r3, [pc, #352]	@ (8002388 <HAL_RCC_ClockConfig+0x184>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	4393      	bics	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	4b55      	ldr	r3, [pc, #340]	@ (8002388 <HAL_RCC_ClockConfig+0x184>)
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002238:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <HAL_RCC_ClockConfig+0x184>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	4013      	ands	r3, r2
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e09a      	b.n	8002380 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d015      	beq.n	8002280 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2204      	movs	r2, #4
 800225a:	4013      	ands	r3, r2
 800225c:	d006      	beq.n	800226c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800225e:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 8002264:	21e0      	movs	r1, #224	@ 0xe0
 8002266:	00c9      	lsls	r1, r1, #3
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	22f0      	movs	r2, #240	@ 0xf0
 8002272:	4393      	bics	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	4b44      	ldr	r3, [pc, #272]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b3e      	ldr	r3, [pc, #248]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	@ 0x80
 8002298:	029b      	lsls	r3, r3, #10
 800229a:	4013      	ands	r3, r2
 800229c:	d114      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06e      	b.n	8002380 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b38      	ldr	r3, [pc, #224]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	049b      	lsls	r3, r3, #18
 80022b2:	4013      	ands	r3, r2
 80022b4:	d108      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e062      	b.n	8002380 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b34      	ldr	r3, [pc, #208]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2202      	movs	r2, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e05b      	b.n	8002380 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c8:	4b30      	ldr	r3, [pc, #192]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2203      	movs	r2, #3
 80022ce:	4393      	bics	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4b2d      	ldr	r3, [pc, #180]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7fe ffec 	bl	80012b8 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e4:	e009      	b.n	80022fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e6:	f7fe ffe7 	bl	80012b8 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	4a27      	ldr	r2, [pc, #156]	@ (8002390 <HAL_RCC_ClockConfig+0x18c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e042      	b.n	8002380 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	220c      	movs	r2, #12
 8002300:	401a      	ands	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1ec      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <HAL_RCC_ClockConfig+0x184>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2201      	movs	r2, #1
 8002312:	4013      	ands	r3, r2
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d211      	bcs.n	800233e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_RCC_ClockConfig+0x184>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2201      	movs	r2, #1
 8002320:	4393      	bics	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <HAL_RCC_ClockConfig+0x184>)
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232c:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_RCC_ClockConfig+0x184>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e020      	b.n	8002380 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2204      	movs	r2, #4
 8002344:	4013      	ands	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b10      	ldr	r3, [pc, #64]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a11      	ldr	r2, [pc, #68]	@ (8002394 <HAL_RCC_ClockConfig+0x190>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 8002358:	430a      	orrs	r2, r1
 800235a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800235c:	f000 f820 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002360:	0001      	movs	r1, r0
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_RCC_ClockConfig+0x188>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	220f      	movs	r2, #15
 800236a:	4013      	ands	r3, r2
 800236c:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <HAL_RCC_ClockConfig+0x194>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	000a      	movs	r2, r1
 8002372:	40da      	lsrs	r2, r3
 8002374:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_RCC_ClockConfig+0x198>)
 8002376:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002378:	2003      	movs	r0, #3
 800237a:	f7fe ff57 	bl	800122c <HAL_InitTick>
  
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b004      	add	sp, #16
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
 8002390:	00001388 	.word	0x00001388
 8002394:	fffff8ff 	.word	0xfffff8ff
 8002398:	08005250 	.word	0x08005250
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	220c      	movs	r2, #12
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d002      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ce:	e02c      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023d2:	613b      	str	r3, [r7, #16]
      break;
 80023d4:	e02c      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	220f      	movs	r2, #15
 80023dc:	4013      	ands	r3, r2
 80023de:	4a19      	ldr	r2, [pc, #100]	@ (8002444 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023e0:	5cd3      	ldrb	r3, [r2, r3]
 80023e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023e4:	4b15      	ldr	r3, [pc, #84]	@ (800243c <HAL_RCC_GetSysClockFreq+0x9c>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	220f      	movs	r2, #15
 80023ea:	4013      	ands	r3, r2
 80023ec:	4a16      	ldr	r2, [pc, #88]	@ (8002448 <HAL_RCC_GetSysClockFreq+0xa8>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	4013      	ands	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	4810      	ldr	r0, [pc, #64]	@ (8002440 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002400:	f7fd fe8c 	bl	800011c <__udivsi3>
 8002404:	0003      	movs	r3, r0
 8002406:	001a      	movs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4353      	muls	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e009      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	000a      	movs	r2, r1
 8002414:	0152      	lsls	r2, r2, #5
 8002416:	1a52      	subs	r2, r2, r1
 8002418:	0193      	lsls	r3, r2, #6
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	185b      	adds	r3, r3, r1
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	613b      	str	r3, [r7, #16]
      break;
 8002428:	e002      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800242a:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_RCC_GetSysClockFreq+0xa0>)
 800242c:	613b      	str	r3, [r7, #16]
      break;
 800242e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002430:	693b      	ldr	r3, [r7, #16]
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b006      	add	sp, #24
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	40021000 	.word	0x40021000
 8002440:	007a1200 	.word	0x007a1200
 8002444:	08005268 	.word	0x08005268
 8002448:	08005278 	.word	0x08005278

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b02      	ldr	r3, [pc, #8]	@ (800245c <HAL_RCC_GetHCLKFreq+0x10>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002464:	f7ff fff2 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002468:	0001      	movs	r1, r0
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	2207      	movs	r2, #7
 8002472:	4013      	ands	r3, r2
 8002474:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	40d9      	lsrs	r1, r3
 800247a:	000b      	movs	r3, r1
}    
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	40021000 	.word	0x40021000
 8002488:	08005260 	.word	0x08005260

0800248c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	025b      	lsls	r3, r3, #9
 80024a4:	4013      	ands	r3, r2
 80024a6:	d100      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024a8:	e08e      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80024aa:	2017      	movs	r0, #23
 80024ac:	183b      	adds	r3, r7, r0
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	2380      	movs	r3, #128	@ 0x80
 80024b8:	055b      	lsls	r3, r3, #21
 80024ba:	4013      	ands	r3, r2
 80024bc:	d110      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b5c      	ldr	r3, [pc, #368]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	0549      	lsls	r1, r1, #21
 80024c8:	430a      	orrs	r2, r1
 80024ca:	61da      	str	r2, [r3, #28]
 80024cc:	4b58      	ldr	r3, [pc, #352]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	055b      	lsls	r3, r3, #21
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	183b      	adds	r3, r7, r0
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	4b54      	ldr	r3, [pc, #336]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d11a      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ec:	4b51      	ldr	r3, [pc, #324]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b50      	ldr	r3, [pc, #320]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80024f2:	2180      	movs	r1, #128	@ 0x80
 80024f4:	0049      	lsls	r1, r1, #1
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fedd 	bl	80012b8 <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	e008      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fed8 	bl	80012b8 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e087      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002516:	4b47      	ldr	r3, [pc, #284]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4013      	ands	r3, r2
 8002520:	d0f0      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002522:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002524:	6a1a      	ldr	r2, [r3, #32]
 8002526:	23c0      	movs	r3, #192	@ 0xc0
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4013      	ands	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d034      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	23c0      	movs	r3, #192	@ 0xc0
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4013      	ands	r3, r2
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d02c      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002544:	4b3a      	ldr	r3, [pc, #232]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a3b      	ldr	r2, [pc, #236]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800254a:	4013      	ands	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254e:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002550:	6a1a      	ldr	r2, [r3, #32]
 8002552:	4b37      	ldr	r3, [pc, #220]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002554:	2180      	movs	r1, #128	@ 0x80
 8002556:	0249      	lsls	r1, r1, #9
 8002558:	430a      	orrs	r2, r1
 800255a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800255c:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800255e:	6a1a      	ldr	r2, [r3, #32]
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002562:	4936      	ldr	r1, [pc, #216]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002564:	400a      	ands	r2, r1
 8002566:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002568:	4b31      	ldr	r3, [pc, #196]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fe fe9f 	bl	80012b8 <HAL_GetTick>
 800257a:	0003      	movs	r3, r0
 800257c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257e:	e009      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe fe9a 	bl	80012b8 <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	4a2d      	ldr	r2, [pc, #180]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e048      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002594:	4b26      	ldr	r3, [pc, #152]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	2202      	movs	r2, #2
 800259a:	4013      	ands	r3, r2
 800259c:	d0f0      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259e:	4b24      	ldr	r3, [pc, #144]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a25      	ldr	r2, [pc, #148]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4b20      	ldr	r3, [pc, #128]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025ae:	430a      	orrs	r2, r1
 80025b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b2:	2317      	movs	r3, #23
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025c2:	4920      	ldr	r1, [pc, #128]	@ (8002644 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2201      	movs	r2, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d2:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	2203      	movs	r2, #3
 80025d8:	4393      	bics	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2220      	movs	r2, #32
 80025ec:	4013      	ands	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	2210      	movs	r2, #16
 80025f6:	4393      	bics	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002600:	430a      	orrs	r2, r1
 8002602:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	@ 0x80
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4013      	ands	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002610:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	2240      	movs	r2, #64	@ 0x40
 8002616:	4393      	bics	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002620:	430a      	orrs	r2, r1
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b006      	add	sp, #24
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
 8002638:	fffffcff 	.word	0xfffffcff
 800263c:	fffeffff 	.word	0xfffeffff
 8002640:	00001388 	.word	0x00001388
 8002644:	efffffff 	.word	0xefffffff

08002648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e042      	b.n	80026e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	223d      	movs	r2, #61	@ 0x3d
 800265e:	5c9b      	ldrb	r3, [r3, r2]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	223c      	movs	r2, #60	@ 0x3c
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f7fe fbf7 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223d      	movs	r2, #61	@ 0x3d
 800267a:	2102      	movs	r1, #2
 800267c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	0019      	movs	r1, r3
 8002688:	0010      	movs	r0, r2
 800268a:	f000 fa61 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2246      	movs	r2, #70	@ 0x46
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223e      	movs	r2, #62	@ 0x3e
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	223f      	movs	r2, #63	@ 0x3f
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2241      	movs	r2, #65	@ 0x41
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2242      	movs	r2, #66	@ 0x42
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2243      	movs	r2, #67	@ 0x43
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2244      	movs	r2, #68	@ 0x44
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2245      	movs	r2, #69	@ 0x45
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223d      	movs	r2, #61	@ 0x3d
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	223d      	movs	r2, #61	@ 0x3d
 80026f4:	5c9b      	ldrb	r3, [r3, r2]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d001      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e03b      	b.n	8002778 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	223d      	movs	r2, #61	@ 0x3d
 8002704:	2102      	movs	r1, #2
 8002706:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2101      	movs	r1, #1
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_TIM_Base_Start_IT+0x98>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00f      	beq.n	8002742 <HAL_TIM_Base_Start_IT+0x5a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	05db      	lsls	r3, r3, #23
 800272a:	429a      	cmp	r2, r3
 800272c:	d009      	beq.n	8002742 <HAL_TIM_Base_Start_IT+0x5a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <HAL_TIM_Base_Start_IT+0x9c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_TIM_Base_Start_IT+0x5a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a12      	ldr	r2, [pc, #72]	@ (8002788 <HAL_TIM_Base_Start_IT+0xa0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d111      	bne.n	8002766 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2207      	movs	r2, #7
 800274a:	4013      	ands	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b06      	cmp	r3, #6
 8002752:	d010      	beq.n	8002776 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2101      	movs	r1, #1
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002764:	e007      	b.n	8002776 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b004      	add	sp, #16
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40000400 	.word	0x40000400
 8002788:	40014000 	.word	0x40014000

0800278c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	d021      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2202      	movs	r2, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	d01d      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2203      	movs	r2, #3
 80027ba:	4252      	negs	r2, r2
 80027bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2203      	movs	r2, #3
 80027cc:	4013      	ands	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f9a4 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 80027d8:	e007      	b.n	80027ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 f997 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 f9a3 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	d022      	beq.n	800283e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2204      	movs	r2, #4
 80027fc:	4013      	ands	r3, r2
 80027fe:	d01e      	beq.n	800283e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2205      	movs	r2, #5
 8002806:	4252      	negs	r2, r2
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	23c0      	movs	r3, #192	@ 0xc0
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f97d 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 8002826:	e007      	b.n	8002838 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f970 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f97c 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2208      	movs	r2, #8
 8002842:	4013      	ands	r3, r2
 8002844:	d021      	beq.n	800288a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2208      	movs	r2, #8
 800284a:	4013      	ands	r3, r2
 800284c:	d01d      	beq.n	800288a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2209      	movs	r2, #9
 8002854:	4252      	negs	r2, r2
 8002856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2204      	movs	r2, #4
 800285c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2203      	movs	r2, #3
 8002866:	4013      	ands	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f957 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 8002872:	e007      	b.n	8002884 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f94a 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f000 f956 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2210      	movs	r2, #16
 800288e:	4013      	ands	r3, r2
 8002890:	d022      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2210      	movs	r2, #16
 8002896:	4013      	ands	r3, r2
 8002898:	d01e      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2211      	movs	r2, #17
 80028a0:	4252      	negs	r2, r2
 80028a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2208      	movs	r2, #8
 80028a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	23c0      	movs	r3, #192	@ 0xc0
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f930 	bl	8002b20 <HAL_TIM_IC_CaptureCallback>
 80028c0:	e007      	b.n	80028d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f923 	bl	8002b10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 f92f 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2201      	movs	r2, #1
 80028dc:	4013      	ands	r3, r2
 80028de:	d00c      	beq.n	80028fa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d008      	beq.n	80028fa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	4252      	negs	r2, r2
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7fe f8bf 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2280      	movs	r2, #128	@ 0x80
 80028fe:	4013      	ands	r3, r2
 8002900:	d00c      	beq.n	800291c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	4013      	ands	r3, r2
 8002908:	d008      	beq.n	800291c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2281      	movs	r2, #129	@ 0x81
 8002910:	4252      	negs	r2, r2
 8002912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f000 faa8 	bl	8002e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2240      	movs	r2, #64	@ 0x40
 8002920:	4013      	ands	r3, r2
 8002922:	d00c      	beq.n	800293e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2240      	movs	r2, #64	@ 0x40
 8002928:	4013      	ands	r3, r2
 800292a:	d008      	beq.n	800293e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2241      	movs	r2, #65	@ 0x41
 8002932:	4252      	negs	r2, r2
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f901 	bl	8002b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2220      	movs	r2, #32
 8002942:	4013      	ands	r3, r2
 8002944:	d00c      	beq.n	8002960 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	4013      	ands	r3, r2
 800294c:	d008      	beq.n	8002960 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2221      	movs	r2, #33	@ 0x21
 8002954:	4252      	negs	r2, r2
 8002956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	0018      	movs	r0, r3
 800295c:	f000 fa7e 	bl	8002e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002960:	46c0      	nop			@ (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	b004      	add	sp, #16
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	230f      	movs	r3, #15
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	223c      	movs	r2, #60	@ 0x3c
 800297e:	5c9b      	ldrb	r3, [r3, r2]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x20>
 8002984:	2302      	movs	r3, #2
 8002986:	e0bc      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x19a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	223c      	movs	r2, #60	@ 0x3c
 800298c:	2101      	movs	r1, #1
 800298e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	223d      	movs	r2, #61	@ 0x3d
 8002994:	2102      	movs	r1, #2
 8002996:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2277      	movs	r2, #119	@ 0x77
 80029a4:	4393      	bics	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4a58      	ldr	r2, [pc, #352]	@ (8002b0c <HAL_TIM_ConfigClockSource+0x1a4>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	0192      	lsls	r2, r2, #6
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d040      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0xde>
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	0192      	lsls	r2, r2, #6
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d900      	bls.n	80029ce <HAL_TIM_ConfigClockSource+0x66>
 80029cc:	e088      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029ce:	2280      	movs	r2, #128	@ 0x80
 80029d0:	0152      	lsls	r2, r2, #5
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d100      	bne.n	80029d8 <HAL_TIM_ConfigClockSource+0x70>
 80029d6:	e088      	b.n	8002aea <HAL_TIM_ConfigClockSource+0x182>
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	0152      	lsls	r2, r2, #5
 80029dc:	4293      	cmp	r3, r2
 80029de:	d900      	bls.n	80029e2 <HAL_TIM_ConfigClockSource+0x7a>
 80029e0:	e07e      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029e2:	2b70      	cmp	r3, #112	@ 0x70
 80029e4:	d018      	beq.n	8002a18 <HAL_TIM_ConfigClockSource+0xb0>
 80029e6:	d900      	bls.n	80029ea <HAL_TIM_ConfigClockSource+0x82>
 80029e8:	e07a      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029ea:	2b60      	cmp	r3, #96	@ 0x60
 80029ec:	d04f      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x126>
 80029ee:	d900      	bls.n	80029f2 <HAL_TIM_ConfigClockSource+0x8a>
 80029f0:	e076      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029f2:	2b50      	cmp	r3, #80	@ 0x50
 80029f4:	d03b      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x106>
 80029f6:	d900      	bls.n	80029fa <HAL_TIM_ConfigClockSource+0x92>
 80029f8:	e072      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 80029fa:	2b40      	cmp	r3, #64	@ 0x40
 80029fc:	d057      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x146>
 80029fe:	d900      	bls.n	8002a02 <HAL_TIM_ConfigClockSource+0x9a>
 8002a00:	e06e      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 8002a02:	2b30      	cmp	r3, #48	@ 0x30
 8002a04:	d063      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002a06:	d86b      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d060      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002a0c:	d868      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d05d      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d05b      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x166>
 8002a16:	e063      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a28:	f000 f99a 	bl	8002d60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2277      	movs	r2, #119	@ 0x77
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
      break;
 8002a44:	e052      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a56:	f000 f983 	bl	8002d60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2180      	movs	r1, #128	@ 0x80
 8002a66:	01c9      	lsls	r1, r1, #7
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
      break;
 8002a6c:	e03e      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	f000 f8f6 	bl	8002c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2150      	movs	r1, #80	@ 0x50
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 f950 	bl	8002d2c <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e02e      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	f000 f914 	bl	8002cc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2160      	movs	r1, #96	@ 0x60
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f940 	bl	8002d2c <TIM_ITRx_SetConfig>
      break;
 8002aac:	e01e      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aba:	001a      	movs	r2, r3
 8002abc:	f000 f8d6 	bl	8002c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2140      	movs	r1, #64	@ 0x40
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 f930 	bl	8002d2c <TIM_ITRx_SetConfig>
      break;
 8002acc:	e00e      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f000 f927 	bl	8002d2c <TIM_ITRx_SetConfig>
      break;
 8002ade:	e005      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
      break;
 8002ae8:	e000      	b.n	8002aec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002aea:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	223d      	movs	r2, #61	@ 0x3d
 8002af0:	2101      	movs	r1, #1
 8002af2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	223c      	movs	r2, #60	@ 0x3c
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

  return status;
 8002afc:	230f      	movs	r3, #15
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	781b      	ldrb	r3, [r3, #0]
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	ffff00ff 	.word	0xffff00ff

08002b10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a3b      	ldr	r2, [pc, #236]	@ (8002c50 <TIM_Base_SetConfig+0x100>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d008      	beq.n	8002b7a <TIM_Base_SetConfig+0x2a>
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	05db      	lsls	r3, r3, #23
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0x2a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a37      	ldr	r2, [pc, #220]	@ (8002c54 <TIM_Base_SetConfig+0x104>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2270      	movs	r2, #112	@ 0x70
 8002b7e:	4393      	bics	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a30      	ldr	r2, [pc, #192]	@ (8002c50 <TIM_Base_SetConfig+0x100>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d018      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	05db      	lsls	r3, r3, #23
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d013      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c54 <TIM_Base_SetConfig+0x104>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00f      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c58 <TIM_Base_SetConfig+0x108>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00b      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c5c <TIM_Base_SetConfig+0x10c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a29      	ldr	r2, [pc, #164]	@ (8002c60 <TIM_Base_SetConfig+0x110>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d003      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a28      	ldr	r2, [pc, #160]	@ (8002c64 <TIM_Base_SetConfig+0x114>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a27      	ldr	r2, [pc, #156]	@ (8002c68 <TIM_Base_SetConfig+0x118>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	4393      	bics	r3, r2
 8002bde:	001a      	movs	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a13      	ldr	r2, [pc, #76]	@ (8002c50 <TIM_Base_SetConfig+0x100>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_Base_SetConfig+0xce>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a14      	ldr	r2, [pc, #80]	@ (8002c5c <TIM_Base_SetConfig+0x10c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0xce>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <TIM_Base_SetConfig+0x110>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0xce>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <TIM_Base_SetConfig+0x114>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d103      	bne.n	8002c26 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4393      	bics	r3, r2
 8002c40:	001a      	movs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	611a      	str	r2, [r3, #16]
  }
}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b004      	add	sp, #16
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40002000 	.word	0x40002000
 8002c5c:	40014000 	.word	0x40014000
 8002c60:	40014400 	.word	0x40014400
 8002c64:	40014800 	.word	0x40014800
 8002c68:	fffffcff 	.word	0xfffffcff

08002c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4393      	bics	r3, r2
 8002c86:	001a      	movs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	22f0      	movs	r2, #240	@ 0xf0
 8002c96:	4393      	bics	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	220a      	movs	r2, #10
 8002ca8:	4393      	bics	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	621a      	str	r2, [r3, #32]
}
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <TIM_TI2_ConfigInputStage+0x60>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	031b      	lsls	r3, r3, #12
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	22a0      	movs	r2, #160	@ 0xa0
 8002d04:	4393      	bics	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	621a      	str	r2, [r3, #32]
}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b006      	add	sp, #24
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	ffff0fff 	.word	0xffff0fff

08002d2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2270      	movs	r2, #112	@ 0x70
 8002d40:	4393      	bics	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	609a      	str	r2, [r3, #8]
}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b004      	add	sp, #16
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4a09      	ldr	r2, [pc, #36]	@ (8002d9c <TIM_ETR_SetConfig+0x3c>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	021a      	lsls	r2, r3, #8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b006      	add	sp, #24
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	ffff00ff 	.word	0xffff00ff

08002da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	223c      	movs	r2, #60	@ 0x3c
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e047      	b.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	223c      	movs	r2, #60	@ 0x3c
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	223d      	movs	r2, #61	@ 0x3d
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2270      	movs	r2, #112	@ 0x70
 8002ddc:	4393      	bics	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00f      	beq.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	05db      	lsls	r3, r3, #23
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d009      	beq.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a11      	ldr	r2, [pc, #68]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a10      	ldr	r2, [pc, #64]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d10c      	bne.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2280      	movs	r2, #128	@ 0x80
 8002e20:	4393      	bics	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	223d      	movs	r2, #61	@ 0x3d
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	223c      	movs	r2, #60	@ 0x3c
 8002e42:	2100      	movs	r1, #0
 8002e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b004      	add	sp, #16
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40014000 	.word	0x40014000

08002e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e044      	b.n	8002f18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d107      	bne.n	8002ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2278      	movs	r2, #120	@ 0x78
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7fe f803 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2224      	movs	r2, #36	@ 0x24
 8002eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	438a      	bics	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 fd66 	bl	8003998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fc22 	bl	8003718 <UART_SetConfig>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e01c      	b.n	8002f18 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	490d      	ldr	r1, [pc, #52]	@ (8002f20 <HAL_UART_Init+0xa4>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	212a      	movs	r1, #42	@ 0x2a
 8002efa:	438a      	bics	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 fdf5 	bl	8003b00 <UART_CheckIdleState>
 8002f16:	0003      	movs	r3, r0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	ffffb7ff 	.word	0xffffb7ff

08002f24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	1dbb      	adds	r3, r7, #6
 8002f32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d000      	beq.n	8002f3e <HAL_UART_Transmit+0x1a>
 8002f3c:	e08c      	b.n	8003058 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_UART_Transmit+0x28>
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e084      	b.n	800305a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d109      	bne.n	8002f70 <HAL_UART_Transmit+0x4c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d001      	beq.n	8002f70 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e074      	b.n	800305a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2284      	movs	r2, #132	@ 0x84
 8002f74:	2100      	movs	r1, #0
 8002f76:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2221      	movs	r2, #33	@ 0x21
 8002f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f7e:	f7fe f99b 	bl	80012b8 <HAL_GetTick>
 8002f82:	0003      	movs	r3, r0
 8002f84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1dba      	adds	r2, r7, #6
 8002f8a:	2150      	movs	r1, #80	@ 0x50
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1dba      	adds	r2, r7, #6
 8002f94:	2152      	movs	r1, #82	@ 0x52
 8002f96:	8812      	ldrh	r2, [r2, #0]
 8002f98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	015b      	lsls	r3, r3, #5
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d108      	bne.n	8002fb8 <HAL_UART_Transmit+0x94>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e003      	b.n	8002fc0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc0:	e02f      	b.n	8003022 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	0013      	movs	r3, r2
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	@ 0x80
 8002fd0:	f000 fe3e 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e03b      	b.n	800305a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	05d2      	lsls	r2, r2, #23
 8002ff2:	0dd2      	lsrs	r2, r2, #23
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e007      	b.n	8003010 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3301      	adds	r3, #1
 800300e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2252      	movs	r2, #82	@ 0x52
 8003014:	5a9b      	ldrh	r3, [r3, r2]
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b299      	uxth	r1, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2252      	movs	r2, #82	@ 0x52
 8003020:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2252      	movs	r2, #82	@ 0x52
 8003026:	5a9b      	ldrh	r3, [r3, r2]
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1c9      	bne.n	8002fc2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	0013      	movs	r3, r2
 8003038:	2200      	movs	r2, #0
 800303a:	2140      	movs	r1, #64	@ 0x40
 800303c:	f000 fe08 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d004      	beq.n	800304e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e005      	b.n	800305a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b008      	add	sp, #32
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b088      	sub	sp, #32
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	1dbb      	adds	r3, r7, #6
 800306e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2280      	movs	r2, #128	@ 0x80
 8003074:	589b      	ldr	r3, [r3, r2]
 8003076:	2b20      	cmp	r3, #32
 8003078:	d145      	bne.n	8003106 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_UART_Receive_DMA+0x26>
 8003080:	1dbb      	adds	r3, r7, #6
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e03d      	b.n	8003108 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	015b      	lsls	r3, r3, #5
 8003094:	429a      	cmp	r2, r3
 8003096:	d109      	bne.n	80030ac <HAL_UART_Receive_DMA+0x4a>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2201      	movs	r2, #1
 80030a4:	4013      	ands	r3, r2
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e02d      	b.n	8003108 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	4013      	ands	r3, r2
 80030be:	d019      	beq.n	80030f4 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c0:	f3ef 8310 	mrs	r3, PRIMASK
 80030c4:	613b      	str	r3, [r7, #16]
  return(result);
 80030c6:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	2301      	movs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f383 8810 	msr	PRIMASK, r3
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2180      	movs	r1, #128	@ 0x80
 80030e2:	04c9      	lsls	r1, r1, #19
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80030f4:	1dbb      	adds	r3, r7, #6
 80030f6:	881a      	ldrh	r2, [r3, #0]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 fe17 	bl	8003d30 <UART_Start_Receive_DMA>
 8003102:	0003      	movs	r3, r0
 8003104:	e000      	b.n	8003108 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b008      	add	sp, #32
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b0ab      	sub	sp, #172	@ 0xac
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	22a4      	movs	r2, #164	@ 0xa4
 8003120:	18b9      	adds	r1, r7, r2
 8003122:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	20a0      	movs	r0, #160	@ 0xa0
 800312c:	1839      	adds	r1, r7, r0
 800312e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	219c      	movs	r1, #156	@ 0x9c
 8003138:	1879      	adds	r1, r7, r1
 800313a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800313c:	0011      	movs	r1, r2
 800313e:	18bb      	adds	r3, r7, r2
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a99      	ldr	r2, [pc, #612]	@ (80033a8 <HAL_UART_IRQHandler+0x298>)
 8003144:	4013      	ands	r3, r2
 8003146:	2298      	movs	r2, #152	@ 0x98
 8003148:	18bc      	adds	r4, r7, r2
 800314a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800314c:	18bb      	adds	r3, r7, r2
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d114      	bne.n	800317e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003154:	187b      	adds	r3, r7, r1
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2220      	movs	r2, #32
 800315a:	4013      	ands	r3, r2
 800315c:	d00f      	beq.n	800317e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800315e:	183b      	adds	r3, r7, r0
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2220      	movs	r2, #32
 8003164:	4013      	ands	r3, r2
 8003166:	d00a      	beq.n	800317e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800316c:	2b00      	cmp	r3, #0
 800316e:	d100      	bne.n	8003172 <HAL_UART_IRQHandler+0x62>
 8003170:	e29e      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	0010      	movs	r0, r2
 800317a:	4798      	blx	r3
      }
      return;
 800317c:	e298      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800317e:	2398      	movs	r3, #152	@ 0x98
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d100      	bne.n	800318a <HAL_UART_IRQHandler+0x7a>
 8003188:	e114      	b.n	80033b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800318a:	239c      	movs	r3, #156	@ 0x9c
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	4013      	ands	r3, r2
 8003194:	d106      	bne.n	80031a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003196:	23a0      	movs	r3, #160	@ 0xa0
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a83      	ldr	r2, [pc, #524]	@ (80033ac <HAL_UART_IRQHandler+0x29c>)
 800319e:	4013      	ands	r3, r2
 80031a0:	d100      	bne.n	80031a4 <HAL_UART_IRQHandler+0x94>
 80031a2:	e107      	b.n	80033b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031a4:	23a4      	movs	r3, #164	@ 0xa4
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2201      	movs	r2, #1
 80031ac:	4013      	ands	r3, r2
 80031ae:	d012      	beq.n	80031d6 <HAL_UART_IRQHandler+0xc6>
 80031b0:	23a0      	movs	r3, #160	@ 0xa0
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4013      	ands	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2284      	movs	r2, #132	@ 0x84
 80031ca:	589b      	ldr	r3, [r3, r2]
 80031cc:	2201      	movs	r2, #1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2184      	movs	r1, #132	@ 0x84
 80031d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d6:	23a4      	movs	r3, #164	@ 0xa4
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2202      	movs	r2, #2
 80031de:	4013      	ands	r3, r2
 80031e0:	d011      	beq.n	8003206 <HAL_UART_IRQHandler+0xf6>
 80031e2:	239c      	movs	r3, #156	@ 0x9c
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d00b      	beq.n	8003206 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2202      	movs	r2, #2
 80031f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2284      	movs	r2, #132	@ 0x84
 80031fa:	589b      	ldr	r3, [r3, r2]
 80031fc:	2204      	movs	r2, #4
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2184      	movs	r1, #132	@ 0x84
 8003204:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003206:	23a4      	movs	r3, #164	@ 0xa4
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2204      	movs	r2, #4
 800320e:	4013      	ands	r3, r2
 8003210:	d011      	beq.n	8003236 <HAL_UART_IRQHandler+0x126>
 8003212:	239c      	movs	r3, #156	@ 0x9c
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d00b      	beq.n	8003236 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2204      	movs	r2, #4
 8003224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2284      	movs	r2, #132	@ 0x84
 800322a:	589b      	ldr	r3, [r3, r2]
 800322c:	2202      	movs	r2, #2
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2184      	movs	r1, #132	@ 0x84
 8003234:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003236:	23a4      	movs	r3, #164	@ 0xa4
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2208      	movs	r2, #8
 800323e:	4013      	ands	r3, r2
 8003240:	d017      	beq.n	8003272 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003242:	23a0      	movs	r3, #160	@ 0xa0
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2220      	movs	r2, #32
 800324a:	4013      	ands	r3, r2
 800324c:	d105      	bne.n	800325a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800324e:	239c      	movs	r3, #156	@ 0x9c
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003258:	d00b      	beq.n	8003272 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2208      	movs	r2, #8
 8003260:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2284      	movs	r2, #132	@ 0x84
 8003266:	589b      	ldr	r3, [r3, r2]
 8003268:	2208      	movs	r2, #8
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2184      	movs	r1, #132	@ 0x84
 8003270:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003272:	23a4      	movs	r3, #164	@ 0xa4
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	@ 0x80
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	4013      	ands	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_UART_IRQHandler+0x198>
 8003280:	23a0      	movs	r3, #160	@ 0xa0
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	@ 0x80
 8003288:	04db      	lsls	r3, r3, #19
 800328a:	4013      	ands	r3, r2
 800328c:	d00c      	beq.n	80032a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2280      	movs	r2, #128	@ 0x80
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2284      	movs	r2, #132	@ 0x84
 800329c:	589b      	ldr	r3, [r3, r2]
 800329e:	2220      	movs	r2, #32
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2184      	movs	r1, #132	@ 0x84
 80032a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2284      	movs	r2, #132	@ 0x84
 80032ac:	589b      	ldr	r3, [r3, r2]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d100      	bne.n	80032b4 <HAL_UART_IRQHandler+0x1a4>
 80032b2:	e1ff      	b.n	80036b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032b4:	23a4      	movs	r3, #164	@ 0xa4
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2220      	movs	r2, #32
 80032bc:	4013      	ands	r3, r2
 80032be:	d00e      	beq.n	80032de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032c0:	23a0      	movs	r3, #160	@ 0xa0
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2220      	movs	r2, #32
 80032c8:	4013      	ands	r3, r2
 80032ca:	d008      	beq.n	80032de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	0010      	movs	r0, r2
 80032dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2284      	movs	r2, #132	@ 0x84
 80032e2:	589b      	ldr	r3, [r3, r2]
 80032e4:	2194      	movs	r1, #148	@ 0x94
 80032e6:	187a      	adds	r2, r7, r1
 80032e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2240      	movs	r2, #64	@ 0x40
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b40      	cmp	r3, #64	@ 0x40
 80032f6:	d004      	beq.n	8003302 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2228      	movs	r2, #40	@ 0x28
 80032fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003300:	d047      	beq.n	8003392 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	0018      	movs	r0, r3
 8003306:	f000 fdd7 	bl	8003eb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2240      	movs	r2, #64	@ 0x40
 8003312:	4013      	ands	r3, r2
 8003314:	2b40      	cmp	r3, #64	@ 0x40
 8003316:	d137      	bne.n	8003388 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003318:	f3ef 8310 	mrs	r3, PRIMASK
 800331c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800331e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003320:	2090      	movs	r0, #144	@ 0x90
 8003322:	183a      	adds	r2, r7, r0
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	2301      	movs	r3, #1
 8003328:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800332c:	f383 8810 	msr	PRIMASK, r3
}
 8003330:	46c0      	nop			@ (mov r8, r8)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2140      	movs	r1, #64	@ 0x40
 800333e:	438a      	bics	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	183b      	adds	r3, r7, r0
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003354:	2b00      	cmp	r3, #0
 8003356:	d012      	beq.n	800337e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335c:	4a14      	ldr	r2, [pc, #80]	@ (80033b0 <HAL_UART_IRQHandler+0x2a0>)
 800335e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003364:	0018      	movs	r0, r3
 8003366:	f7fe f975 	bl	8001654 <HAL_DMA_Abort_IT>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d01a      	beq.n	80033a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003378:	0018      	movs	r0, r3
 800337a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	e012      	b.n	80033a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0018      	movs	r0, r3
 8003382:	f000 f9b5 	bl	80036f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003386:	e00d      	b.n	80033a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f9b0 	bl	80036f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e008      	b.n	80033a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 f9ab 	bl	80036f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2284      	movs	r2, #132	@ 0x84
 800339e:	2100      	movs	r1, #0
 80033a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80033a2:	e187      	b.n	80036b4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	46c0      	nop			@ (mov r8, r8)
    return;
 80033a6:	e185      	b.n	80036b4 <HAL_UART_IRQHandler+0x5a4>
 80033a8:	0000080f 	.word	0x0000080f
 80033ac:	04000120 	.word	0x04000120
 80033b0:	08004173 	.word	0x08004173

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d000      	beq.n	80033be <HAL_UART_IRQHandler+0x2ae>
 80033bc:	e139      	b.n	8003632 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033be:	23a4      	movs	r3, #164	@ 0xa4
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2210      	movs	r2, #16
 80033c6:	4013      	ands	r3, r2
 80033c8:	d100      	bne.n	80033cc <HAL_UART_IRQHandler+0x2bc>
 80033ca:	e132      	b.n	8003632 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033cc:	23a0      	movs	r3, #160	@ 0xa0
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2210      	movs	r2, #16
 80033d4:	4013      	ands	r3, r2
 80033d6:	d100      	bne.n	80033da <HAL_UART_IRQHandler+0x2ca>
 80033d8:	e12b      	b.n	8003632 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2210      	movs	r2, #16
 80033e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2240      	movs	r2, #64	@ 0x40
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b40      	cmp	r3, #64	@ 0x40
 80033ee:	d000      	beq.n	80033f2 <HAL_UART_IRQHandler+0x2e2>
 80033f0:	e09f      	b.n	8003532 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	217e      	movs	r1, #126	@ 0x7e
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003400:	187b      	adds	r3, r7, r1
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d100      	bne.n	800340a <HAL_UART_IRQHandler+0x2fa>
 8003408:	e156      	b.n	80036b8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2258      	movs	r2, #88	@ 0x58
 800340e:	5a9b      	ldrh	r3, [r3, r2]
 8003410:	187a      	adds	r2, r7, r1
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d300      	bcc.n	800341a <HAL_UART_IRQHandler+0x30a>
 8003418:	e14e      	b.n	80036b8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	187a      	adds	r2, r7, r1
 800341e:	215a      	movs	r1, #90	@ 0x5a
 8003420:	8812      	ldrh	r2, [r2, #0]
 8003422:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b20      	cmp	r3, #32
 800342c:	d06f      	beq.n	800350e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342e:	f3ef 8310 	mrs	r3, PRIMASK
 8003432:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003436:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003438:	2301      	movs	r3, #1
 800343a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343e:	f383 8810 	msr	PRIMASK, r3
}
 8003442:	46c0      	nop			@ (mov r8, r8)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	499e      	ldr	r1, [pc, #632]	@ (80036c8 <HAL_UART_IRQHandler+0x5b8>)
 8003450:	400a      	ands	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345a:	f383 8810 	msr	PRIMASK, r3
}
 800345e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003460:	f3ef 8310 	mrs	r3, PRIMASK
 8003464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003468:	677b      	str	r3, [r7, #116]	@ 0x74
 800346a:	2301      	movs	r3, #1
 800346c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003470:	f383 8810 	msr	PRIMASK, r3
}
 8003474:	46c0      	nop			@ (mov r8, r8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	438a      	bics	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003488:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003492:	f3ef 8310 	mrs	r3, PRIMASK
 8003496:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	673b      	str	r3, [r7, #112]	@ 0x70
 800349c:	2301      	movs	r3, #1
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2140      	movs	r1, #64	@ 0x40
 80034b4:	438a      	bics	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	2120      	movs	r1, #32
 80034ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d2:	f3ef 8310 	mrs	r3, PRIMASK
 80034d6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80034d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034dc:	2301      	movs	r3, #1
 80034de:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2110      	movs	r1, #16
 80034f4:	438a      	bics	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003508:	0018      	movs	r0, r3
 800350a:	f7fe f86b 	bl	80015e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2258      	movs	r2, #88	@ 0x58
 8003518:	5a9a      	ldrh	r2, [r3, r2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	215a      	movs	r1, #90	@ 0x5a
 800351e:	5a5b      	ldrh	r3, [r3, r1]
 8003520:	b29b      	uxth	r3, r3
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0011      	movs	r1, r2
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f8e8 	bl	8003700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003530:	e0c2      	b.n	80036b8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2258      	movs	r2, #88	@ 0x58
 8003536:	5a99      	ldrh	r1, [r3, r2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	225a      	movs	r2, #90	@ 0x5a
 800353c:	5a9b      	ldrh	r3, [r3, r2]
 800353e:	b29a      	uxth	r2, r3
 8003540:	208e      	movs	r0, #142	@ 0x8e
 8003542:	183b      	adds	r3, r7, r0
 8003544:	1a8a      	subs	r2, r1, r2
 8003546:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	225a      	movs	r2, #90	@ 0x5a
 800354c:	5a9b      	ldrh	r3, [r3, r2]
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d100      	bne.n	8003556 <HAL_UART_IRQHandler+0x446>
 8003554:	e0b2      	b.n	80036bc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003556:	183b      	adds	r3, r7, r0
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d100      	bne.n	8003560 <HAL_UART_IRQHandler+0x450>
 800355e:	e0ad      	b.n	80036bc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003560:	f3ef 8310 	mrs	r3, PRIMASK
 8003564:	60fb      	str	r3, [r7, #12]
  return(result);
 8003566:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003568:	2488      	movs	r4, #136	@ 0x88
 800356a:	193a      	adds	r2, r7, r4
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	2301      	movs	r3, #1
 8003570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f383 8810 	msr	PRIMASK, r3
}
 8003578:	46c0      	nop			@ (mov r8, r8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4951      	ldr	r1, [pc, #324]	@ (80036cc <HAL_UART_IRQHandler+0x5bc>)
 8003586:	400a      	ands	r2, r1
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	193b      	adds	r3, r7, r4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f383 8810 	msr	PRIMASK, r3
}
 8003596:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003598:	f3ef 8310 	mrs	r3, PRIMASK
 800359c:	61bb      	str	r3, [r7, #24]
  return(result);
 800359e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a0:	2484      	movs	r4, #132	@ 0x84
 80035a2:	193a      	adds	r2, r7, r4
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	2301      	movs	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			@ (mov r8, r8)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	438a      	bics	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2280      	movs	r2, #128	@ 0x80
 80035d4:	2120      	movs	r1, #32
 80035d6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e4:	f3ef 8310 	mrs	r3, PRIMASK
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ec:	2480      	movs	r4, #128	@ 0x80
 80035ee:	193a      	adds	r2, r7, r4
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	2301      	movs	r3, #1
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2110      	movs	r1, #16
 800360a:	438a      	bics	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	193b      	adds	r3, r7, r4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003622:	183b      	adds	r3, r7, r0
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f000 f868 	bl	8003700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003630:	e044      	b.n	80036bc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003632:	23a4      	movs	r3, #164	@ 0xa4
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	2380      	movs	r3, #128	@ 0x80
 800363a:	035b      	lsls	r3, r3, #13
 800363c:	4013      	ands	r3, r2
 800363e:	d010      	beq.n	8003662 <HAL_UART_IRQHandler+0x552>
 8003640:	239c      	movs	r3, #156	@ 0x9c
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	2380      	movs	r3, #128	@ 0x80
 8003648:	03db      	lsls	r3, r3, #15
 800364a:	4013      	ands	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	0352      	lsls	r2, r2, #13
 8003656:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 fdcb 	bl	80041f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003660:	e02f      	b.n	80036c2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003662:	23a4      	movs	r3, #164	@ 0xa4
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2280      	movs	r2, #128	@ 0x80
 800366a:	4013      	ands	r3, r2
 800366c:	d00f      	beq.n	800368e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800366e:	23a0      	movs	r3, #160	@ 0xa0
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2280      	movs	r2, #128	@ 0x80
 8003676:	4013      	ands	r3, r2
 8003678:	d009      	beq.n	800368e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01e      	beq.n	80036c0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	0010      	movs	r0, r2
 800368a:	4798      	blx	r3
    }
    return;
 800368c:	e018      	b.n	80036c0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800368e:	23a4      	movs	r3, #164	@ 0xa4
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2240      	movs	r2, #64	@ 0x40
 8003696:	4013      	ands	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_UART_IRQHandler+0x5b2>
 800369a:	23a0      	movs	r3, #160	@ 0xa0
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2240      	movs	r2, #64	@ 0x40
 80036a2:	4013      	ands	r3, r2
 80036a4:	d00d      	beq.n	80036c2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f000 fd79 	bl	80041a0 <UART_EndTransmit_IT>
    return;
 80036ae:	e008      	b.n	80036c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	e006      	b.n	80036c2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	e004      	b.n	80036c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	e002      	b.n	80036c2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	e000      	b.n	80036c2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80036c0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b02b      	add	sp, #172	@ 0xac
 80036c6:	bd90      	pop	{r4, r7, pc}
 80036c8:	fffffeff 	.word	0xfffffeff
 80036cc:	fffffedf 	.word	0xfffffedf

080036d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d8:	46c0      	nop			@ (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80036e8:	46c0      	nop			@ (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	000a      	movs	r2, r1
 800370a:	1cbb      	adds	r3, r7, #2
 800370c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b002      	add	sp, #8
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003720:	231e      	movs	r3, #30
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a8d      	ldr	r2, [pc, #564]	@ (800397c <UART_SetConfig+0x264>)
 8003748:	4013      	ands	r3, r2
 800374a:	0019      	movs	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	430a      	orrs	r2, r1
 8003754:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a88      	ldr	r2, [pc, #544]	@ (8003980 <UART_SetConfig+0x268>)
 800375e:	4013      	ands	r3, r2
 8003760:	0019      	movs	r1, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a7f      	ldr	r2, [pc, #508]	@ (8003984 <UART_SetConfig+0x26c>)
 8003786:	4013      	ands	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a7b      	ldr	r2, [pc, #492]	@ (8003988 <UART_SetConfig+0x270>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d127      	bne.n	80037ee <UART_SetConfig+0xd6>
 800379e:	4b7b      	ldr	r3, [pc, #492]	@ (800398c <UART_SetConfig+0x274>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a2:	2203      	movs	r2, #3
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d00d      	beq.n	80037c6 <UART_SetConfig+0xae>
 80037aa:	d81b      	bhi.n	80037e4 <UART_SetConfig+0xcc>
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d014      	beq.n	80037da <UART_SetConfig+0xc2>
 80037b0:	d818      	bhi.n	80037e4 <UART_SetConfig+0xcc>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <UART_SetConfig+0xa4>
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d00a      	beq.n	80037d0 <UART_SetConfig+0xb8>
 80037ba:	e013      	b.n	80037e4 <UART_SetConfig+0xcc>
 80037bc:	231f      	movs	r3, #31
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e021      	b.n	800380a <UART_SetConfig+0xf2>
 80037c6:	231f      	movs	r3, #31
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e01c      	b.n	800380a <UART_SetConfig+0xf2>
 80037d0:	231f      	movs	r3, #31
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2204      	movs	r2, #4
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e017      	b.n	800380a <UART_SetConfig+0xf2>
 80037da:	231f      	movs	r3, #31
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	2208      	movs	r2, #8
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e012      	b.n	800380a <UART_SetConfig+0xf2>
 80037e4:	231f      	movs	r3, #31
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2210      	movs	r2, #16
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e00d      	b.n	800380a <UART_SetConfig+0xf2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a67      	ldr	r2, [pc, #412]	@ (8003990 <UART_SetConfig+0x278>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d104      	bne.n	8003802 <UART_SetConfig+0xea>
 80037f8:	231f      	movs	r3, #31
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e003      	b.n	800380a <UART_SetConfig+0xf2>
 8003802:	231f      	movs	r3, #31
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2210      	movs	r2, #16
 8003808:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	429a      	cmp	r2, r3
 8003814:	d15c      	bne.n	80038d0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003816:	231f      	movs	r3, #31
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d015      	beq.n	800384c <UART_SetConfig+0x134>
 8003820:	dc18      	bgt.n	8003854 <UART_SetConfig+0x13c>
 8003822:	2b04      	cmp	r3, #4
 8003824:	d00d      	beq.n	8003842 <UART_SetConfig+0x12a>
 8003826:	dc15      	bgt.n	8003854 <UART_SetConfig+0x13c>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <UART_SetConfig+0x11a>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d005      	beq.n	800383c <UART_SetConfig+0x124>
 8003830:	e010      	b.n	8003854 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003832:	f7fe fe15 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 8003836:	0003      	movs	r3, r0
 8003838:	61bb      	str	r3, [r7, #24]
        break;
 800383a:	e012      	b.n	8003862 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800383c:	4b55      	ldr	r3, [pc, #340]	@ (8003994 <UART_SetConfig+0x27c>)
 800383e:	61bb      	str	r3, [r7, #24]
        break;
 8003840:	e00f      	b.n	8003862 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003842:	f7fe fdad 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003846:	0003      	movs	r3, r0
 8003848:	61bb      	str	r3, [r7, #24]
        break;
 800384a:	e00a      	b.n	8003862 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	61bb      	str	r3, [r7, #24]
        break;
 8003852:	e006      	b.n	8003862 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003858:	231e      	movs	r3, #30
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
        break;
 8003860:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d100      	bne.n	800386a <UART_SetConfig+0x152>
 8003868:	e07a      	b.n	8003960 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	005a      	lsls	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	18d2      	adds	r2, r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	0019      	movs	r1, r3
 800387c:	0010      	movs	r0, r2
 800387e:	f7fc fc4d 	bl	800011c <__udivsi3>
 8003882:	0003      	movs	r3, r0
 8003884:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b0f      	cmp	r3, #15
 800388a:	d91c      	bls.n	80038c6 <UART_SetConfig+0x1ae>
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	2380      	movs	r3, #128	@ 0x80
 8003890:	025b      	lsls	r3, r3, #9
 8003892:	429a      	cmp	r2, r3
 8003894:	d217      	bcs.n	80038c6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	b29a      	uxth	r2, r3
 800389a:	200e      	movs	r0, #14
 800389c:	183b      	adds	r3, r7, r0
 800389e:	210f      	movs	r1, #15
 80038a0:	438a      	bics	r2, r1
 80038a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2207      	movs	r2, #7
 80038ac:	4013      	ands	r3, r2
 80038ae:	b299      	uxth	r1, r3
 80038b0:	183b      	adds	r3, r7, r0
 80038b2:	183a      	adds	r2, r7, r0
 80038b4:	8812      	ldrh	r2, [r2, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	183a      	adds	r2, r7, r0
 80038c0:	8812      	ldrh	r2, [r2, #0]
 80038c2:	60da      	str	r2, [r3, #12]
 80038c4:	e04c      	b.n	8003960 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80038c6:	231e      	movs	r3, #30
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2201      	movs	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e047      	b.n	8003960 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038d0:	231f      	movs	r3, #31
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d015      	beq.n	8003906 <UART_SetConfig+0x1ee>
 80038da:	dc18      	bgt.n	800390e <UART_SetConfig+0x1f6>
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d00d      	beq.n	80038fc <UART_SetConfig+0x1e4>
 80038e0:	dc15      	bgt.n	800390e <UART_SetConfig+0x1f6>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <UART_SetConfig+0x1d4>
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d005      	beq.n	80038f6 <UART_SetConfig+0x1de>
 80038ea:	e010      	b.n	800390e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7fe fdb8 	bl	8002460 <HAL_RCC_GetPCLK1Freq>
 80038f0:	0003      	movs	r3, r0
 80038f2:	61bb      	str	r3, [r7, #24]
        break;
 80038f4:	e012      	b.n	800391c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f6:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <UART_SetConfig+0x27c>)
 80038f8:	61bb      	str	r3, [r7, #24]
        break;
 80038fa:	e00f      	b.n	800391c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fc:	f7fe fd50 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003900:	0003      	movs	r3, r0
 8003902:	61bb      	str	r3, [r7, #24]
        break;
 8003904:	e00a      	b.n	800391c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003906:	2380      	movs	r3, #128	@ 0x80
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	61bb      	str	r3, [r7, #24]
        break;
 800390c:	e006      	b.n	800391c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003912:	231e      	movs	r3, #30
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
        break;
 800391a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01e      	beq.n	8003960 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	085a      	lsrs	r2, r3, #1
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	18d2      	adds	r2, r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	0019      	movs	r1, r3
 8003932:	0010      	movs	r0, r2
 8003934:	f7fc fbf2 	bl	800011c <__udivsi3>
 8003938:	0003      	movs	r3, r0
 800393a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b0f      	cmp	r3, #15
 8003940:	d90a      	bls.n	8003958 <UART_SetConfig+0x240>
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	025b      	lsls	r3, r3, #9
 8003948:	429a      	cmp	r2, r3
 800394a:	d205      	bcs.n	8003958 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	e003      	b.n	8003960 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003958:	231e      	movs	r3, #30
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800396c:	231e      	movs	r3, #30
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	781b      	ldrb	r3, [r3, #0]
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b008      	add	sp, #32
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	ffff69f3 	.word	0xffff69f3
 8003980:	ffffcfff 	.word	0xffffcfff
 8003984:	fffff4ff 	.word	0xfffff4ff
 8003988:	40013800 	.word	0x40013800
 800398c:	40021000 	.word	0x40021000
 8003990:	40004400 	.word	0x40004400
 8003994:	007a1200 	.word	0x007a1200

08003998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	2208      	movs	r2, #8
 80039a6:	4013      	ands	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a4a      	ldr	r2, [pc, #296]	@ (8003adc <UART_AdvFeatureConfig+0x144>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c6:	2201      	movs	r2, #1
 80039c8:	4013      	ands	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a43      	ldr	r2, [pc, #268]	@ (8003ae0 <UART_AdvFeatureConfig+0x148>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	2202      	movs	r2, #2
 80039ea:	4013      	ands	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ae4 <UART_AdvFeatureConfig+0x14c>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4a34      	ldr	r2, [pc, #208]	@ (8003ae8 <UART_AdvFeatureConfig+0x150>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a2c      	ldr	r2, [pc, #176]	@ (8003aec <UART_AdvFeatureConfig+0x154>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	2220      	movs	r2, #32
 8003a50:	4013      	ands	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	4a25      	ldr	r2, [pc, #148]	@ (8003af0 <UART_AdvFeatureConfig+0x158>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	2240      	movs	r2, #64	@ 0x40
 8003a72:	4013      	ands	r3, r2
 8003a74:	d01d      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <UART_AdvFeatureConfig+0x15c>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	0019      	movs	r1, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a92:	2380      	movs	r3, #128	@ 0x80
 8003a94:	035b      	lsls	r3, r3, #13
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d10b      	bne.n	8003ab2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a15      	ldr	r2, [pc, #84]	@ (8003af8 <UART_AdvFeatureConfig+0x160>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	2280      	movs	r2, #128	@ 0x80
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8003afc <UART_AdvFeatureConfig+0x164>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	ffff7fff 	.word	0xffff7fff
 8003ae0:	fffdffff 	.word	0xfffdffff
 8003ae4:	fffeffff 	.word	0xfffeffff
 8003ae8:	fffbffff 	.word	0xfffbffff
 8003aec:	ffffefff 	.word	0xffffefff
 8003af0:	ffffdfff 	.word	0xffffdfff
 8003af4:	ffefffff 	.word	0xffefffff
 8003af8:	ff9fffff 	.word	0xff9fffff
 8003afc:	fff7ffff 	.word	0xfff7ffff

08003b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b092      	sub	sp, #72	@ 0x48
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2284      	movs	r2, #132	@ 0x84
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b10:	f7fd fbd2 	bl	80012b8 <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2208      	movs	r2, #8
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d12c      	bne.n	8003b80 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	0391      	lsls	r1, r2, #14
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4a46      	ldr	r2, [pc, #280]	@ (8003c48 <UART_CheckIdleState+0x148>)
 8003b30:	9200      	str	r2, [sp, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f000 f88c 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d021      	beq.n	8003b80 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b46:	2301      	movs	r3, #1
 8003b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2180      	movs	r1, #128	@ 0x80
 8003b5e:	438a      	bics	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	f383 8810 	msr	PRIMASK, r3
}
 8003b6c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2278      	movs	r2, #120	@ 0x78
 8003b78:	2100      	movs	r1, #0
 8003b7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e05f      	b.n	8003c40 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2204      	movs	r2, #4
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d146      	bne.n	8003c1c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b90:	2280      	movs	r2, #128	@ 0x80
 8003b92:	03d1      	lsls	r1, r2, #15
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	@ (8003c48 <UART_CheckIdleState+0x148>)
 8003b98:	9200      	str	r2, [sp, #0]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f000 f858 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d03b      	beq.n	8003c1c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003baa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bae:	2301      	movs	r3, #1
 8003bb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4921      	ldr	r1, [pc, #132]	@ (8003c4c <UART_CheckIdleState+0x14c>)
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8003be0:	2301      	movs	r3, #1
 8003be2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	f383 8810 	msr	PRIMASK, r3
}
 8003c06:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2280      	movs	r2, #128	@ 0x80
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2278      	movs	r2, #120	@ 0x78
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e011      	b.n	8003c40 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2280      	movs	r2, #128	@ 0x80
 8003c26:	2120      	movs	r1, #32
 8003c28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2278      	movs	r2, #120	@ 0x78
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b010      	add	sp, #64	@ 0x40
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	01ffffff 	.word	0x01ffffff
 8003c4c:	fffffedf 	.word	0xfffffedf

08003c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	1dfb      	adds	r3, r7, #7
 8003c5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c60:	e051      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	3301      	adds	r3, #1
 8003c66:	d04e      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7fd fb26 	bl	80012b8 <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e051      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b80      	cmp	r3, #128	@ 0x80
 8003c92:	d038      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d035      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d111      	bne.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2208      	movs	r2, #8
 8003cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f900 	bl	8003eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2284      	movs	r2, #132	@ 0x84
 8003cbc:	2108      	movs	r1, #8
 8003cbe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2278      	movs	r2, #120	@ 0x78
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e02c      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	2380      	movs	r3, #128	@ 0x80
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d112      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f000 f8e3 	bl	8003eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2284      	movs	r2, #132	@ 0x84
 8003cf6:	2120      	movs	r1, #32
 8003cf8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2278      	movs	r2, #120	@ 0x78
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	425a      	negs	r2, r3
 8003d16:	4153      	adcs	r3, r2
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d09e      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b090      	sub	sp, #64	@ 0x40
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	1dbb      	adds	r3, r7, #6
 8003d3c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1dba      	adds	r2, r7, #6
 8003d48:	2158      	movs	r1, #88	@ 0x58
 8003d4a:	8812      	ldrh	r2, [r2, #0]
 8003d4c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2284      	movs	r2, #132	@ 0x84
 8003d52:	2100      	movs	r1, #0
 8003d54:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2280      	movs	r2, #128	@ 0x80
 8003d5a:	2122      	movs	r1, #34	@ 0x22
 8003d5c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e64 <UART_Start_Receive_DMA+0x134>)
 8003d6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d72:	4a3d      	ldr	r2, [pc, #244]	@ (8003e68 <UART_Start_Receive_DMA+0x138>)
 8003d74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e6c <UART_Start_Receive_DMA+0x13c>)
 8003d7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d82:	2200      	movs	r2, #0
 8003d84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3324      	adds	r3, #36	@ 0x24
 8003d90:	0019      	movs	r1, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	001a      	movs	r2, r3
 8003d98:	1dbb      	adds	r3, r7, #6
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f7fd fbbc 	bl	8001518 <HAL_DMA_Start_IT>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d009      	beq.n	8003db8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2284      	movs	r2, #132	@ 0x84
 8003da8:	2110      	movs	r1, #16
 8003daa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2280      	movs	r2, #128	@ 0x80
 8003db0:	2120      	movs	r1, #32
 8003db2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e050      	b.n	8003e5a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dca:	2301      	movs	r3, #1
 8003dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	0049      	lsls	r1, r1, #1
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	f383 8810 	msr	PRIMASK, r3
}
 8003df2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df4:	f3ef 8310 	mrs	r3, PRIMASK
 8003df8:	613b      	str	r3, [r7, #16]
  return(result);
 8003dfa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dfe:	2301      	movs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			@ (mov r8, r8)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2101      	movs	r1, #1
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e2c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e30:	2301      	movs	r3, #1
 8003e32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2140      	movs	r1, #64	@ 0x40
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b010      	add	sp, #64	@ 0x40
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	08003f81 	.word	0x08003f81
 8003e68:	080040ad 	.word	0x080040ad
 8003e6c:	080040ef 	.word	0x080040ef

08003e70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e78:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	2301      	movs	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	21c0      	movs	r1, #192	@ 0xc0
 8003e9a:	438a      	bics	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f383 8810 	msr	PRIMASK, r3
}
 8003ea8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b006      	add	sp, #24
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	@ 0x38
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ec6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f383 8810 	msr	PRIMASK, r3
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4926      	ldr	r1, [pc, #152]	@ (8003f7c <UART_EndRxTransfer+0xc4>)
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f383 8810 	msr	PRIMASK, r3
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003efc:	2301      	movs	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	f383 8810 	msr	PRIMASK, r3
}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2101      	movs	r1, #1
 8003f14:	438a      	bics	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1e:	f383 8810 	msr	PRIMASK, r3
}
 8003f22:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d118      	bne.n	8003f5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f36:	2301      	movs	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f383 8810 	msr	PRIMASK, r3
}
 8003f40:	46c0      	nop			@ (mov r8, r8)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2110      	movs	r1, #16
 8003f4e:	438a      	bics	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2280      	movs	r2, #128	@ 0x80
 8003f62:	2120      	movs	r1, #32
 8003f64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b00e      	add	sp, #56	@ 0x38
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	fffffedf 	.word	0xfffffedf

08003f80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b094      	sub	sp, #80	@ 0x50
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d06f      	beq.n	8004076 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f98:	225a      	movs	r2, #90	@ 0x5a
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fa4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	493a      	ldr	r1, [pc, #232]	@ (80040a8 <UART_DMAReceiveCplt+0x128>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fda:	2301      	movs	r3, #1
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			@ (mov r8, r8)
 8003fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	438a      	bics	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	f383 8810 	msr	PRIMASK, r3
}
 8004000:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004002:	f3ef 8310 	mrs	r3, PRIMASK
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	643b      	str	r3, [r7, #64]	@ 0x40
 800400c:	2301      	movs	r3, #1
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	f383 8810 	msr	PRIMASK, r3
}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2140      	movs	r1, #64	@ 0x40
 8004024:	438a      	bics	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	f383 8810 	msr	PRIMASK, r3
}
 8004032:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004036:	2280      	movs	r2, #128	@ 0x80
 8004038:	2120      	movs	r1, #32
 800403a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004040:	2b01      	cmp	r3, #1
 8004042:	d118      	bne.n	8004076 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004044:	f3ef 8310 	mrs	r3, PRIMASK
 8004048:	60fb      	str	r3, [r7, #12]
  return(result);
 800404a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800404e:	2301      	movs	r3, #1
 8004050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2110      	movs	r1, #16
 8004066:	438a      	bics	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800406c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004078:	2200      	movs	r2, #0
 800407a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800407e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004080:	2b01      	cmp	r3, #1
 8004082:	d108      	bne.n	8004096 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004086:	2258      	movs	r2, #88	@ 0x58
 8004088:	5a9a      	ldrh	r2, [r3, r2]
 800408a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f7ff fb36 	bl	8003700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004094:	e003      	b.n	800409e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004098:	0018      	movs	r0, r3
 800409a:	f7fc fc65 	bl	8000968 <HAL_UART_RxCpltCallback>
}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b014      	add	sp, #80	@ 0x50
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	fffffeff 	.word	0xfffffeff

080040ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10a      	bne.n	80040de <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2258      	movs	r2, #88	@ 0x58
 80040cc:	5a9b      	ldrh	r3, [r3, r2]
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0011      	movs	r1, r2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff fb12 	bl	8003700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040dc:	e003      	b.n	80040e6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7ff fafd 	bl	80036e0 <HAL_UART_RxHalfCpltCallback>
}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b004      	add	sp, #16
 80040ec:	bd80      	pop	{r7, pc}

080040ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004100:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2280      	movs	r2, #128	@ 0x80
 8004106:	589b      	ldr	r3, [r3, r2]
 8004108:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2280      	movs	r2, #128	@ 0x80
 8004112:	4013      	ands	r3, r2
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d10a      	bne.n	800412e <UART_DMAError+0x40>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b21      	cmp	r3, #33	@ 0x21
 800411c:	d107      	bne.n	800412e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2252      	movs	r2, #82	@ 0x52
 8004122:	2100      	movs	r1, #0
 8004124:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	0018      	movs	r0, r3
 800412a:	f7ff fea1 	bl	8003e70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2240      	movs	r2, #64	@ 0x40
 8004136:	4013      	ands	r3, r2
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	d10a      	bne.n	8004152 <UART_DMAError+0x64>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b22      	cmp	r3, #34	@ 0x22
 8004140:	d107      	bne.n	8004152 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	225a      	movs	r2, #90	@ 0x5a
 8004146:	2100      	movs	r1, #0
 8004148:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff feb3 	bl	8003eb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2284      	movs	r2, #132	@ 0x84
 8004156:	589b      	ldr	r3, [r3, r2]
 8004158:	2210      	movs	r2, #16
 800415a:	431a      	orrs	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2184      	movs	r1, #132	@ 0x84
 8004160:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	0018      	movs	r0, r3
 8004166:	f7ff fac3 	bl	80036f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b006      	add	sp, #24
 8004170:	bd80      	pop	{r7, pc}

08004172 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	225a      	movs	r2, #90	@ 0x5a
 8004184:	2100      	movs	r1, #0
 8004186:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2252      	movs	r2, #82	@ 0x52
 800418c:	2100      	movs	r1, #0
 800418e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	0018      	movs	r0, r3
 8004194:	f7ff faac 	bl	80036f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004198:	46c0      	nop			@ (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b004      	add	sp, #16
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ae:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	2301      	movs	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f383 8810 	msr	PRIMASK, r3
}
 80041bc:	46c0      	nop			@ (mov r8, r8)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2140      	movs	r1, #64	@ 0x40
 80041ca:	438a      	bics	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f383 8810 	msr	PRIMASK, r3
}
 80041d8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7ff fa71 	bl	80036d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b006      	add	sp, #24
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041fe:	46c0      	nop			@ (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b002      	add	sp, #8
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <rand>:
 8004208:	4b16      	ldr	r3, [pc, #88]	@ (8004264 <rand+0x5c>)
 800420a:	b510      	push	{r4, lr}
 800420c:	681c      	ldr	r4, [r3, #0]
 800420e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004210:	2b00      	cmp	r3, #0
 8004212:	d116      	bne.n	8004242 <rand+0x3a>
 8004214:	2018      	movs	r0, #24
 8004216:	f000 fa31 	bl	800467c <malloc>
 800421a:	1e02      	subs	r2, r0, #0
 800421c:	6320      	str	r0, [r4, #48]	@ 0x30
 800421e:	d104      	bne.n	800422a <rand+0x22>
 8004220:	2152      	movs	r1, #82	@ 0x52
 8004222:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <rand+0x60>)
 8004224:	4811      	ldr	r0, [pc, #68]	@ (800426c <rand+0x64>)
 8004226:	f000 f9c1 	bl	80045ac <__assert_func>
 800422a:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <rand+0x68>)
 800422c:	2100      	movs	r1, #0
 800422e:	6003      	str	r3, [r0, #0]
 8004230:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <rand+0x6c>)
 8004232:	6043      	str	r3, [r0, #4]
 8004234:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <rand+0x70>)
 8004236:	6083      	str	r3, [r0, #8]
 8004238:	230b      	movs	r3, #11
 800423a:	8183      	strh	r3, [r0, #12]
 800423c:	2001      	movs	r0, #1
 800423e:	6110      	str	r0, [r2, #16]
 8004240:	6151      	str	r1, [r2, #20]
 8004242:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8004244:	4a0d      	ldr	r2, [pc, #52]	@ (800427c <rand+0x74>)
 8004246:	6920      	ldr	r0, [r4, #16]
 8004248:	6961      	ldr	r1, [r4, #20]
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <rand+0x78>)
 800424c:	f7fc f8dc 	bl	8000408 <__aeabi_lmul>
 8004250:	2201      	movs	r2, #1
 8004252:	2300      	movs	r3, #0
 8004254:	1880      	adds	r0, r0, r2
 8004256:	4159      	adcs	r1, r3
 8004258:	6120      	str	r0, [r4, #16]
 800425a:	6161      	str	r1, [r4, #20]
 800425c:	0048      	lsls	r0, r1, #1
 800425e:	0840      	lsrs	r0, r0, #1
 8004260:	bd10      	pop	{r4, pc}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	2000001c 	.word	0x2000001c
 8004268:	08005288 	.word	0x08005288
 800426c:	0800529f 	.word	0x0800529f
 8004270:	abcd330e 	.word	0xabcd330e
 8004274:	e66d1234 	.word	0xe66d1234
 8004278:	0005deec 	.word	0x0005deec
 800427c:	4c957f2d 	.word	0x4c957f2d
 8004280:	5851f42d 	.word	0x5851f42d

08004284 <std>:
 8004284:	2300      	movs	r3, #0
 8004286:	b510      	push	{r4, lr}
 8004288:	0004      	movs	r4, r0
 800428a:	6003      	str	r3, [r0, #0]
 800428c:	6043      	str	r3, [r0, #4]
 800428e:	6083      	str	r3, [r0, #8]
 8004290:	8181      	strh	r1, [r0, #12]
 8004292:	6643      	str	r3, [r0, #100]	@ 0x64
 8004294:	81c2      	strh	r2, [r0, #14]
 8004296:	6103      	str	r3, [r0, #16]
 8004298:	6143      	str	r3, [r0, #20]
 800429a:	6183      	str	r3, [r0, #24]
 800429c:	0019      	movs	r1, r3
 800429e:	2208      	movs	r2, #8
 80042a0:	305c      	adds	r0, #92	@ 0x5c
 80042a2:	f000 f8ff 	bl	80044a4 <memset>
 80042a6:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <std+0x50>)
 80042a8:	6224      	str	r4, [r4, #32]
 80042aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80042ac:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <std+0x54>)
 80042ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042b0:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <std+0x58>)
 80042b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042b4:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <std+0x5c>)
 80042b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <std+0x60>)
 80042ba:	429c      	cmp	r4, r3
 80042bc:	d005      	beq.n	80042ca <std+0x46>
 80042be:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <std+0x64>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	d002      	beq.n	80042ca <std+0x46>
 80042c4:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <std+0x68>)
 80042c6:	429c      	cmp	r4, r3
 80042c8:	d103      	bne.n	80042d2 <std+0x4e>
 80042ca:	0020      	movs	r0, r4
 80042cc:	3058      	adds	r0, #88	@ 0x58
 80042ce:	f000 f969 	bl	80045a4 <__retarget_lock_init_recursive>
 80042d2:	bd10      	pop	{r4, pc}
 80042d4:	0800440d 	.word	0x0800440d
 80042d8:	08004435 	.word	0x08004435
 80042dc:	0800446d 	.word	0x0800446d
 80042e0:	08004499 	.word	0x08004499
 80042e4:	200003bc 	.word	0x200003bc
 80042e8:	20000424 	.word	0x20000424
 80042ec:	2000048c 	.word	0x2000048c

080042f0 <stdio_exit_handler>:
 80042f0:	b510      	push	{r4, lr}
 80042f2:	4a03      	ldr	r2, [pc, #12]	@ (8004300 <stdio_exit_handler+0x10>)
 80042f4:	4903      	ldr	r1, [pc, #12]	@ (8004304 <stdio_exit_handler+0x14>)
 80042f6:	4804      	ldr	r0, [pc, #16]	@ (8004308 <stdio_exit_handler+0x18>)
 80042f8:	f000 f86c 	bl	80043d4 <_fwalk_sglue>
 80042fc:	bd10      	pop	{r4, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	20000010 	.word	0x20000010
 8004304:	08004901 	.word	0x08004901
 8004308:	20000020 	.word	0x20000020

0800430c <cleanup_stdio>:
 800430c:	6841      	ldr	r1, [r0, #4]
 800430e:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <cleanup_stdio+0x30>)
 8004310:	b510      	push	{r4, lr}
 8004312:	0004      	movs	r4, r0
 8004314:	4299      	cmp	r1, r3
 8004316:	d001      	beq.n	800431c <cleanup_stdio+0x10>
 8004318:	f000 faf2 	bl	8004900 <_fflush_r>
 800431c:	68a1      	ldr	r1, [r4, #8]
 800431e:	4b08      	ldr	r3, [pc, #32]	@ (8004340 <cleanup_stdio+0x34>)
 8004320:	4299      	cmp	r1, r3
 8004322:	d002      	beq.n	800432a <cleanup_stdio+0x1e>
 8004324:	0020      	movs	r0, r4
 8004326:	f000 faeb 	bl	8004900 <_fflush_r>
 800432a:	68e1      	ldr	r1, [r4, #12]
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <cleanup_stdio+0x38>)
 800432e:	4299      	cmp	r1, r3
 8004330:	d002      	beq.n	8004338 <cleanup_stdio+0x2c>
 8004332:	0020      	movs	r0, r4
 8004334:	f000 fae4 	bl	8004900 <_fflush_r>
 8004338:	bd10      	pop	{r4, pc}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	200003bc 	.word	0x200003bc
 8004340:	20000424 	.word	0x20000424
 8004344:	2000048c 	.word	0x2000048c

08004348 <global_stdio_init.part.0>:
 8004348:	b510      	push	{r4, lr}
 800434a:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <global_stdio_init.part.0+0x28>)
 800434c:	4a09      	ldr	r2, [pc, #36]	@ (8004374 <global_stdio_init.part.0+0x2c>)
 800434e:	2104      	movs	r1, #4
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	4809      	ldr	r0, [pc, #36]	@ (8004378 <global_stdio_init.part.0+0x30>)
 8004354:	2200      	movs	r2, #0
 8004356:	f7ff ff95 	bl	8004284 <std>
 800435a:	2201      	movs	r2, #1
 800435c:	2109      	movs	r1, #9
 800435e:	4807      	ldr	r0, [pc, #28]	@ (800437c <global_stdio_init.part.0+0x34>)
 8004360:	f7ff ff90 	bl	8004284 <std>
 8004364:	2202      	movs	r2, #2
 8004366:	2112      	movs	r1, #18
 8004368:	4805      	ldr	r0, [pc, #20]	@ (8004380 <global_stdio_init.part.0+0x38>)
 800436a:	f7ff ff8b 	bl	8004284 <std>
 800436e:	bd10      	pop	{r4, pc}
 8004370:	200004f4 	.word	0x200004f4
 8004374:	080042f1 	.word	0x080042f1
 8004378:	200003bc 	.word	0x200003bc
 800437c:	20000424 	.word	0x20000424
 8004380:	2000048c 	.word	0x2000048c

08004384 <__sfp_lock_acquire>:
 8004384:	b510      	push	{r4, lr}
 8004386:	4802      	ldr	r0, [pc, #8]	@ (8004390 <__sfp_lock_acquire+0xc>)
 8004388:	f000 f90d 	bl	80045a6 <__retarget_lock_acquire_recursive>
 800438c:	bd10      	pop	{r4, pc}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	200004fd 	.word	0x200004fd

08004394 <__sfp_lock_release>:
 8004394:	b510      	push	{r4, lr}
 8004396:	4802      	ldr	r0, [pc, #8]	@ (80043a0 <__sfp_lock_release+0xc>)
 8004398:	f000 f906 	bl	80045a8 <__retarget_lock_release_recursive>
 800439c:	bd10      	pop	{r4, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	200004fd 	.word	0x200004fd

080043a4 <__sinit>:
 80043a4:	b510      	push	{r4, lr}
 80043a6:	0004      	movs	r4, r0
 80043a8:	f7ff ffec 	bl	8004384 <__sfp_lock_acquire>
 80043ac:	6a23      	ldr	r3, [r4, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <__sinit+0x14>
 80043b2:	f7ff ffef 	bl	8004394 <__sfp_lock_release>
 80043b6:	bd10      	pop	{r4, pc}
 80043b8:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <__sinit+0x28>)
 80043ba:	6223      	str	r3, [r4, #32]
 80043bc:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <__sinit+0x2c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f6      	bne.n	80043b2 <__sinit+0xe>
 80043c4:	f7ff ffc0 	bl	8004348 <global_stdio_init.part.0>
 80043c8:	e7f3      	b.n	80043b2 <__sinit+0xe>
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	0800430d 	.word	0x0800430d
 80043d0:	200004f4 	.word	0x200004f4

080043d4 <_fwalk_sglue>:
 80043d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043d6:	0014      	movs	r4, r2
 80043d8:	2600      	movs	r6, #0
 80043da:	9000      	str	r0, [sp, #0]
 80043dc:	9101      	str	r1, [sp, #4]
 80043de:	68a5      	ldr	r5, [r4, #8]
 80043e0:	6867      	ldr	r7, [r4, #4]
 80043e2:	3f01      	subs	r7, #1
 80043e4:	d504      	bpl.n	80043f0 <_fwalk_sglue+0x1c>
 80043e6:	6824      	ldr	r4, [r4, #0]
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	d1f8      	bne.n	80043de <_fwalk_sglue+0xa>
 80043ec:	0030      	movs	r0, r6
 80043ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043f0:	89ab      	ldrh	r3, [r5, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d908      	bls.n	8004408 <_fwalk_sglue+0x34>
 80043f6:	220e      	movs	r2, #14
 80043f8:	5eab      	ldrsh	r3, [r5, r2]
 80043fa:	3301      	adds	r3, #1
 80043fc:	d004      	beq.n	8004408 <_fwalk_sglue+0x34>
 80043fe:	0029      	movs	r1, r5
 8004400:	9800      	ldr	r0, [sp, #0]
 8004402:	9b01      	ldr	r3, [sp, #4]
 8004404:	4798      	blx	r3
 8004406:	4306      	orrs	r6, r0
 8004408:	3568      	adds	r5, #104	@ 0x68
 800440a:	e7ea      	b.n	80043e2 <_fwalk_sglue+0xe>

0800440c <__sread>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	000c      	movs	r4, r1
 8004410:	250e      	movs	r5, #14
 8004412:	5f49      	ldrsh	r1, [r1, r5]
 8004414:	f000 f874 	bl	8004500 <_read_r>
 8004418:	2800      	cmp	r0, #0
 800441a:	db03      	blt.n	8004424 <__sread+0x18>
 800441c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800441e:	181b      	adds	r3, r3, r0
 8004420:	6563      	str	r3, [r4, #84]	@ 0x54
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	4a02      	ldr	r2, [pc, #8]	@ (8004430 <__sread+0x24>)
 8004428:	4013      	ands	r3, r2
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	e7f9      	b.n	8004422 <__sread+0x16>
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	ffffefff 	.word	0xffffefff

08004434 <__swrite>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	001f      	movs	r7, r3
 8004438:	898b      	ldrh	r3, [r1, #12]
 800443a:	0005      	movs	r5, r0
 800443c:	000c      	movs	r4, r1
 800443e:	0016      	movs	r6, r2
 8004440:	05db      	lsls	r3, r3, #23
 8004442:	d505      	bpl.n	8004450 <__swrite+0x1c>
 8004444:	230e      	movs	r3, #14
 8004446:	5ec9      	ldrsh	r1, [r1, r3]
 8004448:	2200      	movs	r2, #0
 800444a:	2302      	movs	r3, #2
 800444c:	f000 f844 	bl	80044d8 <_lseek_r>
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	4a05      	ldr	r2, [pc, #20]	@ (8004468 <__swrite+0x34>)
 8004454:	0028      	movs	r0, r5
 8004456:	4013      	ands	r3, r2
 8004458:	81a3      	strh	r3, [r4, #12]
 800445a:	0032      	movs	r2, r6
 800445c:	230e      	movs	r3, #14
 800445e:	5ee1      	ldrsh	r1, [r4, r3]
 8004460:	003b      	movs	r3, r7
 8004462:	f000 f861 	bl	8004528 <_write_r>
 8004466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004468:	ffffefff 	.word	0xffffefff

0800446c <__sseek>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	000c      	movs	r4, r1
 8004470:	250e      	movs	r5, #14
 8004472:	5f49      	ldrsh	r1, [r1, r5]
 8004474:	f000 f830 	bl	80044d8 <_lseek_r>
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	1c42      	adds	r2, r0, #1
 800447c:	d103      	bne.n	8004486 <__sseek+0x1a>
 800447e:	4a05      	ldr	r2, [pc, #20]	@ (8004494 <__sseek+0x28>)
 8004480:	4013      	ands	r3, r2
 8004482:	81a3      	strh	r3, [r4, #12]
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	2280      	movs	r2, #128	@ 0x80
 8004488:	0152      	lsls	r2, r2, #5
 800448a:	4313      	orrs	r3, r2
 800448c:	81a3      	strh	r3, [r4, #12]
 800448e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004490:	e7f8      	b.n	8004484 <__sseek+0x18>
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	ffffefff 	.word	0xffffefff

08004498 <__sclose>:
 8004498:	b510      	push	{r4, lr}
 800449a:	230e      	movs	r3, #14
 800449c:	5ec9      	ldrsh	r1, [r1, r3]
 800449e:	f000 f809 	bl	80044b4 <_close_r>
 80044a2:	bd10      	pop	{r4, pc}

080044a4 <memset>:
 80044a4:	0003      	movs	r3, r0
 80044a6:	1882      	adds	r2, r0, r2
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d100      	bne.n	80044ae <memset+0xa>
 80044ac:	4770      	bx	lr
 80044ae:	7019      	strb	r1, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	e7f9      	b.n	80044a8 <memset+0x4>

080044b4 <_close_r>:
 80044b4:	2300      	movs	r3, #0
 80044b6:	b570      	push	{r4, r5, r6, lr}
 80044b8:	4d06      	ldr	r5, [pc, #24]	@ (80044d4 <_close_r+0x20>)
 80044ba:	0004      	movs	r4, r0
 80044bc:	0008      	movs	r0, r1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	f7fc fe0e 	bl	80010e0 <_close>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d103      	bne.n	80044d0 <_close_r+0x1c>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d000      	beq.n	80044d0 <_close_r+0x1c>
 80044ce:	6023      	str	r3, [r4, #0]
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	200004f8 	.word	0x200004f8

080044d8 <_lseek_r>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	0004      	movs	r4, r0
 80044dc:	0008      	movs	r0, r1
 80044de:	0011      	movs	r1, r2
 80044e0:	001a      	movs	r2, r3
 80044e2:	2300      	movs	r3, #0
 80044e4:	4d05      	ldr	r5, [pc, #20]	@ (80044fc <_lseek_r+0x24>)
 80044e6:	602b      	str	r3, [r5, #0]
 80044e8:	f7fc fe1b 	bl	8001122 <_lseek>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d103      	bne.n	80044f8 <_lseek_r+0x20>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d000      	beq.n	80044f8 <_lseek_r+0x20>
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	bd70      	pop	{r4, r5, r6, pc}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	200004f8 	.word	0x200004f8

08004500 <_read_r>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	0004      	movs	r4, r0
 8004504:	0008      	movs	r0, r1
 8004506:	0011      	movs	r1, r2
 8004508:	001a      	movs	r2, r3
 800450a:	2300      	movs	r3, #0
 800450c:	4d05      	ldr	r5, [pc, #20]	@ (8004524 <_read_r+0x24>)
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	f7fc fdad 	bl	800106e <_read>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d103      	bne.n	8004520 <_read_r+0x20>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d000      	beq.n	8004520 <_read_r+0x20>
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	200004f8 	.word	0x200004f8

08004528 <_write_r>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	0004      	movs	r4, r0
 800452c:	0008      	movs	r0, r1
 800452e:	0011      	movs	r1, r2
 8004530:	001a      	movs	r2, r3
 8004532:	2300      	movs	r3, #0
 8004534:	4d05      	ldr	r5, [pc, #20]	@ (800454c <_write_r+0x24>)
 8004536:	602b      	str	r3, [r5, #0]
 8004538:	f7fc fdb6 	bl	80010a8 <_write>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d103      	bne.n	8004548 <_write_r+0x20>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d000      	beq.n	8004548 <_write_r+0x20>
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	bd70      	pop	{r4, r5, r6, pc}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	200004f8 	.word	0x200004f8

08004550 <__errno>:
 8004550:	4b01      	ldr	r3, [pc, #4]	@ (8004558 <__errno+0x8>)
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	4770      	bx	lr
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	2000001c 	.word	0x2000001c

0800455c <__libc_init_array>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	2600      	movs	r6, #0
 8004560:	4c0c      	ldr	r4, [pc, #48]	@ (8004594 <__libc_init_array+0x38>)
 8004562:	4d0d      	ldr	r5, [pc, #52]	@ (8004598 <__libc_init_array+0x3c>)
 8004564:	1b64      	subs	r4, r4, r5
 8004566:	10a4      	asrs	r4, r4, #2
 8004568:	42a6      	cmp	r6, r4
 800456a:	d109      	bne.n	8004580 <__libc_init_array+0x24>
 800456c:	2600      	movs	r6, #0
 800456e:	f000 fe63 	bl	8005238 <_init>
 8004572:	4c0a      	ldr	r4, [pc, #40]	@ (800459c <__libc_init_array+0x40>)
 8004574:	4d0a      	ldr	r5, [pc, #40]	@ (80045a0 <__libc_init_array+0x44>)
 8004576:	1b64      	subs	r4, r4, r5
 8004578:	10a4      	asrs	r4, r4, #2
 800457a:	42a6      	cmp	r6, r4
 800457c:	d105      	bne.n	800458a <__libc_init_array+0x2e>
 800457e:	bd70      	pop	{r4, r5, r6, pc}
 8004580:	00b3      	lsls	r3, r6, #2
 8004582:	58eb      	ldr	r3, [r5, r3]
 8004584:	4798      	blx	r3
 8004586:	3601      	adds	r6, #1
 8004588:	e7ee      	b.n	8004568 <__libc_init_array+0xc>
 800458a:	00b3      	lsls	r3, r6, #2
 800458c:	58eb      	ldr	r3, [r5, r3]
 800458e:	4798      	blx	r3
 8004590:	3601      	adds	r6, #1
 8004592:	e7f2      	b.n	800457a <__libc_init_array+0x1e>
 8004594:	08005368 	.word	0x08005368
 8004598:	08005368 	.word	0x08005368
 800459c:	0800536c 	.word	0x0800536c
 80045a0:	08005368 	.word	0x08005368

080045a4 <__retarget_lock_init_recursive>:
 80045a4:	4770      	bx	lr

080045a6 <__retarget_lock_acquire_recursive>:
 80045a6:	4770      	bx	lr

080045a8 <__retarget_lock_release_recursive>:
 80045a8:	4770      	bx	lr
	...

080045ac <__assert_func>:
 80045ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80045ae:	0014      	movs	r4, r2
 80045b0:	001a      	movs	r2, r3
 80045b2:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <__assert_func+0x2c>)
 80045b4:	0005      	movs	r5, r0
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	000e      	movs	r6, r1
 80045ba:	68d8      	ldr	r0, [r3, #12]
 80045bc:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <__assert_func+0x30>)
 80045be:	2c00      	cmp	r4, #0
 80045c0:	d101      	bne.n	80045c6 <__assert_func+0x1a>
 80045c2:	4b07      	ldr	r3, [pc, #28]	@ (80045e0 <__assert_func+0x34>)
 80045c4:	001c      	movs	r4, r3
 80045c6:	4907      	ldr	r1, [pc, #28]	@ (80045e4 <__assert_func+0x38>)
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	9402      	str	r4, [sp, #8]
 80045cc:	002b      	movs	r3, r5
 80045ce:	9600      	str	r6, [sp, #0]
 80045d0:	f000 f9c2 	bl	8004958 <fiprintf>
 80045d4:	f000 f9e2 	bl	800499c <abort>
 80045d8:	2000001c 	.word	0x2000001c
 80045dc:	080052f7 	.word	0x080052f7
 80045e0:	08005332 	.word	0x08005332
 80045e4:	08005304 	.word	0x08005304

080045e8 <_free_r>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	0005      	movs	r5, r0
 80045ec:	1e0c      	subs	r4, r1, #0
 80045ee:	d010      	beq.n	8004612 <_free_r+0x2a>
 80045f0:	3c04      	subs	r4, #4
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da00      	bge.n	80045fa <_free_r+0x12>
 80045f8:	18e4      	adds	r4, r4, r3
 80045fa:	0028      	movs	r0, r5
 80045fc:	f000 f8ea 	bl	80047d4 <__malloc_lock>
 8004600:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <_free_r+0x90>)
 8004602:	6813      	ldr	r3, [r2, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <_free_r+0x2c>
 8004608:	6063      	str	r3, [r4, #4]
 800460a:	6014      	str	r4, [r2, #0]
 800460c:	0028      	movs	r0, r5
 800460e:	f000 f8e9 	bl	80047e4 <__malloc_unlock>
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	42a3      	cmp	r3, r4
 8004616:	d908      	bls.n	800462a <_free_r+0x42>
 8004618:	6820      	ldr	r0, [r4, #0]
 800461a:	1821      	adds	r1, r4, r0
 800461c:	428b      	cmp	r3, r1
 800461e:	d1f3      	bne.n	8004608 <_free_r+0x20>
 8004620:	6819      	ldr	r1, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	1809      	adds	r1, r1, r0
 8004626:	6021      	str	r1, [r4, #0]
 8004628:	e7ee      	b.n	8004608 <_free_r+0x20>
 800462a:	001a      	movs	r2, r3
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <_free_r+0x4e>
 8004632:	42a3      	cmp	r3, r4
 8004634:	d9f9      	bls.n	800462a <_free_r+0x42>
 8004636:	6811      	ldr	r1, [r2, #0]
 8004638:	1850      	adds	r0, r2, r1
 800463a:	42a0      	cmp	r0, r4
 800463c:	d10b      	bne.n	8004656 <_free_r+0x6e>
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	1809      	adds	r1, r1, r0
 8004642:	1850      	adds	r0, r2, r1
 8004644:	6011      	str	r1, [r2, #0]
 8004646:	4283      	cmp	r3, r0
 8004648:	d1e0      	bne.n	800460c <_free_r+0x24>
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	1841      	adds	r1, r0, r1
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	6053      	str	r3, [r2, #4]
 8004654:	e7da      	b.n	800460c <_free_r+0x24>
 8004656:	42a0      	cmp	r0, r4
 8004658:	d902      	bls.n	8004660 <_free_r+0x78>
 800465a:	230c      	movs	r3, #12
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	e7d5      	b.n	800460c <_free_r+0x24>
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	1821      	adds	r1, r4, r0
 8004664:	428b      	cmp	r3, r1
 8004666:	d103      	bne.n	8004670 <_free_r+0x88>
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	1809      	adds	r1, r1, r0
 800466e:	6021      	str	r1, [r4, #0]
 8004670:	6063      	str	r3, [r4, #4]
 8004672:	6054      	str	r4, [r2, #4]
 8004674:	e7ca      	b.n	800460c <_free_r+0x24>
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	20000504 	.word	0x20000504

0800467c <malloc>:
 800467c:	b510      	push	{r4, lr}
 800467e:	4b03      	ldr	r3, [pc, #12]	@ (800468c <malloc+0x10>)
 8004680:	0001      	movs	r1, r0
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	f000 f826 	bl	80046d4 <_malloc_r>
 8004688:	bd10      	pop	{r4, pc}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	2000001c 	.word	0x2000001c

08004690 <sbrk_aligned>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	4e0f      	ldr	r6, [pc, #60]	@ (80046d0 <sbrk_aligned+0x40>)
 8004694:	000d      	movs	r5, r1
 8004696:	6831      	ldr	r1, [r6, #0]
 8004698:	0004      	movs	r4, r0
 800469a:	2900      	cmp	r1, #0
 800469c:	d102      	bne.n	80046a4 <sbrk_aligned+0x14>
 800469e:	f000 f96b 	bl	8004978 <_sbrk_r>
 80046a2:	6030      	str	r0, [r6, #0]
 80046a4:	0029      	movs	r1, r5
 80046a6:	0020      	movs	r0, r4
 80046a8:	f000 f966 	bl	8004978 <_sbrk_r>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d103      	bne.n	80046b8 <sbrk_aligned+0x28>
 80046b0:	2501      	movs	r5, #1
 80046b2:	426d      	negs	r5, r5
 80046b4:	0028      	movs	r0, r5
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	2303      	movs	r3, #3
 80046ba:	1cc5      	adds	r5, r0, #3
 80046bc:	439d      	bics	r5, r3
 80046be:	42a8      	cmp	r0, r5
 80046c0:	d0f8      	beq.n	80046b4 <sbrk_aligned+0x24>
 80046c2:	1a29      	subs	r1, r5, r0
 80046c4:	0020      	movs	r0, r4
 80046c6:	f000 f957 	bl	8004978 <_sbrk_r>
 80046ca:	3001      	adds	r0, #1
 80046cc:	d1f2      	bne.n	80046b4 <sbrk_aligned+0x24>
 80046ce:	e7ef      	b.n	80046b0 <sbrk_aligned+0x20>
 80046d0:	20000500 	.word	0x20000500

080046d4 <_malloc_r>:
 80046d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d6:	2203      	movs	r2, #3
 80046d8:	1ccb      	adds	r3, r1, #3
 80046da:	4393      	bics	r3, r2
 80046dc:	3308      	adds	r3, #8
 80046de:	0005      	movs	r5, r0
 80046e0:	001f      	movs	r7, r3
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d234      	bcs.n	8004750 <_malloc_r+0x7c>
 80046e6:	270c      	movs	r7, #12
 80046e8:	42b9      	cmp	r1, r7
 80046ea:	d833      	bhi.n	8004754 <_malloc_r+0x80>
 80046ec:	0028      	movs	r0, r5
 80046ee:	f000 f871 	bl	80047d4 <__malloc_lock>
 80046f2:	4e37      	ldr	r6, [pc, #220]	@ (80047d0 <_malloc_r+0xfc>)
 80046f4:	6833      	ldr	r3, [r6, #0]
 80046f6:	001c      	movs	r4, r3
 80046f8:	2c00      	cmp	r4, #0
 80046fa:	d12f      	bne.n	800475c <_malloc_r+0x88>
 80046fc:	0039      	movs	r1, r7
 80046fe:	0028      	movs	r0, r5
 8004700:	f7ff ffc6 	bl	8004690 <sbrk_aligned>
 8004704:	0004      	movs	r4, r0
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	d15f      	bne.n	80047ca <_malloc_r+0xf6>
 800470a:	6834      	ldr	r4, [r6, #0]
 800470c:	9400      	str	r4, [sp, #0]
 800470e:	9b00      	ldr	r3, [sp, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d14a      	bne.n	80047aa <_malloc_r+0xd6>
 8004714:	2c00      	cmp	r4, #0
 8004716:	d052      	beq.n	80047be <_malloc_r+0xea>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	0028      	movs	r0, r5
 800471c:	18e3      	adds	r3, r4, r3
 800471e:	9900      	ldr	r1, [sp, #0]
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	f000 f929 	bl	8004978 <_sbrk_r>
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	4283      	cmp	r3, r0
 800472a:	d148      	bne.n	80047be <_malloc_r+0xea>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	0028      	movs	r0, r5
 8004730:	1aff      	subs	r7, r7, r3
 8004732:	0039      	movs	r1, r7
 8004734:	f7ff ffac 	bl	8004690 <sbrk_aligned>
 8004738:	3001      	adds	r0, #1
 800473a:	d040      	beq.n	80047be <_malloc_r+0xea>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	19db      	adds	r3, r3, r7
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	6833      	ldr	r3, [r6, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	2a00      	cmp	r2, #0
 8004748:	d133      	bne.n	80047b2 <_malloc_r+0xde>
 800474a:	9b00      	ldr	r3, [sp, #0]
 800474c:	6033      	str	r3, [r6, #0]
 800474e:	e019      	b.n	8004784 <_malloc_r+0xb0>
 8004750:	2b00      	cmp	r3, #0
 8004752:	dac9      	bge.n	80046e8 <_malloc_r+0x14>
 8004754:	230c      	movs	r3, #12
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	2000      	movs	r0, #0
 800475a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800475c:	6821      	ldr	r1, [r4, #0]
 800475e:	1bc9      	subs	r1, r1, r7
 8004760:	d420      	bmi.n	80047a4 <_malloc_r+0xd0>
 8004762:	290b      	cmp	r1, #11
 8004764:	d90a      	bls.n	800477c <_malloc_r+0xa8>
 8004766:	19e2      	adds	r2, r4, r7
 8004768:	6027      	str	r7, [r4, #0]
 800476a:	42a3      	cmp	r3, r4
 800476c:	d104      	bne.n	8004778 <_malloc_r+0xa4>
 800476e:	6032      	str	r2, [r6, #0]
 8004770:	6863      	ldr	r3, [r4, #4]
 8004772:	6011      	str	r1, [r2, #0]
 8004774:	6053      	str	r3, [r2, #4]
 8004776:	e005      	b.n	8004784 <_malloc_r+0xb0>
 8004778:	605a      	str	r2, [r3, #4]
 800477a:	e7f9      	b.n	8004770 <_malloc_r+0x9c>
 800477c:	6862      	ldr	r2, [r4, #4]
 800477e:	42a3      	cmp	r3, r4
 8004780:	d10e      	bne.n	80047a0 <_malloc_r+0xcc>
 8004782:	6032      	str	r2, [r6, #0]
 8004784:	0028      	movs	r0, r5
 8004786:	f000 f82d 	bl	80047e4 <__malloc_unlock>
 800478a:	0020      	movs	r0, r4
 800478c:	2207      	movs	r2, #7
 800478e:	300b      	adds	r0, #11
 8004790:	1d23      	adds	r3, r4, #4
 8004792:	4390      	bics	r0, r2
 8004794:	1ac2      	subs	r2, r0, r3
 8004796:	4298      	cmp	r0, r3
 8004798:	d0df      	beq.n	800475a <_malloc_r+0x86>
 800479a:	1a1b      	subs	r3, r3, r0
 800479c:	50a3      	str	r3, [r4, r2]
 800479e:	e7dc      	b.n	800475a <_malloc_r+0x86>
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	e7ef      	b.n	8004784 <_malloc_r+0xb0>
 80047a4:	0023      	movs	r3, r4
 80047a6:	6864      	ldr	r4, [r4, #4]
 80047a8:	e7a6      	b.n	80046f8 <_malloc_r+0x24>
 80047aa:	9c00      	ldr	r4, [sp, #0]
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	e7ad      	b.n	800470e <_malloc_r+0x3a>
 80047b2:	001a      	movs	r2, r3
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	42a3      	cmp	r3, r4
 80047b8:	d1fb      	bne.n	80047b2 <_malloc_r+0xde>
 80047ba:	2300      	movs	r3, #0
 80047bc:	e7da      	b.n	8004774 <_malloc_r+0xa0>
 80047be:	230c      	movs	r3, #12
 80047c0:	0028      	movs	r0, r5
 80047c2:	602b      	str	r3, [r5, #0]
 80047c4:	f000 f80e 	bl	80047e4 <__malloc_unlock>
 80047c8:	e7c6      	b.n	8004758 <_malloc_r+0x84>
 80047ca:	6007      	str	r7, [r0, #0]
 80047cc:	e7da      	b.n	8004784 <_malloc_r+0xb0>
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	20000504 	.word	0x20000504

080047d4 <__malloc_lock>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4802      	ldr	r0, [pc, #8]	@ (80047e0 <__malloc_lock+0xc>)
 80047d8:	f7ff fee5 	bl	80045a6 <__retarget_lock_acquire_recursive>
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	200004fc 	.word	0x200004fc

080047e4 <__malloc_unlock>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	4802      	ldr	r0, [pc, #8]	@ (80047f0 <__malloc_unlock+0xc>)
 80047e8:	f7ff fede 	bl	80045a8 <__retarget_lock_release_recursive>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	200004fc 	.word	0x200004fc

080047f4 <__sflush_r>:
 80047f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f6:	220c      	movs	r2, #12
 80047f8:	5e8b      	ldrsh	r3, [r1, r2]
 80047fa:	0005      	movs	r5, r0
 80047fc:	000c      	movs	r4, r1
 80047fe:	071a      	lsls	r2, r3, #28
 8004800:	d456      	bmi.n	80048b0 <__sflush_r+0xbc>
 8004802:	684a      	ldr	r2, [r1, #4]
 8004804:	2a00      	cmp	r2, #0
 8004806:	dc02      	bgt.n	800480e <__sflush_r+0x1a>
 8004808:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800480a:	2a00      	cmp	r2, #0
 800480c:	dd4e      	ble.n	80048ac <__sflush_r+0xb8>
 800480e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004810:	2f00      	cmp	r7, #0
 8004812:	d04b      	beq.n	80048ac <__sflush_r+0xb8>
 8004814:	2200      	movs	r2, #0
 8004816:	2080      	movs	r0, #128	@ 0x80
 8004818:	682e      	ldr	r6, [r5, #0]
 800481a:	602a      	str	r2, [r5, #0]
 800481c:	001a      	movs	r2, r3
 800481e:	0140      	lsls	r0, r0, #5
 8004820:	6a21      	ldr	r1, [r4, #32]
 8004822:	4002      	ands	r2, r0
 8004824:	4203      	tst	r3, r0
 8004826:	d033      	beq.n	8004890 <__sflush_r+0x9c>
 8004828:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	075b      	lsls	r3, r3, #29
 800482e:	d506      	bpl.n	800483e <__sflush_r+0x4a>
 8004830:	6863      	ldr	r3, [r4, #4]
 8004832:	1ad2      	subs	r2, r2, r3
 8004834:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <__sflush_r+0x4a>
 800483a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800483c:	1ad2      	subs	r2, r2, r3
 800483e:	2300      	movs	r3, #0
 8004840:	0028      	movs	r0, r5
 8004842:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004844:	6a21      	ldr	r1, [r4, #32]
 8004846:	47b8      	blx	r7
 8004848:	89a2      	ldrh	r2, [r4, #12]
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	d106      	bne.n	800485c <__sflush_r+0x68>
 800484e:	6829      	ldr	r1, [r5, #0]
 8004850:	291d      	cmp	r1, #29
 8004852:	d846      	bhi.n	80048e2 <__sflush_r+0xee>
 8004854:	4b29      	ldr	r3, [pc, #164]	@ (80048fc <__sflush_r+0x108>)
 8004856:	410b      	asrs	r3, r1
 8004858:	07db      	lsls	r3, r3, #31
 800485a:	d442      	bmi.n	80048e2 <__sflush_r+0xee>
 800485c:	2300      	movs	r3, #0
 800485e:	6063      	str	r3, [r4, #4]
 8004860:	6923      	ldr	r3, [r4, #16]
 8004862:	6023      	str	r3, [r4, #0]
 8004864:	04d2      	lsls	r2, r2, #19
 8004866:	d505      	bpl.n	8004874 <__sflush_r+0x80>
 8004868:	1c43      	adds	r3, r0, #1
 800486a:	d102      	bne.n	8004872 <__sflush_r+0x7e>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d100      	bne.n	8004874 <__sflush_r+0x80>
 8004872:	6560      	str	r0, [r4, #84]	@ 0x54
 8004874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004876:	602e      	str	r6, [r5, #0]
 8004878:	2900      	cmp	r1, #0
 800487a:	d017      	beq.n	80048ac <__sflush_r+0xb8>
 800487c:	0023      	movs	r3, r4
 800487e:	3344      	adds	r3, #68	@ 0x44
 8004880:	4299      	cmp	r1, r3
 8004882:	d002      	beq.n	800488a <__sflush_r+0x96>
 8004884:	0028      	movs	r0, r5
 8004886:	f7ff feaf 	bl	80045e8 <_free_r>
 800488a:	2300      	movs	r3, #0
 800488c:	6363      	str	r3, [r4, #52]	@ 0x34
 800488e:	e00d      	b.n	80048ac <__sflush_r+0xb8>
 8004890:	2301      	movs	r3, #1
 8004892:	0028      	movs	r0, r5
 8004894:	47b8      	blx	r7
 8004896:	0002      	movs	r2, r0
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d1c6      	bne.n	800482a <__sflush_r+0x36>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0c3      	beq.n	800482a <__sflush_r+0x36>
 80048a2:	2b1d      	cmp	r3, #29
 80048a4:	d001      	beq.n	80048aa <__sflush_r+0xb6>
 80048a6:	2b16      	cmp	r3, #22
 80048a8:	d11a      	bne.n	80048e0 <__sflush_r+0xec>
 80048aa:	602e      	str	r6, [r5, #0]
 80048ac:	2000      	movs	r0, #0
 80048ae:	e01e      	b.n	80048ee <__sflush_r+0xfa>
 80048b0:	690e      	ldr	r6, [r1, #16]
 80048b2:	2e00      	cmp	r6, #0
 80048b4:	d0fa      	beq.n	80048ac <__sflush_r+0xb8>
 80048b6:	680f      	ldr	r7, [r1, #0]
 80048b8:	600e      	str	r6, [r1, #0]
 80048ba:	1bba      	subs	r2, r7, r6
 80048bc:	9201      	str	r2, [sp, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	079b      	lsls	r3, r3, #30
 80048c2:	d100      	bne.n	80048c6 <__sflush_r+0xd2>
 80048c4:	694a      	ldr	r2, [r1, #20]
 80048c6:	60a2      	str	r2, [r4, #8]
 80048c8:	9b01      	ldr	r3, [sp, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	ddee      	ble.n	80048ac <__sflush_r+0xb8>
 80048ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80048d0:	0032      	movs	r2, r6
 80048d2:	001f      	movs	r7, r3
 80048d4:	0028      	movs	r0, r5
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	6a21      	ldr	r1, [r4, #32]
 80048da:	47b8      	blx	r7
 80048dc:	2800      	cmp	r0, #0
 80048de:	dc07      	bgt.n	80048f0 <__sflush_r+0xfc>
 80048e0:	89a2      	ldrh	r2, [r4, #12]
 80048e2:	2340      	movs	r3, #64	@ 0x40
 80048e4:	2001      	movs	r0, #1
 80048e6:	4313      	orrs	r3, r2
 80048e8:	b21b      	sxth	r3, r3
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	4240      	negs	r0, r0
 80048ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048f0:	9b01      	ldr	r3, [sp, #4]
 80048f2:	1836      	adds	r6, r6, r0
 80048f4:	1a1b      	subs	r3, r3, r0
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	e7e6      	b.n	80048c8 <__sflush_r+0xd4>
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	dfbffffe 	.word	0xdfbffffe

08004900 <_fflush_r>:
 8004900:	690b      	ldr	r3, [r1, #16]
 8004902:	b570      	push	{r4, r5, r6, lr}
 8004904:	0005      	movs	r5, r0
 8004906:	000c      	movs	r4, r1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <_fflush_r+0x12>
 800490c:	2500      	movs	r5, #0
 800490e:	0028      	movs	r0, r5
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	2800      	cmp	r0, #0
 8004914:	d004      	beq.n	8004920 <_fflush_r+0x20>
 8004916:	6a03      	ldr	r3, [r0, #32]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <_fflush_r+0x20>
 800491c:	f7ff fd42 	bl	80043a4 <__sinit>
 8004920:	220c      	movs	r2, #12
 8004922:	5ea3      	ldrsh	r3, [r4, r2]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f1      	beq.n	800490c <_fflush_r+0xc>
 8004928:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800492a:	07d2      	lsls	r2, r2, #31
 800492c:	d404      	bmi.n	8004938 <_fflush_r+0x38>
 800492e:	059b      	lsls	r3, r3, #22
 8004930:	d402      	bmi.n	8004938 <_fflush_r+0x38>
 8004932:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004934:	f7ff fe37 	bl	80045a6 <__retarget_lock_acquire_recursive>
 8004938:	0028      	movs	r0, r5
 800493a:	0021      	movs	r1, r4
 800493c:	f7ff ff5a 	bl	80047f4 <__sflush_r>
 8004940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004942:	0005      	movs	r5, r0
 8004944:	07db      	lsls	r3, r3, #31
 8004946:	d4e2      	bmi.n	800490e <_fflush_r+0xe>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	059b      	lsls	r3, r3, #22
 800494c:	d4df      	bmi.n	800490e <_fflush_r+0xe>
 800494e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004950:	f7ff fe2a 	bl	80045a8 <__retarget_lock_release_recursive>
 8004954:	e7db      	b.n	800490e <_fflush_r+0xe>
	...

08004958 <fiprintf>:
 8004958:	b40e      	push	{r1, r2, r3}
 800495a:	b517      	push	{r0, r1, r2, r4, lr}
 800495c:	4c05      	ldr	r4, [pc, #20]	@ (8004974 <fiprintf+0x1c>)
 800495e:	ab05      	add	r3, sp, #20
 8004960:	cb04      	ldmia	r3!, {r2}
 8004962:	0001      	movs	r1, r0
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	f000 f846 	bl	80049f8 <_vfiprintf_r>
 800496c:	bc1e      	pop	{r1, r2, r3, r4}
 800496e:	bc08      	pop	{r3}
 8004970:	b003      	add	sp, #12
 8004972:	4718      	bx	r3
 8004974:	2000001c 	.word	0x2000001c

08004978 <_sbrk_r>:
 8004978:	2300      	movs	r3, #0
 800497a:	b570      	push	{r4, r5, r6, lr}
 800497c:	4d06      	ldr	r5, [pc, #24]	@ (8004998 <_sbrk_r+0x20>)
 800497e:	0004      	movs	r4, r0
 8004980:	0008      	movs	r0, r1
 8004982:	602b      	str	r3, [r5, #0]
 8004984:	f7fc fbd8 	bl	8001138 <_sbrk>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d103      	bne.n	8004994 <_sbrk_r+0x1c>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d000      	beq.n	8004994 <_sbrk_r+0x1c>
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	bd70      	pop	{r4, r5, r6, pc}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	200004f8 	.word	0x200004f8

0800499c <abort>:
 800499c:	2006      	movs	r0, #6
 800499e:	b510      	push	{r4, lr}
 80049a0:	f000 fb8e 	bl	80050c0 <raise>
 80049a4:	2001      	movs	r0, #1
 80049a6:	f7fc fb55 	bl	8001054 <_exit>

080049aa <__sfputc_r>:
 80049aa:	6893      	ldr	r3, [r2, #8]
 80049ac:	b510      	push	{r4, lr}
 80049ae:	3b01      	subs	r3, #1
 80049b0:	6093      	str	r3, [r2, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	da04      	bge.n	80049c0 <__sfputc_r+0x16>
 80049b6:	6994      	ldr	r4, [r2, #24]
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	db07      	blt.n	80049cc <__sfputc_r+0x22>
 80049bc:	290a      	cmp	r1, #10
 80049be:	d005      	beq.n	80049cc <__sfputc_r+0x22>
 80049c0:	6813      	ldr	r3, [r2, #0]
 80049c2:	1c58      	adds	r0, r3, #1
 80049c4:	6010      	str	r0, [r2, #0]
 80049c6:	7019      	strb	r1, [r3, #0]
 80049c8:	0008      	movs	r0, r1
 80049ca:	bd10      	pop	{r4, pc}
 80049cc:	f000 faae 	bl	8004f2c <__swbuf_r>
 80049d0:	0001      	movs	r1, r0
 80049d2:	e7f9      	b.n	80049c8 <__sfputc_r+0x1e>

080049d4 <__sfputs_r>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	0006      	movs	r6, r0
 80049d8:	000f      	movs	r7, r1
 80049da:	0014      	movs	r4, r2
 80049dc:	18d5      	adds	r5, r2, r3
 80049de:	42ac      	cmp	r4, r5
 80049e0:	d101      	bne.n	80049e6 <__sfputs_r+0x12>
 80049e2:	2000      	movs	r0, #0
 80049e4:	e007      	b.n	80049f6 <__sfputs_r+0x22>
 80049e6:	7821      	ldrb	r1, [r4, #0]
 80049e8:	003a      	movs	r2, r7
 80049ea:	0030      	movs	r0, r6
 80049ec:	f7ff ffdd 	bl	80049aa <__sfputc_r>
 80049f0:	3401      	adds	r4, #1
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	d1f3      	bne.n	80049de <__sfputs_r+0xa>
 80049f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049f8 <_vfiprintf_r>:
 80049f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fa:	b0a1      	sub	sp, #132	@ 0x84
 80049fc:	000f      	movs	r7, r1
 80049fe:	0015      	movs	r5, r2
 8004a00:	001e      	movs	r6, r3
 8004a02:	9003      	str	r0, [sp, #12]
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d004      	beq.n	8004a12 <_vfiprintf_r+0x1a>
 8004a08:	6a03      	ldr	r3, [r0, #32]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <_vfiprintf_r+0x1a>
 8004a0e:	f7ff fcc9 	bl	80043a4 <__sinit>
 8004a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a14:	07db      	lsls	r3, r3, #31
 8004a16:	d405      	bmi.n	8004a24 <_vfiprintf_r+0x2c>
 8004a18:	89bb      	ldrh	r3, [r7, #12]
 8004a1a:	059b      	lsls	r3, r3, #22
 8004a1c:	d402      	bmi.n	8004a24 <_vfiprintf_r+0x2c>
 8004a1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a20:	f7ff fdc1 	bl	80045a6 <__retarget_lock_acquire_recursive>
 8004a24:	89bb      	ldrh	r3, [r7, #12]
 8004a26:	071b      	lsls	r3, r3, #28
 8004a28:	d502      	bpl.n	8004a30 <_vfiprintf_r+0x38>
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d113      	bne.n	8004a58 <_vfiprintf_r+0x60>
 8004a30:	0039      	movs	r1, r7
 8004a32:	9803      	ldr	r0, [sp, #12]
 8004a34:	f000 fabc 	bl	8004fb0 <__swsetup_r>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d00d      	beq.n	8004a58 <_vfiprintf_r+0x60>
 8004a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a3e:	07db      	lsls	r3, r3, #31
 8004a40:	d503      	bpl.n	8004a4a <_vfiprintf_r+0x52>
 8004a42:	2001      	movs	r0, #1
 8004a44:	4240      	negs	r0, r0
 8004a46:	b021      	add	sp, #132	@ 0x84
 8004a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a4a:	89bb      	ldrh	r3, [r7, #12]
 8004a4c:	059b      	lsls	r3, r3, #22
 8004a4e:	d4f8      	bmi.n	8004a42 <_vfiprintf_r+0x4a>
 8004a50:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a52:	f7ff fda9 	bl	80045a8 <__retarget_lock_release_recursive>
 8004a56:	e7f4      	b.n	8004a42 <_vfiprintf_r+0x4a>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	ac08      	add	r4, sp, #32
 8004a5c:	6163      	str	r3, [r4, #20]
 8004a5e:	3320      	adds	r3, #32
 8004a60:	7663      	strb	r3, [r4, #25]
 8004a62:	3310      	adds	r3, #16
 8004a64:	76a3      	strb	r3, [r4, #26]
 8004a66:	9607      	str	r6, [sp, #28]
 8004a68:	002e      	movs	r6, r5
 8004a6a:	7833      	ldrb	r3, [r6, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <_vfiprintf_r+0x7c>
 8004a70:	2b25      	cmp	r3, #37	@ 0x25
 8004a72:	d148      	bne.n	8004b06 <_vfiprintf_r+0x10e>
 8004a74:	1b73      	subs	r3, r6, r5
 8004a76:	9305      	str	r3, [sp, #20]
 8004a78:	42ae      	cmp	r6, r5
 8004a7a:	d00b      	beq.n	8004a94 <_vfiprintf_r+0x9c>
 8004a7c:	002a      	movs	r2, r5
 8004a7e:	0039      	movs	r1, r7
 8004a80:	9803      	ldr	r0, [sp, #12]
 8004a82:	f7ff ffa7 	bl	80049d4 <__sfputs_r>
 8004a86:	3001      	adds	r0, #1
 8004a88:	d100      	bne.n	8004a8c <_vfiprintf_r+0x94>
 8004a8a:	e0ae      	b.n	8004bea <_vfiprintf_r+0x1f2>
 8004a8c:	6963      	ldr	r3, [r4, #20]
 8004a8e:	9a05      	ldr	r2, [sp, #20]
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	6163      	str	r3, [r4, #20]
 8004a94:	7833      	ldrb	r3, [r6, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d100      	bne.n	8004a9c <_vfiprintf_r+0xa4>
 8004a9a:	e0a6      	b.n	8004bea <_vfiprintf_r+0x1f2>
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4252      	negs	r2, r2
 8004aa2:	6062      	str	r2, [r4, #4]
 8004aa4:	a904      	add	r1, sp, #16
 8004aa6:	3254      	adds	r2, #84	@ 0x54
 8004aa8:	1852      	adds	r2, r2, r1
 8004aaa:	1c75      	adds	r5, r6, #1
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	60e3      	str	r3, [r4, #12]
 8004ab0:	60a3      	str	r3, [r4, #8]
 8004ab2:	7013      	strb	r3, [r2, #0]
 8004ab4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004ab6:	4b59      	ldr	r3, [pc, #356]	@ (8004c1c <_vfiprintf_r+0x224>)
 8004ab8:	2205      	movs	r2, #5
 8004aba:	0018      	movs	r0, r3
 8004abc:	7829      	ldrb	r1, [r5, #0]
 8004abe:	9305      	str	r3, [sp, #20]
 8004ac0:	f000 fb1e 	bl	8005100 <memchr>
 8004ac4:	1c6e      	adds	r6, r5, #1
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d11f      	bne.n	8004b0a <_vfiprintf_r+0x112>
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	06d3      	lsls	r3, r2, #27
 8004ace:	d504      	bpl.n	8004ada <_vfiprintf_r+0xe2>
 8004ad0:	2353      	movs	r3, #83	@ 0x53
 8004ad2:	a904      	add	r1, sp, #16
 8004ad4:	185b      	adds	r3, r3, r1
 8004ad6:	2120      	movs	r1, #32
 8004ad8:	7019      	strb	r1, [r3, #0]
 8004ada:	0713      	lsls	r3, r2, #28
 8004adc:	d504      	bpl.n	8004ae8 <_vfiprintf_r+0xf0>
 8004ade:	2353      	movs	r3, #83	@ 0x53
 8004ae0:	a904      	add	r1, sp, #16
 8004ae2:	185b      	adds	r3, r3, r1
 8004ae4:	212b      	movs	r1, #43	@ 0x2b
 8004ae6:	7019      	strb	r1, [r3, #0]
 8004ae8:	782b      	ldrb	r3, [r5, #0]
 8004aea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aec:	d016      	beq.n	8004b1c <_vfiprintf_r+0x124>
 8004aee:	002e      	movs	r6, r5
 8004af0:	2100      	movs	r1, #0
 8004af2:	200a      	movs	r0, #10
 8004af4:	68e3      	ldr	r3, [r4, #12]
 8004af6:	7832      	ldrb	r2, [r6, #0]
 8004af8:	1c75      	adds	r5, r6, #1
 8004afa:	3a30      	subs	r2, #48	@ 0x30
 8004afc:	2a09      	cmp	r2, #9
 8004afe:	d950      	bls.n	8004ba2 <_vfiprintf_r+0x1aa>
 8004b00:	2900      	cmp	r1, #0
 8004b02:	d111      	bne.n	8004b28 <_vfiprintf_r+0x130>
 8004b04:	e017      	b.n	8004b36 <_vfiprintf_r+0x13e>
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7af      	b.n	8004a6a <_vfiprintf_r+0x72>
 8004b0a:	9b05      	ldr	r3, [sp, #20]
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	1ac0      	subs	r0, r0, r3
 8004b10:	2301      	movs	r3, #1
 8004b12:	4083      	lsls	r3, r0
 8004b14:	4313      	orrs	r3, r2
 8004b16:	0035      	movs	r5, r6
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	e7cc      	b.n	8004ab6 <_vfiprintf_r+0xbe>
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	1d19      	adds	r1, r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	9107      	str	r1, [sp, #28]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	db01      	blt.n	8004b2c <_vfiprintf_r+0x134>
 8004b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b2a:	e004      	b.n	8004b36 <_vfiprintf_r+0x13e>
 8004b2c:	425b      	negs	r3, r3
 8004b2e:	60e3      	str	r3, [r4, #12]
 8004b30:	2302      	movs	r3, #2
 8004b32:	4313      	orrs	r3, r2
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	7833      	ldrb	r3, [r6, #0]
 8004b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b3a:	d10c      	bne.n	8004b56 <_vfiprintf_r+0x15e>
 8004b3c:	7873      	ldrb	r3, [r6, #1]
 8004b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b40:	d134      	bne.n	8004bac <_vfiprintf_r+0x1b4>
 8004b42:	9b07      	ldr	r3, [sp, #28]
 8004b44:	3602      	adds	r6, #2
 8004b46:	1d1a      	adds	r2, r3, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	9207      	str	r2, [sp, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	da01      	bge.n	8004b54 <_vfiprintf_r+0x15c>
 8004b50:	2301      	movs	r3, #1
 8004b52:	425b      	negs	r3, r3
 8004b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b56:	4d32      	ldr	r5, [pc, #200]	@ (8004c20 <_vfiprintf_r+0x228>)
 8004b58:	2203      	movs	r2, #3
 8004b5a:	0028      	movs	r0, r5
 8004b5c:	7831      	ldrb	r1, [r6, #0]
 8004b5e:	f000 facf 	bl	8005100 <memchr>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d006      	beq.n	8004b74 <_vfiprintf_r+0x17c>
 8004b66:	2340      	movs	r3, #64	@ 0x40
 8004b68:	1b40      	subs	r0, r0, r5
 8004b6a:	4083      	lsls	r3, r0
 8004b6c:	6822      	ldr	r2, [r4, #0]
 8004b6e:	3601      	adds	r6, #1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	7831      	ldrb	r1, [r6, #0]
 8004b76:	2206      	movs	r2, #6
 8004b78:	482a      	ldr	r0, [pc, #168]	@ (8004c24 <_vfiprintf_r+0x22c>)
 8004b7a:	1c75      	adds	r5, r6, #1
 8004b7c:	7621      	strb	r1, [r4, #24]
 8004b7e:	f000 fabf 	bl	8005100 <memchr>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d040      	beq.n	8004c08 <_vfiprintf_r+0x210>
 8004b86:	4b28      	ldr	r3, [pc, #160]	@ (8004c28 <_vfiprintf_r+0x230>)
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d122      	bne.n	8004bd2 <_vfiprintf_r+0x1da>
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	9b07      	ldr	r3, [sp, #28]
 8004b90:	3307      	adds	r3, #7
 8004b92:	4393      	bics	r3, r2
 8004b94:	3308      	adds	r3, #8
 8004b96:	9307      	str	r3, [sp, #28]
 8004b98:	6963      	ldr	r3, [r4, #20]
 8004b9a:	9a04      	ldr	r2, [sp, #16]
 8004b9c:	189b      	adds	r3, r3, r2
 8004b9e:	6163      	str	r3, [r4, #20]
 8004ba0:	e762      	b.n	8004a68 <_vfiprintf_r+0x70>
 8004ba2:	4343      	muls	r3, r0
 8004ba4:	002e      	movs	r6, r5
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	e7a4      	b.n	8004af6 <_vfiprintf_r+0xfe>
 8004bac:	2300      	movs	r3, #0
 8004bae:	200a      	movs	r0, #10
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	6063      	str	r3, [r4, #4]
 8004bb6:	7832      	ldrb	r2, [r6, #0]
 8004bb8:	1c75      	adds	r5, r6, #1
 8004bba:	3a30      	subs	r2, #48	@ 0x30
 8004bbc:	2a09      	cmp	r2, #9
 8004bbe:	d903      	bls.n	8004bc8 <_vfiprintf_r+0x1d0>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0c8      	beq.n	8004b56 <_vfiprintf_r+0x15e>
 8004bc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bc6:	e7c6      	b.n	8004b56 <_vfiprintf_r+0x15e>
 8004bc8:	4341      	muls	r1, r0
 8004bca:	002e      	movs	r6, r5
 8004bcc:	2301      	movs	r3, #1
 8004bce:	1889      	adds	r1, r1, r2
 8004bd0:	e7f1      	b.n	8004bb6 <_vfiprintf_r+0x1be>
 8004bd2:	aa07      	add	r2, sp, #28
 8004bd4:	9200      	str	r2, [sp, #0]
 8004bd6:	0021      	movs	r1, r4
 8004bd8:	003a      	movs	r2, r7
 8004bda:	4b14      	ldr	r3, [pc, #80]	@ (8004c2c <_vfiprintf_r+0x234>)
 8004bdc:	9803      	ldr	r0, [sp, #12]
 8004bde:	e000      	b.n	8004be2 <_vfiprintf_r+0x1ea>
 8004be0:	bf00      	nop
 8004be2:	9004      	str	r0, [sp, #16]
 8004be4:	9b04      	ldr	r3, [sp, #16]
 8004be6:	3301      	adds	r3, #1
 8004be8:	d1d6      	bne.n	8004b98 <_vfiprintf_r+0x1a0>
 8004bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bec:	07db      	lsls	r3, r3, #31
 8004bee:	d405      	bmi.n	8004bfc <_vfiprintf_r+0x204>
 8004bf0:	89bb      	ldrh	r3, [r7, #12]
 8004bf2:	059b      	lsls	r3, r3, #22
 8004bf4:	d402      	bmi.n	8004bfc <_vfiprintf_r+0x204>
 8004bf6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004bf8:	f7ff fcd6 	bl	80045a8 <__retarget_lock_release_recursive>
 8004bfc:	89bb      	ldrh	r3, [r7, #12]
 8004bfe:	065b      	lsls	r3, r3, #25
 8004c00:	d500      	bpl.n	8004c04 <_vfiprintf_r+0x20c>
 8004c02:	e71e      	b.n	8004a42 <_vfiprintf_r+0x4a>
 8004c04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004c06:	e71e      	b.n	8004a46 <_vfiprintf_r+0x4e>
 8004c08:	aa07      	add	r2, sp, #28
 8004c0a:	9200      	str	r2, [sp, #0]
 8004c0c:	0021      	movs	r1, r4
 8004c0e:	003a      	movs	r2, r7
 8004c10:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <_vfiprintf_r+0x234>)
 8004c12:	9803      	ldr	r0, [sp, #12]
 8004c14:	f000 f87c 	bl	8004d10 <_printf_i>
 8004c18:	e7e3      	b.n	8004be2 <_vfiprintf_r+0x1ea>
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	08005333 	.word	0x08005333
 8004c20:	08005339 	.word	0x08005339
 8004c24:	0800533d 	.word	0x0800533d
 8004c28:	00000000 	.word	0x00000000
 8004c2c:	080049d5 	.word	0x080049d5

08004c30 <_printf_common>:
 8004c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c32:	0016      	movs	r6, r2
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	688a      	ldr	r2, [r1, #8]
 8004c38:	690b      	ldr	r3, [r1, #16]
 8004c3a:	000c      	movs	r4, r1
 8004c3c:	9000      	str	r0, [sp, #0]
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	da00      	bge.n	8004c44 <_printf_common+0x14>
 8004c42:	0013      	movs	r3, r2
 8004c44:	0022      	movs	r2, r4
 8004c46:	6033      	str	r3, [r6, #0]
 8004c48:	3243      	adds	r2, #67	@ 0x43
 8004c4a:	7812      	ldrb	r2, [r2, #0]
 8004c4c:	2a00      	cmp	r2, #0
 8004c4e:	d001      	beq.n	8004c54 <_printf_common+0x24>
 8004c50:	3301      	adds	r3, #1
 8004c52:	6033      	str	r3, [r6, #0]
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	069b      	lsls	r3, r3, #26
 8004c58:	d502      	bpl.n	8004c60 <_printf_common+0x30>
 8004c5a:	6833      	ldr	r3, [r6, #0]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	6033      	str	r3, [r6, #0]
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	2306      	movs	r3, #6
 8004c64:	0015      	movs	r5, r2
 8004c66:	401d      	ands	r5, r3
 8004c68:	421a      	tst	r2, r3
 8004c6a:	d027      	beq.n	8004cbc <_printf_common+0x8c>
 8004c6c:	0023      	movs	r3, r4
 8004c6e:	3343      	adds	r3, #67	@ 0x43
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	1e5a      	subs	r2, r3, #1
 8004c74:	4193      	sbcs	r3, r2
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	0692      	lsls	r2, r2, #26
 8004c7a:	d430      	bmi.n	8004cde <_printf_common+0xae>
 8004c7c:	0022      	movs	r2, r4
 8004c7e:	9901      	ldr	r1, [sp, #4]
 8004c80:	9800      	ldr	r0, [sp, #0]
 8004c82:	9d08      	ldr	r5, [sp, #32]
 8004c84:	3243      	adds	r2, #67	@ 0x43
 8004c86:	47a8      	blx	r5
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d025      	beq.n	8004cd8 <_printf_common+0xa8>
 8004c8c:	2206      	movs	r2, #6
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	2500      	movs	r5, #0
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d105      	bne.n	8004ca4 <_printf_common+0x74>
 8004c98:	6833      	ldr	r3, [r6, #0]
 8004c9a:	68e5      	ldr	r5, [r4, #12]
 8004c9c:	1aed      	subs	r5, r5, r3
 8004c9e:	43eb      	mvns	r3, r5
 8004ca0:	17db      	asrs	r3, r3, #31
 8004ca2:	401d      	ands	r5, r3
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	6922      	ldr	r2, [r4, #16]
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	dd01      	ble.n	8004cb0 <_printf_common+0x80>
 8004cac:	1a9b      	subs	r3, r3, r2
 8004cae:	18ed      	adds	r5, r5, r3
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	42b5      	cmp	r5, r6
 8004cb4:	d120      	bne.n	8004cf8 <_printf_common+0xc8>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e010      	b.n	8004cdc <_printf_common+0xac>
 8004cba:	3501      	adds	r5, #1
 8004cbc:	68e3      	ldr	r3, [r4, #12]
 8004cbe:	6832      	ldr	r2, [r6, #0]
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	42ab      	cmp	r3, r5
 8004cc4:	ddd2      	ble.n	8004c6c <_printf_common+0x3c>
 8004cc6:	0022      	movs	r2, r4
 8004cc8:	2301      	movs	r3, #1
 8004cca:	9901      	ldr	r1, [sp, #4]
 8004ccc:	9800      	ldr	r0, [sp, #0]
 8004cce:	9f08      	ldr	r7, [sp, #32]
 8004cd0:	3219      	adds	r2, #25
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d1f0      	bne.n	8004cba <_printf_common+0x8a>
 8004cd8:	2001      	movs	r0, #1
 8004cda:	4240      	negs	r0, r0
 8004cdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cde:	2030      	movs	r0, #48	@ 0x30
 8004ce0:	18e1      	adds	r1, r4, r3
 8004ce2:	3143      	adds	r1, #67	@ 0x43
 8004ce4:	7008      	strb	r0, [r1, #0]
 8004ce6:	0021      	movs	r1, r4
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	3145      	adds	r1, #69	@ 0x45
 8004cec:	7809      	ldrb	r1, [r1, #0]
 8004cee:	18a2      	adds	r2, r4, r2
 8004cf0:	3243      	adds	r2, #67	@ 0x43
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	7011      	strb	r1, [r2, #0]
 8004cf6:	e7c1      	b.n	8004c7c <_printf_common+0x4c>
 8004cf8:	0022      	movs	r2, r4
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	9901      	ldr	r1, [sp, #4]
 8004cfe:	9800      	ldr	r0, [sp, #0]
 8004d00:	9f08      	ldr	r7, [sp, #32]
 8004d02:	321a      	adds	r2, #26
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	d0e6      	beq.n	8004cd8 <_printf_common+0xa8>
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7d1      	b.n	8004cb2 <_printf_common+0x82>
	...

08004d10 <_printf_i>:
 8004d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d12:	b08b      	sub	sp, #44	@ 0x2c
 8004d14:	9206      	str	r2, [sp, #24]
 8004d16:	000a      	movs	r2, r1
 8004d18:	3243      	adds	r2, #67	@ 0x43
 8004d1a:	9307      	str	r3, [sp, #28]
 8004d1c:	9005      	str	r0, [sp, #20]
 8004d1e:	9203      	str	r2, [sp, #12]
 8004d20:	7e0a      	ldrb	r2, [r1, #24]
 8004d22:	000c      	movs	r4, r1
 8004d24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d26:	2a78      	cmp	r2, #120	@ 0x78
 8004d28:	d809      	bhi.n	8004d3e <_printf_i+0x2e>
 8004d2a:	2a62      	cmp	r2, #98	@ 0x62
 8004d2c:	d80b      	bhi.n	8004d46 <_printf_i+0x36>
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	d100      	bne.n	8004d34 <_printf_i+0x24>
 8004d32:	e0bc      	b.n	8004eae <_printf_i+0x19e>
 8004d34:	497b      	ldr	r1, [pc, #492]	@ (8004f24 <_printf_i+0x214>)
 8004d36:	9104      	str	r1, [sp, #16]
 8004d38:	2a58      	cmp	r2, #88	@ 0x58
 8004d3a:	d100      	bne.n	8004d3e <_printf_i+0x2e>
 8004d3c:	e090      	b.n	8004e60 <_printf_i+0x150>
 8004d3e:	0025      	movs	r5, r4
 8004d40:	3542      	adds	r5, #66	@ 0x42
 8004d42:	702a      	strb	r2, [r5, #0]
 8004d44:	e022      	b.n	8004d8c <_printf_i+0x7c>
 8004d46:	0010      	movs	r0, r2
 8004d48:	3863      	subs	r0, #99	@ 0x63
 8004d4a:	2815      	cmp	r0, #21
 8004d4c:	d8f7      	bhi.n	8004d3e <_printf_i+0x2e>
 8004d4e:	f7fb f9db 	bl	8000108 <__gnu_thumb1_case_shi>
 8004d52:	0016      	.short	0x0016
 8004d54:	fff6001f 	.word	0xfff6001f
 8004d58:	fff6fff6 	.word	0xfff6fff6
 8004d5c:	001ffff6 	.word	0x001ffff6
 8004d60:	fff6fff6 	.word	0xfff6fff6
 8004d64:	fff6fff6 	.word	0xfff6fff6
 8004d68:	003600a1 	.word	0x003600a1
 8004d6c:	fff60080 	.word	0xfff60080
 8004d70:	00b2fff6 	.word	0x00b2fff6
 8004d74:	0036fff6 	.word	0x0036fff6
 8004d78:	fff6fff6 	.word	0xfff6fff6
 8004d7c:	0084      	.short	0x0084
 8004d7e:	0025      	movs	r5, r4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	3542      	adds	r5, #66	@ 0x42
 8004d84:	1d11      	adds	r1, r2, #4
 8004d86:	6019      	str	r1, [r3, #0]
 8004d88:	6813      	ldr	r3, [r2, #0]
 8004d8a:	702b      	strb	r3, [r5, #0]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0a0      	b.n	8004ed2 <_printf_i+0x1c2>
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	6809      	ldr	r1, [r1, #0]
 8004d94:	1d02      	adds	r2, r0, #4
 8004d96:	060d      	lsls	r5, r1, #24
 8004d98:	d50b      	bpl.n	8004db2 <_printf_i+0xa2>
 8004d9a:	6806      	ldr	r6, [r0, #0]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	2e00      	cmp	r6, #0
 8004da0:	da03      	bge.n	8004daa <_printf_i+0x9a>
 8004da2:	232d      	movs	r3, #45	@ 0x2d
 8004da4:	9a03      	ldr	r2, [sp, #12]
 8004da6:	4276      	negs	r6, r6
 8004da8:	7013      	strb	r3, [r2, #0]
 8004daa:	4b5e      	ldr	r3, [pc, #376]	@ (8004f24 <_printf_i+0x214>)
 8004dac:	270a      	movs	r7, #10
 8004dae:	9304      	str	r3, [sp, #16]
 8004db0:	e018      	b.n	8004de4 <_printf_i+0xd4>
 8004db2:	6806      	ldr	r6, [r0, #0]
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	0649      	lsls	r1, r1, #25
 8004db8:	d5f1      	bpl.n	8004d9e <_printf_i+0x8e>
 8004dba:	b236      	sxth	r6, r6
 8004dbc:	e7ef      	b.n	8004d9e <_printf_i+0x8e>
 8004dbe:	6808      	ldr	r0, [r1, #0]
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	c940      	ldmia	r1!, {r6}
 8004dc4:	0605      	lsls	r5, r0, #24
 8004dc6:	d402      	bmi.n	8004dce <_printf_i+0xbe>
 8004dc8:	0640      	lsls	r0, r0, #25
 8004dca:	d500      	bpl.n	8004dce <_printf_i+0xbe>
 8004dcc:	b2b6      	uxth	r6, r6
 8004dce:	6019      	str	r1, [r3, #0]
 8004dd0:	4b54      	ldr	r3, [pc, #336]	@ (8004f24 <_printf_i+0x214>)
 8004dd2:	270a      	movs	r7, #10
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	2a6f      	cmp	r2, #111	@ 0x6f
 8004dd8:	d100      	bne.n	8004ddc <_printf_i+0xcc>
 8004dda:	3f02      	subs	r7, #2
 8004ddc:	0023      	movs	r3, r4
 8004dde:	2200      	movs	r2, #0
 8004de0:	3343      	adds	r3, #67	@ 0x43
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	60a3      	str	r3, [r4, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	db03      	blt.n	8004df4 <_printf_i+0xe4>
 8004dec:	2104      	movs	r1, #4
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	438a      	bics	r2, r1
 8004df2:	6022      	str	r2, [r4, #0]
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	d102      	bne.n	8004dfe <_printf_i+0xee>
 8004df8:	9d03      	ldr	r5, [sp, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00c      	beq.n	8004e18 <_printf_i+0x108>
 8004dfe:	9d03      	ldr	r5, [sp, #12]
 8004e00:	0030      	movs	r0, r6
 8004e02:	0039      	movs	r1, r7
 8004e04:	f7fb fa10 	bl	8000228 <__aeabi_uidivmod>
 8004e08:	9b04      	ldr	r3, [sp, #16]
 8004e0a:	3d01      	subs	r5, #1
 8004e0c:	5c5b      	ldrb	r3, [r3, r1]
 8004e0e:	702b      	strb	r3, [r5, #0]
 8004e10:	0033      	movs	r3, r6
 8004e12:	0006      	movs	r6, r0
 8004e14:	429f      	cmp	r7, r3
 8004e16:	d9f3      	bls.n	8004e00 <_printf_i+0xf0>
 8004e18:	2f08      	cmp	r7, #8
 8004e1a:	d109      	bne.n	8004e30 <_printf_i+0x120>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	07db      	lsls	r3, r3, #31
 8004e20:	d506      	bpl.n	8004e30 <_printf_i+0x120>
 8004e22:	6862      	ldr	r2, [r4, #4]
 8004e24:	6923      	ldr	r3, [r4, #16]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	dc02      	bgt.n	8004e30 <_printf_i+0x120>
 8004e2a:	2330      	movs	r3, #48	@ 0x30
 8004e2c:	3d01      	subs	r5, #1
 8004e2e:	702b      	strb	r3, [r5, #0]
 8004e30:	9b03      	ldr	r3, [sp, #12]
 8004e32:	1b5b      	subs	r3, r3, r5
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	9b07      	ldr	r3, [sp, #28]
 8004e38:	0021      	movs	r1, r4
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	9805      	ldr	r0, [sp, #20]
 8004e3e:	9b06      	ldr	r3, [sp, #24]
 8004e40:	aa09      	add	r2, sp, #36	@ 0x24
 8004e42:	f7ff fef5 	bl	8004c30 <_printf_common>
 8004e46:	3001      	adds	r0, #1
 8004e48:	d148      	bne.n	8004edc <_printf_i+0x1cc>
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	4240      	negs	r0, r0
 8004e4e:	b00b      	add	sp, #44	@ 0x2c
 8004e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e52:	2220      	movs	r2, #32
 8004e54:	6809      	ldr	r1, [r1, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	6022      	str	r2, [r4, #0]
 8004e5a:	2278      	movs	r2, #120	@ 0x78
 8004e5c:	4932      	ldr	r1, [pc, #200]	@ (8004f28 <_printf_i+0x218>)
 8004e5e:	9104      	str	r1, [sp, #16]
 8004e60:	0021      	movs	r1, r4
 8004e62:	3145      	adds	r1, #69	@ 0x45
 8004e64:	700a      	strb	r2, [r1, #0]
 8004e66:	6819      	ldr	r1, [r3, #0]
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	c940      	ldmia	r1!, {r6}
 8004e6c:	0610      	lsls	r0, r2, #24
 8004e6e:	d402      	bmi.n	8004e76 <_printf_i+0x166>
 8004e70:	0650      	lsls	r0, r2, #25
 8004e72:	d500      	bpl.n	8004e76 <_printf_i+0x166>
 8004e74:	b2b6      	uxth	r6, r6
 8004e76:	6019      	str	r1, [r3, #0]
 8004e78:	07d3      	lsls	r3, r2, #31
 8004e7a:	d502      	bpl.n	8004e82 <_printf_i+0x172>
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d001      	beq.n	8004e8a <_printf_i+0x17a>
 8004e86:	2710      	movs	r7, #16
 8004e88:	e7a8      	b.n	8004ddc <_printf_i+0xcc>
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	4393      	bics	r3, r2
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	e7f8      	b.n	8004e86 <_printf_i+0x176>
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	680d      	ldr	r5, [r1, #0]
 8004e98:	1d10      	adds	r0, r2, #4
 8004e9a:	6949      	ldr	r1, [r1, #20]
 8004e9c:	6018      	str	r0, [r3, #0]
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	062e      	lsls	r6, r5, #24
 8004ea2:	d501      	bpl.n	8004ea8 <_printf_i+0x198>
 8004ea4:	6019      	str	r1, [r3, #0]
 8004ea6:	e002      	b.n	8004eae <_printf_i+0x19e>
 8004ea8:	066d      	lsls	r5, r5, #25
 8004eaa:	d5fb      	bpl.n	8004ea4 <_printf_i+0x194>
 8004eac:	8019      	strh	r1, [r3, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9d03      	ldr	r5, [sp, #12]
 8004eb2:	6123      	str	r3, [r4, #16]
 8004eb4:	e7bf      	b.n	8004e36 <_printf_i+0x126>
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	1d11      	adds	r1, r2, #4
 8004eba:	6019      	str	r1, [r3, #0]
 8004ebc:	6815      	ldr	r5, [r2, #0]
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	0028      	movs	r0, r5
 8004ec2:	6862      	ldr	r2, [r4, #4]
 8004ec4:	f000 f91c 	bl	8005100 <memchr>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d001      	beq.n	8004ed0 <_printf_i+0x1c0>
 8004ecc:	1b40      	subs	r0, r0, r5
 8004ece:	6060      	str	r0, [r4, #4]
 8004ed0:	6863      	ldr	r3, [r4, #4]
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9a03      	ldr	r2, [sp, #12]
 8004ed8:	7013      	strb	r3, [r2, #0]
 8004eda:	e7ac      	b.n	8004e36 <_printf_i+0x126>
 8004edc:	002a      	movs	r2, r5
 8004ede:	6923      	ldr	r3, [r4, #16]
 8004ee0:	9906      	ldr	r1, [sp, #24]
 8004ee2:	9805      	ldr	r0, [sp, #20]
 8004ee4:	9d07      	ldr	r5, [sp, #28]
 8004ee6:	47a8      	blx	r5
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d0ae      	beq.n	8004e4a <_printf_i+0x13a>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	079b      	lsls	r3, r3, #30
 8004ef0:	d415      	bmi.n	8004f1e <_printf_i+0x20e>
 8004ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef4:	68e0      	ldr	r0, [r4, #12]
 8004ef6:	4298      	cmp	r0, r3
 8004ef8:	daa9      	bge.n	8004e4e <_printf_i+0x13e>
 8004efa:	0018      	movs	r0, r3
 8004efc:	e7a7      	b.n	8004e4e <_printf_i+0x13e>
 8004efe:	0022      	movs	r2, r4
 8004f00:	2301      	movs	r3, #1
 8004f02:	9906      	ldr	r1, [sp, #24]
 8004f04:	9805      	ldr	r0, [sp, #20]
 8004f06:	9e07      	ldr	r6, [sp, #28]
 8004f08:	3219      	adds	r2, #25
 8004f0a:	47b0      	blx	r6
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d09c      	beq.n	8004e4a <_printf_i+0x13a>
 8004f10:	3501      	adds	r5, #1
 8004f12:	68e3      	ldr	r3, [r4, #12]
 8004f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	42ab      	cmp	r3, r5
 8004f1a:	dcf0      	bgt.n	8004efe <_printf_i+0x1ee>
 8004f1c:	e7e9      	b.n	8004ef2 <_printf_i+0x1e2>
 8004f1e:	2500      	movs	r5, #0
 8004f20:	e7f7      	b.n	8004f12 <_printf_i+0x202>
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	08005344 	.word	0x08005344
 8004f28:	08005355 	.word	0x08005355

08004f2c <__swbuf_r>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	0006      	movs	r6, r0
 8004f30:	000d      	movs	r5, r1
 8004f32:	0014      	movs	r4, r2
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d004      	beq.n	8004f42 <__swbuf_r+0x16>
 8004f38:	6a03      	ldr	r3, [r0, #32]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <__swbuf_r+0x16>
 8004f3e:	f7ff fa31 	bl	80043a4 <__sinit>
 8004f42:	69a3      	ldr	r3, [r4, #24]
 8004f44:	60a3      	str	r3, [r4, #8]
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	071b      	lsls	r3, r3, #28
 8004f4a:	d502      	bpl.n	8004f52 <__swbuf_r+0x26>
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <__swbuf_r+0x3a>
 8004f52:	0021      	movs	r1, r4
 8004f54:	0030      	movs	r0, r6
 8004f56:	f000 f82b 	bl	8004fb0 <__swsetup_r>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d003      	beq.n	8004f66 <__swbuf_r+0x3a>
 8004f5e:	2501      	movs	r5, #1
 8004f60:	426d      	negs	r5, r5
 8004f62:	0028      	movs	r0, r5
 8004f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	b2ef      	uxtb	r7, r5
 8004f6c:	1ac0      	subs	r0, r0, r3
 8004f6e:	6963      	ldr	r3, [r4, #20]
 8004f70:	b2ed      	uxtb	r5, r5
 8004f72:	4283      	cmp	r3, r0
 8004f74:	dc05      	bgt.n	8004f82 <__swbuf_r+0x56>
 8004f76:	0021      	movs	r1, r4
 8004f78:	0030      	movs	r0, r6
 8004f7a:	f7ff fcc1 	bl	8004900 <_fflush_r>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d1ed      	bne.n	8004f5e <__swbuf_r+0x32>
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	3001      	adds	r0, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	60a3      	str	r3, [r4, #8]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	701f      	strb	r7, [r3, #0]
 8004f92:	6963      	ldr	r3, [r4, #20]
 8004f94:	4283      	cmp	r3, r0
 8004f96:	d004      	beq.n	8004fa2 <__swbuf_r+0x76>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	07db      	lsls	r3, r3, #31
 8004f9c:	d5e1      	bpl.n	8004f62 <__swbuf_r+0x36>
 8004f9e:	2d0a      	cmp	r5, #10
 8004fa0:	d1df      	bne.n	8004f62 <__swbuf_r+0x36>
 8004fa2:	0021      	movs	r1, r4
 8004fa4:	0030      	movs	r0, r6
 8004fa6:	f7ff fcab 	bl	8004900 <_fflush_r>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d0d9      	beq.n	8004f62 <__swbuf_r+0x36>
 8004fae:	e7d6      	b.n	8004f5e <__swbuf_r+0x32>

08004fb0 <__swsetup_r>:
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8005068 <__swsetup_r+0xb8>)
 8004fb2:	b570      	push	{r4, r5, r6, lr}
 8004fb4:	0005      	movs	r5, r0
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	000c      	movs	r4, r1
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d004      	beq.n	8004fc8 <__swsetup_r+0x18>
 8004fbe:	6a03      	ldr	r3, [r0, #32]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <__swsetup_r+0x18>
 8004fc4:	f7ff f9ee 	bl	80043a4 <__sinit>
 8004fc8:	230c      	movs	r3, #12
 8004fca:	5ee2      	ldrsh	r2, [r4, r3]
 8004fcc:	0713      	lsls	r3, r2, #28
 8004fce:	d423      	bmi.n	8005018 <__swsetup_r+0x68>
 8004fd0:	06d3      	lsls	r3, r2, #27
 8004fd2:	d407      	bmi.n	8004fe4 <__swsetup_r+0x34>
 8004fd4:	2309      	movs	r3, #9
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	2340      	movs	r3, #64	@ 0x40
 8004fda:	2001      	movs	r0, #1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	4240      	negs	r0, r0
 8004fe2:	e03a      	b.n	800505a <__swsetup_r+0xaa>
 8004fe4:	0752      	lsls	r2, r2, #29
 8004fe6:	d513      	bpl.n	8005010 <__swsetup_r+0x60>
 8004fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fea:	2900      	cmp	r1, #0
 8004fec:	d008      	beq.n	8005000 <__swsetup_r+0x50>
 8004fee:	0023      	movs	r3, r4
 8004ff0:	3344      	adds	r3, #68	@ 0x44
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	d002      	beq.n	8004ffc <__swsetup_r+0x4c>
 8004ff6:	0028      	movs	r0, r5
 8004ff8:	f7ff faf6 	bl	80045e8 <_free_r>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005000:	2224      	movs	r2, #36	@ 0x24
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	4393      	bics	r3, r2
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	2300      	movs	r3, #0
 800500a:	6063      	str	r3, [r4, #4]
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	2308      	movs	r3, #8
 8005012:	89a2      	ldrh	r2, [r4, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <__swsetup_r+0x86>
 800501e:	21a0      	movs	r1, #160	@ 0xa0
 8005020:	2280      	movs	r2, #128	@ 0x80
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	0089      	lsls	r1, r1, #2
 8005026:	0092      	lsls	r2, r2, #2
 8005028:	400b      	ands	r3, r1
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <__swsetup_r+0x86>
 800502e:	0021      	movs	r1, r4
 8005030:	0028      	movs	r0, r5
 8005032:	f000 f89b 	bl	800516c <__smakebuf_r>
 8005036:	230c      	movs	r3, #12
 8005038:	5ee2      	ldrsh	r2, [r4, r3]
 800503a:	2101      	movs	r1, #1
 800503c:	0013      	movs	r3, r2
 800503e:	400b      	ands	r3, r1
 8005040:	420a      	tst	r2, r1
 8005042:	d00b      	beq.n	800505c <__swsetup_r+0xac>
 8005044:	2300      	movs	r3, #0
 8005046:	60a3      	str	r3, [r4, #8]
 8005048:	6963      	ldr	r3, [r4, #20]
 800504a:	425b      	negs	r3, r3
 800504c:	61a3      	str	r3, [r4, #24]
 800504e:	2000      	movs	r0, #0
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	4283      	cmp	r3, r0
 8005054:	d101      	bne.n	800505a <__swsetup_r+0xaa>
 8005056:	0613      	lsls	r3, r2, #24
 8005058:	d4be      	bmi.n	8004fd8 <__swsetup_r+0x28>
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	0791      	lsls	r1, r2, #30
 800505e:	d400      	bmi.n	8005062 <__swsetup_r+0xb2>
 8005060:	6963      	ldr	r3, [r4, #20]
 8005062:	60a3      	str	r3, [r4, #8]
 8005064:	e7f3      	b.n	800504e <__swsetup_r+0x9e>
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	2000001c 	.word	0x2000001c

0800506c <_raise_r>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	0004      	movs	r4, r0
 8005070:	000d      	movs	r5, r1
 8005072:	291f      	cmp	r1, #31
 8005074:	d904      	bls.n	8005080 <_raise_r+0x14>
 8005076:	2316      	movs	r3, #22
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	2001      	movs	r0, #1
 800507c:	4240      	negs	r0, r0
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <_raise_r+0x24>
 8005086:	008a      	lsls	r2, r1, #2
 8005088:	189b      	adds	r3, r3, r2
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	2a00      	cmp	r2, #0
 800508e:	d108      	bne.n	80050a2 <_raise_r+0x36>
 8005090:	0020      	movs	r0, r4
 8005092:	f000 f831 	bl	80050f8 <_getpid_r>
 8005096:	002a      	movs	r2, r5
 8005098:	0001      	movs	r1, r0
 800509a:	0020      	movs	r0, r4
 800509c:	f000 f81a 	bl	80050d4 <_kill_r>
 80050a0:	e7ed      	b.n	800507e <_raise_r+0x12>
 80050a2:	2a01      	cmp	r2, #1
 80050a4:	d009      	beq.n	80050ba <_raise_r+0x4e>
 80050a6:	1c51      	adds	r1, r2, #1
 80050a8:	d103      	bne.n	80050b2 <_raise_r+0x46>
 80050aa:	2316      	movs	r3, #22
 80050ac:	6003      	str	r3, [r0, #0]
 80050ae:	2001      	movs	r0, #1
 80050b0:	e7e5      	b.n	800507e <_raise_r+0x12>
 80050b2:	2100      	movs	r1, #0
 80050b4:	0028      	movs	r0, r5
 80050b6:	6019      	str	r1, [r3, #0]
 80050b8:	4790      	blx	r2
 80050ba:	2000      	movs	r0, #0
 80050bc:	e7df      	b.n	800507e <_raise_r+0x12>
	...

080050c0 <raise>:
 80050c0:	b510      	push	{r4, lr}
 80050c2:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <raise+0x10>)
 80050c4:	0001      	movs	r1, r0
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	f7ff ffd0 	bl	800506c <_raise_r>
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	2000001c 	.word	0x2000001c

080050d4 <_kill_r>:
 80050d4:	2300      	movs	r3, #0
 80050d6:	b570      	push	{r4, r5, r6, lr}
 80050d8:	4d06      	ldr	r5, [pc, #24]	@ (80050f4 <_kill_r+0x20>)
 80050da:	0004      	movs	r4, r0
 80050dc:	0008      	movs	r0, r1
 80050de:	0011      	movs	r1, r2
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	f7fb ffa7 	bl	8001034 <_kill>
 80050e6:	1c43      	adds	r3, r0, #1
 80050e8:	d103      	bne.n	80050f2 <_kill_r+0x1e>
 80050ea:	682b      	ldr	r3, [r5, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d000      	beq.n	80050f2 <_kill_r+0x1e>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	200004f8 	.word	0x200004f8

080050f8 <_getpid_r>:
 80050f8:	b510      	push	{r4, lr}
 80050fa:	f7fb ff95 	bl	8001028 <_getpid>
 80050fe:	bd10      	pop	{r4, pc}

08005100 <memchr>:
 8005100:	b2c9      	uxtb	r1, r1
 8005102:	1882      	adds	r2, r0, r2
 8005104:	4290      	cmp	r0, r2
 8005106:	d101      	bne.n	800510c <memchr+0xc>
 8005108:	2000      	movs	r0, #0
 800510a:	4770      	bx	lr
 800510c:	7803      	ldrb	r3, [r0, #0]
 800510e:	428b      	cmp	r3, r1
 8005110:	d0fb      	beq.n	800510a <memchr+0xa>
 8005112:	3001      	adds	r0, #1
 8005114:	e7f6      	b.n	8005104 <memchr+0x4>
	...

08005118 <__swhatbuf_r>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	000e      	movs	r6, r1
 800511c:	001d      	movs	r5, r3
 800511e:	230e      	movs	r3, #14
 8005120:	5ec9      	ldrsh	r1, [r1, r3]
 8005122:	0014      	movs	r4, r2
 8005124:	b096      	sub	sp, #88	@ 0x58
 8005126:	2900      	cmp	r1, #0
 8005128:	da0c      	bge.n	8005144 <__swhatbuf_r+0x2c>
 800512a:	89b2      	ldrh	r2, [r6, #12]
 800512c:	2380      	movs	r3, #128	@ 0x80
 800512e:	0011      	movs	r1, r2
 8005130:	4019      	ands	r1, r3
 8005132:	421a      	tst	r2, r3
 8005134:	d114      	bne.n	8005160 <__swhatbuf_r+0x48>
 8005136:	2380      	movs	r3, #128	@ 0x80
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	2000      	movs	r0, #0
 800513c:	6029      	str	r1, [r5, #0]
 800513e:	6023      	str	r3, [r4, #0]
 8005140:	b016      	add	sp, #88	@ 0x58
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	466a      	mov	r2, sp
 8005146:	f000 f853 	bl	80051f0 <_fstat_r>
 800514a:	2800      	cmp	r0, #0
 800514c:	dbed      	blt.n	800512a <__swhatbuf_r+0x12>
 800514e:	23f0      	movs	r3, #240	@ 0xf0
 8005150:	9901      	ldr	r1, [sp, #4]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	4019      	ands	r1, r3
 8005156:	4b04      	ldr	r3, [pc, #16]	@ (8005168 <__swhatbuf_r+0x50>)
 8005158:	18c9      	adds	r1, r1, r3
 800515a:	424b      	negs	r3, r1
 800515c:	4159      	adcs	r1, r3
 800515e:	e7ea      	b.n	8005136 <__swhatbuf_r+0x1e>
 8005160:	2100      	movs	r1, #0
 8005162:	2340      	movs	r3, #64	@ 0x40
 8005164:	e7e9      	b.n	800513a <__swhatbuf_r+0x22>
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	ffffe000 	.word	0xffffe000

0800516c <__smakebuf_r>:
 800516c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516e:	2602      	movs	r6, #2
 8005170:	898b      	ldrh	r3, [r1, #12]
 8005172:	0005      	movs	r5, r0
 8005174:	000c      	movs	r4, r1
 8005176:	b085      	sub	sp, #20
 8005178:	4233      	tst	r3, r6
 800517a:	d007      	beq.n	800518c <__smakebuf_r+0x20>
 800517c:	0023      	movs	r3, r4
 800517e:	3347      	adds	r3, #71	@ 0x47
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	2301      	movs	r3, #1
 8005186:	6163      	str	r3, [r4, #20]
 8005188:	b005      	add	sp, #20
 800518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518c:	ab03      	add	r3, sp, #12
 800518e:	aa02      	add	r2, sp, #8
 8005190:	f7ff ffc2 	bl	8005118 <__swhatbuf_r>
 8005194:	9f02      	ldr	r7, [sp, #8]
 8005196:	9001      	str	r0, [sp, #4]
 8005198:	0039      	movs	r1, r7
 800519a:	0028      	movs	r0, r5
 800519c:	f7ff fa9a 	bl	80046d4 <_malloc_r>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d108      	bne.n	80051b6 <__smakebuf_r+0x4a>
 80051a4:	220c      	movs	r2, #12
 80051a6:	5ea3      	ldrsh	r3, [r4, r2]
 80051a8:	059a      	lsls	r2, r3, #22
 80051aa:	d4ed      	bmi.n	8005188 <__smakebuf_r+0x1c>
 80051ac:	2203      	movs	r2, #3
 80051ae:	4393      	bics	r3, r2
 80051b0:	431e      	orrs	r6, r3
 80051b2:	81a6      	strh	r6, [r4, #12]
 80051b4:	e7e2      	b.n	800517c <__smakebuf_r+0x10>
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	89a2      	ldrh	r2, [r4, #12]
 80051ba:	6020      	str	r0, [r4, #0]
 80051bc:	4313      	orrs	r3, r2
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	6120      	str	r0, [r4, #16]
 80051c4:	6167      	str	r7, [r4, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00c      	beq.n	80051e4 <__smakebuf_r+0x78>
 80051ca:	0028      	movs	r0, r5
 80051cc:	230e      	movs	r3, #14
 80051ce:	5ee1      	ldrsh	r1, [r4, r3]
 80051d0:	f000 f820 	bl	8005214 <_isatty_r>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d005      	beq.n	80051e4 <__smakebuf_r+0x78>
 80051d8:	2303      	movs	r3, #3
 80051da:	89a2      	ldrh	r2, [r4, #12]
 80051dc:	439a      	bics	r2, r3
 80051de:	3b02      	subs	r3, #2
 80051e0:	4313      	orrs	r3, r2
 80051e2:	81a3      	strh	r3, [r4, #12]
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	9a01      	ldr	r2, [sp, #4]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	e7cc      	b.n	8005188 <__smakebuf_r+0x1c>
	...

080051f0 <_fstat_r>:
 80051f0:	2300      	movs	r3, #0
 80051f2:	b570      	push	{r4, r5, r6, lr}
 80051f4:	4d06      	ldr	r5, [pc, #24]	@ (8005210 <_fstat_r+0x20>)
 80051f6:	0004      	movs	r4, r0
 80051f8:	0008      	movs	r0, r1
 80051fa:	0011      	movs	r1, r2
 80051fc:	602b      	str	r3, [r5, #0]
 80051fe:	f7fb ff79 	bl	80010f4 <_fstat>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d103      	bne.n	800520e <_fstat_r+0x1e>
 8005206:	682b      	ldr	r3, [r5, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d000      	beq.n	800520e <_fstat_r+0x1e>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	bd70      	pop	{r4, r5, r6, pc}
 8005210:	200004f8 	.word	0x200004f8

08005214 <_isatty_r>:
 8005214:	2300      	movs	r3, #0
 8005216:	b570      	push	{r4, r5, r6, lr}
 8005218:	4d06      	ldr	r5, [pc, #24]	@ (8005234 <_isatty_r+0x20>)
 800521a:	0004      	movs	r4, r0
 800521c:	0008      	movs	r0, r1
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7fb ff76 	bl	8001110 <_isatty>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d103      	bne.n	8005230 <_isatty_r+0x1c>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d000      	beq.n	8005230 <_isatty_r+0x1c>
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	bd70      	pop	{r4, r5, r6, pc}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	200004f8 	.word	0x200004f8

08005238 <_init>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr

08005244 <_fini>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr
