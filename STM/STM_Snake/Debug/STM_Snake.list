
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003974  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003a34  08003a34  00004a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a6c  08003a6c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a6c  08003a6c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a6c  08003a6c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a6c  08003a6c  00004a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a70  08003a70  00004a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08003a80  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003a80  00005148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc38  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002075  00000000  00000000  00012c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00014ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dc  00000000  00000000  00015970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cf9  00000000  00000000  0001634c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb73  00000000  00000000  00018045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070f2f  00000000  00000000  00027bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098ae7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  00098b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0009b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a1c 	.word	0x08003a1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003a1c 	.word	0x08003a1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbb2 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f91c 	bl	8000468 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8fc 	bl	800042c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f8ca 	bl	80003cc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000238:	f000 f872 	bl	8000320 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800023c:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <main+0x34>)
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fe30 	bl	8001ea4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1,frame,sizeof(frame));
 8000244:	4904      	ldr	r1, [pc, #16]	@ (8000258 <main+0x38>)
 8000246:	4b05      	ldr	r3, [pc, #20]	@ (800025c <main+0x3c>)
 8000248:	2205      	movs	r2, #5
 800024a:	0018      	movs	r0, r3
 800024c:	f002 fae7 	bl	800281e <HAL_UART_Receive_DMA>
  //simulate_snake_game();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	46c0      	nop			@ (mov r8, r8)
 8000252:	e7fd      	b.n	8000250 <main+0x30>
 8000254:	20000028 	.word	0x20000028
 8000258:	2000013c 	.word	0x2000013c
 800025c:	20000070 	.word	0x20000070

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b097      	sub	sp, #92	@ 0x5c
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2428      	movs	r4, #40	@ 0x28
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2330      	movs	r3, #48	@ 0x30
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f003 fba6 	bl	80039c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	2318      	movs	r3, #24
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f003 fb9e 	bl	80039c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f003 fb97 	bl	80039c2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000294:	0021      	movs	r1, r4
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2201      	movs	r2, #1
 800029a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2201      	movs	r2, #1
 80002a0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2280      	movs	r2, #128	@ 0x80
 80002ac:	0252      	lsls	r2, r2, #9
 80002ae:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2280      	movs	r2, #128	@ 0x80
 80002b4:	0352      	lsls	r2, r2, #13
 80002b6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f001 f863 	bl	800138c <HAL_RCC_OscConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ca:	f000 f96f 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	2118      	movs	r1, #24
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2207      	movs	r2, #7
 80002d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2101      	movs	r1, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fb67 	bl	80019c0 <HAL_RCC_ClockConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002f6:	f000 f959 	bl	80005ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2201      	movs	r2, #1
 80002fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fc9d 	bl	8001c48 <HAL_RCCEx_PeriphCLKConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000312:	f000 f94b 	bl	80005ac <Error_Handler>
  }
}
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b017      	add	sp, #92	@ 0x5c
 800031c:	bd90      	pop	{r4, r7, pc}
	...

08000320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	2308      	movs	r3, #8
 8000328:	18fb      	adds	r3, r7, r3
 800032a:	0018      	movs	r0, r3
 800032c:	2310      	movs	r3, #16
 800032e:	001a      	movs	r2, r3
 8000330:	2100      	movs	r1, #0
 8000332:	f003 fb46 	bl	80039c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	2308      	movs	r3, #8
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f003 fb3f 	bl	80039c2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000344:	4b1e      	ldr	r3, [pc, #120]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 8000346:	2280      	movs	r2, #128	@ 0x80
 8000348:	05d2      	lsls	r2, r2, #23
 800034a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6999;
 800034c:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 800034e:	4a1d      	ldr	r2, [pc, #116]	@ (80003c4 <MX_TIM2_Init+0xa4>)
 8000350:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000352:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 800035a:	4a1b      	ldr	r2, [pc, #108]	@ (80003c8 <MX_TIM2_Init+0xa8>)
 800035c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000364:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 8000366:	2200      	movs	r2, #0
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800036a:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 800036c:	0018      	movs	r0, r3
 800036e:	f001 fd49 	bl	8001e04 <HAL_TIM_Base_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000376:	f000 f919 	bl	80005ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	2108      	movs	r1, #8
 800037c:	187b      	adds	r3, r7, r1
 800037e:	2280      	movs	r2, #128	@ 0x80
 8000380:	0152      	lsls	r2, r2, #5
 8000382:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000384:	187a      	adds	r2, r7, r1
 8000386:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 8000388:	0011      	movs	r1, r2
 800038a:	0018      	movs	r0, r3
 800038c:	f001 feca 	bl	8002124 <HAL_TIM_ConfigClockSource>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000394:	f000 f90a 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	003b      	movs	r3, r7
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039e:	003b      	movs	r3, r7
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a4:	003a      	movs	r2, r7
 80003a6:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <MX_TIM2_Init+0xa0>)
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 f8d6 	bl	800255c <HAL_TIMEx_MasterConfigSynchronization>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003b4:	f000 f8fa 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b006      	add	sp, #24
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000028 	.word	0x20000028
 80003c4:	00001b57 	.word	0x00001b57
 80003c8:	00002710 	.word	0x00002710

080003cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003d0:	4b14      	ldr	r3, [pc, #80]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 80003d2:	4a15      	ldr	r2, [pc, #84]	@ (8000428 <MX_USART1_UART_Init+0x5c>)
 80003d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003d6:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 80003d8:	2296      	movs	r2, #150	@ 0x96
 80003da:	0192      	lsls	r2, r2, #6
 80003dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 80003f2:	220c      	movs	r2, #12
 80003f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	4b09      	ldr	r3, [pc, #36]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000402:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000408:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800040e:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <MX_USART1_UART_Init+0x58>)
 8000410:	0018      	movs	r0, r3
 8000412:	f002 f911 	bl	8002638 <HAL_UART_Init>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800041a:	f000 f8c7 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000070 	.word	0x20000070
 8000428:	40013800 	.word	0x40013800

0800042c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000432:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <MX_DMA_Init+0x38>)
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <MX_DMA_Init+0x38>)
 8000438:	2101      	movs	r1, #1
 800043a:	430a      	orrs	r2, r1
 800043c:	615a      	str	r2, [r3, #20]
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <MX_DMA_Init+0x38>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	2201      	movs	r2, #1
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	200a      	movs	r0, #10
 8000450:	f000 fbac 	bl	8000bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000454:	200a      	movs	r0, #10
 8000456:	f000 fbbe 	bl	8000bd6 <HAL_NVIC_EnableIRQ>

}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	40021000 	.word	0x40021000

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b089      	sub	sp, #36	@ 0x24
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	240c      	movs	r4, #12
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	2314      	movs	r3, #20
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f003 faa2 	bl	80039c2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800047e:	4b24      	ldr	r3, [pc, #144]	@ (8000510 <MX_GPIO_Init+0xa8>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b23      	ldr	r3, [pc, #140]	@ (8000510 <MX_GPIO_Init+0xa8>)
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	03c9      	lsls	r1, r1, #15
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b20      	ldr	r3, [pc, #128]	@ (8000510 <MX_GPIO_Init+0xa8>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	03db      	lsls	r3, r3, #15
 8000494:	4013      	ands	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b1d      	ldr	r3, [pc, #116]	@ (8000510 <MX_GPIO_Init+0xa8>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <MX_GPIO_Init+0xa8>)
 80004a0:	2180      	movs	r1, #128	@ 0x80
 80004a2:	0309      	lsls	r1, r1, #12
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b19      	ldr	r3, [pc, #100]	@ (8000510 <MX_GPIO_Init+0xa8>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	@ 0x80
 80004ae:	031b      	lsls	r3, r3, #12
 80004b0:	4013      	ands	r3, r2
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b16      	ldr	r3, [pc, #88]	@ (8000510 <MX_GPIO_Init+0xa8>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <MX_GPIO_Init+0xa8>)
 80004bc:	2180      	movs	r1, #128	@ 0x80
 80004be:	0289      	lsls	r1, r1, #10
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <MX_GPIO_Init+0xa8>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	@ 0x80
 80004ca:	029b      	lsls	r3, r3, #10
 80004cc:	4013      	ands	r3, r2
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80004d2:	23c0      	movs	r3, #192	@ 0xc0
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	480f      	ldr	r0, [pc, #60]	@ (8000514 <MX_GPIO_Init+0xac>)
 80004d8:	2200      	movs	r2, #0
 80004da:	0019      	movs	r1, r3
 80004dc:	f000 ff1e 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	22c0      	movs	r2, #192	@ 0xc0
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2201      	movs	r2, #1
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <MX_GPIO_Init+0xac>)
 80004fe:	0019      	movs	r1, r3
 8000500:	0010      	movs	r0, r2
 8000502:	f000 fd9b 	bl	800103c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b009      	add	sp, #36	@ 0x24
 800050c:	bd90      	pop	{r4, r7, pc}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	40021000 	.word	0x40021000
 8000514:	48000800 	.word	0x48000800

08000518 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <HAL_UART_RxCpltCallback+0x58>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d11e      	bne.n	8000568 <HAL_UART_RxCpltCallback+0x50>

    	uint8_t handler_prot = frame[1];
 800052a:	210f      	movs	r1, #15
 800052c:	187b      	adds	r3, r7, r1
 800052e:	4a11      	ldr	r2, [pc, #68]	@ (8000574 <HAL_UART_RxCpltCallback+0x5c>)
 8000530:	7852      	ldrb	r2, [r2, #1]
 8000532:	701a      	strb	r2, [r3, #0]
    	switch(handler_prot){
 8000534:	187b      	adds	r3, r7, r1
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d10f      	bne.n	800055c <HAL_UART_RxCpltCallback+0x44>
    		case(1):

			uint8_t test_receive = decode_frame(frame,sizeof(frame));
 800053c:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <HAL_UART_RxCpltCallback+0x5c>)
 800053e:	2105      	movs	r1, #5
 8000540:	0018      	movs	r0, r3
 8000542:	f000 f8a7 	bl	8000694 <decode_frame>
 8000546:	0002      	movs	r2, r0
 8000548:	230e      	movs	r3, #14
 800054a:	18fb      	adds	r3, r7, r3
 800054c:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Transmit(&huart1, frame,sizeof(frame), 100);
 800054e:	4909      	ldr	r1, [pc, #36]	@ (8000574 <HAL_UART_RxCpltCallback+0x5c>)
 8000550:	4809      	ldr	r0, [pc, #36]	@ (8000578 <HAL_UART_RxCpltCallback+0x60>)
 8000552:	2364      	movs	r3, #100	@ 0x64
 8000554:	2205      	movs	r2, #5
 8000556:	f002 f8c3 	bl	80026e0 <HAL_UART_Transmit>

    		break;
 800055a:	46c0      	nop			@ (mov r8, r8)

    		case(3):


    	}
    	 HAL_UART_Receive_DMA(&huart1, frame, sizeof(frame));
 800055c:	4905      	ldr	r1, [pc, #20]	@ (8000574 <HAL_UART_RxCpltCallback+0x5c>)
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <HAL_UART_RxCpltCallback+0x60>)
 8000560:	2205      	movs	r2, #5
 8000562:	0018      	movs	r0, r3
 8000564:	f002 f95b 	bl	800281e <HAL_UART_Receive_DMA>
    }
}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b004      	add	sp, #16
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40013800 	.word	0x40013800
 8000574:	2000013c 	.word	0x2000013c
 8000578:	20000070 	.word	0x20000070

0800057c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	2380      	movs	r3, #128	@ 0x80
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	429a      	cmp	r2, r3
 800058e:	d106      	bne.n	800059e <HAL_TIM_PeriodElapsedCallback+0x22>
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);  // Приклад: мигає світлодіод на PC8
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000596:	0019      	movs	r1, r3
 8000598:	0010      	movs	r0, r2
 800059a:	f000 fedc 	bl	8001356 <HAL_GPIO_TogglePin>
    }
}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	48000800 	.word	0x48000800

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	e7fd      	b.n	80005b4 <Error_Handler+0x8>

080005b8 <crc16_ccitt>:
        }
    }
    return crc;
}
// Функція обчислення CRC-16-CCITT (поліном 0x1021, початкове значення 0xFFFF)
uint16_t crc16_ccitt(const uint8_t *data, uint16_t len, uint8_t cmd) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	0008      	movs	r0, r1
 80005c2:	0011      	movs	r1, r2
 80005c4:	1cbb      	adds	r3, r7, #2
 80005c6:	1c02      	adds	r2, r0, #0
 80005c8:	801a      	strh	r2, [r3, #0]
 80005ca:	1c7b      	adds	r3, r7, #1
 80005cc:	1c0a      	adds	r2, r1, #0
 80005ce:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;									//початкове значення
 80005d0:	210e      	movs	r1, #14
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2201      	movs	r2, #1
 80005d6:	4252      	negs	r2, r2
 80005d8:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);							//команда cmd
 80005da:	1c7b      	adds	r3, r7, #1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	021b      	lsls	r3, r3, #8
 80005e0:	b21a      	sxth	r2, r3
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2000      	movs	r0, #0
 80005e6:	5e1b      	ldrsh	r3, [r3, r0]
 80005e8:	4053      	eors	r3, r2
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 80005f0:	230c      	movs	r3, #12
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	2200      	movs	r2, #0
 80005f6:	801a      	strh	r2, [r3, #0]
 80005f8:	e03b      	b.n	8000672 <crc16_ccitt+0xba>
        crc ^= ((uint16_t)data[i] << 8);
 80005fa:	230c      	movs	r3, #12
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	18d3      	adds	r3, r2, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	021b      	lsls	r3, r3, #8
 8000608:	b21a      	sxth	r2, r3
 800060a:	210e      	movs	r1, #14
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2000      	movs	r0, #0
 8000610:	5e1b      	ldrsh	r3, [r3, r0]
 8000612:	4053      	eors	r3, r2
 8000614:	b21a      	sxth	r2, r3
 8000616:	187b      	adds	r3, r7, r1
 8000618:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 800061a:	230b      	movs	r3, #11
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	e01b      	b.n	800065c <crc16_ccitt+0xa4>
            if (crc & 0x8000)
 8000624:	210e      	movs	r1, #14
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	5e9b      	ldrsh	r3, [r3, r2]
 800062c:	2b00      	cmp	r3, #0
 800062e:	da09      	bge.n	8000644 <crc16_ccitt+0x8c>
                crc = (crc << 1) ^ 0x1021;					//поліном
 8000630:	187b      	adds	r3, r7, r1
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b21b      	sxth	r3, r3
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <crc16_ccitt+0xd8>)
 800063a:	4053      	eors	r3, r2
 800063c:	b21a      	sxth	r2, r3
 800063e:	187b      	adds	r3, r7, r1
 8000640:	801a      	strh	r2, [r3, #0]
 8000642:	e005      	b.n	8000650 <crc16_ccitt+0x98>
            else
                crc <<= 1;
 8000644:	230e      	movs	r3, #14
 8000646:	18fa      	adds	r2, r7, r3
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	18db      	adds	r3, r3, r3
 800064e:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000650:	210b      	movs	r1, #11
 8000652:	187b      	adds	r3, r7, r1
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	187b      	adds	r3, r7, r1
 8000658:	3201      	adds	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	230b      	movs	r3, #11
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b07      	cmp	r3, #7
 8000664:	d9de      	bls.n	8000624 <crc16_ccitt+0x6c>
    for (uint16_t i = 0; i < len; i++) {
 8000666:	210c      	movs	r1, #12
 8000668:	187b      	adds	r3, r7, r1
 800066a:	881a      	ldrh	r2, [r3, #0]
 800066c:	187b      	adds	r3, r7, r1
 800066e:	3201      	adds	r2, #1
 8000670:	801a      	strh	r2, [r3, #0]
 8000672:	230c      	movs	r3, #12
 8000674:	18fa      	adds	r2, r7, r3
 8000676:	1cbb      	adds	r3, r7, #2
 8000678:	8812      	ldrh	r2, [r2, #0]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d3bc      	bcc.n	80005fa <crc16_ccitt+0x42>
        }
    }
    return crc;
 8000680:	230e      	movs	r3, #14
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	881b      	ldrh	r3, [r3, #0]
}
 8000686:	0018      	movs	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	b004      	add	sp, #16
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	00001021 	.word	0x00001021

08000694 <decode_frame>:
    tx_buffer[3 + payload_len] = (crc >> 8) & 0xFF; 			// crc high
    tx_buffer[4 + payload_len] = crc & 0xFF;        			// crc low
    return 5;
}

int decode_frame(const uint8_t *frame, uint8_t frame_len) {
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	000a      	movs	r2, r1
 800069e:	1cfb      	adds	r3, r7, #3
 80006a0:	701a      	strb	r2, [r3, #0]
	// Кадр занадто короткий
    if (frame_len < 5){
 80006a2:	1cfb      	adds	r3, r7, #3
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d801      	bhi.n	80006ae <decode_frame+0x1a>
    	return 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e034      	b.n	8000718 <decode_frame+0x84>
    }
    // Невірний стартовий байт
    if (frame[0] != START_BYTE){
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b7e      	cmp	r3, #126	@ 0x7e
 80006b4:	d001      	beq.n	80006ba <decode_frame+0x26>
    		return 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	e02e      	b.n	8000718 <decode_frame+0x84>
    }

    uint8_t cmd_byte = frame[1];
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	210f      	movs	r1, #15
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	701a      	strb	r2, [r3, #0]
   	uint8_t payload = frame[2];
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	1c9a      	adds	r2, r3, #2
 80006ca:	230e      	movs	r3, #14
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	701a      	strb	r2, [r3, #0]

    uint16_t received_crc = (frame[3] << 8) | frame[4];				// Отримання переданого CRC
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3303      	adds	r3, #3
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	b21a      	sxth	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3304      	adds	r3, #4
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	250c      	movs	r5, #12
 80006ea:	197b      	adds	r3, r7, r5
 80006ec:	801a      	strh	r2, [r3, #0]
    uint16_t computed_crc = crc16_ccitt(&frame[2], 1, cmd_byte);    // Обчислення CRC на основі PAYLOAD
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	1c98      	adds	r0, r3, #2
 80006f2:	260a      	movs	r6, #10
 80006f4:	19bc      	adds	r4, r7, r6
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	001a      	movs	r2, r3
 80006fc:	2101      	movs	r1, #1
 80006fe:	f7ff ff5b 	bl	80005b8 <crc16_ccitt>
 8000702:	0003      	movs	r3, r0
 8000704:	8023      	strh	r3, [r4, #0]
    return (received_crc == computed_crc) ? 0 : 4;
 8000706:	197a      	adds	r2, r7, r5
 8000708:	19bb      	adds	r3, r7, r6
 800070a:	8812      	ldrh	r2, [r2, #0]
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	429a      	cmp	r2, r3
 8000710:	d101      	bne.n	8000716 <decode_frame+0x82>
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <decode_frame+0x84>
 8000716:	2304      	movs	r3, #4
}
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	b005      	add	sp, #20
 800071e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <HAL_MspInit+0x44>)
 8000728:	699a      	ldr	r2, [r3, #24]
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <HAL_MspInit+0x44>)
 800072c:	2101      	movs	r1, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	619a      	str	r2, [r3, #24]
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <HAL_MspInit+0x44>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	2201      	movs	r2, #1
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <HAL_MspInit+0x44>)
 8000740:	69da      	ldr	r2, [r3, #28]
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <HAL_MspInit+0x44>)
 8000744:	2180      	movs	r1, #128	@ 0x80
 8000746:	0549      	lsls	r1, r1, #21
 8000748:	430a      	orrs	r2, r1
 800074a:	61da      	str	r2, [r3, #28]
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <HAL_MspInit+0x44>)
 800074e:	69da      	ldr	r2, [r3, #28]
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	055b      	lsls	r3, r3, #21
 8000754:	4013      	ands	r3, r2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	429a      	cmp	r2, r3
 800077a:	d113      	bne.n	80007a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800077c:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <HAL_TIM_Base_MspInit+0x44>)
 800077e:	69da      	ldr	r2, [r3, #28]
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_TIM_Base_MspInit+0x44>)
 8000782:	2101      	movs	r1, #1
 8000784:	430a      	orrs	r2, r1
 8000786:	61da      	str	r2, [r3, #28]
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <HAL_TIM_Base_MspInit+0x44>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	2201      	movs	r2, #1
 800078e:	4013      	ands	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	200f      	movs	r0, #15
 800079a:	f000 fa07 	bl	8000bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800079e:	200f      	movs	r0, #15
 80007a0:	f000 fa19 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b004      	add	sp, #16
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b08b      	sub	sp, #44	@ 0x2c
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	2414      	movs	r4, #20
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	0018      	movs	r0, r3
 80007be:	2314      	movs	r3, #20
 80007c0:	001a      	movs	r2, r3
 80007c2:	2100      	movs	r1, #0
 80007c4:	f003 f8fd 	bl	80039c2 <memset>
  if(huart->Instance==USART1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a34      	ldr	r2, [pc, #208]	@ (80008a0 <HAL_UART_MspInit+0xf0>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d161      	bne.n	8000896 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007d2:	4b34      	ldr	r3, [pc, #208]	@ (80008a4 <HAL_UART_MspInit+0xf4>)
 80007d4:	699a      	ldr	r2, [r3, #24]
 80007d6:	4b33      	ldr	r3, [pc, #204]	@ (80008a4 <HAL_UART_MspInit+0xf4>)
 80007d8:	2180      	movs	r1, #128	@ 0x80
 80007da:	01c9      	lsls	r1, r1, #7
 80007dc:	430a      	orrs	r2, r1
 80007de:	619a      	str	r2, [r3, #24]
 80007e0:	4b30      	ldr	r3, [pc, #192]	@ (80008a4 <HAL_UART_MspInit+0xf4>)
 80007e2:	699a      	ldr	r2, [r3, #24]
 80007e4:	2380      	movs	r3, #128	@ 0x80
 80007e6:	01db      	lsls	r3, r3, #7
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <HAL_UART_MspInit+0xf4>)
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	4b2c      	ldr	r3, [pc, #176]	@ (80008a4 <HAL_UART_MspInit+0xf4>)
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	0289      	lsls	r1, r1, #10
 80007f8:	430a      	orrs	r2, r1
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <HAL_UART_MspInit+0xf4>)
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	2380      	movs	r3, #128	@ 0x80
 8000802:	029b      	lsls	r3, r3, #10
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	22c0      	movs	r2, #192	@ 0xc0
 800080e:	00d2      	lsls	r2, r2, #3
 8000810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	0021      	movs	r1, r4
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2202      	movs	r2, #2
 8000818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2203      	movs	r2, #3
 8000824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2201      	movs	r2, #1
 800082a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	187a      	adds	r2, r7, r1
 800082e:	2390      	movs	r3, #144	@ 0x90
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fc01 	bl	800103c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 800083c:	4a1b      	ldr	r2, [pc, #108]	@ (80008ac <HAL_UART_MspInit+0xfc>)
 800083e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800084c:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 8000860:	2220      	movs	r2, #32
 8000862:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000864:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 800086c:	0018      	movs	r0, r3
 800086e:	f000 f9cf 	bl	8000c10 <HAL_DMA_Init>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000876:	f7ff fe99 	bl	80005ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 800087e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_UART_MspInit+0xf8>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	201b      	movs	r0, #27
 800088c:	f000 f98e 	bl	8000bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000890:	201b      	movs	r0, #27
 8000892:	f000 f9a0 	bl	8000bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b00b      	add	sp, #44	@ 0x2c
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	40013800 	.word	0x40013800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	200000f8 	.word	0x200000f8
 80008ac:	40020030 	.word	0x40020030

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f8a0 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fabb 	bl	8000e66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	200000f8 	.word	0x200000f8

080008fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <TIM2_IRQHandler+0x14>)
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fb20 	bl	8001f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	20000028 	.word	0x20000028

08000914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000918:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <USART1_IRQHandler+0x14>)
 800091a:	0018      	movs	r0, r3
 800091c:	f001 ffd6 	bl	80028cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	20000070 	.word	0x20000070

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000938:	480d      	ldr	r0, [pc, #52]	@ (8000970 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800093c:	f7ff fff6 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	@ (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <LoopForever+0xe>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	@ (8000984 <LoopForever+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000966:	f003 f835 	bl	80039d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fc59 	bl	8000220 <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   r0, =_estack
 8000970:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800097c:	08003a74 	.word	0x08003a74
  ldr r2, =_sbss
 8000980:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000984:	20000148 	.word	0x20000148

08000988 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_COMP_IRQHandler>
	...

0800098c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <HAL_Init+0x24>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_Init+0x24>)
 8000996:	2110      	movs	r1, #16
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f809 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a2:	f7ff febd 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <HAL_InitTick+0x5c>)
 80009be:	681c      	ldr	r4, [r3, #0]
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_InitTick+0x60>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	0019      	movs	r1, r3
 80009c6:	23fa      	movs	r3, #250	@ 0xfa
 80009c8:	0098      	lsls	r0, r3, #2
 80009ca:	f7ff fb9d 	bl	8000108 <__udivsi3>
 80009ce:	0003      	movs	r3, r0
 80009d0:	0019      	movs	r1, r3
 80009d2:	0020      	movs	r0, r4
 80009d4:	f7ff fb98 	bl	8000108 <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f90b 	bl	8000bf6 <HAL_SYSTICK_Config>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e00f      	b.n	8000a08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d80b      	bhi.n	8000a06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f8d8 	bl	8000bac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_InitTick+0x64>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	18d2      	adds	r2, r2, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000144 	.word	0x20000144

08000a40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	@ (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	20000144 	.word	0x20000144

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a66:	d809      	bhi.n	8000a7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	231f      	movs	r3, #31
 8000a70:	401a      	ands	r2, r3
 8000a72:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <__NVIC_EnableIRQ+0x30>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	4091      	lsls	r1, r2
 8000a78:	000a      	movs	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
  }
}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a9c:	d828      	bhi.n	8000af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000b5c <__NVIC_SetPriority+0xd4>)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	33c0      	adds	r3, #192	@ 0xc0
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	589b      	ldr	r3, [r3, r2]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	@ 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	@ 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	481f      	ldr	r0, [pc, #124]	@ (8000b5c <__NVIC_SetPriority+0xd4>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	33c0      	adds	r3, #192	@ 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aee:	e031      	b.n	8000b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0019      	movs	r1, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	400b      	ands	r3, r1
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3306      	adds	r3, #6
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	3304      	adds	r3, #4
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	@ 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	@ 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	001c      	movs	r4, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	18c3      	adds	r3, r0, r3
 8000b50:	3304      	adds	r3, #4
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b003      	add	sp, #12
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	045b      	lsls	r3, r3, #17
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d301      	bcc.n	8000b7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e010      	b.n	8000b9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <SysTick_Config+0x44>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	3a01      	subs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b84:	2301      	movs	r3, #1
 8000b86:	425b      	negs	r3, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff ff7c 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <SysTick_Config+0x44>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <SysTick_Config+0x44>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	1c02      	adds	r2, r0, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	0002      	movs	r2, r0
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ff33 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff ffaf 	bl	8000b64 <SysTick_Config>
 8000c06:	0003      	movs	r3, r0
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e036      	b.n	8000c94 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2221      	movs	r2, #33	@ 0x21
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4a18      	ldr	r2, [pc, #96]	@ (8000c9c <HAL_DMA_Init+0x8c>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f9c4 	bl	8001004 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2221      	movs	r2, #33	@ 0x21
 8000c86:	2101      	movs	r1, #1
 8000c88:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	2100      	movs	r1, #0
 8000c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b004      	add	sp, #16
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	ffffc00f 	.word	0xffffc00f

08000ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000cae:	2317      	movs	r3, #23
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	5c9b      	ldrb	r3, [r3, r2]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <HAL_DMA_Start_IT+0x24>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e04f      	b.n	8000d64 <HAL_DMA_Start_IT+0xc4>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	2101      	movs	r1, #1
 8000cca:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2221      	movs	r2, #33	@ 0x21
 8000cd0:	5c9b      	ldrb	r3, [r3, r2]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d13a      	bne.n	8000d4e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2221      	movs	r2, #33	@ 0x21
 8000cdc:	2102      	movs	r1, #2
 8000cde:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f000 f954 	bl	8000faa <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d008      	beq.n	8000d1c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	210e      	movs	r1, #14
 8000d16:	430a      	orrs	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e00f      	b.n	8000d3c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	210a      	movs	r1, #10
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2104      	movs	r1, #4
 8000d38:	438a      	bics	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2101      	movs	r1, #1
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e007      	b.n	8000d5e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d56:	2317      	movs	r3, #23
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000d5e:	2317      	movs	r3, #23
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	781b      	ldrb	r3, [r3, #0]
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b006      	add	sp, #24
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2221      	movs	r2, #33	@ 0x21
 8000d78:	5c9b      	ldrb	r3, [r3, r2]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d008      	beq.n	8000d92 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2204      	movs	r2, #4
 8000d84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2220      	movs	r2, #32
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e020      	b.n	8000dd4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	210e      	movs	r1, #14
 8000d9e:	438a      	bics	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	438a      	bics	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	000a      	movs	r2, r1
 8000dc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2221      	movs	r2, #33	@ 0x21
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2220      	movs	r2, #32
 8000dce:	2100      	movs	r1, #0
 8000dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de4:	210f      	movs	r1, #15
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2221      	movs	r2, #33	@ 0x21
 8000df0:	5c9b      	ldrb	r3, [r3, r2]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d006      	beq.n	8000e06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e028      	b.n	8000e58 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	210e      	movs	r1, #14
 8000e12:	438a      	bics	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	438a      	bics	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2221      	movs	r2, #33	@ 0x21
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2220      	movs	r2, #32
 8000e42:	2100      	movs	r1, #0
 8000e44:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	0010      	movs	r0, r2
 8000e56:	4798      	blx	r3
    }
  }
  return status;
 8000e58:	230f      	movs	r3, #15
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	781b      	ldrb	r3, [r3, #0]
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	2204      	movs	r2, #4
 8000e84:	409a      	lsls	r2, r3
 8000e86:	0013      	movs	r3, r2
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d024      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x72>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	2204      	movs	r2, #4
 8000e92:	4013      	ands	r3, r2
 8000e94:	d020      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d107      	bne.n	8000eb2 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2104      	movs	r1, #4
 8000eae:	438a      	bics	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4091      	lsls	r1, r2
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d100      	bne.n	8000ecc <HAL_DMA_IRQHandler+0x66>
 8000eca:	e06a      	b.n	8000fa2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	0010      	movs	r0, r2
 8000ed4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000ed6:	e064      	b.n	8000fa2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	2202      	movs	r2, #2
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	0013      	movs	r3, r2
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d02b      	beq.n	8000f40 <HAL_DMA_IRQHandler+0xda>
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2202      	movs	r2, #2
 8000eec:	4013      	ands	r3, r2
 8000eee:	d027      	beq.n	8000f40 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d10b      	bne.n	8000f14 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	210a      	movs	r1, #10
 8000f08:	438a      	bics	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2221      	movs	r2, #33	@ 0x21
 8000f10:	2101      	movs	r1, #1
 8000f12:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4091      	lsls	r1, r2
 8000f20:	000a      	movs	r2, r1
 8000f22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2220      	movs	r2, #32
 8000f28:	2100      	movs	r1, #0
 8000f2a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d036      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	0010      	movs	r0, r2
 8000f3c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f3e:	e030      	b.n	8000fa2 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	2208      	movs	r2, #8
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d028      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x13c>
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2208      	movs	r2, #8
 8000f54:	4013      	ands	r3, r2
 8000f56:	d024      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	210e      	movs	r1, #14
 8000f64:	438a      	bics	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f70:	2101      	movs	r1, #1
 8000f72:	4091      	lsls	r1, r2
 8000f74:	000a      	movs	r2, r1
 8000f76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2221      	movs	r2, #33	@ 0x21
 8000f82:	2101      	movs	r1, #1
 8000f84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	0010      	movs	r0, r2
 8000f9e:	4798      	blx	r3
    }
  }
}
 8000fa0:	e7ff      	b.n	8000fa2 <HAL_DMA_IRQHandler+0x13c>
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4091      	lsls	r1, r2
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b10      	cmp	r3, #16
 8000fd6:	d108      	bne.n	8000fea <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fe8:	e007      	b.n	8000ffa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	60da      	str	r2, [r3, #12]
}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <DMA_CalcBaseAndBitshift+0x30>)
 8001012:	4694      	mov	ip, r2
 8001014:	4463      	add	r3, ip
 8001016:	2114      	movs	r1, #20
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff f875 	bl	8000108 <__udivsi3>
 800101e:	0003      	movs	r3, r0
 8001020:	009a      	lsls	r2, r3, #2
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a03      	ldr	r2, [pc, #12]	@ (8001038 <DMA_CalcBaseAndBitshift+0x34>)
 800102a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}
 8001034:	bffdfff8 	.word	0xbffdfff8
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	e14f      	b.n	80012ec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d100      	bne.n	8001064 <HAL_GPIO_Init+0x28>
 8001062:	e140      	b.n	80012e6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2203      	movs	r2, #3
 800106a:	4013      	ands	r3, r2
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	409a      	lsls	r2, r3
 800108a:	0013      	movs	r3, r2
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	409a      	lsls	r2, r3
 800109e:	0013      	movs	r3, r2
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	2201      	movs	r2, #1
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	4013      	ands	r3, r2
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	58d3      	ldr	r3, [r2, r3]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2207      	movs	r2, #7
 8001138:	4013      	ands	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2107      	movs	r1, #7
 8001152:	400b      	ands	r3, r1
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2203      	movs	r2, #3
 800118c:	401a      	ands	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	23c0      	movs	r3, #192	@ 0xc0
 80011a8:	029b      	lsls	r3, r3, #10
 80011aa:	4013      	ands	r3, r2
 80011ac:	d100      	bne.n	80011b0 <HAL_GPIO_Init+0x174>
 80011ae:	e09a      	b.n	80012e6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b54      	ldr	r3, [pc, #336]	@ (8001304 <HAL_GPIO_Init+0x2c8>)
 80011b2:	699a      	ldr	r2, [r3, #24]
 80011b4:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <HAL_GPIO_Init+0x2c8>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	619a      	str	r2, [r3, #24]
 80011bc:	4b51      	ldr	r3, [pc, #324]	@ (8001304 <HAL_GPIO_Init+0x2c8>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2201      	movs	r2, #1
 80011c2:	4013      	ands	r3, r2
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001308 <HAL_GPIO_Init+0x2cc>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	589b      	ldr	r3, [r3, r2]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2203      	movs	r2, #3
 80011da:	4013      	ands	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	409a      	lsls	r2, r3
 80011e2:	0013      	movs	r3, r2
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	2390      	movs	r3, #144	@ 0x90
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x1e2>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a44      	ldr	r2, [pc, #272]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x1de>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a43      	ldr	r2, [pc, #268]	@ (8001310 <HAL_GPIO_Init+0x2d4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x1da>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a42      	ldr	r2, [pc, #264]	@ (8001314 <HAL_GPIO_Init+0x2d8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x1d6>
 800120e:	2303      	movs	r3, #3
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x1e4>
 8001212:	2305      	movs	r3, #5
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x1e4>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x1e4>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x1e4>
 800121e:	2300      	movs	r3, #0
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	2103      	movs	r1, #3
 8001224:	400a      	ands	r2, r1
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	@ (8001308 <HAL_GPIO_Init+0x2cc>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <HAL_GPIO_Init+0x2dc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	035b      	lsls	r3, r3, #13
 8001256:	4013      	ands	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001262:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <HAL_GPIO_Init+0x2dc>)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001268:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <HAL_GPIO_Init+0x2dc>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43da      	mvns	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	039b      	lsls	r3, r3, #14
 8001280:	4013      	ands	r3, r2
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <HAL_GPIO_Init+0x2dc>)
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <HAL_GPIO_Init+0x2dc>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	@ 0x80
 80012a8:	029b      	lsls	r3, r3, #10
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_GPIO_Init+0x2dc>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <HAL_GPIO_Init+0x2dc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	025b      	lsls	r3, r3, #9
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <HAL_GPIO_Init+0x2dc>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	1e13      	subs	r3, r2, #0
 80012f6:	d000      	beq.n	80012fa <HAL_GPIO_Init+0x2be>
 80012f8:	e6a8      	b.n	800104c <HAL_GPIO_Init+0x10>
  } 
}
 80012fa:	46c0      	nop			@ (mov r8, r8)
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b006      	add	sp, #24
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	48000400 	.word	0x48000400
 8001310:	48000800 	.word	0x48000800
 8001314:	48000c00 	.word	0x48000c00
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	0008      	movs	r0, r1
 8001326:	0011      	movs	r1, r2
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	1c02      	adds	r2, r0, #0
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	1c7b      	adds	r3, r7, #1
 8001330:	1c0a      	adds	r2, r1, #0
 8001332:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001334:	1c7b      	adds	r3, r7, #1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133c:	1cbb      	adds	r3, r7, #2
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001346:	1cbb      	adds	r3, r7, #2
 8001348:	881a      	ldrh	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	000a      	movs	r2, r1
 8001360:	1cbb      	adds	r3, r7, #2
 8001362:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800136a:	1cbb      	adds	r3, r7, #2
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4013      	ands	r3, r2
 8001372:	041a      	lsls	r2, r3, #16
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	1cb9      	adds	r1, r7, #2
 800137a:	8809      	ldrh	r1, [r1, #0]
 800137c:	400b      	ands	r3, r1
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b004      	add	sp, #16
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e301      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x1e>
 80013a8:	e08d      	b.n	80014c6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013aa:	4bc3      	ldr	r3, [pc, #780]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	220c      	movs	r2, #12
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d00e      	beq.n	80013d4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b6:	4bc0      	ldr	r3, [pc, #768]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	220c      	movs	r2, #12
 80013bc:	4013      	ands	r3, r2
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x64>
 80013c2:	4bbd      	ldr	r3, [pc, #756]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	401a      	ands	r2, r3
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	025b      	lsls	r3, r3, #9
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d10d      	bne.n	80013f0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	4bb8      	ldr	r3, [pc, #736]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4013      	ands	r3, r2
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_OscConfig+0x56>
 80013e0:	e070      	b.n	80014c4 <HAL_RCC_OscConfig+0x138>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d000      	beq.n	80013ec <HAL_RCC_OscConfig+0x60>
 80013ea:	e06b      	b.n	80014c4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e2d8      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d107      	bne.n	8001408 <HAL_RCC_OscConfig+0x7c>
 80013f8:	4baf      	ldr	r3, [pc, #700]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4bae      	ldr	r3, [pc, #696]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	2180      	movs	r1, #128	@ 0x80
 8001400:	0249      	lsls	r1, r1, #9
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	e02f      	b.n	8001468 <HAL_RCC_OscConfig+0xdc>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10c      	bne.n	800142a <HAL_RCC_OscConfig+0x9e>
 8001410:	4ba9      	ldr	r3, [pc, #676]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4ba8      	ldr	r3, [pc, #672]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001416:	49a9      	ldr	r1, [pc, #676]	@ (80016bc <HAL_RCC_OscConfig+0x330>)
 8001418:	400a      	ands	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	4ba6      	ldr	r3, [pc, #664]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4ba5      	ldr	r3, [pc, #660]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001422:	49a7      	ldr	r1, [pc, #668]	@ (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e01e      	b.n	8001468 <HAL_RCC_OscConfig+0xdc>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d10e      	bne.n	8001450 <HAL_RCC_OscConfig+0xc4>
 8001432:	4ba1      	ldr	r3, [pc, #644]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4ba0      	ldr	r3, [pc, #640]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001438:	2180      	movs	r1, #128	@ 0x80
 800143a:	02c9      	lsls	r1, r1, #11
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	4b9d      	ldr	r3, [pc, #628]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b9c      	ldr	r3, [pc, #624]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	0249      	lsls	r1, r1, #9
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0xdc>
 8001450:	4b99      	ldr	r3, [pc, #612]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b98      	ldr	r3, [pc, #608]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001456:	4999      	ldr	r1, [pc, #612]	@ (80016bc <HAL_RCC_OscConfig+0x330>)
 8001458:	400a      	ands	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	4b96      	ldr	r3, [pc, #600]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b95      	ldr	r3, [pc, #596]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001462:	4997      	ldr	r1, [pc, #604]	@ (80016c0 <HAL_RCC_OscConfig+0x334>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d014      	beq.n	800149a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fae6 	bl	8000a40 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147a:	f7ff fae1 	bl	8000a40 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b64      	cmp	r3, #100	@ 0x64
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e28a      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148c:	4b8a      	ldr	r3, [pc, #552]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	4013      	ands	r3, r2
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0xee>
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fad1 	bl	8000a40 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff facc 	bl	8000a40 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	@ 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e275      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b80      	ldr	r3, [pc, #512]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x118>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2202      	movs	r2, #2
 80014cc:	4013      	ands	r3, r2
 80014ce:	d100      	bne.n	80014d2 <HAL_RCC_OscConfig+0x146>
 80014d0:	e069      	b.n	80015a6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014d2:	4b79      	ldr	r3, [pc, #484]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	220c      	movs	r2, #12
 80014d8:	4013      	ands	r3, r2
 80014da:	d00b      	beq.n	80014f4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014dc:	4b76      	ldr	r3, [pc, #472]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	220c      	movs	r2, #12
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d11c      	bne.n	8001522 <HAL_RCC_OscConfig+0x196>
 80014e8:	4b73      	ldr	r3, [pc, #460]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	2380      	movs	r3, #128	@ 0x80
 80014ee:	025b      	lsls	r3, r3, #9
 80014f0:	4013      	ands	r3, r2
 80014f2:	d116      	bne.n	8001522 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f4:	4b70      	ldr	r3, [pc, #448]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2202      	movs	r2, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x17e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e24b      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b6b      	ldr	r3, [pc, #428]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	22f8      	movs	r2, #248	@ 0xf8
 8001510:	4393      	bics	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	00da      	lsls	r2, r3, #3
 800151a:	4b67      	ldr	r3, [pc, #412]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001520:	e041      	b.n	80015a6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d024      	beq.n	8001574 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152a:	4b63      	ldr	r3, [pc, #396]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b62      	ldr	r3, [pc, #392]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001530:	2101      	movs	r1, #1
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fa83 	bl	8000a40 <HAL_GetTick>
 800153a:	0003      	movs	r3, r0
 800153c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fa7e 	bl	8000a40 <HAL_GetTick>
 8001544:	0002      	movs	r2, r0
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e227      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b59      	ldr	r3, [pc, #356]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d0f1      	beq.n	8001540 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b56      	ldr	r3, [pc, #344]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	22f8      	movs	r2, #248	@ 0xf8
 8001562:	4393      	bics	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00da      	lsls	r2, r3, #3
 800156c:	4b52      	ldr	r3, [pc, #328]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001574:	4b50      	ldr	r3, [pc, #320]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b4f      	ldr	r3, [pc, #316]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800157a:	2101      	movs	r1, #1
 800157c:	438a      	bics	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fa5e 	bl	8000a40 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fa59 	bl	8000a40 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e202      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159c:	4b46      	ldr	r3, [pc, #280]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	d1f1      	bne.n	800158a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2208      	movs	r2, #8
 80015ac:	4013      	ands	r3, r2
 80015ae:	d036      	beq.n	800161e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d019      	beq.n	80015ec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b8:	4b3f      	ldr	r3, [pc, #252]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80015ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015bc:	4b3e      	ldr	r3, [pc, #248]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c4:	f7ff fa3c 	bl	8000a40 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fa37 	bl	8000a40 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1e0      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e0:	4b35      	ldr	r3, [pc, #212]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d0f1      	beq.n	80015ce <HAL_RCC_OscConfig+0x242>
 80015ea:	e018      	b.n	800161e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ec:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015f0:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	438a      	bics	r2, r1
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff fa22 	bl	8000a40 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001602:	f7ff fa1d 	bl	8000a40 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1c6      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d1f1      	bne.n	8001602 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2204      	movs	r2, #4
 8001624:	4013      	ands	r3, r2
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x29e>
 8001628:	e0b4      	b.n	8001794 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	201f      	movs	r0, #31
 800162c:	183b      	adds	r3, r7, r0
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	2380      	movs	r3, #128	@ 0x80
 8001638:	055b      	lsls	r3, r3, #21
 800163a:	4013      	ands	r3, r2
 800163c:	d110      	bne.n	8001660 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	0549      	lsls	r1, r1, #21
 8001648:	430a      	orrs	r2, r1
 800164a:	61da      	str	r2, [r3, #28]
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	055b      	lsls	r3, r3, #21
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800165a:	183b      	adds	r3, r7, r0
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <HAL_RCC_OscConfig+0x338>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4013      	ands	r3, r2
 800166a:	d11a      	bne.n	80016a2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166c:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_RCC_OscConfig+0x338>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_RCC_OscConfig+0x338>)
 8001672:	2180      	movs	r1, #128	@ 0x80
 8001674:	0049      	lsls	r1, r1, #1
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167a:	f7ff f9e1 	bl	8000a40 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001684:	f7ff f9dc 	bl	8000a40 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	@ 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e185      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001696:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <HAL_RCC_OscConfig+0x338>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10e      	bne.n	80016c8 <HAL_RCC_OscConfig+0x33c>
 80016aa:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	4b02      	ldr	r3, [pc, #8]	@ (80016b8 <HAL_RCC_OscConfig+0x32c>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	621a      	str	r2, [r3, #32]
 80016b6:	e035      	b.n	8001724 <HAL_RCC_OscConfig+0x398>
 80016b8:	40021000 	.word	0x40021000
 80016bc:	fffeffff 	.word	0xfffeffff
 80016c0:	fffbffff 	.word	0xfffbffff
 80016c4:	40007000 	.word	0x40007000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10c      	bne.n	80016ea <HAL_RCC_OscConfig+0x35e>
 80016d0:	4bb6      	ldr	r3, [pc, #728]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	4bb5      	ldr	r3, [pc, #724]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	438a      	bics	r2, r1
 80016da:	621a      	str	r2, [r3, #32]
 80016dc:	4bb3      	ldr	r3, [pc, #716]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	4bb2      	ldr	r3, [pc, #712]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80016e2:	2104      	movs	r1, #4
 80016e4:	438a      	bics	r2, r1
 80016e6:	621a      	str	r2, [r3, #32]
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0x398>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x380>
 80016f2:	4bae      	ldr	r3, [pc, #696]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80016f4:	6a1a      	ldr	r2, [r3, #32]
 80016f6:	4bad      	ldr	r3, [pc, #692]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80016f8:	2104      	movs	r1, #4
 80016fa:	430a      	orrs	r2, r1
 80016fc:	621a      	str	r2, [r3, #32]
 80016fe:	4bab      	ldr	r3, [pc, #684]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001700:	6a1a      	ldr	r2, [r3, #32]
 8001702:	4baa      	ldr	r3, [pc, #680]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001704:	2101      	movs	r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	621a      	str	r2, [r3, #32]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0x398>
 800170c:	4ba7      	ldr	r3, [pc, #668]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800170e:	6a1a      	ldr	r2, [r3, #32]
 8001710:	4ba6      	ldr	r3, [pc, #664]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001712:	2101      	movs	r1, #1
 8001714:	438a      	bics	r2, r1
 8001716:	621a      	str	r2, [r3, #32]
 8001718:	4ba4      	ldr	r3, [pc, #656]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	4ba3      	ldr	r3, [pc, #652]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800171e:	2104      	movs	r1, #4
 8001720:	438a      	bics	r2, r1
 8001722:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d014      	beq.n	8001756 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172c:	f7ff f988 	bl	8000a40 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001734:	e009      	b.n	800174a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff f983 	bl	8000a40 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a9b      	ldr	r2, [pc, #620]	@ (80019b0 <HAL_RCC_OscConfig+0x624>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e12b      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174a:	4b98      	ldr	r3, [pc, #608]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x3aa>
 8001754:	e013      	b.n	800177e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff f973 	bl	8000a40 <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175e:	e009      	b.n	8001774 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff f96e 	bl	8000a40 <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	4a91      	ldr	r2, [pc, #580]	@ (80019b0 <HAL_RCC_OscConfig+0x624>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e116      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	4b8d      	ldr	r3, [pc, #564]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800177e:	231f      	movs	r3, #31
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b88      	ldr	r3, [pc, #544]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800178a:	69da      	ldr	r2, [r3, #28]
 800178c:	4b87      	ldr	r3, [pc, #540]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800178e:	4989      	ldr	r1, [pc, #548]	@ (80019b4 <HAL_RCC_OscConfig+0x628>)
 8001790:	400a      	ands	r2, r1
 8001792:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2210      	movs	r2, #16
 800179a:	4013      	ands	r3, r2
 800179c:	d063      	beq.n	8001866 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d12a      	bne.n	80017fc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017a6:	4b81      	ldr	r3, [pc, #516]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80017a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017aa:	4b80      	ldr	r3, [pc, #512]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80017ac:	2104      	movs	r1, #4
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017b2:	4b7e      	ldr	r3, [pc, #504]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017b6:	4b7d      	ldr	r3, [pc, #500]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff f93f 	bl	8000a40 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017c8:	f7ff f93a 	bl	8000a40 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0e3      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017da:	4b74      	ldr	r3, [pc, #464]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80017dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f1      	beq.n	80017c8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017e4:	4b71      	ldr	r3, [pc, #452]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80017e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e8:	22f8      	movs	r2, #248	@ 0xf8
 80017ea:	4393      	bics	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	00da      	lsls	r2, r3, #3
 80017f4:	4b6d      	ldr	r3, [pc, #436]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017fa:	e034      	b.n	8001866 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	3305      	adds	r3, #5
 8001802:	d111      	bne.n	8001828 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001804:	4b69      	ldr	r3, [pc, #420]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001808:	4b68      	ldr	r3, [pc, #416]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800180a:	2104      	movs	r1, #4
 800180c:	438a      	bics	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001810:	4b66      	ldr	r3, [pc, #408]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001814:	22f8      	movs	r2, #248	@ 0xf8
 8001816:	4393      	bics	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	00da      	lsls	r2, r3, #3
 8001820:	4b62      	ldr	r3, [pc, #392]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001822:	430a      	orrs	r2, r1
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34
 8001826:	e01e      	b.n	8001866 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001828:	4b60      	ldr	r3, [pc, #384]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800182a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800182c:	4b5f      	ldr	r3, [pc, #380]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800182e:	2104      	movs	r1, #4
 8001830:	430a      	orrs	r2, r1
 8001832:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001834:	4b5d      	ldr	r3, [pc, #372]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001838:	4b5c      	ldr	r3, [pc, #368]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800183a:	2101      	movs	r1, #1
 800183c:	438a      	bics	r2, r1
 800183e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7ff f8fe 	bl	8000a40 <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800184a:	f7ff f8f9 	bl	8000a40 <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0a2      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800185c:	4b53      	ldr	r3, [pc, #332]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800185e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001860:	2202      	movs	r2, #2
 8001862:	4013      	ands	r3, r2
 8001864:	d1f1      	bne.n	800184a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d100      	bne.n	8001870 <HAL_RCC_OscConfig+0x4e4>
 800186e:	e097      	b.n	80019a0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001870:	4b4e      	ldr	r3, [pc, #312]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	220c      	movs	r2, #12
 8001876:	4013      	ands	r3, r2
 8001878:	2b08      	cmp	r3, #8
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x4f2>
 800187c:	e06b      	b.n	8001956 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d14c      	bne.n	8001920 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b49      	ldr	r3, [pc, #292]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b48      	ldr	r3, [pc, #288]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800188c:	494a      	ldr	r1, [pc, #296]	@ (80019b8 <HAL_RCC_OscConfig+0x62c>)
 800188e:	400a      	ands	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f8d5 	bl	8000a40 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f8d0 	bl	8000a40 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e079      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	4b3f      	ldr	r3, [pc, #252]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	049b      	lsls	r3, r3, #18
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ba:	4b3c      	ldr	r3, [pc, #240]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	220f      	movs	r2, #15
 80018c0:	4393      	bics	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c8:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018ce:	4b37      	ldr	r3, [pc, #220]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a3a      	ldr	r2, [pc, #232]	@ (80019bc <HAL_RCC_OscConfig+0x630>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4b32      	ldr	r3, [pc, #200]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b2f      	ldr	r3, [pc, #188]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 80018ee:	2180      	movs	r1, #128	@ 0x80
 80018f0:	0449      	lsls	r1, r1, #17
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff f8a3 	bl	8000a40 <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f89e 	bl	8000a40 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e047      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	049b      	lsls	r3, r3, #18
 800191a:	4013      	ands	r3, r2
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x574>
 800191e:	e03f      	b.n	80019a0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001926:	4924      	ldr	r1, [pc, #144]	@ (80019b8 <HAL_RCC_OscConfig+0x62c>)
 8001928:	400a      	ands	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff f888 	bl	8000a40 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff f883 	bl	8000a40 <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e02c      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	4b18      	ldr	r3, [pc, #96]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	049b      	lsls	r3, r3, #18
 8001950:	4013      	ands	r3, r2
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x5aa>
 8001954:	e024      	b.n	80019a0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e01f      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <HAL_RCC_OscConfig+0x620>)
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	2380      	movs	r3, #128	@ 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	429a      	cmp	r2, r3
 800197c:	d10e      	bne.n	800199c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	220f      	movs	r2, #15
 8001982:	401a      	ands	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	23f0      	movs	r3, #240	@ 0xf0
 8001990:	039b      	lsls	r3, r3, #14
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b008      	add	sp, #32
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	40021000 	.word	0x40021000
 80019b0:	00001388 	.word	0x00001388
 80019b4:	efffffff 	.word	0xefffffff
 80019b8:	feffffff 	.word	0xfeffffff
 80019bc:	ffc2ffff 	.word	0xffc2ffff

080019c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0b3      	b.n	8001b3c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001b44 <HAL_RCC_ClockConfig+0x184>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d911      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b58      	ldr	r3, [pc, #352]	@ (8001b44 <HAL_RCC_ClockConfig+0x184>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	4393      	bics	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	4b55      	ldr	r3, [pc, #340]	@ (8001b44 <HAL_RCC_ClockConfig+0x184>)
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f4:	4b53      	ldr	r3, [pc, #332]	@ (8001b44 <HAL_RCC_ClockConfig+0x184>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e09a      	b.n	8001b3c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d015      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2204      	movs	r2, #4
 8001a16:	4013      	ands	r3, r2
 8001a18:	d006      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a20:	21e0      	movs	r1, #224	@ 0xe0
 8001a22:	00c9      	lsls	r1, r1, #3
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b47      	ldr	r3, [pc, #284]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	22f0      	movs	r2, #240	@ 0xf0
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	4b44      	ldr	r3, [pc, #272]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2201      	movs	r2, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	d040      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	@ 0x80
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	4013      	ands	r3, r2
 8001a58:	d114      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06e      	b.n	8001b3c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	@ 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d108      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e062      	b.n	8001b3c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e05b      	b.n	8001b3c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a84:	4b30      	ldr	r3, [pc, #192]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4b2d      	ldr	r3, [pc, #180]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7fe ffd2 	bl	8000a40 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa2:	f7fe ffcd 	bl	8000a40 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a27      	ldr	r2, [pc, #156]	@ (8001b4c <HAL_RCC_ClockConfig+0x18c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e042      	b.n	8001b3c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	220c      	movs	r2, #12
 8001abc:	401a      	ands	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1ec      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <HAL_RCC_ClockConfig+0x184>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2201      	movs	r2, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d211      	bcs.n	8001afa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <HAL_RCC_ClockConfig+0x184>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2201      	movs	r2, #1
 8001adc:	4393      	bics	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_RCC_ClockConfig+0x184>)
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae8:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <HAL_RCC_ClockConfig+0x184>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2201      	movs	r2, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e020      	b.n	8001b3c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2204      	movs	r2, #4
 8001b00:	4013      	ands	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_RCC_ClockConfig+0x190>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001b14:	430a      	orrs	r2, r1
 8001b16:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b18:	f000 f820 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_RCC_ClockConfig+0x188>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	220f      	movs	r2, #15
 8001b26:	4013      	ands	r3, r2
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_RCC_ClockConfig+0x194>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	40da      	lsrs	r2, r3
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RCC_ClockConfig+0x198>)
 8001b32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f7fe ff3d 	bl	80009b4 <HAL_InitTick>
  
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	00001388 	.word	0x00001388
 8001b50:	fffff8ff 	.word	0xfffff8ff
 8001b54:	08003a34 	.word	0x08003a34
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b76:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	220c      	movs	r2, #12
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x30>
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x36>
 8001b8a:	e02c      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b8e:	613b      	str	r3, [r7, #16]
      break;
 8001b90:	e02c      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0c9b      	lsrs	r3, r3, #18
 8001b96:	220f      	movs	r2, #15
 8001b98:	4013      	ands	r3, r2
 8001b9a:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b9c:	5cd3      	ldrb	r3, [r2, r3]
 8001b9e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ba0:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	4a16      	ldr	r2, [pc, #88]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	025b      	lsls	r3, r3, #9
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d009      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bbc:	f7fe faa4 	bl	8000108 <__udivsi3>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4353      	muls	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e009      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	000a      	movs	r2, r1
 8001bd0:	0152      	lsls	r2, r2, #5
 8001bd2:	1a52      	subs	r2, r2, r1
 8001bd4:	0193      	lsls	r3, r2, #6
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	185b      	adds	r3, r3, r1
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
      break;
 8001be4:	e002      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001be6:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001be8:	613b      	str	r3, [r7, #16]
      break;
 8001bea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bec:	693b      	ldr	r3, [r7, #16]
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b006      	add	sp, #24
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	007a1200 	.word	0x007a1200
 8001c00:	08003a4c 	.word	0x08003a4c
 8001c04:	08003a5c 	.word	0x08003a5c

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	@ (8001c18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c20:	f7ff fff2 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c24:	0001      	movs	r1, r0
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	4013      	ands	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	40d9      	lsrs	r1, r3
 8001c36:	000b      	movs	r3, r1
}    
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08003a44 	.word	0x08003a44

08001c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2380      	movs	r3, #128	@ 0x80
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	4013      	ands	r3, r2
 8001c62:	d100      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c64:	e08e      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2017      	movs	r0, #23
 8001c68:	183b      	adds	r3, r7, r0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	055b      	lsls	r3, r3, #21
 8001c76:	4013      	ands	r3, r2
 8001c78:	d110      	bne.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c80:	2180      	movs	r1, #128	@ 0x80
 8001c82:	0549      	lsls	r1, r1, #21
 8001c84:	430a      	orrs	r2, r1
 8001c86:	61da      	str	r2, [r3, #28]
 8001c88:	4b58      	ldr	r3, [pc, #352]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	055b      	lsls	r3, r3, #21
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c96:	183b      	adds	r3, r7, r0
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b54      	ldr	r3, [pc, #336]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d11a      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca8:	4b51      	ldr	r3, [pc, #324]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b50      	ldr	r3, [pc, #320]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001cae:	2180      	movs	r1, #128	@ 0x80
 8001cb0:	0049      	lsls	r1, r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7fe fec3 	bl	8000a40 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc0:	f7fe febe 	bl	8000a40 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e087      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b47      	ldr	r3, [pc, #284]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cde:	4b43      	ldr	r3, [pc, #268]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	23c0      	movs	r3, #192	@ 0xc0
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d034      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	23c0      	movs	r3, #192	@ 0xc0
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d02c      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d00:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a3b      	ldr	r2, [pc, #236]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d0a:	4b38      	ldr	r3, [pc, #224]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d0c:	6a1a      	ldr	r2, [r3, #32]
 8001d0e:	4b37      	ldr	r3, [pc, #220]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d10:	2180      	movs	r1, #128	@ 0x80
 8001d12:	0249      	lsls	r1, r1, #9
 8001d14:	430a      	orrs	r2, r1
 8001d16:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d18:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d1a:	6a1a      	ldr	r2, [r3, #32]
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d1e:	4936      	ldr	r1, [pc, #216]	@ (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d24:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7fe fe85 	bl	8000a40 <HAL_GetTick>
 8001d36:	0003      	movs	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e009      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7fe fe80 	bl	8000a40 <HAL_GetTick>
 8001d40:	0002      	movs	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	4a2d      	ldr	r2, [pc, #180]	@ (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e048      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	4b26      	ldr	r3, [pc, #152]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d5a:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d6e:	2317      	movs	r3, #23
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d7e:	4920      	ldr	r1, [pc, #128]	@ (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d8e:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	2203      	movs	r2, #3
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2220      	movs	r2, #32
 8001da8:	4013      	ands	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dac:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	2210      	movs	r2, #16
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2380      	movs	r3, #128	@ 0x80
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dcc:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	2240      	movs	r2, #64	@ 0x40
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b006      	add	sp, #24
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	fffffcff 	.word	0xfffffcff
 8001df8:	fffeffff 	.word	0xfffeffff
 8001dfc:	00001388 	.word	0x00001388
 8001e00:	efffffff 	.word	0xefffffff

08001e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e042      	b.n	8001e9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	223d      	movs	r2, #61	@ 0x3d
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d107      	bne.n	8001e32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	223c      	movs	r2, #60	@ 0x3c
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7fe fc9b 	bl	8000768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	223d      	movs	r2, #61	@ 0x3d
 8001e36:	2102      	movs	r1, #2
 8001e38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3304      	adds	r3, #4
 8001e42:	0019      	movs	r1, r3
 8001e44:	0010      	movs	r0, r2
 8001e46:	f000 fa61 	bl	800230c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2246      	movs	r2, #70	@ 0x46
 8001e4e:	2101      	movs	r1, #1
 8001e50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	223e      	movs	r2, #62	@ 0x3e
 8001e56:	2101      	movs	r1, #1
 8001e58:	5499      	strb	r1, [r3, r2]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	223f      	movs	r2, #63	@ 0x3f
 8001e5e:	2101      	movs	r1, #1
 8001e60:	5499      	strb	r1, [r3, r2]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2240      	movs	r2, #64	@ 0x40
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2241      	movs	r2, #65	@ 0x41
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2242      	movs	r2, #66	@ 0x42
 8001e76:	2101      	movs	r1, #1
 8001e78:	5499      	strb	r1, [r3, r2]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2243      	movs	r2, #67	@ 0x43
 8001e7e:	2101      	movs	r1, #1
 8001e80:	5499      	strb	r1, [r3, r2]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2244      	movs	r2, #68	@ 0x44
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2245      	movs	r2, #69	@ 0x45
 8001e8e:	2101      	movs	r1, #1
 8001e90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	223d      	movs	r2, #61	@ 0x3d
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	223d      	movs	r2, #61	@ 0x3d
 8001eb0:	5c9b      	ldrb	r3, [r3, r2]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d001      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e03b      	b.n	8001f34 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	223d      	movs	r2, #61	@ 0x3d
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a18      	ldr	r2, [pc, #96]	@ (8001f3c <HAL_TIM_Base_Start_IT+0x98>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00f      	beq.n	8001efe <HAL_TIM_Base_Start_IT+0x5a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	@ 0x80
 8001ee4:	05db      	lsls	r3, r3, #23
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d009      	beq.n	8001efe <HAL_TIM_Base_Start_IT+0x5a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a14      	ldr	r2, [pc, #80]	@ (8001f40 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_TIM_Base_Start_IT+0x5a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <HAL_TIM_Base_Start_IT+0xa0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d111      	bne.n	8001f22 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2207      	movs	r2, #7
 8001f06:	4013      	ands	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b06      	cmp	r3, #6
 8001f0e:	d010      	beq.n	8001f32 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f20:	e007      	b.n	8001f32 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b004      	add	sp, #16
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40014000 	.word	0x40014000

08001f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d021      	beq.n	8001fac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d01d      	beq.n	8001fac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2203      	movs	r2, #3
 8001f76:	4252      	negs	r2, r2
 8001f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2203      	movs	r2, #3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 f9a4 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8001f94:	e007      	b.n	8001fa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 f997 	bl	80022cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f9a3 	bl	80022ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d01e      	beq.n	8001ffa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2205      	movs	r2, #5
 8001fc2:	4252      	negs	r2, r2
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	23c0      	movs	r3, #192	@ 0xc0
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 f97d 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 8001fe2:	e007      	b.n	8001ff4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f970 	bl	80022cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f97c 	bl	80022ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	4013      	ands	r3, r2
 8002000:	d021      	beq.n	8002046 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2208      	movs	r2, #8
 8002006:	4013      	ands	r3, r2
 8002008:	d01d      	beq.n	8002046 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2209      	movs	r2, #9
 8002010:	4252      	negs	r2, r2
 8002012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2204      	movs	r2, #4
 8002018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2203      	movs	r2, #3
 8002022:	4013      	ands	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0018      	movs	r0, r3
 800202a:	f000 f957 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800202e:	e007      	b.n	8002040 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	0018      	movs	r0, r3
 8002034:	f000 f94a 	bl	80022cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f956 	bl	80022ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2210      	movs	r2, #16
 800204a:	4013      	ands	r3, r2
 800204c:	d022      	beq.n	8002094 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2210      	movs	r2, #16
 8002052:	4013      	ands	r3, r2
 8002054:	d01e      	beq.n	8002094 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2211      	movs	r2, #17
 800205c:	4252      	negs	r2, r2
 800205e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2208      	movs	r2, #8
 8002064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	23c0      	movs	r3, #192	@ 0xc0
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f930 	bl	80022dc <HAL_TIM_IC_CaptureCallback>
 800207c:	e007      	b.n	800208e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f923 	bl	80022cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f92f 	bl	80022ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d00c      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d008      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2202      	movs	r2, #2
 80020aa:	4252      	negs	r2, r2
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7fe fa63 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2280      	movs	r2, #128	@ 0x80
 80020ba:	4013      	ands	r3, r2
 80020bc:	d00c      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	4013      	ands	r3, r2
 80020c4:	d008      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2281      	movs	r2, #129	@ 0x81
 80020cc:	4252      	negs	r2, r2
 80020ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 faa8 	bl	8002628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2240      	movs	r2, #64	@ 0x40
 80020dc:	4013      	ands	r3, r2
 80020de:	d00c      	beq.n	80020fa <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2240      	movs	r2, #64	@ 0x40
 80020e4:	4013      	ands	r3, r2
 80020e6:	d008      	beq.n	80020fa <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2241      	movs	r2, #65	@ 0x41
 80020ee:	4252      	negs	r2, r2
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f901 	bl	80022fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2220      	movs	r2, #32
 80020fe:	4013      	ands	r3, r2
 8002100:	d00c      	beq.n	800211c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	4013      	ands	r3, r2
 8002108:	d008      	beq.n	800211c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2221      	movs	r2, #33	@ 0x21
 8002110:	4252      	negs	r2, r2
 8002112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	0018      	movs	r0, r3
 8002118:	f000 fa7e 	bl	8002618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b004      	add	sp, #16
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212e:	230f      	movs	r3, #15
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223c      	movs	r2, #60	@ 0x3c
 800213a:	5c9b      	ldrb	r3, [r3, r2]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_TIM_ConfigClockSource+0x20>
 8002140:	2302      	movs	r3, #2
 8002142:	e0bc      	b.n	80022be <HAL_TIM_ConfigClockSource+0x19a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	223c      	movs	r2, #60	@ 0x3c
 8002148:	2101      	movs	r1, #1
 800214a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	223d      	movs	r2, #61	@ 0x3d
 8002150:	2102      	movs	r1, #2
 8002152:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2277      	movs	r2, #119	@ 0x77
 8002160:	4393      	bics	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4a58      	ldr	r2, [pc, #352]	@ (80022c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2280      	movs	r2, #128	@ 0x80
 800217a:	0192      	lsls	r2, r2, #6
 800217c:	4293      	cmp	r3, r2
 800217e:	d040      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0xde>
 8002180:	2280      	movs	r2, #128	@ 0x80
 8002182:	0192      	lsls	r2, r2, #6
 8002184:	4293      	cmp	r3, r2
 8002186:	d900      	bls.n	800218a <HAL_TIM_ConfigClockSource+0x66>
 8002188:	e088      	b.n	800229c <HAL_TIM_ConfigClockSource+0x178>
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	0152      	lsls	r2, r2, #5
 800218e:	4293      	cmp	r3, r2
 8002190:	d100      	bne.n	8002194 <HAL_TIM_ConfigClockSource+0x70>
 8002192:	e088      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x182>
 8002194:	2280      	movs	r2, #128	@ 0x80
 8002196:	0152      	lsls	r2, r2, #5
 8002198:	4293      	cmp	r3, r2
 800219a:	d900      	bls.n	800219e <HAL_TIM_ConfigClockSource+0x7a>
 800219c:	e07e      	b.n	800229c <HAL_TIM_ConfigClockSource+0x178>
 800219e:	2b70      	cmp	r3, #112	@ 0x70
 80021a0:	d018      	beq.n	80021d4 <HAL_TIM_ConfigClockSource+0xb0>
 80021a2:	d900      	bls.n	80021a6 <HAL_TIM_ConfigClockSource+0x82>
 80021a4:	e07a      	b.n	800229c <HAL_TIM_ConfigClockSource+0x178>
 80021a6:	2b60      	cmp	r3, #96	@ 0x60
 80021a8:	d04f      	beq.n	800224a <HAL_TIM_ConfigClockSource+0x126>
 80021aa:	d900      	bls.n	80021ae <HAL_TIM_ConfigClockSource+0x8a>
 80021ac:	e076      	b.n	800229c <HAL_TIM_ConfigClockSource+0x178>
 80021ae:	2b50      	cmp	r3, #80	@ 0x50
 80021b0:	d03b      	beq.n	800222a <HAL_TIM_ConfigClockSource+0x106>
 80021b2:	d900      	bls.n	80021b6 <HAL_TIM_ConfigClockSource+0x92>
 80021b4:	e072      	b.n	800229c <HAL_TIM_ConfigClockSource+0x178>
 80021b6:	2b40      	cmp	r3, #64	@ 0x40
 80021b8:	d057      	beq.n	800226a <HAL_TIM_ConfigClockSource+0x146>
 80021ba:	d900      	bls.n	80021be <HAL_TIM_ConfigClockSource+0x9a>
 80021bc:	e06e      	b.n	800229c <HAL_TIM_ConfigClockSource+0x178>
 80021be:	2b30      	cmp	r3, #48	@ 0x30
 80021c0:	d063      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x166>
 80021c2:	d86b      	bhi.n	800229c <HAL_TIM_ConfigClockSource+0x178>
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d060      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x166>
 80021c8:	d868      	bhi.n	800229c <HAL_TIM_ConfigClockSource+0x178>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d05d      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x166>
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d05b      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x166>
 80021d2:	e063      	b.n	800229c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021e4:	f000 f99a 	bl	800251c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2277      	movs	r2, #119	@ 0x77
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	609a      	str	r2, [r3, #8]
      break;
 8002200:	e052      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002212:	f000 f983 	bl	800251c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2180      	movs	r1, #128	@ 0x80
 8002222:	01c9      	lsls	r1, r1, #7
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
      break;
 8002228:	e03e      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002236:	001a      	movs	r2, r3
 8002238:	f000 f8f6 	bl	8002428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2150      	movs	r1, #80	@ 0x50
 8002242:	0018      	movs	r0, r3
 8002244:	f000 f950 	bl	80024e8 <TIM_ITRx_SetConfig>
      break;
 8002248:	e02e      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002256:	001a      	movs	r2, r3
 8002258:	f000 f914 	bl	8002484 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2160      	movs	r1, #96	@ 0x60
 8002262:	0018      	movs	r0, r3
 8002264:	f000 f940 	bl	80024e8 <TIM_ITRx_SetConfig>
      break;
 8002268:	e01e      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002276:	001a      	movs	r2, r3
 8002278:	f000 f8d6 	bl	8002428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2140      	movs	r1, #64	@ 0x40
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f930 	bl	80024e8 <TIM_ITRx_SetConfig>
      break;
 8002288:	e00e      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0019      	movs	r1, r3
 8002294:	0010      	movs	r0, r2
 8002296:	f000 f927 	bl	80024e8 <TIM_ITRx_SetConfig>
      break;
 800229a:	e005      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800229c:	230f      	movs	r3, #15
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
      break;
 80022a4:	e000      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80022a6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	223d      	movs	r2, #61	@ 0x3d
 80022ac:	2101      	movs	r1, #1
 80022ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	223c      	movs	r2, #60	@ 0x3c
 80022b4:	2100      	movs	r1, #0
 80022b6:	5499      	strb	r1, [r3, r2]

  return status;
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	781b      	ldrb	r3, [r3, #0]
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	ffff00ff 	.word	0xffff00ff

080022cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d4:	46c0      	nop			@ (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b002      	add	sp, #8
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002304:	46c0      	nop			@ (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3b      	ldr	r2, [pc, #236]	@ (800240c <TIM_Base_SetConfig+0x100>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d008      	beq.n	8002336 <TIM_Base_SetConfig+0x2a>
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	05db      	lsls	r3, r3, #23
 800232a:	429a      	cmp	r2, r3
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0x2a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a37      	ldr	r2, [pc, #220]	@ (8002410 <TIM_Base_SetConfig+0x104>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d108      	bne.n	8002348 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2270      	movs	r2, #112	@ 0x70
 800233a:	4393      	bics	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a30      	ldr	r2, [pc, #192]	@ (800240c <TIM_Base_SetConfig+0x100>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d018      	beq.n	8002382 <TIM_Base_SetConfig+0x76>
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	05db      	lsls	r3, r3, #23
 8002356:	429a      	cmp	r2, r3
 8002358:	d013      	beq.n	8002382 <TIM_Base_SetConfig+0x76>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a2c      	ldr	r2, [pc, #176]	@ (8002410 <TIM_Base_SetConfig+0x104>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00f      	beq.n	8002382 <TIM_Base_SetConfig+0x76>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a2b      	ldr	r2, [pc, #172]	@ (8002414 <TIM_Base_SetConfig+0x108>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00b      	beq.n	8002382 <TIM_Base_SetConfig+0x76>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a2a      	ldr	r2, [pc, #168]	@ (8002418 <TIM_Base_SetConfig+0x10c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <TIM_Base_SetConfig+0x76>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a29      	ldr	r2, [pc, #164]	@ (800241c <TIM_Base_SetConfig+0x110>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <TIM_Base_SetConfig+0x76>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a28      	ldr	r2, [pc, #160]	@ (8002420 <TIM_Base_SetConfig+0x114>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d108      	bne.n	8002394 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a27      	ldr	r2, [pc, #156]	@ (8002424 <TIM_Base_SetConfig+0x118>)
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2280      	movs	r2, #128	@ 0x80
 8002398:	4393      	bics	r3, r2
 800239a:	001a      	movs	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a13      	ldr	r2, [pc, #76]	@ (800240c <TIM_Base_SetConfig+0x100>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <TIM_Base_SetConfig+0xce>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a14      	ldr	r2, [pc, #80]	@ (8002418 <TIM_Base_SetConfig+0x10c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0xce>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a13      	ldr	r2, [pc, #76]	@ (800241c <TIM_Base_SetConfig+0x110>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0xce>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <TIM_Base_SetConfig+0x114>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d103      	bne.n	80023e2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2201      	movs	r2, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2201      	movs	r2, #1
 80023fa:	4393      	bics	r3, r2
 80023fc:	001a      	movs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]
  }
}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	b004      	add	sp, #16
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	40012c00 	.word	0x40012c00
 8002410:	40000400 	.word	0x40000400
 8002414:	40002000 	.word	0x40002000
 8002418:	40014000 	.word	0x40014000
 800241c:	40014400 	.word	0x40014400
 8002420:	40014800 	.word	0x40014800
 8002424:	fffffcff 	.word	0xfffffcff

08002428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	2201      	movs	r2, #1
 8002440:	4393      	bics	r3, r2
 8002442:	001a      	movs	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	22f0      	movs	r2, #240	@ 0xf0
 8002452:	4393      	bics	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	220a      	movs	r2, #10
 8002464:	4393      	bics	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	621a      	str	r2, [r3, #32]
}
 800247c:	46c0      	nop			@ (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b006      	add	sp, #24
 8002482:	bd80      	pop	{r7, pc}

08002484 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	2210      	movs	r2, #16
 800249c:	4393      	bics	r3, r2
 800249e:	001a      	movs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <TIM_TI2_ConfigInputStage+0x60>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	031b      	lsls	r3, r3, #12
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	22a0      	movs	r2, #160	@ 0xa0
 80024c0:	4393      	bics	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]
}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b006      	add	sp, #24
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	ffff0fff 	.word	0xffff0fff

080024e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2270      	movs	r2, #112	@ 0x70
 80024fc:	4393      	bics	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	2207      	movs	r2, #7
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	609a      	str	r2, [r3, #8]
}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4a09      	ldr	r2, [pc, #36]	@ (8002558 <TIM_ETR_SetConfig+0x3c>)
 8002534:	4013      	ands	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	021a      	lsls	r2, r3, #8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	431a      	orrs	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4313      	orrs	r3, r2
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	609a      	str	r2, [r3, #8]
}
 8002550:	46c0      	nop			@ (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b006      	add	sp, #24
 8002556:	bd80      	pop	{r7, pc}
 8002558:	ffff00ff 	.word	0xffff00ff

0800255c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	223c      	movs	r2, #60	@ 0x3c
 800256a:	5c9b      	ldrb	r3, [r3, r2]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002570:	2302      	movs	r3, #2
 8002572:	e047      	b.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	223c      	movs	r2, #60	@ 0x3c
 8002578:	2101      	movs	r1, #1
 800257a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	223d      	movs	r2, #61	@ 0x3d
 8002580:	2102      	movs	r1, #2
 8002582:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2270      	movs	r2, #112	@ 0x70
 8002598:	4393      	bics	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a16      	ldr	r2, [pc, #88]	@ (800260c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00f      	beq.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	05db      	lsls	r3, r3, #23
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d009      	beq.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a11      	ldr	r2, [pc, #68]	@ (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a10      	ldr	r2, [pc, #64]	@ (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10c      	bne.n	80025f2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	4393      	bics	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223d      	movs	r2, #61	@ 0x3d
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223c      	movs	r2, #60	@ 0x3c
 80025fe:	2100      	movs	r1, #0
 8002600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b004      	add	sp, #16
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40000400 	.word	0x40000400
 8002614:	40014000 	.word	0x40014000

08002618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002630:	46c0      	nop			@ (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e044      	b.n	80026d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2278      	movs	r2, #120	@ 0x78
 8002656:	2100      	movs	r1, #0
 8002658:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f7fe f8a7 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2224      	movs	r2, #36	@ 0x24
 8002666:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	438a      	bics	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	0018      	movs	r0, r3
 8002684:	f000 fd66 	bl	8003154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 fc22 	bl	8002ed4 <UART_SetConfig>
 8002690:	0003      	movs	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e01c      	b.n	80026d4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	490d      	ldr	r1, [pc, #52]	@ (80026dc <HAL_UART_Init+0xa4>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	212a      	movs	r1, #42	@ 0x2a
 80026b6:	438a      	bics	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 fdf5 	bl	80032bc <UART_CheckIdleState>
 80026d2:	0003      	movs	r3, r0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	ffffb7ff 	.word	0xffffb7ff

080026e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	1dbb      	adds	r3, r7, #6
 80026ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d000      	beq.n	80026fa <HAL_UART_Transmit+0x1a>
 80026f8:	e08c      	b.n	8002814 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_UART_Transmit+0x28>
 8002700:	1dbb      	adds	r3, r7, #6
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e084      	b.n	8002816 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	015b      	lsls	r3, r3, #5
 8002714:	429a      	cmp	r2, r3
 8002716:	d109      	bne.n	800272c <HAL_UART_Transmit+0x4c>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	d001      	beq.n	800272c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e074      	b.n	8002816 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2284      	movs	r2, #132	@ 0x84
 8002730:	2100      	movs	r1, #0
 8002732:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2221      	movs	r2, #33	@ 0x21
 8002738:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800273a:	f7fe f981 	bl	8000a40 <HAL_GetTick>
 800273e:	0003      	movs	r3, r0
 8002740:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1dba      	adds	r2, r7, #6
 8002746:	2150      	movs	r1, #80	@ 0x50
 8002748:	8812      	ldrh	r2, [r2, #0]
 800274a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1dba      	adds	r2, r7, #6
 8002750:	2152      	movs	r1, #82	@ 0x52
 8002752:	8812      	ldrh	r2, [r2, #0]
 8002754:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	015b      	lsls	r3, r3, #5
 800275e:	429a      	cmp	r2, r3
 8002760:	d108      	bne.n	8002774 <HAL_UART_Transmit+0x94>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800277c:	e02f      	b.n	80027de <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	0013      	movs	r3, r2
 8002788:	2200      	movs	r2, #0
 800278a:	2180      	movs	r1, #128	@ 0x80
 800278c:	f000 fe3e 	bl	800340c <UART_WaitOnFlagUntilTimeout>
 8002790:	1e03      	subs	r3, r0, #0
 8002792:	d004      	beq.n	800279e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e03b      	b.n	8002816 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	881a      	ldrh	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	05d2      	lsls	r2, r2, #23
 80027ae:	0dd2      	lsrs	r2, r2, #23
 80027b0:	b292      	uxth	r2, r2
 80027b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	3302      	adds	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e007      	b.n	80027cc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3301      	adds	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2252      	movs	r2, #82	@ 0x52
 80027d0:	5a9b      	ldrh	r3, [r3, r2]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b299      	uxth	r1, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2252      	movs	r2, #82	@ 0x52
 80027dc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2252      	movs	r2, #82	@ 0x52
 80027e2:	5a9b      	ldrh	r3, [r3, r2]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1c9      	bne.n	800277e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	0013      	movs	r3, r2
 80027f4:	2200      	movs	r2, #0
 80027f6:	2140      	movs	r1, #64	@ 0x40
 80027f8:	f000 fe08 	bl	800340c <UART_WaitOnFlagUntilTimeout>
 80027fc:	1e03      	subs	r3, r0, #0
 80027fe:	d004      	beq.n	800280a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e005      	b.n	8002816 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b008      	add	sp, #32
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b088      	sub	sp, #32
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	1dbb      	adds	r3, r7, #6
 800282a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2280      	movs	r2, #128	@ 0x80
 8002830:	589b      	ldr	r3, [r3, r2]
 8002832:	2b20      	cmp	r3, #32
 8002834:	d145      	bne.n	80028c2 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_UART_Receive_DMA+0x26>
 800283c:	1dbb      	adds	r3, r7, #6
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e03d      	b.n	80028c4 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	015b      	lsls	r3, r3, #5
 8002850:	429a      	cmp	r2, r3
 8002852:	d109      	bne.n	8002868 <HAL_UART_Receive_DMA+0x4a>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	d001      	beq.n	8002868 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e02d      	b.n	80028c4 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	4013      	ands	r3, r2
 800287a:	d019      	beq.n	80028b0 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287c:	f3ef 8310 	mrs	r3, PRIMASK
 8002880:	613b      	str	r3, [r7, #16]
  return(result);
 8002882:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	2301      	movs	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f383 8810 	msr	PRIMASK, r3
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2180      	movs	r1, #128	@ 0x80
 800289e:	04c9      	lsls	r1, r1, #19
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f383 8810 	msr	PRIMASK, r3
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80028b0:	1dbb      	adds	r3, r7, #6
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fe17 	bl	80034ec <UART_Start_Receive_DMA>
 80028be:	0003      	movs	r3, r0
 80028c0:	e000      	b.n	80028c4 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b008      	add	sp, #32
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b0ab      	sub	sp, #172	@ 0xac
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	22a4      	movs	r2, #164	@ 0xa4
 80028dc:	18b9      	adds	r1, r7, r2
 80028de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	20a0      	movs	r0, #160	@ 0xa0
 80028e8:	1839      	adds	r1, r7, r0
 80028ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	219c      	movs	r1, #156	@ 0x9c
 80028f4:	1879      	adds	r1, r7, r1
 80028f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028f8:	0011      	movs	r1, r2
 80028fa:	18bb      	adds	r3, r7, r2
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a99      	ldr	r2, [pc, #612]	@ (8002b64 <HAL_UART_IRQHandler+0x298>)
 8002900:	4013      	ands	r3, r2
 8002902:	2298      	movs	r2, #152	@ 0x98
 8002904:	18bc      	adds	r4, r7, r2
 8002906:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002908:	18bb      	adds	r3, r7, r2
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d114      	bne.n	800293a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002910:	187b      	adds	r3, r7, r1
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2220      	movs	r2, #32
 8002916:	4013      	ands	r3, r2
 8002918:	d00f      	beq.n	800293a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800291a:	183b      	adds	r3, r7, r0
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2220      	movs	r2, #32
 8002920:	4013      	ands	r3, r2
 8002922:	d00a      	beq.n	800293a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002928:	2b00      	cmp	r3, #0
 800292a:	d100      	bne.n	800292e <HAL_UART_IRQHandler+0x62>
 800292c:	e29e      	b.n	8002e6c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	0010      	movs	r0, r2
 8002936:	4798      	blx	r3
      }
      return;
 8002938:	e298      	b.n	8002e6c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800293a:	2398      	movs	r3, #152	@ 0x98
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d100      	bne.n	8002946 <HAL_UART_IRQHandler+0x7a>
 8002944:	e114      	b.n	8002b70 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002946:	239c      	movs	r3, #156	@ 0x9c
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d106      	bne.n	8002960 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002952:	23a0      	movs	r3, #160	@ 0xa0
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a83      	ldr	r2, [pc, #524]	@ (8002b68 <HAL_UART_IRQHandler+0x29c>)
 800295a:	4013      	ands	r3, r2
 800295c:	d100      	bne.n	8002960 <HAL_UART_IRQHandler+0x94>
 800295e:	e107      	b.n	8002b70 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002960:	23a4      	movs	r3, #164	@ 0xa4
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2201      	movs	r2, #1
 8002968:	4013      	ands	r3, r2
 800296a:	d012      	beq.n	8002992 <HAL_UART_IRQHandler+0xc6>
 800296c:	23a0      	movs	r3, #160	@ 0xa0
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4013      	ands	r3, r2
 8002978:	d00b      	beq.n	8002992 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2284      	movs	r2, #132	@ 0x84
 8002986:	589b      	ldr	r3, [r3, r2]
 8002988:	2201      	movs	r2, #1
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2184      	movs	r1, #132	@ 0x84
 8002990:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002992:	23a4      	movs	r3, #164	@ 0xa4
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d011      	beq.n	80029c2 <HAL_UART_IRQHandler+0xf6>
 800299e:	239c      	movs	r3, #156	@ 0x9c
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2202      	movs	r2, #2
 80029b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2284      	movs	r2, #132	@ 0x84
 80029b6:	589b      	ldr	r3, [r3, r2]
 80029b8:	2204      	movs	r2, #4
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2184      	movs	r1, #132	@ 0x84
 80029c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c2:	23a4      	movs	r3, #164	@ 0xa4
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2204      	movs	r2, #4
 80029ca:	4013      	ands	r3, r2
 80029cc:	d011      	beq.n	80029f2 <HAL_UART_IRQHandler+0x126>
 80029ce:	239c      	movs	r3, #156	@ 0x9c
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2201      	movs	r2, #1
 80029d6:	4013      	ands	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2204      	movs	r2, #4
 80029e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2284      	movs	r2, #132	@ 0x84
 80029e6:	589b      	ldr	r3, [r3, r2]
 80029e8:	2202      	movs	r2, #2
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2184      	movs	r1, #132	@ 0x84
 80029f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f2:	23a4      	movs	r3, #164	@ 0xa4
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2208      	movs	r2, #8
 80029fa:	4013      	ands	r3, r2
 80029fc:	d017      	beq.n	8002a2e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029fe:	23a0      	movs	r3, #160	@ 0xa0
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2220      	movs	r2, #32
 8002a06:	4013      	ands	r3, r2
 8002a08:	d105      	bne.n	8002a16 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a0a:	239c      	movs	r3, #156	@ 0x9c
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a14:	d00b      	beq.n	8002a2e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2284      	movs	r2, #132	@ 0x84
 8002a22:	589b      	ldr	r3, [r3, r2]
 8002a24:	2208      	movs	r2, #8
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2184      	movs	r1, #132	@ 0x84
 8002a2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a2e:	23a4      	movs	r3, #164	@ 0xa4
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d013      	beq.n	8002a64 <HAL_UART_IRQHandler+0x198>
 8002a3c:	23a0      	movs	r3, #160	@ 0xa0
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	2380      	movs	r3, #128	@ 0x80
 8002a44:	04db      	lsls	r3, r3, #19
 8002a46:	4013      	ands	r3, r2
 8002a48:	d00c      	beq.n	8002a64 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2280      	movs	r2, #128	@ 0x80
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2284      	movs	r2, #132	@ 0x84
 8002a58:	589b      	ldr	r3, [r3, r2]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2184      	movs	r1, #132	@ 0x84
 8002a62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2284      	movs	r2, #132	@ 0x84
 8002a68:	589b      	ldr	r3, [r3, r2]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d100      	bne.n	8002a70 <HAL_UART_IRQHandler+0x1a4>
 8002a6e:	e1ff      	b.n	8002e70 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a70:	23a4      	movs	r3, #164	@ 0xa4
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2220      	movs	r2, #32
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d00e      	beq.n	8002a9a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a7c:	23a0      	movs	r3, #160	@ 0xa0
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2220      	movs	r2, #32
 8002a84:	4013      	ands	r3, r2
 8002a86:	d008      	beq.n	8002a9a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	0010      	movs	r0, r2
 8002a98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2284      	movs	r2, #132	@ 0x84
 8002a9e:	589b      	ldr	r3, [r3, r2]
 8002aa0:	2194      	movs	r1, #148	@ 0x94
 8002aa2:	187a      	adds	r2, r7, r1
 8002aa4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2240      	movs	r2, #64	@ 0x40
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b40      	cmp	r3, #64	@ 0x40
 8002ab2:	d004      	beq.n	8002abe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2228      	movs	r2, #40	@ 0x28
 8002aba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002abc:	d047      	beq.n	8002b4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 fdd7 	bl	8003674 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2240      	movs	r2, #64	@ 0x40
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b40      	cmp	r3, #64	@ 0x40
 8002ad2:	d137      	bne.n	8002b44 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002adc:	2090      	movs	r0, #144	@ 0x90
 8002ade:	183a      	adds	r2, r7, r0
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ae8:	f383 8810 	msr	PRIMASK, r3
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2140      	movs	r1, #64	@ 0x40
 8002afa:	438a      	bics	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	183b      	adds	r3, r7, r0
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b06:	f383 8810 	msr	PRIMASK, r3
}
 8002b0a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b18:	4a14      	ldr	r2, [pc, #80]	@ (8002b6c <HAL_UART_IRQHandler+0x2a0>)
 8002b1a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7fe f95b 	bl	8000ddc <HAL_DMA_Abort_IT>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d01a      	beq.n	8002b60 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b34:	0018      	movs	r0, r3
 8002b36:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b38:	e012      	b.n	8002b60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 f9b5 	bl	8002eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b42:	e00d      	b.n	8002b60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 f9b0 	bl	8002eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	e008      	b.n	8002b60 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 f9ab 	bl	8002eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2284      	movs	r2, #132	@ 0x84
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b5e:	e187      	b.n	8002e70 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	46c0      	nop			@ (mov r8, r8)
    return;
 8002b62:	e185      	b.n	8002e70 <HAL_UART_IRQHandler+0x5a4>
 8002b64:	0000080f 	.word	0x0000080f
 8002b68:	04000120 	.word	0x04000120
 8002b6c:	0800392f 	.word	0x0800392f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d000      	beq.n	8002b7a <HAL_UART_IRQHandler+0x2ae>
 8002b78:	e139      	b.n	8002dee <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b7a:	23a4      	movs	r3, #164	@ 0xa4
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2210      	movs	r2, #16
 8002b82:	4013      	ands	r3, r2
 8002b84:	d100      	bne.n	8002b88 <HAL_UART_IRQHandler+0x2bc>
 8002b86:	e132      	b.n	8002dee <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b88:	23a0      	movs	r3, #160	@ 0xa0
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2210      	movs	r2, #16
 8002b90:	4013      	ands	r3, r2
 8002b92:	d100      	bne.n	8002b96 <HAL_UART_IRQHandler+0x2ca>
 8002b94:	e12b      	b.n	8002dee <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2240      	movs	r2, #64	@ 0x40
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	d000      	beq.n	8002bae <HAL_UART_IRQHandler+0x2e2>
 8002bac:	e09f      	b.n	8002cee <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	217e      	movs	r1, #126	@ 0x7e
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d100      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x2fa>
 8002bc4:	e156      	b.n	8002e74 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2258      	movs	r2, #88	@ 0x58
 8002bca:	5a9b      	ldrh	r3, [r3, r2]
 8002bcc:	187a      	adds	r2, r7, r1
 8002bce:	8812      	ldrh	r2, [r2, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d300      	bcc.n	8002bd6 <HAL_UART_IRQHandler+0x30a>
 8002bd4:	e14e      	b.n	8002e74 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	187a      	adds	r2, r7, r1
 8002bda:	215a      	movs	r1, #90	@ 0x5a
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d06f      	beq.n	8002cca <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bea:	f3ef 8310 	mrs	r3, PRIMASK
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfa:	f383 8810 	msr	PRIMASK, r3
}
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	499e      	ldr	r1, [pc, #632]	@ (8002e84 <HAL_UART_IRQHandler+0x5b8>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c16:	f383 8810 	msr	PRIMASK, r3
}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c24:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c26:	2301      	movs	r3, #1
 8002c28:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c2c:	f383 8810 	msr	PRIMASK, r3
}
 8002c30:	46c0      	nop			@ (mov r8, r8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	438a      	bics	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c44:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c48:	f383 8810 	msr	PRIMASK, r3
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c56:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c58:	2301      	movs	r3, #1
 8002c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2140      	movs	r1, #64	@ 0x40
 8002c70:	438a      	bics	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c76:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c7a:	f383 8810 	msr	PRIMASK, r3
}
 8002c7e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2280      	movs	r2, #128	@ 0x80
 8002c84:	2120      	movs	r1, #32
 8002c86:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c92:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c98:	2301      	movs	r3, #1
 8002c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2110      	movs	r1, #16
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cba:	f383 8810 	msr	PRIMASK, r3
}
 8002cbe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fe f851 	bl	8000d6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2258      	movs	r2, #88	@ 0x58
 8002cd4:	5a9a      	ldrh	r2, [r3, r2]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	215a      	movs	r1, #90	@ 0x5a
 8002cda:	5a5b      	ldrh	r3, [r3, r1]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0011      	movs	r1, r2
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f8e8 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cec:	e0c2      	b.n	8002e74 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2258      	movs	r2, #88	@ 0x58
 8002cf2:	5a99      	ldrh	r1, [r3, r2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	225a      	movs	r2, #90	@ 0x5a
 8002cf8:	5a9b      	ldrh	r3, [r3, r2]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	208e      	movs	r0, #142	@ 0x8e
 8002cfe:	183b      	adds	r3, r7, r0
 8002d00:	1a8a      	subs	r2, r1, r2
 8002d02:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	225a      	movs	r2, #90	@ 0x5a
 8002d08:	5a9b      	ldrh	r3, [r3, r2]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d100      	bne.n	8002d12 <HAL_UART_IRQHandler+0x446>
 8002d10:	e0b2      	b.n	8002e78 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8002d12:	183b      	adds	r3, r7, r0
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d100      	bne.n	8002d1c <HAL_UART_IRQHandler+0x450>
 8002d1a:	e0ad      	b.n	8002e78 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d22:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d24:	2488      	movs	r4, #136	@ 0x88
 8002d26:	193a      	adds	r2, r7, r4
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f383 8810 	msr	PRIMASK, r3
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4951      	ldr	r1, [pc, #324]	@ (8002e88 <HAL_UART_IRQHandler+0x5bc>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d54:	f3ef 8310 	mrs	r3, PRIMASK
 8002d58:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d5a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5c:	2484      	movs	r4, #132	@ 0x84
 8002d5e:	193a      	adds	r2, r7, r4
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	2301      	movs	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f383 8810 	msr	PRIMASK, r3
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	438a      	bics	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f383 8810 	msr	PRIMASK, r3
}
 8002d8a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	2120      	movs	r1, #32
 8002d92:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da0:	f3ef 8310 	mrs	r3, PRIMASK
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	2480      	movs	r4, #128	@ 0x80
 8002daa:	193a      	adds	r2, r7, r4
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	2301      	movs	r3, #1
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db4:	f383 8810 	msr	PRIMASK, r3
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2110      	movs	r1, #16
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	193b      	adds	r3, r7, r4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd2:	f383 8810 	msr	PRIMASK, r3
}
 8002dd6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dde:	183b      	adds	r3, r7, r0
 8002de0:	881a      	ldrh	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	0011      	movs	r1, r2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 f868 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dec:	e044      	b.n	8002e78 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dee:	23a4      	movs	r3, #164	@ 0xa4
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	035b      	lsls	r3, r3, #13
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d010      	beq.n	8002e1e <HAL_UART_IRQHandler+0x552>
 8002dfc:	239c      	movs	r3, #156	@ 0x9c
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	03db      	lsls	r3, r3, #15
 8002e06:	4013      	ands	r3, r2
 8002e08:	d009      	beq.n	8002e1e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2280      	movs	r2, #128	@ 0x80
 8002e10:	0352      	lsls	r2, r2, #13
 8002e12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 fdcb 	bl	80039b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e1c:	e02f      	b.n	8002e7e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e1e:	23a4      	movs	r3, #164	@ 0xa4
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2280      	movs	r2, #128	@ 0x80
 8002e26:	4013      	ands	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e2a:	23a0      	movs	r3, #160	@ 0xa0
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2280      	movs	r2, #128	@ 0x80
 8002e32:	4013      	ands	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01e      	beq.n	8002e7c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	0010      	movs	r0, r2
 8002e46:	4798      	blx	r3
    }
    return;
 8002e48:	e018      	b.n	8002e7c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e4a:	23a4      	movs	r3, #164	@ 0xa4
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2240      	movs	r2, #64	@ 0x40
 8002e52:	4013      	ands	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_UART_IRQHandler+0x5b2>
 8002e56:	23a0      	movs	r3, #160	@ 0xa0
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2240      	movs	r2, #64	@ 0x40
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d00d      	beq.n	8002e7e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 fd79 	bl	800395c <UART_EndTransmit_IT>
    return;
 8002e6a:	e008      	b.n	8002e7e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002e6c:	46c0      	nop			@ (mov r8, r8)
 8002e6e:	e006      	b.n	8002e7e <HAL_UART_IRQHandler+0x5b2>
    return;
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	e004      	b.n	8002e7e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	e002      	b.n	8002e7e <HAL_UART_IRQHandler+0x5b2>
      return;
 8002e78:	46c0      	nop			@ (mov r8, r8)
 8002e7a:	e000      	b.n	8002e7e <HAL_UART_IRQHandler+0x5b2>
    return;
 8002e7c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b02b      	add	sp, #172	@ 0xac
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	fffffeff 	.word	0xfffffeff
 8002e88:	fffffedf 	.word	0xfffffedf

08002e8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	000a      	movs	r2, r1
 8002ec6:	1cbb      	adds	r3, r7, #2
 8002ec8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002edc:	231e      	movs	r3, #30
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a8d      	ldr	r2, [pc, #564]	@ (8003138 <UART_SetConfig+0x264>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4a88      	ldr	r2, [pc, #544]	@ (800313c <UART_SetConfig+0x268>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a7f      	ldr	r2, [pc, #508]	@ (8003140 <UART_SetConfig+0x26c>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a7b      	ldr	r2, [pc, #492]	@ (8003144 <UART_SetConfig+0x270>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d127      	bne.n	8002faa <UART_SetConfig+0xd6>
 8002f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8003148 <UART_SetConfig+0x274>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	2203      	movs	r2, #3
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d00d      	beq.n	8002f82 <UART_SetConfig+0xae>
 8002f66:	d81b      	bhi.n	8002fa0 <UART_SetConfig+0xcc>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d014      	beq.n	8002f96 <UART_SetConfig+0xc2>
 8002f6c:	d818      	bhi.n	8002fa0 <UART_SetConfig+0xcc>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <UART_SetConfig+0xa4>
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d00a      	beq.n	8002f8c <UART_SetConfig+0xb8>
 8002f76:	e013      	b.n	8002fa0 <UART_SetConfig+0xcc>
 8002f78:	231f      	movs	r3, #31
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e021      	b.n	8002fc6 <UART_SetConfig+0xf2>
 8002f82:	231f      	movs	r3, #31
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2202      	movs	r2, #2
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e01c      	b.n	8002fc6 <UART_SetConfig+0xf2>
 8002f8c:	231f      	movs	r3, #31
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	2204      	movs	r2, #4
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e017      	b.n	8002fc6 <UART_SetConfig+0xf2>
 8002f96:	231f      	movs	r3, #31
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e012      	b.n	8002fc6 <UART_SetConfig+0xf2>
 8002fa0:	231f      	movs	r3, #31
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e00d      	b.n	8002fc6 <UART_SetConfig+0xf2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a67      	ldr	r2, [pc, #412]	@ (800314c <UART_SetConfig+0x278>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d104      	bne.n	8002fbe <UART_SetConfig+0xea>
 8002fb4:	231f      	movs	r3, #31
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e003      	b.n	8002fc6 <UART_SetConfig+0xf2>
 8002fbe:	231f      	movs	r3, #31
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d15c      	bne.n	800308c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8002fd2:	231f      	movs	r3, #31
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d015      	beq.n	8003008 <UART_SetConfig+0x134>
 8002fdc:	dc18      	bgt.n	8003010 <UART_SetConfig+0x13c>
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d00d      	beq.n	8002ffe <UART_SetConfig+0x12a>
 8002fe2:	dc15      	bgt.n	8003010 <UART_SetConfig+0x13c>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <UART_SetConfig+0x11a>
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d005      	beq.n	8002ff8 <UART_SetConfig+0x124>
 8002fec:	e010      	b.n	8003010 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fee:	f7fe fe15 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	61bb      	str	r3, [r7, #24]
        break;
 8002ff6:	e012      	b.n	800301e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff8:	4b55      	ldr	r3, [pc, #340]	@ (8003150 <UART_SetConfig+0x27c>)
 8002ffa:	61bb      	str	r3, [r7, #24]
        break;
 8002ffc:	e00f      	b.n	800301e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffe:	f7fe fdad 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8003002:	0003      	movs	r3, r0
 8003004:	61bb      	str	r3, [r7, #24]
        break;
 8003006:	e00a      	b.n	800301e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	61bb      	str	r3, [r7, #24]
        break;
 800300e:	e006      	b.n	800301e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003014:	231e      	movs	r3, #30
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
        break;
 800301c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d100      	bne.n	8003026 <UART_SetConfig+0x152>
 8003024:	e07a      	b.n	800311c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	005a      	lsls	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	18d2      	adds	r2, r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	0019      	movs	r1, r3
 8003038:	0010      	movs	r0, r2
 800303a:	f7fd f865 	bl	8000108 <__udivsi3>
 800303e:	0003      	movs	r3, r0
 8003040:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b0f      	cmp	r3, #15
 8003046:	d91c      	bls.n	8003082 <UART_SetConfig+0x1ae>
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	025b      	lsls	r3, r3, #9
 800304e:	429a      	cmp	r2, r3
 8003050:	d217      	bcs.n	8003082 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	b29a      	uxth	r2, r3
 8003056:	200e      	movs	r0, #14
 8003058:	183b      	adds	r3, r7, r0
 800305a:	210f      	movs	r1, #15
 800305c:	438a      	bics	r2, r1
 800305e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	2207      	movs	r2, #7
 8003068:	4013      	ands	r3, r2
 800306a:	b299      	uxth	r1, r3
 800306c:	183b      	adds	r3, r7, r0
 800306e:	183a      	adds	r2, r7, r0
 8003070:	8812      	ldrh	r2, [r2, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	183a      	adds	r2, r7, r0
 800307c:	8812      	ldrh	r2, [r2, #0]
 800307e:	60da      	str	r2, [r3, #12]
 8003080:	e04c      	b.n	800311c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003082:	231e      	movs	r3, #30
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e047      	b.n	800311c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800308c:	231f      	movs	r3, #31
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b08      	cmp	r3, #8
 8003094:	d015      	beq.n	80030c2 <UART_SetConfig+0x1ee>
 8003096:	dc18      	bgt.n	80030ca <UART_SetConfig+0x1f6>
 8003098:	2b04      	cmp	r3, #4
 800309a:	d00d      	beq.n	80030b8 <UART_SetConfig+0x1e4>
 800309c:	dc15      	bgt.n	80030ca <UART_SetConfig+0x1f6>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <UART_SetConfig+0x1d4>
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d005      	beq.n	80030b2 <UART_SetConfig+0x1de>
 80030a6:	e010      	b.n	80030ca <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a8:	f7fe fdb8 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 80030ac:	0003      	movs	r3, r0
 80030ae:	61bb      	str	r3, [r7, #24]
        break;
 80030b0:	e012      	b.n	80030d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b2:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <UART_SetConfig+0x27c>)
 80030b4:	61bb      	str	r3, [r7, #24]
        break;
 80030b6:	e00f      	b.n	80030d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b8:	f7fe fd50 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 80030bc:	0003      	movs	r3, r0
 80030be:	61bb      	str	r3, [r7, #24]
        break;
 80030c0:	e00a      	b.n	80030d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	61bb      	str	r3, [r7, #24]
        break;
 80030c8:	e006      	b.n	80030d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030ce:	231e      	movs	r3, #30
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
        break;
 80030d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01e      	beq.n	800311c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	085a      	lsrs	r2, r3, #1
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	18d2      	adds	r2, r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0019      	movs	r1, r3
 80030ee:	0010      	movs	r0, r2
 80030f0:	f7fd f80a 	bl	8000108 <__udivsi3>
 80030f4:	0003      	movs	r3, r0
 80030f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b0f      	cmp	r3, #15
 80030fc:	d90a      	bls.n	8003114 <UART_SetConfig+0x240>
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	2380      	movs	r3, #128	@ 0x80
 8003102:	025b      	lsls	r3, r3, #9
 8003104:	429a      	cmp	r2, r3
 8003106:	d205      	bcs.n	8003114 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	b29a      	uxth	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	e003      	b.n	800311c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003114:	231e      	movs	r3, #30
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003128:	231e      	movs	r3, #30
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	781b      	ldrb	r3, [r3, #0]
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b008      	add	sp, #32
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	ffff69f3 	.word	0xffff69f3
 800313c:	ffffcfff 	.word	0xffffcfff
 8003140:	fffff4ff 	.word	0xfffff4ff
 8003144:	40013800 	.word	0x40013800
 8003148:	40021000 	.word	0x40021000
 800314c:	40004400 	.word	0x40004400
 8003150:	007a1200 	.word	0x007a1200

08003154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	2208      	movs	r2, #8
 8003162:	4013      	ands	r3, r2
 8003164:	d00b      	beq.n	800317e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a4a      	ldr	r2, [pc, #296]	@ (8003298 <UART_AdvFeatureConfig+0x144>)
 800316e:	4013      	ands	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
 8003186:	d00b      	beq.n	80031a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a43      	ldr	r2, [pc, #268]	@ (800329c <UART_AdvFeatureConfig+0x148>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	2202      	movs	r2, #2
 80031a6:	4013      	ands	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a3b      	ldr	r2, [pc, #236]	@ (80032a0 <UART_AdvFeatureConfig+0x14c>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	2204      	movs	r2, #4
 80031c8:	4013      	ands	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a34      	ldr	r2, [pc, #208]	@ (80032a4 <UART_AdvFeatureConfig+0x150>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	2210      	movs	r2, #16
 80031ea:	4013      	ands	r3, r2
 80031ec:	d00b      	beq.n	8003206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a2c      	ldr	r2, [pc, #176]	@ (80032a8 <UART_AdvFeatureConfig+0x154>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	2220      	movs	r2, #32
 800320c:	4013      	ands	r3, r2
 800320e:	d00b      	beq.n	8003228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4a25      	ldr	r2, [pc, #148]	@ (80032ac <UART_AdvFeatureConfig+0x158>)
 8003218:	4013      	ands	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	2240      	movs	r2, #64	@ 0x40
 800322e:	4013      	ands	r3, r2
 8003230:	d01d      	beq.n	800326e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a1d      	ldr	r2, [pc, #116]	@ (80032b0 <UART_AdvFeatureConfig+0x15c>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	035b      	lsls	r3, r3, #13
 8003252:	429a      	cmp	r2, r3
 8003254:	d10b      	bne.n	800326e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a15      	ldr	r2, [pc, #84]	@ (80032b4 <UART_AdvFeatureConfig+0x160>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	2280      	movs	r2, #128	@ 0x80
 8003274:	4013      	ands	r3, r2
 8003276:	d00b      	beq.n	8003290 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a0e      	ldr	r2, [pc, #56]	@ (80032b8 <UART_AdvFeatureConfig+0x164>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }
}
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}
 8003298:	ffff7fff 	.word	0xffff7fff
 800329c:	fffdffff 	.word	0xfffdffff
 80032a0:	fffeffff 	.word	0xfffeffff
 80032a4:	fffbffff 	.word	0xfffbffff
 80032a8:	ffffefff 	.word	0xffffefff
 80032ac:	ffffdfff 	.word	0xffffdfff
 80032b0:	ffefffff 	.word	0xffefffff
 80032b4:	ff9fffff 	.word	0xff9fffff
 80032b8:	fff7ffff 	.word	0xfff7ffff

080032bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b092      	sub	sp, #72	@ 0x48
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2284      	movs	r2, #132	@ 0x84
 80032c8:	2100      	movs	r1, #0
 80032ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032cc:	f7fd fbb8 	bl	8000a40 <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2208      	movs	r2, #8
 80032dc:	4013      	ands	r3, r2
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d12c      	bne.n	800333c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e4:	2280      	movs	r2, #128	@ 0x80
 80032e6:	0391      	lsls	r1, r2, #14
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4a46      	ldr	r2, [pc, #280]	@ (8003404 <UART_CheckIdleState+0x148>)
 80032ec:	9200      	str	r2, [sp, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f000 f88c 	bl	800340c <UART_WaitOnFlagUntilTimeout>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d021      	beq.n	800333c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f8:	f3ef 8310 	mrs	r3, PRIMASK
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003302:	2301      	movs	r3, #1
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2180      	movs	r1, #128	@ 0x80
 800331a:	438a      	bics	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2278      	movs	r2, #120	@ 0x78
 8003334:	2100      	movs	r1, #0
 8003336:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e05f      	b.n	80033fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2204      	movs	r2, #4
 8003344:	4013      	ands	r3, r2
 8003346:	2b04      	cmp	r3, #4
 8003348:	d146      	bne.n	80033d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800334a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800334c:	2280      	movs	r2, #128	@ 0x80
 800334e:	03d1      	lsls	r1, r2, #15
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4a2c      	ldr	r2, [pc, #176]	@ (8003404 <UART_CheckIdleState+0x148>)
 8003354:	9200      	str	r2, [sp, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	f000 f858 	bl	800340c <UART_WaitOnFlagUntilTimeout>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d03b      	beq.n	80033d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003360:	f3ef 8310 	mrs	r3, PRIMASK
 8003364:	60fb      	str	r3, [r7, #12]
  return(result);
 8003366:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003368:	637b      	str	r3, [r7, #52]	@ 0x34
 800336a:	2301      	movs	r3, #1
 800336c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f383 8810 	msr	PRIMASK, r3
}
 8003374:	46c0      	nop			@ (mov r8, r8)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4921      	ldr	r1, [pc, #132]	@ (8003408 <UART_CheckIdleState+0x14c>)
 8003382:	400a      	ands	r2, r1
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003388:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f383 8810 	msr	PRIMASK, r3
}
 8003390:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003392:	f3ef 8310 	mrs	r3, PRIMASK
 8003396:	61bb      	str	r3, [r7, #24]
  return(result);
 8003398:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	633b      	str	r3, [r7, #48]	@ 0x30
 800339c:	2301      	movs	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f383 8810 	msr	PRIMASK, r3
}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	438a      	bics	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2280      	movs	r2, #128	@ 0x80
 80033c8:	2120      	movs	r1, #32
 80033ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2278      	movs	r2, #120	@ 0x78
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e011      	b.n	80033fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2280      	movs	r2, #128	@ 0x80
 80033e2:	2120      	movs	r1, #32
 80033e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2278      	movs	r2, #120	@ 0x78
 80033f6:	2100      	movs	r1, #0
 80033f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b010      	add	sp, #64	@ 0x40
 8003402:	bd80      	pop	{r7, pc}
 8003404:	01ffffff 	.word	0x01ffffff
 8003408:	fffffedf 	.word	0xfffffedf

0800340c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341c:	e051      	b.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3301      	adds	r3, #1
 8003422:	d04e      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7fd fb0c 	bl	8000a40 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e051      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2204      	movs	r2, #4
 8003446:	4013      	ands	r3, r2
 8003448:	d03b      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b80      	cmp	r3, #128	@ 0x80
 800344e:	d038      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b40      	cmp	r3, #64	@ 0x40
 8003454:	d035      	beq.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2208      	movs	r2, #8
 800345e:	4013      	ands	r3, r2
 8003460:	2b08      	cmp	r3, #8
 8003462:	d111      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2208      	movs	r2, #8
 800346a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 f900 	bl	8003674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2284      	movs	r2, #132	@ 0x84
 8003478:	2108      	movs	r1, #8
 800347a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2278      	movs	r2, #120	@ 0x78
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e02c      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	2380      	movs	r3, #128	@ 0x80
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	401a      	ands	r2, r3
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	429a      	cmp	r2, r3
 800349a:	d112      	bne.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2280      	movs	r2, #128	@ 0x80
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 f8e3 	bl	8003674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2284      	movs	r2, #132	@ 0x84
 80034b2:	2120      	movs	r1, #32
 80034b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2278      	movs	r2, #120	@ 0x78
 80034ba:	2100      	movs	r1, #0
 80034bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e00f      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	4013      	ands	r3, r2
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	425a      	negs	r2, r3
 80034d2:	4153      	adcs	r3, r2
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	001a      	movs	r2, r3
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d09e      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b004      	add	sp, #16
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b090      	sub	sp, #64	@ 0x40
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	1dbb      	adds	r3, r7, #6
 80034f8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1dba      	adds	r2, r7, #6
 8003504:	2158      	movs	r1, #88	@ 0x58
 8003506:	8812      	ldrh	r2, [r2, #0]
 8003508:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2284      	movs	r2, #132	@ 0x84
 800350e:	2100      	movs	r1, #0
 8003510:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2280      	movs	r2, #128	@ 0x80
 8003516:	2122      	movs	r1, #34	@ 0x22
 8003518:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351e:	2b00      	cmp	r3, #0
 8003520:	d028      	beq.n	8003574 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003526:	4a3e      	ldr	r2, [pc, #248]	@ (8003620 <UART_Start_Receive_DMA+0x134>)
 8003528:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352e:	4a3d      	ldr	r2, [pc, #244]	@ (8003624 <UART_Start_Receive_DMA+0x138>)
 8003530:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003536:	4a3c      	ldr	r2, [pc, #240]	@ (8003628 <UART_Start_Receive_DMA+0x13c>)
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353e:	2200      	movs	r2, #0
 8003540:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3324      	adds	r3, #36	@ 0x24
 800354c:	0019      	movs	r1, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003552:	001a      	movs	r2, r3
 8003554:	1dbb      	adds	r3, r7, #6
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	f7fd fba2 	bl	8000ca0 <HAL_DMA_Start_IT>
 800355c:	1e03      	subs	r3, r0, #0
 800355e:	d009      	beq.n	8003574 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2284      	movs	r2, #132	@ 0x84
 8003564:	2110      	movs	r1, #16
 8003566:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2280      	movs	r2, #128	@ 0x80
 800356c:	2120      	movs	r1, #32
 800356e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e050      	b.n	8003616 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d019      	beq.n	80035b0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003586:	2301      	movs	r3, #1
 8003588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2180      	movs	r1, #128	@ 0x80
 800359e:	0049      	lsls	r1, r1, #1
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b0:	f3ef 8310 	mrs	r3, PRIMASK
 80035b4:	613b      	str	r3, [r7, #16]
  return(result);
 80035b6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035ba:	2301      	movs	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e2:	f3ef 8310 	mrs	r3, PRIMASK
 80035e6:	61fb      	str	r3, [r7, #28]
  return(result);
 80035e8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ec:	2301      	movs	r3, #1
 80035ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f383 8810 	msr	PRIMASK, r3
}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2140      	movs	r1, #64	@ 0x40
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b010      	add	sp, #64	@ 0x40
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	0800373d 	.word	0x0800373d
 8003624:	08003869 	.word	0x08003869
 8003628:	080038ab 	.word	0x080038ab

0800362c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003634:	f3ef 8310 	mrs	r3, PRIMASK
 8003638:	60bb      	str	r3, [r7, #8]
  return(result);
 800363a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	2301      	movs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f383 8810 	msr	PRIMASK, r3
}
 8003648:	46c0      	nop			@ (mov r8, r8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	21c0      	movs	r1, #192	@ 0xc0
 8003656:	438a      	bics	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b006      	add	sp, #24
 8003672:	bd80      	pop	{r7, pc}

08003674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	@ 0x38
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367c:	f3ef 8310 	mrs	r3, PRIMASK
 8003680:	617b      	str	r3, [r7, #20]
  return(result);
 8003682:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
 8003686:	2301      	movs	r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f383 8810 	msr	PRIMASK, r3
}
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4926      	ldr	r1, [pc, #152]	@ (8003738 <UART_EndRxTransfer+0xc4>)
 800369e:	400a      	ands	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ae:	f3ef 8310 	mrs	r3, PRIMASK
 80036b2:	623b      	str	r3, [r7, #32]
  return(result);
 80036b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80036b8:	2301      	movs	r3, #1
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2101      	movs	r1, #1
 80036d0:	438a      	bics	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036da:	f383 8810 	msr	PRIMASK, r3
}
 80036de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d118      	bne.n	800371a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f2:	2301      	movs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2110      	movs	r1, #16
 800370a:	438a      	bics	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2280      	movs	r2, #128	@ 0x80
 800371e:	2120      	movs	r1, #32
 8003720:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b00e      	add	sp, #56	@ 0x38
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	fffffedf 	.word	0xfffffedf

0800373c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b094      	sub	sp, #80	@ 0x50
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b20      	cmp	r3, #32
 8003750:	d06f      	beq.n	8003832 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003754:	225a      	movs	r2, #90	@ 0x5a
 8003756:	2100      	movs	r1, #0
 8003758:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375a:	f3ef 8310 	mrs	r3, PRIMASK
 800375e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003760:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003764:	2301      	movs	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f383 8810 	msr	PRIMASK, r3
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	493a      	ldr	r1, [pc, #232]	@ (8003864 <UART_DMAReceiveCplt+0x128>)
 800377c:	400a      	ands	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003782:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378c:	f3ef 8310 	mrs	r3, PRIMASK
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	647b      	str	r3, [r7, #68]	@ 0x44
 8003796:	2301      	movs	r3, #1
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	f383 8810 	msr	PRIMASK, r3
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	438a      	bics	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b8:	f383 8810 	msr	PRIMASK, r3
}
 80037bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037be:	f3ef 8310 	mrs	r3, PRIMASK
 80037c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c8:	2301      	movs	r3, #1
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ce:	f383 8810 	msr	PRIMASK, r3
}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2140      	movs	r1, #64	@ 0x40
 80037e0:	438a      	bics	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ea:	f383 8810 	msr	PRIMASK, r3
}
 80037ee:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037f2:	2280      	movs	r2, #128	@ 0x80
 80037f4:	2120      	movs	r1, #32
 80037f6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d118      	bne.n	8003832 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003800:	f3ef 8310 	mrs	r3, PRIMASK
 8003804:	60fb      	str	r3, [r7, #12]
  return(result);
 8003806:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800380a:	2301      	movs	r3, #1
 800380c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			@ (mov r8, r8)
 8003816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2110      	movs	r1, #16
 8003822:	438a      	bics	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003834:	2200      	movs	r2, #0
 8003836:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800383a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003842:	2258      	movs	r2, #88	@ 0x58
 8003844:	5a9a      	ldrh	r2, [r3, r2]
 8003846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003848:	0011      	movs	r1, r2
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff fb36 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003850:	e003      	b.n	800385a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003854:	0018      	movs	r0, r3
 8003856:	f7fc fe5f 	bl	8000518 <HAL_UART_RxCpltCallback>
}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b014      	add	sp, #80	@ 0x50
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	fffffeff 	.word	0xfffffeff

08003868 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003880:	2b01      	cmp	r3, #1
 8003882:	d10a      	bne.n	800389a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2258      	movs	r2, #88	@ 0x58
 8003888:	5a9b      	ldrh	r3, [r3, r2]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	0011      	movs	r1, r2
 8003892:	0018      	movs	r0, r3
 8003894:	f7ff fb12 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003898:	e003      	b.n	80038a2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff fafd 	bl	8002e9c <HAL_UART_RxHalfCpltCallback>
}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b004      	add	sp, #16
 80038a8:	bd80      	pop	{r7, pc}

080038aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2280      	movs	r2, #128	@ 0x80
 80038c2:	589b      	ldr	r3, [r3, r2]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2280      	movs	r2, #128	@ 0x80
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b80      	cmp	r3, #128	@ 0x80
 80038d2:	d10a      	bne.n	80038ea <UART_DMAError+0x40>
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b21      	cmp	r3, #33	@ 0x21
 80038d8:	d107      	bne.n	80038ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2252      	movs	r2, #82	@ 0x52
 80038de:	2100      	movs	r1, #0
 80038e0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7ff fea1 	bl	800362c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2240      	movs	r2, #64	@ 0x40
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	d10a      	bne.n	800390e <UART_DMAError+0x64>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b22      	cmp	r3, #34	@ 0x22
 80038fc:	d107      	bne.n	800390e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	225a      	movs	r2, #90	@ 0x5a
 8003902:	2100      	movs	r1, #0
 8003904:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	0018      	movs	r0, r3
 800390a:	f7ff feb3 	bl	8003674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2284      	movs	r2, #132	@ 0x84
 8003912:	589b      	ldr	r3, [r3, r2]
 8003914:	2210      	movs	r2, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2184      	movs	r1, #132	@ 0x84
 800391c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	0018      	movs	r0, r3
 8003922:	f7ff fac3 	bl	8002eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b006      	add	sp, #24
 800392c:	bd80      	pop	{r7, pc}

0800392e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	225a      	movs	r2, #90	@ 0x5a
 8003940:	2100      	movs	r1, #0
 8003942:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2252      	movs	r2, #82	@ 0x52
 8003948:	2100      	movs	r1, #0
 800394a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	0018      	movs	r0, r3
 8003950:	f7ff faac 	bl	8002eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b004      	add	sp, #16
 800395a:	bd80      	pop	{r7, pc}

0800395c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003964:	f3ef 8310 	mrs	r3, PRIMASK
 8003968:	60bb      	str	r3, [r7, #8]
  return(result);
 800396a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	2301      	movs	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f383 8810 	msr	PRIMASK, r3
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2140      	movs	r1, #64	@ 0x40
 8003986:	438a      	bics	r2, r1
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff fa71 	bl	8002e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b006      	add	sp, #24
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <memset>:
 80039c2:	0003      	movs	r3, r0
 80039c4:	1882      	adds	r2, r0, r2
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d100      	bne.n	80039cc <memset+0xa>
 80039ca:	4770      	bx	lr
 80039cc:	7019      	strb	r1, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	e7f9      	b.n	80039c6 <memset+0x4>
	...

080039d4 <__libc_init_array>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	2600      	movs	r6, #0
 80039d8:	4c0c      	ldr	r4, [pc, #48]	@ (8003a0c <__libc_init_array+0x38>)
 80039da:	4d0d      	ldr	r5, [pc, #52]	@ (8003a10 <__libc_init_array+0x3c>)
 80039dc:	1b64      	subs	r4, r4, r5
 80039de:	10a4      	asrs	r4, r4, #2
 80039e0:	42a6      	cmp	r6, r4
 80039e2:	d109      	bne.n	80039f8 <__libc_init_array+0x24>
 80039e4:	2600      	movs	r6, #0
 80039e6:	f000 f819 	bl	8003a1c <_init>
 80039ea:	4c0a      	ldr	r4, [pc, #40]	@ (8003a14 <__libc_init_array+0x40>)
 80039ec:	4d0a      	ldr	r5, [pc, #40]	@ (8003a18 <__libc_init_array+0x44>)
 80039ee:	1b64      	subs	r4, r4, r5
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d105      	bne.n	8003a02 <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	00b3      	lsls	r3, r6, #2
 80039fa:	58eb      	ldr	r3, [r5, r3]
 80039fc:	4798      	blx	r3
 80039fe:	3601      	adds	r6, #1
 8003a00:	e7ee      	b.n	80039e0 <__libc_init_array+0xc>
 8003a02:	00b3      	lsls	r3, r6, #2
 8003a04:	58eb      	ldr	r3, [r5, r3]
 8003a06:	4798      	blx	r3
 8003a08:	3601      	adds	r6, #1
 8003a0a:	e7f2      	b.n	80039f2 <__libc_init_array+0x1e>
 8003a0c:	08003a6c 	.word	0x08003a6c
 8003a10:	08003a6c 	.word	0x08003a6c
 8003a14:	08003a70 	.word	0x08003a70
 8003a18:	08003a6c 	.word	0x08003a6c

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
