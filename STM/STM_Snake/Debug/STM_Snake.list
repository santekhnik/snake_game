
STM_Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800537c  0800537c  0000637c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a4  080054a4  00007170  2**0
                  CONTENTS
  4 .ARM          00000000  080054a4  080054a4  00007170  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054a4  080054a4  00007170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054a8  080054a8  000064a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  080054ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000170  0800561c  00007170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800561c  00007608  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e724  00000000  00000000  00007198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023dc  00000000  00000000  000158bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00017c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7d  00000000  00000000  00018a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013bee  00000000  00000000  00019485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011255  00000000  00000000  0002d073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073105  00000000  00000000  0003e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000b13cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003938  00000000  00000000  000b1454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000b4d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000170 	.word	0x20000170
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005364 	.word	0x08005364

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000174 	.word	0x20000174
 8000104:	08005364 	.word	0x08005364

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4699      	mov	r9, r3
 800023a:	0c03      	lsrs	r3, r0, #16
 800023c:	469c      	mov	ip, r3
 800023e:	0413      	lsls	r3, r2, #16
 8000240:	4647      	mov	r7, r8
 8000242:	0c1b      	lsrs	r3, r3, #16
 8000244:	001d      	movs	r5, r3
 8000246:	000e      	movs	r6, r1
 8000248:	4661      	mov	r1, ip
 800024a:	0404      	lsls	r4, r0, #16
 800024c:	0c24      	lsrs	r4, r4, #16
 800024e:	b580      	push	{r7, lr}
 8000250:	0007      	movs	r7, r0
 8000252:	0c10      	lsrs	r0, r2, #16
 8000254:	434b      	muls	r3, r1
 8000256:	4365      	muls	r5, r4
 8000258:	4341      	muls	r1, r0
 800025a:	4360      	muls	r0, r4
 800025c:	0c2c      	lsrs	r4, r5, #16
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	1824      	adds	r4, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	42a3      	cmp	r3, r4
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	@ 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4356      	muls	r6, r2
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	042d      	lsls	r5, r5, #16
 800027a:	0c2d      	lsrs	r5, r5, #16
 800027c:	1989      	adds	r1, r1, r6
 800027e:	4463      	add	r3, ip
 8000280:	0424      	lsls	r4, r4, #16
 8000282:	1960      	adds	r0, r4, r5
 8000284:	18c9      	adds	r1, r1, r3
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			@ (mov r8, r8)

08000290 <randomize_apple>:
#include <stdint.h>
#include <stdlib.h>

 uint8_t snake_length = 4;

void randomize_apple(uint8_t *frog_x, uint8_t *frog_y) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
    *frog_x = (rand() % 16)+1;
 800029a:	f004 f84b 	bl	8004334 <rand>
 800029e:	0003      	movs	r3, r0
 80002a0:	4a10      	ldr	r2, [pc, #64]	@ (80002e4 <randomize_apple+0x54>)
 80002a2:	4013      	ands	r3, r2
 80002a4:	d504      	bpl.n	80002b0 <randomize_apple+0x20>
 80002a6:	3b01      	subs	r3, #1
 80002a8:	2210      	movs	r2, #16
 80002aa:	4252      	negs	r2, r2
 80002ac:	4313      	orrs	r3, r2
 80002ae:	3301      	adds	r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	3301      	adds	r3, #1
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	701a      	strb	r2, [r3, #0]
    *frog_y = (rand() % 16)+1;
 80002ba:	f004 f83b 	bl	8004334 <rand>
 80002be:	0003      	movs	r3, r0
 80002c0:	4a08      	ldr	r2, [pc, #32]	@ (80002e4 <randomize_apple+0x54>)
 80002c2:	4013      	ands	r3, r2
 80002c4:	d504      	bpl.n	80002d0 <randomize_apple+0x40>
 80002c6:	3b01      	subs	r3, #1
 80002c8:	2210      	movs	r2, #16
 80002ca:	4252      	negs	r2, r2
 80002cc:	4313      	orrs	r3, r2
 80002ce:	3301      	adds	r3, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	701a      	strb	r2, [r3, #0]
}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b002      	add	sp, #8
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	8000000f 	.word	0x8000000f

080002e8 <move_snake>:



uint8_t move_snake(uint8_t command, uint8_t *frog_x, uint8_t *frog_y, uint8_t *payload) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	@ 0x28
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60b9      	str	r1, [r7, #8]
 80002f0:	607a      	str	r2, [r7, #4]
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	210f      	movs	r1, #15
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	1c02      	adds	r2, r0, #0
 80002fa:	701a      	strb	r2, [r3, #0]
    	static uint8_t last_command = 0;  // 0 — змійка стоїть
        static uint8_t x_buffer[128] = {10, 11, 12, 13};
        static uint8_t y_buffer[128] = {15, 15, 15, 15};

        // Заборона руху в зворотному напрямку
        if ((command == 1 && last_command == 2) || (command == 2 && last_command == 1) ||
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d103      	bne.n	800030c <move_snake+0x24>
 8000304:	4bb5      	ldr	r3, [pc, #724]	@ (80005dc <move_snake+0x2f4>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b02      	cmp	r3, #2
 800030a:	d01a      	beq.n	8000342 <move_snake+0x5a>
 800030c:	230f      	movs	r3, #15
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b02      	cmp	r3, #2
 8000314:	d103      	bne.n	800031e <move_snake+0x36>
 8000316:	4bb1      	ldr	r3, [pc, #708]	@ (80005dc <move_snake+0x2f4>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d011      	beq.n	8000342 <move_snake+0x5a>
 800031e:	230f      	movs	r3, #15
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d103      	bne.n	8000330 <move_snake+0x48>
            (command == 3 && last_command == 4) || (command == 4 && last_command == 3)) {
 8000328:	4bac      	ldr	r3, [pc, #688]	@ (80005dc <move_snake+0x2f4>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b04      	cmp	r3, #4
 800032e:	d008      	beq.n	8000342 <move_snake+0x5a>
 8000330:	230f      	movs	r3, #15
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b04      	cmp	r3, #4
 8000338:	d109      	bne.n	800034e <move_snake+0x66>
 800033a:	4ba8      	ldr	r3, [pc, #672]	@ (80005dc <move_snake+0x2f4>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b03      	cmp	r3, #3
 8000340:	d105      	bne.n	800034e <move_snake+0x66>
            command = last_command;
 8000342:	230f      	movs	r3, #15
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	4aa5      	ldr	r2, [pc, #660]	@ (80005dc <move_snake+0x2f4>)
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	701a      	strb	r2, [r3, #0]
 800034c:	e008      	b.n	8000360 <move_snake+0x78>
        } else if (command != 0) {
 800034e:	220f      	movs	r2, #15
 8000350:	18bb      	adds	r3, r7, r2
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d003      	beq.n	8000360 <move_snake+0x78>
            last_command = command;
 8000358:	4ba0      	ldr	r3, [pc, #640]	@ (80005dc <move_snake+0x2f4>)
 800035a:	18ba      	adds	r2, r7, r2
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	701a      	strb	r2, [r3, #0]
        }

        // Рухаєм змійку тільки якщо команда не 0
        if (last_command != 0) {
 8000360:	4b9e      	ldr	r3, [pc, #632]	@ (80005dc <move_snake+0x2f4>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d046      	beq.n	80003f6 <move_snake+0x10e>
            for (int i = snake_length - 1; i > 0; i--) {
 8000368:	4b9d      	ldr	r3, [pc, #628]	@ (80005e0 <move_snake+0x2f8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000370:	e014      	b.n	800039c <move_snake+0xb4>
                x_buffer[i] = x_buffer[i - 1];
 8000372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000374:	3b01      	subs	r3, #1
 8000376:	4a9b      	ldr	r2, [pc, #620]	@ (80005e4 <move_snake+0x2fc>)
 8000378:	5cd1      	ldrb	r1, [r2, r3]
 800037a:	4a9a      	ldr	r2, [pc, #616]	@ (80005e4 <move_snake+0x2fc>)
 800037c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800037e:	18d3      	adds	r3, r2, r3
 8000380:	1c0a      	adds	r2, r1, #0
 8000382:	701a      	strb	r2, [r3, #0]
                y_buffer[i] = y_buffer[i - 1];
 8000384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000386:	3b01      	subs	r3, #1
 8000388:	4a97      	ldr	r2, [pc, #604]	@ (80005e8 <move_snake+0x300>)
 800038a:	5cd1      	ldrb	r1, [r2, r3]
 800038c:	4a96      	ldr	r2, [pc, #600]	@ (80005e8 <move_snake+0x300>)
 800038e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000390:	18d3      	adds	r3, r2, r3
 8000392:	1c0a      	adds	r2, r1, #0
 8000394:	701a      	strb	r2, [r3, #0]
            for (int i = snake_length - 1; i > 0; i--) {
 8000396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000398:	3b01      	subs	r3, #1
 800039a:	627b      	str	r3, [r7, #36]	@ 0x24
 800039c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800039e:	2b00      	cmp	r3, #0
 80003a0:	dce7      	bgt.n	8000372 <move_snake+0x8a>
            }

            // Обробка команд руху
            switch (last_command) {
 80003a2:	4b8e      	ldr	r3, [pc, #568]	@ (80005dc <move_snake+0x2f4>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d01d      	beq.n	80003e6 <move_snake+0xfe>
 80003aa:	dc23      	bgt.n	80003f4 <move_snake+0x10c>
 80003ac:	2b03      	cmp	r3, #3
 80003ae:	d013      	beq.n	80003d8 <move_snake+0xf0>
 80003b0:	dc20      	bgt.n	80003f4 <move_snake+0x10c>
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d002      	beq.n	80003bc <move_snake+0xd4>
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d007      	beq.n	80003ca <move_snake+0xe2>
                case 1: y_buffer[0]--; break;  // Вгору
                case 2: y_buffer[0]++; break;  // Вниз
                case 3: x_buffer[0]--; break;  // Вліво
                case 4: x_buffer[0]++; break;  // Вправо
                default: break;
 80003ba:	e01b      	b.n	80003f4 <move_snake+0x10c>
                case 1: y_buffer[0]--; break;  // Вгору
 80003bc:	4b8a      	ldr	r3, [pc, #552]	@ (80005e8 <move_snake+0x300>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	4b88      	ldr	r3, [pc, #544]	@ (80005e8 <move_snake+0x300>)
 80003c6:	701a      	strb	r2, [r3, #0]
 80003c8:	e015      	b.n	80003f6 <move_snake+0x10e>
                case 2: y_buffer[0]++; break;  // Вниз
 80003ca:	4b87      	ldr	r3, [pc, #540]	@ (80005e8 <move_snake+0x300>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b85      	ldr	r3, [pc, #532]	@ (80005e8 <move_snake+0x300>)
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	e00e      	b.n	80003f6 <move_snake+0x10e>
                case 3: x_buffer[0]--; break;  // Вліво
 80003d8:	4b82      	ldr	r3, [pc, #520]	@ (80005e4 <move_snake+0x2fc>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b80      	ldr	r3, [pc, #512]	@ (80005e4 <move_snake+0x2fc>)
 80003e2:	701a      	strb	r2, [r3, #0]
 80003e4:	e007      	b.n	80003f6 <move_snake+0x10e>
                case 4: x_buffer[0]++; break;  // Вправо
 80003e6:	4b7f      	ldr	r3, [pc, #508]	@ (80005e4 <move_snake+0x2fc>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	3301      	adds	r3, #1
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b7d      	ldr	r3, [pc, #500]	@ (80005e4 <move_snake+0x2fc>)
 80003f0:	701a      	strb	r2, [r3, #0]
 80003f2:	e000      	b.n	80003f6 <move_snake+0x10e>
                default: break;
 80003f4:	46c0      	nop			@ (mov r8, r8)
            }
        }

    for (int i = 0; i < snake_length; i++) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	623b      	str	r3, [r7, #32]
 80003fa:	e030      	b.n	800045e <move_snake+0x176>
    if (x_buffer[i] >= 17) x_buffer[i] = 1;
 80003fc:	4a79      	ldr	r2, [pc, #484]	@ (80005e4 <move_snake+0x2fc>)
 80003fe:	6a3b      	ldr	r3, [r7, #32]
 8000400:	18d3      	adds	r3, r2, r3
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b10      	cmp	r3, #16
 8000406:	d905      	bls.n	8000414 <move_snake+0x12c>
 8000408:	4a76      	ldr	r2, [pc, #472]	@ (80005e4 <move_snake+0x2fc>)
 800040a:	6a3b      	ldr	r3, [r7, #32]
 800040c:	18d3      	adds	r3, r2, r3
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]
 8000412:	e00a      	b.n	800042a <move_snake+0x142>
        else if (x_buffer[i] < 1) x_buffer[i] = 16;
 8000414:	4a73      	ldr	r2, [pc, #460]	@ (80005e4 <move_snake+0x2fc>)
 8000416:	6a3b      	ldr	r3, [r7, #32]
 8000418:	18d3      	adds	r3, r2, r3
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d104      	bne.n	800042a <move_snake+0x142>
 8000420:	4a70      	ldr	r2, [pc, #448]	@ (80005e4 <move_snake+0x2fc>)
 8000422:	6a3b      	ldr	r3, [r7, #32]
 8000424:	18d3      	adds	r3, r2, r3
 8000426:	2210      	movs	r2, #16
 8000428:	701a      	strb	r2, [r3, #0]

    if (y_buffer[i] >= 17) y_buffer[i] = 1;
 800042a:	4a6f      	ldr	r2, [pc, #444]	@ (80005e8 <move_snake+0x300>)
 800042c:	6a3b      	ldr	r3, [r7, #32]
 800042e:	18d3      	adds	r3, r2, r3
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b10      	cmp	r3, #16
 8000434:	d905      	bls.n	8000442 <move_snake+0x15a>
 8000436:	4a6c      	ldr	r2, [pc, #432]	@ (80005e8 <move_snake+0x300>)
 8000438:	6a3b      	ldr	r3, [r7, #32]
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	e00a      	b.n	8000458 <move_snake+0x170>
        else if (y_buffer[i] < 1) y_buffer[i] = 16;
 8000442:	4a69      	ldr	r2, [pc, #420]	@ (80005e8 <move_snake+0x300>)
 8000444:	6a3b      	ldr	r3, [r7, #32]
 8000446:	18d3      	adds	r3, r2, r3
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d104      	bne.n	8000458 <move_snake+0x170>
 800044e:	4a66      	ldr	r2, [pc, #408]	@ (80005e8 <move_snake+0x300>)
 8000450:	6a3b      	ldr	r3, [r7, #32]
 8000452:	18d3      	adds	r3, r2, r3
 8000454:	2210      	movs	r2, #16
 8000456:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake_length; i++) {
 8000458:	6a3b      	ldr	r3, [r7, #32]
 800045a:	3301      	adds	r3, #1
 800045c:	623b      	str	r3, [r7, #32]
 800045e:	4b60      	ldr	r3, [pc, #384]	@ (80005e0 <move_snake+0x2f8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	001a      	movs	r2, r3
 8000464:	6a3b      	ldr	r3, [r7, #32]
 8000466:	4293      	cmp	r3, r2
 8000468:	dbc8      	blt.n	80003fc <move_snake+0x114>
    }

    // Перевірка на "з'їдання" яблука
    if (x_buffer[0] == *frog_x && y_buffer[0] == *frog_y) {	//перевірка на з'їдене яблуко
 800046a:	4b5e      	ldr	r3, [pc, #376]	@ (80005e4 <move_snake+0x2fc>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	429a      	cmp	r2, r3
 8000474:	d16e      	bne.n	8000554 <move_snake+0x26c>
 8000476:	4b5c      	ldr	r3, [pc, #368]	@ (80005e8 <move_snake+0x300>)
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	429a      	cmp	r2, r3
 8000480:	d168      	bne.n	8000554 <move_snake+0x26c>
            snake_length++;
 8000482:	4b57      	ldr	r3, [pc, #348]	@ (80005e0 <move_snake+0x2f8>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	3301      	adds	r3, #1
 8000488:	b2da      	uxtb	r2, r3
 800048a:	4b55      	ldr	r3, [pc, #340]	@ (80005e0 <move_snake+0x2f8>)
 800048c:	701a      	strb	r2, [r3, #0]
            x_buffer[snake_length - 1] = x_buffer[snake_length - 2];
 800048e:	4b54      	ldr	r3, [pc, #336]	@ (80005e0 <move_snake+0x2f8>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	1e9a      	subs	r2, r3, #2
 8000494:	4b52      	ldr	r3, [pc, #328]	@ (80005e0 <move_snake+0x2f8>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	3b01      	subs	r3, #1
 800049a:	4952      	ldr	r1, [pc, #328]	@ (80005e4 <move_snake+0x2fc>)
 800049c:	5c89      	ldrb	r1, [r1, r2]
 800049e:	4a51      	ldr	r2, [pc, #324]	@ (80005e4 <move_snake+0x2fc>)
 80004a0:	54d1      	strb	r1, [r2, r3]
            y_buffer[snake_length - 1] = y_buffer[snake_length - 2];
 80004a2:	4b4f      	ldr	r3, [pc, #316]	@ (80005e0 <move_snake+0x2f8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	1e9a      	subs	r2, r3, #2
 80004a8:	4b4d      	ldr	r3, [pc, #308]	@ (80005e0 <move_snake+0x2f8>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	494e      	ldr	r1, [pc, #312]	@ (80005e8 <move_snake+0x300>)
 80004b0:	5c89      	ldrb	r1, [r1, r2]
 80004b2:	4a4d      	ldr	r2, [pc, #308]	@ (80005e8 <move_snake+0x300>)
 80004b4:	54d1      	strb	r1, [r2, r3]
            legit = 0;
 80004b6:	4b4d      	ldr	r3, [pc, #308]	@ (80005ec <move_snake+0x304>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
        	for (uint8_t i = 0; i < snake_length; i++) {
 80004bc:	231f      	movs	r3, #31
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	e03f      	b.n	8000546 <move_snake+0x25e>
        		i++;
 80004c6:	211f      	movs	r1, #31
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	3201      	adds	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
        		do {
        			randomize_apple(frog_x, frog_y);
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff fed9 	bl	8000290 <randomize_apple>
        		    legit = 1;
 80004de:	4b43      	ldr	r3, [pc, #268]	@ (80005ec <move_snake+0x304>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]

        		    for (uint8_t i = 0; i < snake_length; i++) {
 80004e4:	231e      	movs	r3, #30
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	e01a      	b.n	8000524 <move_snake+0x23c>
        		        if (x_buffer[i] == *frog_x && y_buffer[i] == *frog_y) {
 80004ee:	211e      	movs	r1, #30
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4a3b      	ldr	r2, [pc, #236]	@ (80005e4 <move_snake+0x2fc>)
 80004f6:	5cd2      	ldrb	r2, [r2, r3]
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d10b      	bne.n	8000518 <move_snake+0x230>
 8000500:	187b      	adds	r3, r7, r1
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4a38      	ldr	r2, [pc, #224]	@ (80005e8 <move_snake+0x300>)
 8000506:	5cd2      	ldrb	r2, [r2, r3]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d103      	bne.n	8000518 <move_snake+0x230>
        		            legit = 0;
 8000510:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <move_snake+0x304>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
        		            break;
 8000516:	e00c      	b.n	8000532 <move_snake+0x24a>
        		    for (uint8_t i = 0; i < snake_length; i++) {
 8000518:	211e      	movs	r1, #30
 800051a:	187b      	adds	r3, r7, r1
 800051c:	781a      	ldrb	r2, [r3, #0]
 800051e:	187b      	adds	r3, r7, r1
 8000520:	3201      	adds	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	4b2e      	ldr	r3, [pc, #184]	@ (80005e0 <move_snake+0x2f8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	221e      	movs	r2, #30
 800052a:	18ba      	adds	r2, r7, r2
 800052c:	7812      	ldrb	r2, [r2, #0]
 800052e:	429a      	cmp	r2, r3
 8000530:	d3dd      	bcc.n	80004ee <move_snake+0x206>
        		        }
        		    }
        		} while (!legit);
 8000532:	4b2e      	ldr	r3, [pc, #184]	@ (80005ec <move_snake+0x304>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0cb      	beq.n	80004d2 <move_snake+0x1ea>
        	for (uint8_t i = 0; i < snake_length; i++) {
 800053a:	211f      	movs	r1, #31
 800053c:	187b      	adds	r3, r7, r1
 800053e:	781a      	ldrb	r2, [r3, #0]
 8000540:	187b      	adds	r3, r7, r1
 8000542:	3201      	adds	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <move_snake+0x2f8>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	221f      	movs	r2, #31
 800054c:	18ba      	adds	r2, r7, r2
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d3b8      	bcc.n	80004c6 <move_snake+0x1de>
        	        }
            if (snake_length > 255) snake_length = 255;
    }

    for (int i = 1; i < snake_length; i++) {
 8000554:	2301      	movs	r3, #1
 8000556:	61bb      	str	r3, [r7, #24]
 8000558:	e014      	b.n	8000584 <move_snake+0x29c>
      if (x_buffer[0] == x_buffer[i] && y_buffer[0] == y_buffer[i]) {
 800055a:	4b22      	ldr	r3, [pc, #136]	@ (80005e4 <move_snake+0x2fc>)
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4921      	ldr	r1, [pc, #132]	@ (80005e4 <move_snake+0x2fc>)
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	18cb      	adds	r3, r1, r3
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d109      	bne.n	800057e <move_snake+0x296>
 800056a:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <move_snake+0x300>)
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	491e      	ldr	r1, [pc, #120]	@ (80005e8 <move_snake+0x300>)
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	18cb      	adds	r3, r1, r3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	d101      	bne.n	800057e <move_snake+0x296>
            return 8;  // Змійка зіткнулась сама з собою
 800057a:	2308      	movs	r3, #8
 800057c:	e029      	b.n	80005d2 <move_snake+0x2ea>
    for (int i = 1; i < snake_length; i++) {
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	3301      	adds	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <move_snake+0x2f8>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	001a      	movs	r2, r3
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	4293      	cmp	r3, r2
 800058e:	dbe4      	blt.n	800055a <move_snake+0x272>
         }
      }

    // Формуємо payload для відображення змійки
    for (int i = 0; i < snake_length; i++) {
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e016      	b.n	80005c4 <move_snake+0x2dc>
        payload[2 * i] = x_buffer[i];
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	001a      	movs	r2, r3
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	4910      	ldr	r1, [pc, #64]	@ (80005e4 <move_snake+0x2fc>)
 80005a2:	697a      	ldr	r2, [r7, #20]
 80005a4:	188a      	adds	r2, r1, r2
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	701a      	strb	r2, [r3, #0]
        payload[2 * i + 1] = y_buffer[i];
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	3301      	adds	r3, #1
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	18d3      	adds	r3, r2, r3
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <move_snake+0x300>)
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	188a      	adds	r2, r1, r2
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake_length; i++) {
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <move_snake+0x2f8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	001a      	movs	r2, r3
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	4293      	cmp	r3, r2
 80005ce:	dbe2      	blt.n	8000596 <move_snake+0x2ae>
    }

    return 0;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	0018      	movs	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b00a      	add	sp, #40	@ 0x28
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	2000018c 	.word	0x2000018c
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20000084 	.word	0x20000084
 80005ec:	20000104 	.word	0x20000104

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fe6e 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f81e 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f920 	bl	8000840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f000 f900 	bl	8000804 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000604:	f000 f8ce 	bl	80007a4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000608:	f000 f876 	bl	80006f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart1,rx_buffer,sizeof(rx_buffer));
 800060c:	4906      	ldr	r1, [pc, #24]	@ (8000628 <main+0x38>)
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <main+0x3c>)
 8000610:	2205      	movs	r2, #5
 8000612:	0018      	movs	r0, r3
 8000614:	f002 fdbb 	bl	800318e <HAL_UART_Receive_DMA>
  randomize_apple(&frog_x, &frog_y);
 8000618:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <main+0x40>)
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <main+0x44>)
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fe36 	bl	8000290 <randomize_apple>
  //simulate_snake_game();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	e7fd      	b.n	8000624 <main+0x34>
 8000628:	200003a4 	.word	0x200003a4
 800062c:	200001d8 	.word	0x200001d8
 8000630:	200004b1 	.word	0x200004b1
 8000634:	200004b0 	.word	0x200004b0

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b097      	sub	sp, #92	@ 0x5c
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	2428      	movs	r4, #40	@ 0x28
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2330      	movs	r3, #48	@ 0x30
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f003 ffc1 	bl	80045d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064e:	2318      	movs	r3, #24
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f003 ffb9 	bl	80045d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	2314      	movs	r3, #20
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f003 ffb2 	bl	80045d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	0021      	movs	r1, r4
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2201      	movs	r2, #1
 8000672:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2201      	movs	r2, #1
 8000678:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2202      	movs	r2, #2
 800067e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	0252      	lsls	r2, r2, #9
 8000686:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	0352      	lsls	r2, r2, #13
 800068e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	187b      	adds	r3, r7, r1
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fb01 	bl	8001ca0 <HAL_RCC_OscConfig>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006a2:	f000 fa59 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	2118      	movs	r1, #24
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2207      	movs	r2, #7
 80006ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2202      	movs	r2, #2
 80006b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2101      	movs	r1, #1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fe05 	bl	80022d4 <HAL_RCC_ClockConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f000 fa43 	bl	8000b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 ff3b 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006ea:	f000 fa35 	bl	8000b58 <Error_Handler>
  }
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b017      	add	sp, #92	@ 0x5c
 80006f4:	bd90      	pop	{r4, r7, pc}
	...

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	2308      	movs	r3, #8
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	0018      	movs	r0, r3
 8000704:	2310      	movs	r3, #16
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f003 ff61 	bl	80045d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	003b      	movs	r3, r7
 8000710:	0018      	movs	r0, r3
 8000712:	2308      	movs	r3, #8
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f003 ff5a 	bl	80045d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_TIM2_Init+0xa0>)
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	05d2      	lsls	r2, r2, #23
 8000722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_TIM2_Init+0xa0>)
 8000726:	4a1d      	ldr	r2, [pc, #116]	@ (800079c <MX_TIM2_Init+0xa4>)
 8000728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_TIM2_Init+0xa0>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000730:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_TIM2_Init+0xa0>)
 8000732:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <MX_TIM2_Init+0xa8>)
 8000734:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_TIM2_Init+0xa0>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_TIM2_Init+0xa0>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_TIM2_Init+0xa0>)
 8000744:	0018      	movs	r0, r3
 8000746:	f001 ffe7 	bl	8002718 <HAL_TIM_Base_Init>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800074e:	f000 fa03 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000752:	2108      	movs	r1, #8
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	0152      	lsls	r2, r2, #5
 800075a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800075c:	187a      	adds	r2, r7, r1
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_TIM2_Init+0xa0>)
 8000760:	0011      	movs	r1, r2
 8000762:	0018      	movs	r0, r3
 8000764:	f002 f996 	bl	8002a94 <HAL_TIM_ConfigClockSource>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800076c:	f000 f9f4 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	003b      	movs	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	003b      	movs	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077c:	003a      	movs	r2, r7
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_TIM2_Init+0xa0>)
 8000780:	0011      	movs	r1, r2
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fba2 	bl	8002ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800078c:	f000 f9e4 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b006      	add	sp, #24
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000190 	.word	0x20000190
 800079c:	00002edf 	.word	0x00002edf
 80007a0:	000003e7 	.word	0x000003e7

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	@ (8000800 <MX_USART1_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007b0:	2296      	movs	r2, #150	@ 0x96
 80007b2:	0192      	lsls	r2, r2, #6
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <MX_USART1_UART_Init+0x58>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fbdd 	bl	8002fa8 <HAL_UART_Init>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f9b1 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200001d8 	.word	0x200001d8
 8000800:	40013800 	.word	0x40013800

08000804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_DMA_Init+0x38>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_DMA_Init+0x38>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_DMA_Init+0x38>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	200a      	movs	r0, #10
 8000828:	f000 fe64 	bl	80014f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fe76 	bl	800151e <HAL_NVIC_EnableIRQ>

}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	40021000 	.word	0x40021000

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b089      	sub	sp, #36	@ 0x24
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	240c      	movs	r4, #12
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0018      	movs	r0, r3
 800084c:	2314      	movs	r3, #20
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f003 febd 	bl	80045d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000856:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 800085c:	2180      	movs	r1, #128	@ 0x80
 800085e:	03c9      	lsls	r1, r1, #15
 8000860:	430a      	orrs	r2, r1
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 8000866:	695a      	ldr	r2, [r3, #20]
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	03db      	lsls	r3, r3, #15
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 8000874:	695a      	ldr	r2, [r3, #20]
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 8000878:	2180      	movs	r1, #128	@ 0x80
 800087a:	0309      	lsls	r1, r1, #12
 800087c:	430a      	orrs	r2, r1
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	2380      	movs	r3, #128	@ 0x80
 8000886:	031b      	lsls	r3, r3, #12
 8000888:	4013      	ands	r3, r2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 8000890:	695a      	ldr	r2, [r3, #20]
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	0289      	lsls	r1, r1, #10
 8000898:	430a      	orrs	r2, r1
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_GPIO_Init+0xa8>)
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	2380      	movs	r3, #128	@ 0x80
 80008a2:	029b      	lsls	r3, r3, #10
 80008a4:	4013      	ands	r3, r2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008aa:	23c0      	movs	r3, #192	@ 0xc0
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	480f      	ldr	r0, [pc, #60]	@ (80008ec <MX_GPIO_Init+0xac>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	0019      	movs	r1, r3
 80008b4:	f001 f9d6 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	22c0      	movs	r2, #192	@ 0xc0
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2201      	movs	r2, #1
 80008c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <MX_GPIO_Init+0xac>)
 80008d6:	0019      	movs	r1, r3
 80008d8:	0010      	movs	r0, r2
 80008da:	f001 f853 	bl	8001984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b009      	add	sp, #36	@ 0x24
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			@ (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000800 	.word	0x48000800

080008f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a47      	ldr	r2, [pc, #284]	@ (8000a1c <HAL_UART_RxCpltCallback+0x12c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d000      	beq.n	8000904 <HAL_UART_RxCpltCallback+0x14>
 8000902:	e086      	b.n	8000a12 <HAL_UART_RxCpltCallback+0x122>

    	uint8_t cmd_code = rx_buffer[1];
 8000904:	210f      	movs	r1, #15
 8000906:	187b      	adds	r3, r7, r1
 8000908:	4a45      	ldr	r2, [pc, #276]	@ (8000a20 <HAL_UART_RxCpltCallback+0x130>)
 800090a:	7852      	ldrb	r2, [r2, #1]
 800090c:	701a      	strb	r2, [r3, #0]
    	second_byte = rx_buffer[2];
 800090e:	4b44      	ldr	r3, [pc, #272]	@ (8000a20 <HAL_UART_RxCpltCallback+0x130>)
 8000910:	789a      	ldrb	r2, [r3, #2]
 8000912:	4b44      	ldr	r3, [pc, #272]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 8000914:	701a      	strb	r2, [r3, #0]
    	switch(cmd_code){
 8000916:	187b      	adds	r3, r7, r1
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d002      	beq.n	8000924 <HAL_UART_RxCpltCallback+0x34>
 800091e:	2b03      	cmp	r3, #3
 8000920:	d032      	beq.n	8000988 <HAL_UART_RxCpltCallback+0x98>
 8000922:	e070      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x116>
    		case(1):
			uint8_t Decoder_receive = decode_frame(rx_buffer,sizeof(rx_buffer));
 8000924:	4b3e      	ldr	r3, [pc, #248]	@ (8000a20 <HAL_UART_RxCpltCallback+0x130>)
 8000926:	2105      	movs	r1, #5
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fa98 	bl	8000e5e <decode_frame>
 800092e:	0002      	movs	r2, r0
 8000930:	210e      	movs	r1, #14
 8000932:	187b      	adds	r3, r7, r1
 8000934:	701a      	strb	r2, [r3, #0]
    		if (Decoder_receive==0 && second_byte == 1) {
 8000936:	187b      	adds	r3, r7, r1
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d117      	bne.n	800096e <HAL_UART_RxCpltCallback+0x7e>
 800093e:	4b39      	ldr	r3, [pc, #228]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d113      	bne.n	800096e <HAL_UART_RxCpltCallback+0x7e>
    			uint8_t response[5] = {0x7E,0x01,0x02,0xD1,0x93};
 8000946:	2008      	movs	r0, #8
 8000948:	183b      	adds	r3, r7, r0
 800094a:	4a37      	ldr	r2, [pc, #220]	@ (8000a28 <HAL_UART_RxCpltCallback+0x138>)
 800094c:	6811      	ldr	r1, [r2, #0]
 800094e:	6019      	str	r1, [r3, #0]
 8000950:	7912      	ldrb	r2, [r2, #4]
 8000952:	711a      	strb	r2, [r3, #4]
    		    HAL_UART_Transmit(&huart1, response, sizeof(response), 100);
 8000954:	1839      	adds	r1, r7, r0
 8000956:	4835      	ldr	r0, [pc, #212]	@ (8000a2c <HAL_UART_RxCpltCallback+0x13c>)
 8000958:	2364      	movs	r3, #100	@ 0x64
 800095a:	2205      	movs	r2, #5
 800095c:	f002 fb78 	bl	8003050 <HAL_UART_Transmit>
    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8,GPIO_PIN_SET);
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4832      	ldr	r0, [pc, #200]	@ (8000a30 <HAL_UART_RxCpltCallback+0x140>)
 8000966:	2201      	movs	r2, #1
 8000968:	0019      	movs	r1, r3
 800096a:	f001 f97b 	bl	8001c64 <HAL_GPIO_WritePin>

    		}
    		if (Decoder_receive==4) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET);
 800096e:	230e      	movs	r3, #14
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b04      	cmp	r3, #4
 8000976:	d145      	bne.n	8000a04 <HAL_UART_RxCpltCallback+0x114>
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	482c      	ldr	r0, [pc, #176]	@ (8000a30 <HAL_UART_RxCpltCallback+0x140>)
 800097e:	2201      	movs	r2, #1
 8000980:	0019      	movs	r1, r3
 8000982:	f001 f96f 	bl	8001c64 <HAL_GPIO_WritePin>
    		break;
 8000986:	e03d      	b.n	8000a04 <HAL_UART_RxCpltCallback+0x114>

    		case(3):
				 if (second_byte == 0) {
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d106      	bne.n	800099e <HAL_UART_RxCpltCallback+0xae>
					 im_single_packet = 1;
 8000990:	4b28      	ldr	r3, [pc, #160]	@ (8000a34 <HAL_UART_RxCpltCallback+0x144>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
		             HAL_TIM_Base_Start_IT(&htim2);
 8000996:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <HAL_UART_RxCpltCallback+0x148>)
 8000998:	0018      	movs	r0, r3
 800099a:	f001 ff0d 	bl	80027b8 <HAL_TIM_Base_Start_IT>
		            }

    				if (second_byte == 5 && flag == 0) {
 800099e:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d10a      	bne.n	80009bc <HAL_UART_RxCpltCallback+0xcc>
 80009a6:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <HAL_UART_RxCpltCallback+0x14c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d106      	bne.n	80009bc <HAL_UART_RxCpltCallback+0xcc>
    					HAL_TIM_Base_Stop_IT(&htim2);
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <HAL_UART_RxCpltCallback+0x148>)
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 ff53 	bl	800285c <HAL_TIM_Base_Stop_IT>
    					flag = 1;
 80009b6:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <HAL_UART_RxCpltCallback+0x14c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
    				}
    				if (second_byte == 5 && flag == 1 ) {
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b05      	cmp	r3, #5
 80009c2:	d10a      	bne.n	80009da <HAL_UART_RxCpltCallback+0xea>
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <HAL_UART_RxCpltCallback+0x14c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d106      	bne.n	80009da <HAL_UART_RxCpltCallback+0xea>
    				   	HAL_TIM_Base_Start_IT(&htim2);
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <HAL_UART_RxCpltCallback+0x148>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 fef2 	bl	80027b8 <HAL_TIM_Base_Start_IT>
     					flag = 0;
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <HAL_UART_RxCpltCallback+0x14c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
    				   }

    				if (second_byte == 1 || second_byte == 2 || second_byte == 3 || second_byte == 4) {
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d00b      	beq.n	80009fa <HAL_UART_RxCpltCallback+0x10a>
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d007      	beq.n	80009fa <HAL_UART_RxCpltCallback+0x10a>
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d003      	beq.n	80009fa <HAL_UART_RxCpltCallback+0x10a>
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <HAL_UART_RxCpltCallback+0x134>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d105      	bne.n	8000a06 <HAL_UART_RxCpltCallback+0x116>
    					HAL_TIM_Base_Start_IT(&htim2);
 80009fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <HAL_UART_RxCpltCallback+0x148>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 fedb 	bl	80027b8 <HAL_TIM_Base_Start_IT>
 8000a02:	e000      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x116>
    		break;
 8000a04:	46c0      	nop			@ (mov r8, r8)
    				}
    		}
    	 HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer));
 8000a06:	4906      	ldr	r1, [pc, #24]	@ (8000a20 <HAL_UART_RxCpltCallback+0x130>)
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_UART_RxCpltCallback+0x13c>)
 8000a0a:	2205      	movs	r2, #5
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fbbe 	bl	800318e <HAL_UART_Receive_DMA>

    }

}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b004      	add	sp, #16
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	200003a4 	.word	0x200003a4
 8000a24:	200004ac 	.word	0x200004ac
 8000a28:	0800537c 	.word	0x0800537c
 8000a2c:	200001d8 	.word	0x200001d8
 8000a30:	48000800 	.word	0x48000800
 8000a34:	200004ae 	.word	0x200004ae
 8000a38:	20000190 	.word	0x20000190
 8000a3c:	200004af 	.word	0x200004af

08000a40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	05db      	lsls	r3, r3, #23
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d139      	bne.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x88>
        time_count++;
 8000a54:	4b35      	ldr	r3, [pc, #212]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b33      	ldr	r3, [pc, #204]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a5e:	701a      	strb	r2, [r3, #0]


        if (im_single_packet) {
 8000a60:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d02f      	beq.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x88>

            uint8_t initial_snake_payload[8] = {10, 15, 11, 15, 12, 15, 13, 15};// стартовий пакет змійки(потрібно узгодити)
 8000a68:	260c      	movs	r6, #12
 8000a6a:	19bb      	adds	r3, r7, r6
 8000a6c:	4a31      	ldr	r2, [pc, #196]	@ (8000b34 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a6e:	ca03      	ldmia	r2!, {r0, r1}
 8000a70:	c303      	stmia	r3!, {r0, r1}
            move_snake(second_byte, &frog_x, &frog_y, initial_snake_payload);
 8000a72:	4b31      	ldr	r3, [pc, #196]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000a74:	7818      	ldrb	r0, [r3, #0]
 8000a76:	19bb      	adds	r3, r7, r6
 8000a78:	4a30      	ldr	r2, [pc, #192]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a7a:	4931      	ldr	r1, [pc, #196]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a7c:	f7ff fc34 	bl	80002e8 <move_snake>
            uint8_t frame_length = encode_frame_snake(initial_snake_payload, snake_length*2, tx_buffer, 0x02, frog_x, frog_y);
 8000a80:	4b30      	ldr	r3, [pc, #192]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	18db      	adds	r3, r3, r3
 8000a86:	b2d9      	uxtb	r1, r3
 8000a88:	4b2d      	ldr	r3, [pc, #180]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a8e:	7812      	ldrb	r2, [r2, #0]
 8000a90:	2017      	movs	r0, #23
 8000a92:	183c      	adds	r4, r7, r0
 8000a94:	4d2c      	ldr	r5, [pc, #176]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000a96:	19b8      	adds	r0, r7, r6
 8000a98:	9201      	str	r2, [sp, #4]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	002a      	movs	r2, r5
 8000aa0:	f000 f952 	bl	8000d48 <encode_frame_snake>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	7023      	strb	r3, [r4, #0]
            HAL_UART_Transmit(&huart1, tx_buffer, frame_length, 100);
 8000aa8:	2017      	movs	r0, #23
 8000aaa:	183b      	adds	r3, r7, r0
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4925      	ldr	r1, [pc, #148]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ab2:	4826      	ldr	r0, [pc, #152]	@ (8000b4c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ab4:	2364      	movs	r3, #100	@ 0x64
 8000ab6:	f002 facb 	bl	8003050 <HAL_UART_Transmit>
            HAL_TIM_Base_Stop_IT(&htim2);
 8000aba:	4b25      	ldr	r3, [pc, #148]	@ (8000b50 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 fecd 	bl	800285c <HAL_TIM_Base_Stop_IT>
            im_single_packet = 0;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
            }
        }

                if (time_count > 1 && !im_single_packet) {
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d929      	bls.n	8000b24 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d125      	bne.n	8000b24 <HAL_TIM_PeriodElapsedCallback+0xe4>
                    move_snake(second_byte, &frog_x, &frog_y, payload);
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000ada:	7818      	ldrb	r0, [r3, #0]
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ade:	4a17      	ldr	r2, [pc, #92]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ae0:	4917      	ldr	r1, [pc, #92]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ae2:	f7ff fc01 	bl	80002e8 <move_snake>
                    uint8_t frame_length = encode_frame_snake(payload, snake_length*2, tx_buffer, 0x02, frog_x, frog_y);
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	18db      	adds	r3, r3, r3
 8000aec:	b2d9      	uxtb	r1, r3
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000af4:	7812      	ldrb	r2, [r2, #0]
 8000af6:	2616      	movs	r6, #22
 8000af8:	19bc      	adds	r4, r7, r6
 8000afa:	4d13      	ldr	r5, [pc, #76]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000afc:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000afe:	9201      	str	r2, [sp, #4]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2302      	movs	r3, #2
 8000b04:	002a      	movs	r2, r5
 8000b06:	f000 f91f 	bl	8000d48 <encode_frame_snake>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	7023      	strb	r3, [r4, #0]
                    HAL_UART_Transmit(&huart1, tx_buffer, frame_length, 100);
 8000b0e:	19bb      	adds	r3, r7, r6
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b16:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b18:	2364      	movs	r3, #100	@ 0x64
 8000b1a:	f002 fa99 	bl	8003050 <HAL_UART_Transmit>

                    time_count = 0;
 8000b1e:	4b03      	ldr	r3, [pc, #12]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
                }
 }
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b007      	add	sp, #28
 8000b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2c:	200004ad 	.word	0x200004ad
 8000b30:	200004ae 	.word	0x200004ae
 8000b34:	08005384 	.word	0x08005384
 8000b38:	200004ac 	.word	0x200004ac
 8000b3c:	200004b1 	.word	0x200004b1
 8000b40:	200004b0 	.word	0x200004b0
 8000b44:	20000000 	.word	0x20000000
 8000b48:	200002a4 	.word	0x200002a4
 8000b4c:	200001d8 	.word	0x200001d8
 8000b50:	20000190 	.word	0x20000190
 8000b54:	200003ac 	.word	0x200003ac

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <crc16_ccitt_snake>:



// Функція обчислення CRC-16-CCITT для пакету змійки (поліном 0x1021, початкове значення 0xFFFF)
// Обчислення CRC-16-CCITT для пакету змійки
uint16_t crc16_ccitt_snake(const uint8_t *data, uint8_t len, uint8_t cmd, uint8_t frog_x, uint8_t frog_y) {
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	0010      	movs	r0, r2
 8000b70:	0019      	movs	r1, r3
 8000b72:	1cfb      	adds	r3, r7, #3
 8000b74:	1c22      	adds	r2, r4, #0
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	1cbb      	adds	r3, r7, #2
 8000b7a:	1c02      	adds	r2, r0, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	1c7b      	adds	r3, r7, #1
 8000b80:	1c0a      	adds	r2, r1, #0
 8000b82:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000b84:	210e      	movs	r1, #14
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);
 8000b8e:	1cbb      	adds	r3, r7, #2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	b21a      	sxth	r2, r3
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2000      	movs	r0, #0
 8000b9a:	5e1b      	ldrsh	r3, [r3, r0]
 8000b9c:	4053      	eors	r3, r2
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	801a      	strh	r2, [r3, #0]
    crc ^= (((uint16_t)frog_x << 8) | frog_y);
 8000ba4:	1c7b      	adds	r3, r7, #1
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	2320      	movs	r3, #32
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2000      	movs	r0, #0
 8000bbc:	5e1b      	ldrsh	r3, [r3, r0]
 8000bbe:	4053      	eors	r3, r2
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
 8000bce:	e03b      	b.n	8000c48 <crc16_ccitt_snake+0xe4>
        crc ^= ((uint16_t)data[i] << 8);
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	210e      	movs	r1, #14
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2000      	movs	r0, #0
 8000be6:	5e1b      	ldrsh	r3, [r3, r0]
 8000be8:	4053      	eors	r3, r2
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000bf0:	230b      	movs	r3, #11
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e01b      	b.n	8000c32 <crc16_ccitt_snake+0xce>
            if (crc & 0x8000)
 8000bfa:	210e      	movs	r1, #14
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	5e9b      	ldrsh	r3, [r3, r2]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	da09      	bge.n	8000c1a <crc16_ccitt_snake+0xb6>
                crc = (crc << 1) ^ 0x1021;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <crc16_ccitt_snake+0x104>)
 8000c10:	4053      	eors	r3, r2
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	801a      	strh	r2, [r3, #0]
 8000c18:	e005      	b.n	8000c26 <crc16_ccitt_snake+0xc2>
            else
                crc <<= 1;
 8000c1a:	230e      	movs	r3, #14
 8000c1c:	18fa      	adds	r2, r7, r3
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	18db      	adds	r3, r3, r3
 8000c24:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000c26:	210b      	movs	r1, #11
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	3201      	adds	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	230b      	movs	r3, #11
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b07      	cmp	r3, #7
 8000c3a:	d9de      	bls.n	8000bfa <crc16_ccitt_snake+0x96>
    for (uint16_t i = 0; i < len; i++) {
 8000c3c:	210c      	movs	r1, #12
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	881a      	ldrh	r2, [r3, #0]
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	3201      	adds	r2, #1
 8000c46:	801a      	strh	r2, [r3, #0]
 8000c48:	1cfb      	adds	r3, r7, #3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	220c      	movs	r2, #12
 8000c50:	18ba      	adds	r2, r7, r2
 8000c52:	8812      	ldrh	r2, [r2, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3bb      	bcc.n	8000bd0 <crc16_ccitt_snake+0x6c>
        }
    }
    return crc;
 8000c58:	230e      	movs	r3, #14
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	881b      	ldrh	r3, [r3, #0]
}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b005      	add	sp, #20
 8000c64:	bd90      	pop	{r4, r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	00001021 	.word	0x00001021

08000c6c <crc16_ccitt>:
// Функція обчислення CRC-16-CCITT (поліном 0x1021, початкове значення 0xFFFF)
uint16_t crc16_ccitt(const uint8_t *data, uint16_t len, uint8_t cmd) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	0008      	movs	r0, r1
 8000c76:	0011      	movs	r1, r2
 8000c78:	1cbb      	adds	r3, r7, #2
 8000c7a:	1c02      	adds	r2, r0, #0
 8000c7c:	801a      	strh	r2, [r3, #0]
 8000c7e:	1c7b      	adds	r3, r7, #1
 8000c80:	1c0a      	adds	r2, r1, #0
 8000c82:	701a      	strb	r2, [r3, #0]
    uint16_t crc = 0xFFFF;									//початкове значення
 8000c84:	210e      	movs	r1, #14
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	801a      	strh	r2, [r3, #0]
    crc ^= ((uint16_t)cmd << 8);							//команда cmd
 8000c8e:	1c7b      	adds	r3, r7, #1
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2000      	movs	r0, #0
 8000c9a:	5e1b      	ldrsh	r3, [r3, r0]
 8000c9c:	4053      	eors	r3, r2
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < len; i++) {
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	801a      	strh	r2, [r3, #0]
 8000cac:	e03b      	b.n	8000d26 <crc16_ccitt+0xba>
        crc ^= ((uint16_t)data[i] << 8);
 8000cae:	230c      	movs	r3, #12
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	210e      	movs	r1, #14
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	5e1b      	ldrsh	r3, [r3, r0]
 8000cc6:	4053      	eors	r3, r2
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000cce:	230b      	movs	r3, #11
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e01b      	b.n	8000d10 <crc16_ccitt+0xa4>
            if (crc & 0x8000)
 8000cd8:	210e      	movs	r1, #14
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	5e9b      	ldrsh	r3, [r3, r2]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	da09      	bge.n	8000cf8 <crc16_ccitt+0x8c>
                crc = (crc << 1) ^ 0x1021;					//поліном
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4a15      	ldr	r2, [pc, #84]	@ (8000d44 <crc16_ccitt+0xd8>)
 8000cee:	4053      	eors	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	801a      	strh	r2, [r3, #0]
 8000cf6:	e005      	b.n	8000d04 <crc16_ccitt+0x98>
            else
                crc <<= 1;
 8000cf8:	230e      	movs	r3, #14
 8000cfa:	18fa      	adds	r2, r7, r3
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	18db      	adds	r3, r3, r3
 8000d02:	8013      	strh	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000d04:	210b      	movs	r1, #11
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	3201      	adds	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	230b      	movs	r3, #11
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	d9de      	bls.n	8000cd8 <crc16_ccitt+0x6c>
    for (uint16_t i = 0; i < len; i++) {
 8000d1a:	210c      	movs	r1, #12
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	881a      	ldrh	r2, [r3, #0]
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	3201      	adds	r2, #1
 8000d24:	801a      	strh	r2, [r3, #0]
 8000d26:	230c      	movs	r3, #12
 8000d28:	18fa      	adds	r2, r7, r3
 8000d2a:	1cbb      	adds	r3, r7, #2
 8000d2c:	8812      	ldrh	r2, [r2, #0]
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3bc      	bcc.n	8000cae <crc16_ccitt+0x42>
        }
    }
    return crc;
 8000d34:	230e      	movs	r3, #14
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	881b      	ldrh	r3, [r3, #0]
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	00001021 	.word	0x00001021

08000d48 <encode_frame_snake>:

//функція кодування пакету змії
uint8_t encode_frame_snake(const uint8_t *payload, uint8_t payload_len, uint8_t *tx_buffer, uint8_t cmd_byte, uint8_t frog_x, uint8_t frog_y) {
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	0008      	movs	r0, r1
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	0019      	movs	r1, r3
 8000d56:	240b      	movs	r4, #11
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	1c02      	adds	r2, r0, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	200a      	movs	r0, #10
 8000d60:	183b      	adds	r3, r7, r0
 8000d62:	1c0a      	adds	r2, r1, #0
 8000d64:	701a      	strb	r2, [r3, #0]

	tx_buffer[0] = START_BYTE;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	227e      	movs	r2, #126	@ 0x7e
 8000d6a:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = cmd_byte;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	183a      	adds	r2, r7, r0
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	701a      	strb	r2, [r3, #0]
	tx_buffer[2] = payload_len;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3302      	adds	r3, #2
 8000d7a:	193a      	adds	r2, r7, r4
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < payload_len; i++) {
 8000d80:	2317      	movs	r3, #23
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e011      	b.n	8000dae <encode_frame_snake+0x66>
    tx_buffer[3 + i] = payload[i];
 8000d8a:	2017      	movs	r0, #23
 8000d8c:	183b      	adds	r3, r7, r0
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	18d2      	adds	r2, r2, r3
 8000d94:	183b      	adds	r3, r7, r0
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	3303      	adds	r3, #3
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	185b      	adds	r3, r3, r1
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < payload_len; i++) {
 8000da4:	183b      	adds	r3, r7, r0
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	183b      	adds	r3, r7, r0
 8000daa:	3201      	adds	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	2317      	movs	r3, #23
 8000db0:	18fa      	adds	r2, r7, r3
 8000db2:	210b      	movs	r1, #11
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	7812      	ldrb	r2, [r2, #0]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3e5      	bcc.n	8000d8a <encode_frame_snake+0x42>
    }

    tx_buffer[3 + payload_len] = frog_x;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3303      	adds	r3, #3
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	189a      	adds	r2, r3, r2
 8000dca:	2528      	movs	r5, #40	@ 0x28
 8000dcc:	2008      	movs	r0, #8
 8000dce:	182b      	adds	r3, r5, r0
 8000dd0:	19db      	adds	r3, r3, r7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	7013      	strb	r3, [r2, #0]
    tx_buffer[4 + payload_len] = frog_y;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	001a      	movs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	189b      	adds	r3, r3, r2
 8000de2:	222c      	movs	r2, #44	@ 0x2c
 8000de4:	0006      	movs	r6, r0
 8000de6:	1812      	adds	r2, r2, r0
 8000de8:	19d2      	adds	r2, r2, r7
 8000dea:	7812      	ldrb	r2, [r2, #0]
 8000dec:	701a      	strb	r2, [r3, #0]

   uint16_t crc = crc16_ccitt_snake(payload, payload_len, cmd_byte, frog_x, frog_y);
 8000dee:	2014      	movs	r0, #20
 8000df0:	183c      	adds	r4, r7, r0
 8000df2:	0030      	movs	r0, r6
 8000df4:	19ab      	adds	r3, r5, r6
 8000df6:	19db      	adds	r3, r3, r7
 8000df8:	781d      	ldrb	r5, [r3, #0]
 8000dfa:	260a      	movs	r6, #10
 8000dfc:	19bb      	adds	r3, r7, r6
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	000e      	movs	r6, r1
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	7819      	ldrb	r1, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	469c      	mov	ip, r3
 8000e0a:	232c      	movs	r3, #44	@ 0x2c
 8000e0c:	181b      	adds	r3, r3, r0
 8000e0e:	19db      	adds	r3, r3, r7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	002b      	movs	r3, r5
 8000e16:	4660      	mov	r0, ip
 8000e18:	f7ff fea4 	bl	8000b64 <crc16_ccitt_snake>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	8023      	strh	r3, [r4, #0]
   	tx_buffer[5 + payload_len] = (crc >> 8) & 0xFF;
 8000e20:	2014      	movs	r0, #20
 8000e22:	183b      	adds	r3, r7, r0
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	19bb      	adds	r3, r7, r6
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3305      	adds	r3, #5
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	185b      	adds	r3, r3, r1
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	701a      	strb	r2, [r3, #0]
    tx_buffer[6 + payload_len] = crc & 0xFF;
 8000e3a:	19bb      	adds	r3, r7, r6
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	3306      	adds	r3, #6
 8000e40:	001a      	movs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	189b      	adds	r3, r3, r2
 8000e46:	183a      	adds	r2, r7, r0
 8000e48:	8812      	ldrh	r2, [r2, #0]
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	701a      	strb	r2, [r3, #0]

    return (7+payload_len);
 8000e4e:	19bb      	adds	r3, r7, r6
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	3307      	adds	r3, #7
 8000e54:	b2db      	uxtb	r3, r3
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b007      	add	sp, #28
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e5e <decode_frame>:
    tx_buffer[3] = (crc >> 8) & 0xFF; 							// crc high
    tx_buffer[4] = crc & 0xFF;        							// crc low
    return 5;
}

int decode_frame(const uint8_t *frame, uint8_t frame_len) {
 8000e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e60:	b085      	sub	sp, #20
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	000a      	movs	r2, r1
 8000e68:	1cfb      	adds	r3, r7, #3
 8000e6a:	701a      	strb	r2, [r3, #0]
	// Кадр занадто короткий
    if (frame_len < 5){
 8000e6c:	1cfb      	adds	r3, r7, #3
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d801      	bhi.n	8000e78 <decode_frame+0x1a>
    	return 1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e034      	b.n	8000ee2 <decode_frame+0x84>
    }
    // Невірний стартовий байт
    if (frame[0] != START_BYTE){
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e7e:	d001      	beq.n	8000e84 <decode_frame+0x26>
    		return 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	e02e      	b.n	8000ee2 <decode_frame+0x84>
    }

    uint8_t cmd_byte = frame[1];
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	210f      	movs	r1, #15
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	701a      	strb	r2, [r3, #0]
   	uint8_t payload = frame[2];
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1c9a      	adds	r2, r3, #2
 8000e94:	230e      	movs	r3, #14
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	7812      	ldrb	r2, [r2, #0]
 8000e9a:	701a      	strb	r2, [r3, #0]

    uint16_t received_crc = (frame[3] << 8) | frame[4];
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3303      	adds	r3, #3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	250c      	movs	r5, #12
 8000eb4:	197b      	adds	r3, r7, r5
 8000eb6:	801a      	strh	r2, [r3, #0]

    uint16_t computed_crc = crc16_ccitt(&frame[2], 1, cmd_byte);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	1c98      	adds	r0, r3, #2
 8000ebc:	260a      	movs	r6, #10
 8000ebe:	19bc      	adds	r4, r7, r6
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	f7ff fed0 	bl	8000c6c <crc16_ccitt>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	8023      	strh	r3, [r4, #0]
    return (received_crc == computed_crc) ? 0 : 4;
 8000ed0:	197a      	adds	r2, r7, r5
 8000ed2:	19bb      	adds	r3, r7, r6
 8000ed4:	8812      	ldrh	r2, [r2, #0]
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d101      	bne.n	8000ee0 <decode_frame+0x82>
 8000edc:	2300      	movs	r3, #0
 8000ede:	e000      	b.n	8000ee2 <decode_frame+0x84>
 8000ee0:	2304      	movs	r3, #4
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b005      	add	sp, #20
 8000ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	69da      	ldr	r2, [r3, #28]
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	0549      	lsls	r1, r1, #21
 8000f14:	430a      	orrs	r2, r1
 8000f16:	61da      	str	r2, [r3, #28]
 8000f18:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f1a:	69da      	ldr	r2, [r3, #28]
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	055b      	lsls	r3, r3, #21
 8000f20:	4013      	ands	r3, r2
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	05db      	lsls	r3, r3, #23
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d113      	bne.n	8000f70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f4a:	69da      	ldr	r2, [r3, #28]
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f4e:	2101      	movs	r1, #1
 8000f50:	430a      	orrs	r2, r1
 8000f52:	61da      	str	r2, [r3, #28]
 8000f54:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	200f      	movs	r0, #15
 8000f66:	f000 fac5 	bl	80014f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f000 fad7 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b004      	add	sp, #16
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b08b      	sub	sp, #44	@ 0x2c
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	2414      	movs	r4, #20
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	2314      	movs	r3, #20
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f003 fb1e 	bl	80045d0 <memset>
  if(huart->Instance==USART1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a34      	ldr	r2, [pc, #208]	@ (800106c <HAL_UART_MspInit+0xf0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d161      	bne.n	8001062 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9e:	4b34      	ldr	r3, [pc, #208]	@ (8001070 <HAL_UART_MspInit+0xf4>)
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	4b33      	ldr	r3, [pc, #204]	@ (8001070 <HAL_UART_MspInit+0xf4>)
 8000fa4:	2180      	movs	r1, #128	@ 0x80
 8000fa6:	01c9      	lsls	r1, r1, #7
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <HAL_UART_MspInit+0xf4>)
 8000fae:	699a      	ldr	r2, [r3, #24]
 8000fb0:	2380      	movs	r3, #128	@ 0x80
 8000fb2:	01db      	lsls	r3, r3, #7
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b2d      	ldr	r3, [pc, #180]	@ (8001070 <HAL_UART_MspInit+0xf4>)
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <HAL_UART_MspInit+0xf4>)
 8000fc0:	2180      	movs	r1, #128	@ 0x80
 8000fc2:	0289      	lsls	r1, r1, #10
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <HAL_UART_MspInit+0xf4>)
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	029b      	lsls	r3, r3, #10
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	22c0      	movs	r2, #192	@ 0xc0
 8000fda:	00d2      	lsls	r2, r2, #3
 8000fdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	0021      	movs	r1, r4
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	187a      	adds	r2, r7, r1
 8000ffa:	2390      	movs	r3, #144	@ 0x90
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	0011      	movs	r1, r2
 8001000:	0018      	movs	r0, r3
 8001002:	f000 fcbf 	bl	8001984 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_UART_MspInit+0xfc>)
 800100a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800100c:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 800101a:	2280      	movs	r2, #128	@ 0x80
 800101c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 800102c:	2220      	movs	r2, #32
 800102e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 8001038:	0018      	movs	r0, r3
 800103a:	f000 fa8d 	bl	8001558 <HAL_DMA_Init>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d001      	beq.n	8001046 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001042:	f7ff fd89 	bl	8000b58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 800104a:	675a      	str	r2, [r3, #116]	@ 0x74
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_UART_MspInit+0xf8>)
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	201b      	movs	r0, #27
 8001058:	f000 fa4c 	bl	80014f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800105c:	201b      	movs	r0, #27
 800105e:	f000 fa5e 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b00b      	add	sp, #44	@ 0x2c
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	40013800 	.word	0x40013800
 8001070:	40021000 	.word	0x40021000
 8001074:	20000260 	.word	0x20000260
 8001078:	40020030 	.word	0x40020030

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	e7fd      	b.n	8001080 <NMI_Handler+0x4>

08001084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	e7fd      	b.n	8001088 <HardFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f95e 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fb79 	bl	80017ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	20000260 	.word	0x20000260

080010c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <TIM2_IRQHandler+0x14>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 fbf2 	bl	80028b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	20000190 	.word	0x20000190

080010e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <USART1_IRQHandler+0x14>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f002 f8a8 	bl	800323c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010ec:	46c0      	nop			@ (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	200001d8 	.word	0x200001d8

080010f8 <_getpid>:
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	2301      	movs	r3, #1
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_kill>:
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	f003 fab5 	bl	800467c <__errno>
 8001112:	0003      	movs	r3, r0
 8001114:	2216      	movs	r2, #22
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	425b      	negs	r3, r3
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}

08001124 <_exit>:
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	2301      	movs	r3, #1
 800112e:	425a      	negs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff ffe5 	bl	8001104 <_kill>
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	e7fd      	b.n	800113a <_exit+0x16>

0800113e <_read>:
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e00a      	b.n	8001166 <_read+0x28>
 8001150:	e000      	b.n	8001154 <_read+0x16>
 8001152:	bf00      	nop
 8001154:	0001      	movs	r1, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	60ba      	str	r2, [r7, #8]
 800115c:	b2ca      	uxtb	r2, r1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbf0      	blt.n	8001150 <_read+0x12>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b006      	add	sp, #24
 8001176:	bd80      	pop	{r7, pc}

08001178 <_write>:
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e009      	b.n	800119e <_write+0x26>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	60ba      	str	r2, [r7, #8]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	e000      	b.n	8001198 <_write+0x20>
 8001196:	bf00      	nop
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	dbf1      	blt.n	800118a <_write+0x12>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b006      	add	sp, #24
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_close>:
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	2301      	movs	r3, #1
 80011ba:	425b      	negs	r3, r3
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_fstat>:
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	0192      	lsls	r2, r2, #6
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	2300      	movs	r3, #0
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_isatty>:
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	2301      	movs	r3, #1
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_lseek>:
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	2300      	movs	r3, #0
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	b004      	add	sp, #16
 8001206:	bd80      	pop	{r7, pc}

08001208 <_sbrk>:
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	4a14      	ldr	r2, [pc, #80]	@ (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
 8001224:	4b11      	ldr	r3, [pc, #68]	@ (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	18d3      	adds	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
 8001238:	f003 fa20 	bl	800467c <__errno>
 800123c:	0003      	movs	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	425b      	negs	r3, r3
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	18d2      	adds	r2, r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <_sbrk+0x64>)
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b006      	add	sp, #24
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20002000 	.word	0x20002000
 8001268:	00000400 	.word	0x00000400
 800126c:	200004b4 	.word	0x200004b4
 8001270:	20000608 	.word	0x20000608

08001274 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001280:	480d      	ldr	r0, [pc, #52]	@ (80012b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001282:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001284:	f7ff fff6 	bl	8001274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <LoopForever+0x6>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	@ (80012c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <LoopForever+0xe>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	@ (80012cc <LoopForever+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ae:	f003 f9eb 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b2:	f7ff f99d 	bl	80005f0 <main>

080012b6 <LoopForever>:

LoopForever:
    b LoopForever
 80012b6:	e7fe      	b.n	80012b6 <LoopForever>
  ldr   r0, =_estack
 80012b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80012c4:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 80012c8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80012cc:	20000608 	.word	0x20000608

080012d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_COMP_IRQHandler>
	...

080012d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <HAL_Init+0x24>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_Init+0x24>)
 80012de:	2110      	movs	r1, #16
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f809 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ea:	f7ff fdff 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	40022000 	.word	0x40022000

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_InitTick+0x5c>)
 8001306:	681c      	ldr	r4, [r3, #0]
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_InitTick+0x60>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	0019      	movs	r1, r3
 800130e:	23fa      	movs	r3, #250	@ 0xfa
 8001310:	0098      	lsls	r0, r3, #2
 8001312:	f7fe ff03 	bl	800011c <__udivsi3>
 8001316:	0003      	movs	r3, r0
 8001318:	0019      	movs	r1, r3
 800131a:	0020      	movs	r0, r4
 800131c:	f7fe fefe 	bl	800011c <__udivsi3>
 8001320:	0003      	movs	r3, r0
 8001322:	0018      	movs	r0, r3
 8001324:	f000 f90b 	bl	800153e <HAL_SYSTICK_Config>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d001      	beq.n	8001330 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e00f      	b.n	8001350 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d80b      	bhi.n	800134e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	2301      	movs	r3, #1
 800133a:	425b      	negs	r3, r3
 800133c:	2200      	movs	r2, #0
 800133e:	0018      	movs	r0, r3
 8001340:	f000 f8d8 	bl	80014f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_InitTick+0x64>)
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b003      	add	sp, #12
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	20000108 	.word	0x20000108
 800135c:	20000110 	.word	0x20000110
 8001360:	2000010c 	.word	0x2000010c

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_IncTick+0x1c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	001a      	movs	r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_IncTick+0x20>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	18d2      	adds	r2, r2, r3
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <HAL_IncTick+0x20>)
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	20000110 	.word	0x20000110
 8001384:	200004b8 	.word	0x200004b8

08001388 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b02      	ldr	r3, [pc, #8]	@ (8001398 <HAL_GetTick+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	200004b8 	.word	0x200004b8

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	0002      	movs	r2, r0
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80013ae:	d809      	bhi.n	80013c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	001a      	movs	r2, r3
 80013b6:	231f      	movs	r3, #31
 80013b8:	401a      	ands	r2, r3
 80013ba:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <__NVIC_EnableIRQ+0x30>)
 80013bc:	2101      	movs	r1, #1
 80013be:	4091      	lsls	r1, r2
 80013c0:	000a      	movs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
  }
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0002      	movs	r2, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e4:	d828      	bhi.n	8001438 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e6:	4a2f      	ldr	r2, [pc, #188]	@ (80014a4 <__NVIC_SetPriority+0xd4>)
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	33c0      	adds	r3, #192	@ 0xc0
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	589b      	ldr	r3, [r3, r2]
 80013f6:	1dfa      	adds	r2, r7, #7
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	0011      	movs	r1, r2
 80013fc:	2203      	movs	r2, #3
 80013fe:	400a      	ands	r2, r1
 8001400:	00d2      	lsls	r2, r2, #3
 8001402:	21ff      	movs	r1, #255	@ 0xff
 8001404:	4091      	lsls	r1, r2
 8001406:	000a      	movs	r2, r1
 8001408:	43d2      	mvns	r2, r2
 800140a:	401a      	ands	r2, r3
 800140c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	019b      	lsls	r3, r3, #6
 8001412:	22ff      	movs	r2, #255	@ 0xff
 8001414:	401a      	ands	r2, r3
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	0018      	movs	r0, r3
 800141c:	2303      	movs	r3, #3
 800141e:	4003      	ands	r3, r0
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001424:	481f      	ldr	r0, [pc, #124]	@ (80014a4 <__NVIC_SetPriority+0xd4>)
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	430a      	orrs	r2, r1
 8001430:	33c0      	adds	r3, #192	@ 0xc0
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001436:	e031      	b.n	800149c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <__NVIC_SetPriority+0xd8>)
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	0019      	movs	r1, r3
 8001440:	230f      	movs	r3, #15
 8001442:	400b      	ands	r3, r1
 8001444:	3b08      	subs	r3, #8
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3306      	adds	r3, #6
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	18d3      	adds	r3, r2, r3
 800144e:	3304      	adds	r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1dfa      	adds	r2, r7, #7
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	0011      	movs	r1, r2
 8001458:	2203      	movs	r2, #3
 800145a:	400a      	ands	r2, r1
 800145c:	00d2      	lsls	r2, r2, #3
 800145e:	21ff      	movs	r1, #255	@ 0xff
 8001460:	4091      	lsls	r1, r2
 8001462:	000a      	movs	r2, r1
 8001464:	43d2      	mvns	r2, r2
 8001466:	401a      	ands	r2, r3
 8001468:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	019b      	lsls	r3, r3, #6
 800146e:	22ff      	movs	r2, #255	@ 0xff
 8001470:	401a      	ands	r2, r3
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	0018      	movs	r0, r3
 8001478:	2303      	movs	r3, #3
 800147a:	4003      	ands	r3, r0
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001480:	4809      	ldr	r0, [pc, #36]	@ (80014a8 <__NVIC_SetPriority+0xd8>)
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	001c      	movs	r4, r3
 8001488:	230f      	movs	r3, #15
 800148a:	4023      	ands	r3, r4
 800148c:	3b08      	subs	r3, #8
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	430a      	orrs	r2, r1
 8001492:	3306      	adds	r3, #6
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	18c3      	adds	r3, r0, r3
 8001498:	3304      	adds	r3, #4
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b003      	add	sp, #12
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	045b      	lsls	r3, r3, #17
 80014bc:	429a      	cmp	r2, r3
 80014be:	d301      	bcc.n	80014c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c0:	2301      	movs	r3, #1
 80014c2:	e010      	b.n	80014e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <SysTick_Config+0x44>)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	3a01      	subs	r2, #1
 80014ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014cc:	2301      	movs	r3, #1
 80014ce:	425b      	negs	r3, r3
 80014d0:	2103      	movs	r1, #3
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7ff ff7c 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <SysTick_Config+0x44>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SysTick_Config+0x44>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	210f      	movs	r1, #15
 8001500:	187b      	adds	r3, r7, r1
 8001502:	1c02      	adds	r2, r0, #0
 8001504:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	187b      	adds	r3, r7, r1
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b25b      	sxtb	r3, r3
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001516:	46c0      	nop			@ (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	0002      	movs	r2, r0
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b25b      	sxtb	r3, r3
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff ff33 	bl	800139c <__NVIC_EnableIRQ>
}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff ffaf 	bl	80014ac <SysTick_Config>
 800154e:	0003      	movs	r3, r0
}
 8001550:	0018      	movs	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	b002      	add	sp, #8
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e036      	b.n	80015dc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2221      	movs	r2, #33	@ 0x21
 8001572:	2102      	movs	r1, #2
 8001574:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <HAL_DMA_Init+0x8c>)
 8001582:	4013      	ands	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800158e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 f9c4 	bl	800194c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2221      	movs	r2, #33	@ 0x21
 80015ce:	2101      	movs	r1, #1
 80015d0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	ffffc00f 	.word	0xffffc00f

080015e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015f6:	2317      	movs	r3, #23
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	5c9b      	ldrb	r3, [r3, r2]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_DMA_Start_IT+0x24>
 8001608:	2302      	movs	r3, #2
 800160a:	e04f      	b.n	80016ac <HAL_DMA_Start_IT+0xc4>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2220      	movs	r2, #32
 8001610:	2101      	movs	r1, #1
 8001612:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2221      	movs	r2, #33	@ 0x21
 8001618:	5c9b      	ldrb	r3, [r3, r2]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d13a      	bne.n	8001696 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2221      	movs	r2, #33	@ 0x21
 8001624:	2102      	movs	r1, #2
 8001626:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	438a      	bics	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f954 	bl	80018f2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	210e      	movs	r1, #14
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e00f      	b.n	8001684 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	210a      	movs	r1, #10
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2104      	movs	r1, #4
 8001680:	438a      	bics	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2101      	movs	r1, #1
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e007      	b.n	80016a6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2220      	movs	r2, #32
 800169a:	2100      	movs	r1, #0
 800169c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800169e:	2317      	movs	r3, #23
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	2202      	movs	r2, #2
 80016a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80016a6:	2317      	movs	r3, #23
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b006      	add	sp, #24
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2221      	movs	r2, #33	@ 0x21
 80016c0:	5c9b      	ldrb	r3, [r3, r2]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d008      	beq.n	80016da <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2204      	movs	r2, #4
 80016cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2220      	movs	r2, #32
 80016d2:	2100      	movs	r1, #0
 80016d4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e020      	b.n	800171c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	210e      	movs	r1, #14
 80016e6:	438a      	bics	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	438a      	bics	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001702:	2101      	movs	r1, #1
 8001704:	4091      	lsls	r1, r2
 8001706:	000a      	movs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2221      	movs	r2, #33	@ 0x21
 800170e:	2101      	movs	r1, #1
 8001710:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2220      	movs	r2, #32
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800172c:	210f      	movs	r1, #15
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2221      	movs	r2, #33	@ 0x21
 8001738:	5c9b      	ldrb	r3, [r3, r2]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d006      	beq.n	800174e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2204      	movs	r2, #4
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e028      	b.n	80017a0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	210e      	movs	r1, #14
 800175a:	438a      	bics	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	438a      	bics	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001776:	2101      	movs	r1, #1
 8001778:	4091      	lsls	r1, r2
 800177a:	000a      	movs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2221      	movs	r2, #33	@ 0x21
 8001782:	2101      	movs	r1, #1
 8001784:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	2100      	movs	r1, #0
 800178c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	0010      	movs	r0, r2
 800179e:	4798      	blx	r3
    }
  }
  return status;
 80017a0:	230f      	movs	r3, #15
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	2204      	movs	r2, #4
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	d024      	beq.n	8001820 <HAL_DMA_IRQHandler+0x72>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2204      	movs	r2, #4
 80017da:	4013      	ands	r3, r2
 80017dc:	d020      	beq.n	8001820 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2220      	movs	r2, #32
 80017e6:	4013      	ands	r3, r2
 80017e8:	d107      	bne.n	80017fa <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	438a      	bics	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001802:	2104      	movs	r1, #4
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d100      	bne.n	8001814 <HAL_DMA_IRQHandler+0x66>
 8001812:	e06a      	b.n	80018ea <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	0010      	movs	r0, r2
 800181c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800181e:	e064      	b.n	80018ea <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	2202      	movs	r2, #2
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	d02b      	beq.n	8001888 <HAL_DMA_IRQHandler+0xda>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d027      	beq.n	8001888 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2220      	movs	r2, #32
 8001840:	4013      	ands	r3, r2
 8001842:	d10b      	bne.n	800185c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	210a      	movs	r1, #10
 8001850:	438a      	bics	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2221      	movs	r2, #33	@ 0x21
 8001858:	2101      	movs	r1, #1
 800185a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001864:	2102      	movs	r1, #2
 8001866:	4091      	lsls	r1, r2
 8001868:	000a      	movs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d036      	beq.n	80018ea <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	0010      	movs	r0, r2
 8001884:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001886:	e030      	b.n	80018ea <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	2208      	movs	r2, #8
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	d028      	beq.n	80018ea <HAL_DMA_IRQHandler+0x13c>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2208      	movs	r2, #8
 800189c:	4013      	ands	r3, r2
 800189e:	d024      	beq.n	80018ea <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	210e      	movs	r1, #14
 80018ac:	438a      	bics	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b8:	2101      	movs	r1, #1
 80018ba:	4091      	lsls	r1, r2
 80018bc:	000a      	movs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2221      	movs	r2, #33	@ 0x21
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	0010      	movs	r0, r2
 80018e6:	4798      	blx	r3
    }
  }
}
 80018e8:	e7ff      	b.n	80018ea <HAL_DMA_IRQHandler+0x13c>
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001908:	2101      	movs	r1, #1
 800190a:	4091      	lsls	r1, r2
 800190c:	000a      	movs	r2, r1
 800190e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b10      	cmp	r3, #16
 800191e:	d108      	bne.n	8001932 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001930:	e007      	b.n	8001942 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	60da      	str	r2, [r3, #12]
}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	b004      	add	sp, #16
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a08      	ldr	r2, [pc, #32]	@ (800197c <DMA_CalcBaseAndBitshift+0x30>)
 800195a:	4694      	mov	ip, r2
 800195c:	4463      	add	r3, ip
 800195e:	2114      	movs	r1, #20
 8001960:	0018      	movs	r0, r3
 8001962:	f7fe fbdb 	bl	800011c <__udivsi3>
 8001966:	0003      	movs	r3, r0
 8001968:	009a      	lsls	r2, r3, #2
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a03      	ldr	r2, [pc, #12]	@ (8001980 <DMA_CalcBaseAndBitshift+0x34>)
 8001972:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001974:	46c0      	nop			@ (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b002      	add	sp, #8
 800197a:	bd80      	pop	{r7, pc}
 800197c:	bffdfff8 	.word	0xbffdfff8
 8001980:	40020000 	.word	0x40020000

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e14f      	b.n	8001c34 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4091      	lsls	r1, r2
 800199e:	000a      	movs	r2, r1
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d100      	bne.n	80019ac <HAL_GPIO_Init+0x28>
 80019aa:	e140      	b.n	8001c2e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2203      	movs	r2, #3
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d005      	beq.n	80019c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d130      	bne.n	8001a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	409a      	lsls	r2, r3
 80019d2:	0013      	movs	r3, r2
 80019d4:	43da      	mvns	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	409a      	lsls	r2, r3
 80019e6:	0013      	movs	r3, r2
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019fa:	2201      	movs	r2, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	43da      	mvns	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	2201      	movs	r2, #1
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d017      	beq.n	8001a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	43da      	mvns	r2, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2203      	movs	r2, #3
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d123      	bne.n	8001ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	58d3      	ldr	r3, [r2, r3]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2207      	movs	r2, #7
 8001a80:	4013      	ands	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	220f      	movs	r2, #15
 8001a86:	409a      	lsls	r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2107      	movs	r1, #7
 8001a9a:	400b      	ands	r3, r1
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	6939      	ldr	r1, [r7, #16]
 8001ab4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	409a      	lsls	r2, r3
 8001adc:	0013      	movs	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	23c0      	movs	r3, #192	@ 0xc0
 8001af0:	029b      	lsls	r3, r3, #10
 8001af2:	4013      	ands	r3, r2
 8001af4:	d100      	bne.n	8001af8 <HAL_GPIO_Init+0x174>
 8001af6:	e09a      	b.n	8001c2e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af8:	4b54      	ldr	r3, [pc, #336]	@ (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001afa:	699a      	ldr	r2, [r3, #24]
 8001afc:	4b53      	ldr	r3, [pc, #332]	@ (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	430a      	orrs	r2, r1
 8001b02:	619a      	str	r2, [r3, #24]
 8001b04:	4b51      	ldr	r3, [pc, #324]	@ (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b10:	4a4f      	ldr	r2, [pc, #316]	@ (8001c50 <HAL_GPIO_Init+0x2cc>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	589b      	ldr	r3, [r3, r2]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2203      	movs	r2, #3
 8001b22:	4013      	ands	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	0013      	movs	r3, r2
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	2390      	movs	r3, #144	@ 0x90
 8001b38:	05db      	lsls	r3, r3, #23
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x1e2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a44      	ldr	r2, [pc, #272]	@ (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x1de>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a43      	ldr	r2, [pc, #268]	@ (8001c58 <HAL_GPIO_Init+0x2d4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x1da>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a42      	ldr	r2, [pc, #264]	@ (8001c5c <HAL_GPIO_Init+0x2d8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x1d6>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b66:	2300      	movs	r3, #0
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b78:	4935      	ldr	r1, [pc, #212]	@ (8001c50 <HAL_GPIO_Init+0x2cc>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b86:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	2380      	movs	r3, #128	@ 0x80
 8001b9c:	035b      	lsls	r3, r3, #13
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001baa:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	2380      	movs	r3, #128	@ 0x80
 8001bc6:	039b      	lsls	r3, r3, #14
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bd4:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001bda:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43da      	mvns	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001c04:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	40da      	lsrs	r2, r3
 8001c3c:	1e13      	subs	r3, r2, #0
 8001c3e:	d000      	beq.n	8001c42 <HAL_GPIO_Init+0x2be>
 8001c40:	e6a8      	b.n	8001994 <HAL_GPIO_Init+0x10>
  } 
}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	46c0      	nop			@ (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b006      	add	sp, #24
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000
 8001c54:	48000400 	.word	0x48000400
 8001c58:	48000800 	.word	0x48000800
 8001c5c:	48000c00 	.word	0x48000c00
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	0008      	movs	r0, r1
 8001c6e:	0011      	movs	r1, r2
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	1c02      	adds	r2, r0, #0
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	1c7b      	adds	r3, r7, #1
 8001c78:	1c0a      	adds	r2, r1, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	1c7b      	adds	r3, r7, #1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c84:	1cbb      	adds	r3, r7, #2
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c8e:	1cbb      	adds	r3, r7, #2
 8001c90:	881a      	ldrh	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e301      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d100      	bne.n	8001cbe <HAL_RCC_OscConfig+0x1e>
 8001cbc:	e08d      	b.n	8001dda <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cbe:	4bc3      	ldr	r3, [pc, #780]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cca:	4bc0      	ldr	r3, [pc, #768]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d116      	bne.n	8001d04 <HAL_RCC_OscConfig+0x64>
 8001cd6:	4bbd      	ldr	r3, [pc, #756]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	025b      	lsls	r3, r3, #9
 8001cde:	401a      	ands	r2, r3
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10d      	bne.n	8001d04 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	4bb8      	ldr	r3, [pc, #736]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x56>
 8001cf4:	e070      	b.n	8001dd8 <HAL_RCC_OscConfig+0x138>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d000      	beq.n	8001d00 <HAL_RCC_OscConfig+0x60>
 8001cfe:	e06b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e2d8      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x7c>
 8001d0c:	4baf      	ldr	r3, [pc, #700]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4bae      	ldr	r3, [pc, #696]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d12:	2180      	movs	r1, #128	@ 0x80
 8001d14:	0249      	lsls	r1, r1, #9
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e02f      	b.n	8001d7c <HAL_RCC_OscConfig+0xdc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x9e>
 8001d24:	4ba9      	ldr	r3, [pc, #676]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4ba8      	ldr	r3, [pc, #672]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	49a9      	ldr	r1, [pc, #676]	@ (8001fd0 <HAL_RCC_OscConfig+0x330>)
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	4ba6      	ldr	r3, [pc, #664]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4ba5      	ldr	r3, [pc, #660]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d36:	49a7      	ldr	r1, [pc, #668]	@ (8001fd4 <HAL_RCC_OscConfig+0x334>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e01e      	b.n	8001d7c <HAL_RCC_OscConfig+0xdc>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d10e      	bne.n	8001d64 <HAL_RCC_OscConfig+0xc4>
 8001d46:	4ba1      	ldr	r3, [pc, #644]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4ba0      	ldr	r3, [pc, #640]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	02c9      	lsls	r1, r1, #11
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4b9d      	ldr	r3, [pc, #628]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b9c      	ldr	r3, [pc, #624]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	0249      	lsls	r1, r1, #9
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0xdc>
 8001d64:	4b99      	ldr	r3, [pc, #612]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b98      	ldr	r3, [pc, #608]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	4999      	ldr	r1, [pc, #612]	@ (8001fd0 <HAL_RCC_OscConfig+0x330>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	4b96      	ldr	r3, [pc, #600]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b95      	ldr	r3, [pc, #596]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001d76:	4997      	ldr	r1, [pc, #604]	@ (8001fd4 <HAL_RCC_OscConfig+0x334>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d014      	beq.n	8001dae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fb00 	bl	8001388 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fafb 	bl	8001388 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	@ 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e28a      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da0:	4b8a      	ldr	r3, [pc, #552]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0xee>
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff faeb 	bl	8001388 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fae6 	bl	8001388 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e275      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	4b80      	ldr	r3, [pc, #512]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	029b      	lsls	r3, r3, #10
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x118>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d100      	bne.n	8001de6 <HAL_RCC_OscConfig+0x146>
 8001de4:	e069      	b.n	8001eba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001de6:	4b79      	ldr	r3, [pc, #484]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	220c      	movs	r2, #12
 8001dec:	4013      	ands	r3, r2
 8001dee:	d00b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001df0:	4b76      	ldr	r3, [pc, #472]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	220c      	movs	r2, #12
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d11c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x196>
 8001dfc:	4b73      	ldr	r3, [pc, #460]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	4013      	ands	r3, r2
 8001e06:	d116      	bne.n	8001e36 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e08:	4b70      	ldr	r3, [pc, #448]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x17e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e24b      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b6b      	ldr	r3, [pc, #428]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	22f8      	movs	r2, #248	@ 0xf8
 8001e24:	4393      	bics	r3, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00da      	lsls	r2, r3, #3
 8001e2e:	4b67      	ldr	r3, [pc, #412]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e34:	e041      	b.n	8001eba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d024      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3e:	4b63      	ldr	r3, [pc, #396]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b62      	ldr	r3, [pc, #392]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa9d 	bl	8001388 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff fa98 	bl	8001388 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e227      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b59      	ldr	r3, [pc, #356]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d0f1      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b56      	ldr	r3, [pc, #344]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	22f8      	movs	r2, #248	@ 0xf8
 8001e76:	4393      	bics	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00da      	lsls	r2, r3, #3
 8001e80:	4b52      	ldr	r3, [pc, #328]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e88:	4b50      	ldr	r3, [pc, #320]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	438a      	bics	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fa78 	bl	8001388 <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fa73 	bl	8001388 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e202      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb0:	4b46      	ldr	r3, [pc, #280]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d1f1      	bne.n	8001e9e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d036      	beq.n	8001f32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d019      	beq.n	8001f00 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fa56 	bl	8001388 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fa51 	bl	8001388 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1e0      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef4:	4b35      	ldr	r3, [pc, #212]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d0f1      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x242>
 8001efe:	e018      	b.n	8001f32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f00:	4b32      	ldr	r3, [pc, #200]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fa3c 	bl	8001388 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f16:	f7ff fa37 	bl	8001388 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1c6      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d1f1      	bne.n	8001f16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <HAL_RCC_OscConfig+0x29e>
 8001f3c:	e0b4      	b.n	80020a8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	201f      	movs	r0, #31
 8001f40:	183b      	adds	r3, r7, r0
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	055b      	lsls	r3, r3, #21
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d110      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f58:	2180      	movs	r1, #128	@ 0x80
 8001f5a:	0549      	lsls	r1, r1, #21
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	61da      	str	r2, [r3, #28]
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	055b      	lsls	r3, r3, #21
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f6e:	183b      	adds	r3, r7, r0
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_RCC_OscConfig+0x338>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d11a      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_RCC_OscConfig+0x338>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <HAL_RCC_OscConfig+0x338>)
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	0049      	lsls	r1, r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f9fb 	bl	8001388 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7ff f9f6 	bl	8001388 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	@ 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e185      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_RCC_OscConfig+0x338>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10e      	bne.n	8001fdc <HAL_RCC_OscConfig+0x33c>
 8001fbe:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	4b02      	ldr	r3, [pc, #8]	@ (8001fcc <HAL_RCC_OscConfig+0x32c>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	621a      	str	r2, [r3, #32]
 8001fca:	e035      	b.n	8002038 <HAL_RCC_OscConfig+0x398>
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	fffeffff 	.word	0xfffeffff
 8001fd4:	fffbffff 	.word	0xfffbffff
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x35e>
 8001fe4:	4bb6      	ldr	r3, [pc, #728]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	4bb5      	ldr	r3, [pc, #724]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8001fea:	2101      	movs	r1, #1
 8001fec:	438a      	bics	r2, r1
 8001fee:	621a      	str	r2, [r3, #32]
 8001ff0:	4bb3      	ldr	r3, [pc, #716]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	4bb2      	ldr	r3, [pc, #712]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	621a      	str	r2, [r3, #32]
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x398>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x380>
 8002006:	4bae      	ldr	r3, [pc, #696]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002008:	6a1a      	ldr	r2, [r3, #32]
 800200a:	4bad      	ldr	r3, [pc, #692]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800200c:	2104      	movs	r1, #4
 800200e:	430a      	orrs	r2, r1
 8002010:	621a      	str	r2, [r3, #32]
 8002012:	4bab      	ldr	r3, [pc, #684]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002014:	6a1a      	ldr	r2, [r3, #32]
 8002016:	4baa      	ldr	r3, [pc, #680]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002018:	2101      	movs	r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	621a      	str	r2, [r3, #32]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x398>
 8002020:	4ba7      	ldr	r3, [pc, #668]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002022:	6a1a      	ldr	r2, [r3, #32]
 8002024:	4ba6      	ldr	r3, [pc, #664]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	621a      	str	r2, [r3, #32]
 800202c:	4ba4      	ldr	r3, [pc, #656]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	4ba3      	ldr	r3, [pc, #652]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002032:	2104      	movs	r1, #4
 8002034:	438a      	bics	r2, r1
 8002036:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d014      	beq.n	800206a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7ff f9a2 	bl	8001388 <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e009      	b.n	800205e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff f99d 	bl	8001388 <HAL_GetTick>
 800204e:	0002      	movs	r2, r0
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	4a9b      	ldr	r2, [pc, #620]	@ (80022c4 <HAL_RCC_OscConfig+0x624>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e12b      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4b98      	ldr	r3, [pc, #608]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x3aa>
 8002068:	e013      	b.n	8002092 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff f98d 	bl	8001388 <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002072:	e009      	b.n	8002088 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7ff f988 	bl	8001388 <HAL_GetTick>
 8002078:	0002      	movs	r2, r0
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	4a91      	ldr	r2, [pc, #580]	@ (80022c4 <HAL_RCC_OscConfig+0x624>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e116      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	4b8d      	ldr	r3, [pc, #564]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	2202      	movs	r2, #2
 800208e:	4013      	ands	r3, r2
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002092:	231f      	movs	r3, #31
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209c:	4b88      	ldr	r3, [pc, #544]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	4b87      	ldr	r3, [pc, #540]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80020a2:	4989      	ldr	r1, [pc, #548]	@ (80022c8 <HAL_RCC_OscConfig+0x628>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2210      	movs	r2, #16
 80020ae:	4013      	ands	r3, r2
 80020b0:	d063      	beq.n	800217a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d12a      	bne.n	8002110 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020ba:	4b81      	ldr	r3, [pc, #516]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80020bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020be:	4b80      	ldr	r3, [pc, #512]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80020c0:	2104      	movs	r1, #4
 80020c2:	430a      	orrs	r2, r1
 80020c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020c6:	4b7e      	ldr	r3, [pc, #504]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80020c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ca:	4b7d      	ldr	r3, [pc, #500]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80020cc:	2101      	movs	r1, #1
 80020ce:	430a      	orrs	r2, r1
 80020d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7ff f959 	bl	8001388 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020dc:	f7ff f954 	bl	8001388 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e0e3      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ee:	4b74      	ldr	r3, [pc, #464]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d0f1      	beq.n	80020dc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020f8:	4b71      	ldr	r3, [pc, #452]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80020fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fc:	22f8      	movs	r2, #248	@ 0xf8
 80020fe:	4393      	bics	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	00da      	lsls	r2, r3, #3
 8002108:	4b6d      	ldr	r3, [pc, #436]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800210a:	430a      	orrs	r2, r1
 800210c:	635a      	str	r2, [r3, #52]	@ 0x34
 800210e:	e034      	b.n	800217a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	3305      	adds	r3, #5
 8002116:	d111      	bne.n	800213c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002118:	4b69      	ldr	r3, [pc, #420]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800211a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800211c:	4b68      	ldr	r3, [pc, #416]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800211e:	2104      	movs	r1, #4
 8002120:	438a      	bics	r2, r1
 8002122:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002124:	4b66      	ldr	r3, [pc, #408]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002128:	22f8      	movs	r2, #248	@ 0xf8
 800212a:	4393      	bics	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	00da      	lsls	r2, r3, #3
 8002134:	4b62      	ldr	r3, [pc, #392]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002136:	430a      	orrs	r2, r1
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34
 800213a:	e01e      	b.n	800217a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800213c:	4b60      	ldr	r3, [pc, #384]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800213e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002140:	4b5f      	ldr	r3, [pc, #380]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002142:	2104      	movs	r1, #4
 8002144:	430a      	orrs	r2, r1
 8002146:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002148:	4b5d      	ldr	r3, [pc, #372]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800214a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800214c:	4b5c      	ldr	r3, [pc, #368]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7ff f918 	bl	8001388 <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800215e:	f7ff f913 	bl	8001388 <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0a2      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002170:	4b53      	ldr	r3, [pc, #332]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002174:	2202      	movs	r2, #2
 8002176:	4013      	ands	r3, r2
 8002178:	d1f1      	bne.n	800215e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d100      	bne.n	8002184 <HAL_RCC_OscConfig+0x4e4>
 8002182:	e097      	b.n	80022b4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	4b4e      	ldr	r3, [pc, #312]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	220c      	movs	r2, #12
 800218a:	4013      	ands	r3, r2
 800218c:	2b08      	cmp	r3, #8
 800218e:	d100      	bne.n	8002192 <HAL_RCC_OscConfig+0x4f2>
 8002190:	e06b      	b.n	800226a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d14c      	bne.n	8002234 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b49      	ldr	r3, [pc, #292]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4b48      	ldr	r3, [pc, #288]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80021a0:	494a      	ldr	r1, [pc, #296]	@ (80022cc <HAL_RCC_OscConfig+0x62c>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff f8ef 	bl	8001388 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff f8ea 	bl	8001388 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e079      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	4b3f      	ldr	r3, [pc, #252]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	049b      	lsls	r3, r3, #18
 80021ca:	4013      	ands	r3, r2
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ce:	4b3c      	ldr	r3, [pc, #240]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80021d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d2:	220f      	movs	r2, #15
 80021d4:	4393      	bics	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021dc:	4b38      	ldr	r3, [pc, #224]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021e2:	4b37      	ldr	r3, [pc, #220]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a3a      	ldr	r2, [pc, #232]	@ (80022d0 <HAL_RCC_OscConfig+0x630>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	431a      	orrs	r2, r3
 80021f6:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002202:	2180      	movs	r1, #128	@ 0x80
 8002204:	0449      	lsls	r1, r1, #17
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff f8bd 	bl	8001388 <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f8b8 	bl	8001388 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e047      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	049b      	lsls	r3, r3, #18
 800222e:	4013      	ands	r3, r2
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x574>
 8002232:	e03f      	b.n	80022b4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800223a:	4924      	ldr	r1, [pc, #144]	@ (80022cc <HAL_RCC_OscConfig+0x62c>)
 800223c:	400a      	ands	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff f8a2 	bl	8001388 <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff f89d 	bl	8001388 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e02c      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	049b      	lsls	r3, r3, #18
 8002264:	4013      	ands	r3, r2
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x5aa>
 8002268:	e024      	b.n	80022b4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e01f      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800227c:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <HAL_RCC_OscConfig+0x620>)
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	025b      	lsls	r3, r3, #9
 8002288:	401a      	ands	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	429a      	cmp	r2, r3
 8002290:	d10e      	bne.n	80022b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	220f      	movs	r2, #15
 8002296:	401a      	ands	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	23f0      	movs	r3, #240	@ 0xf0
 80022a4:	039b      	lsls	r3, r3, #14
 80022a6:	401a      	ands	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b008      	add	sp, #32
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	40021000 	.word	0x40021000
 80022c4:	00001388 	.word	0x00001388
 80022c8:	efffffff 	.word	0xefffffff
 80022cc:	feffffff 	.word	0xfeffffff
 80022d0:	ffc2ffff 	.word	0xffc2ffff

080022d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b3      	b.n	8002450 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002458 <HAL_RCC_ClockConfig+0x184>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2201      	movs	r2, #1
 80022ee:	4013      	ands	r3, r2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d911      	bls.n	800231a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b58      	ldr	r3, [pc, #352]	@ (8002458 <HAL_RCC_ClockConfig+0x184>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4393      	bics	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	4b55      	ldr	r3, [pc, #340]	@ (8002458 <HAL_RCC_ClockConfig+0x184>)
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002308:	4b53      	ldr	r3, [pc, #332]	@ (8002458 <HAL_RCC_ClockConfig+0x184>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e09a      	b.n	8002450 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d015      	beq.n	8002350 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2204      	movs	r2, #4
 800232a:	4013      	ands	r3, r2
 800232c:	d006      	beq.n	800233c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800232e:	4b4b      	ldr	r3, [pc, #300]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 8002334:	21e0      	movs	r1, #224	@ 0xe0
 8002336:	00c9      	lsls	r1, r1, #3
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	22f0      	movs	r2, #240	@ 0xf0
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	4b44      	ldr	r3, [pc, #272]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d040      	beq.n	80023dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	4013      	ands	r3, r2
 800236c:	d114      	bne.n	8002398 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e06e      	b.n	8002450 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b38      	ldr	r3, [pc, #224]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	049b      	lsls	r3, r3, #18
 8002382:	4013      	ands	r3, r2
 8002384:	d108      	bne.n	8002398 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e062      	b.n	8002450 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b34      	ldr	r3, [pc, #208]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2202      	movs	r2, #2
 8002390:	4013      	ands	r3, r2
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e05b      	b.n	8002450 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002398:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2203      	movs	r2, #3
 800239e:	4393      	bics	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7fe ffec 	bl	8001388 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b4:	e009      	b.n	80023ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b6:	f7fe ffe7 	bl	8001388 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	4a27      	ldr	r2, [pc, #156]	@ (8002460 <HAL_RCC_ClockConfig+0x18c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e042      	b.n	8002450 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b24      	ldr	r3, [pc, #144]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	220c      	movs	r2, #12
 80023d0:	401a      	ands	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1ec      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <HAL_RCC_ClockConfig+0x184>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d211      	bcs.n	800240e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_RCC_ClockConfig+0x184>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4393      	bics	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	4b18      	ldr	r3, [pc, #96]	@ (8002458 <HAL_RCC_ClockConfig+0x184>)
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fc:	4b16      	ldr	r3, [pc, #88]	@ (8002458 <HAL_RCC_ClockConfig+0x184>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	4013      	ands	r3, r2
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e020      	b.n	8002450 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2204      	movs	r2, #4
 8002414:	4013      	ands	r3, r2
 8002416:	d009      	beq.n	800242c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a11      	ldr	r2, [pc, #68]	@ (8002464 <HAL_RCC_ClockConfig+0x190>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 8002428:	430a      	orrs	r2, r1
 800242a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800242c:	f000 f820 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8002430:	0001      	movs	r1, r0
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_RCC_ClockConfig+0x188>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	220f      	movs	r2, #15
 800243a:	4013      	ands	r3, r2
 800243c:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <HAL_RCC_ClockConfig+0x194>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	000a      	movs	r2, r1
 8002442:	40da      	lsrs	r2, r3
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_ClockConfig+0x198>)
 8002446:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002448:	2003      	movs	r0, #3
 800244a:	f7fe ff57 	bl	80012fc <HAL_InitTick>
  
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b004      	add	sp, #16
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40022000 	.word	0x40022000
 800245c:	40021000 	.word	0x40021000
 8002460:	00001388 	.word	0x00001388
 8002464:	fffff8ff 	.word	0xfffff8ff
 8002468:	0800538c 	.word	0x0800538c
 800246c:	20000108 	.word	0x20000108

08002470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_RCC_GetSysClockFreq+0x9c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	220c      	movs	r2, #12
 8002494:	4013      	ands	r3, r2
 8002496:	2b04      	cmp	r3, #4
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x30>
 800249a:	2b08      	cmp	r3, #8
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x36>
 800249e:	e02c      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024a2:	613b      	str	r3, [r7, #16]
      break;
 80024a4:	e02c      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0c9b      	lsrs	r3, r3, #18
 80024aa:	220f      	movs	r2, #15
 80024ac:	4013      	ands	r3, r2
 80024ae:	4a19      	ldr	r2, [pc, #100]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024b4:	4b15      	ldr	r3, [pc, #84]	@ (800250c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	220f      	movs	r2, #15
 80024ba:	4013      	ands	r3, r2
 80024bc:	4a16      	ldr	r2, [pc, #88]	@ (8002518 <HAL_RCC_GetSysClockFreq+0xa8>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	025b      	lsls	r3, r3, #9
 80024c8:	4013      	ands	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	4810      	ldr	r0, [pc, #64]	@ (8002510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024d0:	f7fd fe24 	bl	800011c <__udivsi3>
 80024d4:	0003      	movs	r3, r0
 80024d6:	001a      	movs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4353      	muls	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e009      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	000a      	movs	r2, r1
 80024e4:	0152      	lsls	r2, r2, #5
 80024e6:	1a52      	subs	r2, r2, r1
 80024e8:	0193      	lsls	r3, r2, #6
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	185b      	adds	r3, r3, r1
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	613b      	str	r3, [r7, #16]
      break;
 80024f8:	e002      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fc:	613b      	str	r3, [r7, #16]
      break;
 80024fe:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002500:	693b      	ldr	r3, [r7, #16]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b006      	add	sp, #24
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	40021000 	.word	0x40021000
 8002510:	007a1200 	.word	0x007a1200
 8002514:	080053a4 	.word	0x080053a4
 8002518:	080053b4 	.word	0x080053b4

0800251c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002520:	4b02      	ldr	r3, [pc, #8]	@ (800252c <HAL_RCC_GetHCLKFreq+0x10>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	20000108 	.word	0x20000108

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002534:	f7ff fff2 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002538:	0001      	movs	r1, r0
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	2207      	movs	r2, #7
 8002542:	4013      	ands	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	40d9      	lsrs	r1, r3
 800254a:	000b      	movs	r3, r1
}    
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	40021000 	.word	0x40021000
 8002558:	0800539c 	.word	0x0800539c

0800255c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	@ 0x80
 8002572:	025b      	lsls	r3, r3, #9
 8002574:	4013      	ands	r3, r2
 8002576:	d100      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002578:	e08e      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2017      	movs	r0, #23
 800257c:	183b      	adds	r3, r7, r0
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b5f      	ldr	r3, [pc, #380]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	2380      	movs	r3, #128	@ 0x80
 8002588:	055b      	lsls	r3, r3, #21
 800258a:	4013      	ands	r3, r2
 800258c:	d110      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b5c      	ldr	r3, [pc, #368]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002590:	69da      	ldr	r2, [r3, #28]
 8002592:	4b5b      	ldr	r3, [pc, #364]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002594:	2180      	movs	r1, #128	@ 0x80
 8002596:	0549      	lsls	r1, r1, #21
 8002598:	430a      	orrs	r2, r1
 800259a:	61da      	str	r2, [r3, #28]
 800259c:	4b58      	ldr	r3, [pc, #352]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	055b      	lsls	r3, r3, #21
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025aa:	183b      	adds	r3, r7, r0
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b54      	ldr	r3, [pc, #336]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d11a      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025bc:	4b51      	ldr	r3, [pc, #324]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80025c2:	2180      	movs	r1, #128	@ 0x80
 80025c4:	0049      	lsls	r1, r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe fedd 	bl	8001388 <HAL_GetTick>
 80025ce:	0003      	movs	r3, r0
 80025d0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	e008      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d4:	f7fe fed8 	bl	8001388 <HAL_GetTick>
 80025d8:	0002      	movs	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	@ 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e087      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b47      	ldr	r3, [pc, #284]	@ (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025f2:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	23c0      	movs	r3, #192	@ 0xc0
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d034      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	23c0      	movs	r3, #192	@ 0xc0
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4013      	ands	r3, r2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	429a      	cmp	r2, r3
 8002612:	d02c      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002614:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a3b      	ldr	r2, [pc, #236]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800261a:	4013      	ands	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800261e:	4b38      	ldr	r3, [pc, #224]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002620:	6a1a      	ldr	r2, [r3, #32]
 8002622:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002624:	2180      	movs	r1, #128	@ 0x80
 8002626:	0249      	lsls	r1, r1, #9
 8002628:	430a      	orrs	r2, r1
 800262a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800262c:	4b34      	ldr	r3, [pc, #208]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800262e:	6a1a      	ldr	r2, [r3, #32]
 8002630:	4b33      	ldr	r3, [pc, #204]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002632:	4936      	ldr	r1, [pc, #216]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002634:	400a      	ands	r2, r1
 8002636:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002638:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fe9f 	bl	8001388 <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	e009      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f7fe fe9a 	bl	8001388 <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	4a2d      	ldr	r2, [pc, #180]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e048      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	4b26      	ldr	r3, [pc, #152]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	2202      	movs	r2, #2
 800266a:	4013      	ands	r3, r2
 800266c:	d0f0      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a25      	ldr	r2, [pc, #148]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002674:	4013      	ands	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800267e:	430a      	orrs	r2, r1
 8002680:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002682:	2317      	movs	r3, #23
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002692:	4920      	ldr	r1, [pc, #128]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002694:	400a      	ands	r2, r1
 8002696:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a2:	4b17      	ldr	r3, [pc, #92]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	2203      	movs	r2, #3
 80026a8:	4393      	bics	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2220      	movs	r2, #32
 80026bc:	4013      	ands	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	2210      	movs	r2, #16
 80026c6:	4393      	bics	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4013      	ands	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026e0:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	2240      	movs	r2, #64	@ 0x40
 80026e6:	4393      	bics	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80026f0:	430a      	orrs	r2, r1
 80026f2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b006      	add	sp, #24
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
 8002708:	fffffcff 	.word	0xfffffcff
 800270c:	fffeffff 	.word	0xfffeffff
 8002710:	00001388 	.word	0x00001388
 8002714:	efffffff 	.word	0xefffffff

08002718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e042      	b.n	80027b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	223d      	movs	r2, #61	@ 0x3d
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	223c      	movs	r2, #60	@ 0x3c
 800273a:	2100      	movs	r1, #0
 800273c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	0018      	movs	r0, r3
 8002742:	f7fe fbf7 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	223d      	movs	r2, #61	@ 0x3d
 800274a:	2102      	movs	r1, #2
 800274c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3304      	adds	r3, #4
 8002756:	0019      	movs	r1, r3
 8002758:	0010      	movs	r0, r2
 800275a:	f000 fa8f 	bl	8002c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2246      	movs	r2, #70	@ 0x46
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	223e      	movs	r2, #62	@ 0x3e
 800276a:	2101      	movs	r1, #1
 800276c:	5499      	strb	r1, [r3, r2]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	223f      	movs	r2, #63	@ 0x3f
 8002772:	2101      	movs	r1, #1
 8002774:	5499      	strb	r1, [r3, r2]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2240      	movs	r2, #64	@ 0x40
 800277a:	2101      	movs	r1, #1
 800277c:	5499      	strb	r1, [r3, r2]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2241      	movs	r2, #65	@ 0x41
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2242      	movs	r2, #66	@ 0x42
 800278a:	2101      	movs	r1, #1
 800278c:	5499      	strb	r1, [r3, r2]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2243      	movs	r2, #67	@ 0x43
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2244      	movs	r2, #68	@ 0x44
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2245      	movs	r2, #69	@ 0x45
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223d      	movs	r2, #61	@ 0x3d
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	223d      	movs	r2, #61	@ 0x3d
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d001      	beq.n	80027d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e03b      	b.n	8002848 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223d      	movs	r2, #61	@ 0x3d
 80027d4:	2102      	movs	r1, #2
 80027d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a18      	ldr	r2, [pc, #96]	@ (8002850 <HAL_TIM_Base_Start_IT+0x98>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00f      	beq.n	8002812 <HAL_TIM_Base_Start_IT+0x5a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d009      	beq.n	8002812 <HAL_TIM_Base_Start_IT+0x5a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <HAL_TIM_Base_Start_IT+0x9c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_TIM_Base_Start_IT+0x5a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a12      	ldr	r2, [pc, #72]	@ (8002858 <HAL_TIM_Base_Start_IT+0xa0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d111      	bne.n	8002836 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2207      	movs	r2, #7
 800281a:	4013      	ands	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d010      	beq.n	8002846 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002834:	e007      	b.n	8002846 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	430a      	orrs	r2, r1
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40000400 	.word	0x40000400
 8002858:	40014000 	.word	0x40014000

0800285c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2101      	movs	r1, #1
 8002870:	438a      	bics	r2, r1
 8002872:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a0d      	ldr	r2, [pc, #52]	@ (80028b0 <HAL_TIM_Base_Stop_IT+0x54>)
 800287c:	4013      	ands	r3, r2
 800287e:	d10d      	bne.n	800289c <HAL_TIM_Base_Stop_IT+0x40>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a0b      	ldr	r2, [pc, #44]	@ (80028b4 <HAL_TIM_Base_Stop_IT+0x58>)
 8002888:	4013      	ands	r3, r2
 800288a:	d107      	bne.n	800289c <HAL_TIM_Base_Stop_IT+0x40>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	438a      	bics	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	223d      	movs	r2, #61	@ 0x3d
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b002      	add	sp, #8
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	00001111 	.word	0x00001111
 80028b4:	00000444 	.word	0x00000444

080028b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d021      	beq.n	800291c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d01d      	beq.n	800291c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2203      	movs	r2, #3
 80028e6:	4252      	negs	r2, r2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2203      	movs	r2, #3
 80028f8:	4013      	ands	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 f9a4 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 8002904:	e007      	b.n	8002916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0018      	movs	r0, r3
 800290a:	f000 f997 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f9a3 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2204      	movs	r2, #4
 8002920:	4013      	ands	r3, r2
 8002922:	d022      	beq.n	800296a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2204      	movs	r2, #4
 8002928:	4013      	ands	r3, r2
 800292a:	d01e      	beq.n	800296a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2205      	movs	r2, #5
 8002932:	4252      	negs	r2, r2
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2202      	movs	r2, #2
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	23c0      	movs	r3, #192	@ 0xc0
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4013      	ands	r3, r2
 8002948:	d004      	beq.n	8002954 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f000 f97d 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 8002952:	e007      	b.n	8002964 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0018      	movs	r0, r3
 8002958:	f000 f970 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 f97c 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2208      	movs	r2, #8
 800296e:	4013      	ands	r3, r2
 8002970:	d021      	beq.n	80029b6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2208      	movs	r2, #8
 8002976:	4013      	ands	r3, r2
 8002978:	d01d      	beq.n	80029b6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2209      	movs	r2, #9
 8002980:	4252      	negs	r2, r2
 8002982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2204      	movs	r2, #4
 8002988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2203      	movs	r2, #3
 8002992:	4013      	ands	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0018      	movs	r0, r3
 800299a:	f000 f957 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 800299e:	e007      	b.n	80029b0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 f94a 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f956 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2210      	movs	r2, #16
 80029ba:	4013      	ands	r3, r2
 80029bc:	d022      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2210      	movs	r2, #16
 80029c2:	4013      	ands	r3, r2
 80029c4:	d01e      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2211      	movs	r2, #17
 80029cc:	4252      	negs	r2, r2
 80029ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2208      	movs	r2, #8
 80029d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	23c0      	movs	r3, #192	@ 0xc0
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d004      	beq.n	80029ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 f930 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 80029ec:	e007      	b.n	80029fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 f923 	bl	8002c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f92f 	bl	8002c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d00c      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4013      	ands	r3, r2
 8002a12:	d008      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4252      	negs	r2, r2
 8002a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7fe f80d 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d00c      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	4013      	ands	r3, r2
 8002a34:	d008      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2281      	movs	r2, #129	@ 0x81
 8002a3c:	4252      	negs	r2, r2
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 faa8 	bl	8002f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2240      	movs	r2, #64	@ 0x40
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d00c      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2240      	movs	r2, #64	@ 0x40
 8002a54:	4013      	ands	r3, r2
 8002a56:	d008      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2241      	movs	r2, #65	@ 0x41
 8002a5e:	4252      	negs	r2, r2
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f901 	bl	8002c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d00c      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	4013      	ands	r3, r2
 8002a78:	d008      	beq.n	8002a8c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2221      	movs	r2, #33	@ 0x21
 8002a80:	4252      	negs	r2, r2
 8002a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 fa7e 	bl	8002f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223c      	movs	r2, #60	@ 0x3c
 8002aaa:	5c9b      	ldrb	r3, [r3, r2]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIM_ConfigClockSource+0x20>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0bc      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x19a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	223c      	movs	r2, #60	@ 0x3c
 8002ab8:	2101      	movs	r1, #1
 8002aba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	223d      	movs	r2, #61	@ 0x3d
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2277      	movs	r2, #119	@ 0x77
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4a58      	ldr	r2, [pc, #352]	@ (8002c38 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2280      	movs	r2, #128	@ 0x80
 8002aea:	0192      	lsls	r2, r2, #6
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d040      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xde>
 8002af0:	2280      	movs	r2, #128	@ 0x80
 8002af2:	0192      	lsls	r2, r2, #6
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d900      	bls.n	8002afa <HAL_TIM_ConfigClockSource+0x66>
 8002af8:	e088      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	0152      	lsls	r2, r2, #5
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_TIM_ConfigClockSource+0x70>
 8002b02:	e088      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x182>
 8002b04:	2280      	movs	r2, #128	@ 0x80
 8002b06:	0152      	lsls	r2, r2, #5
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d900      	bls.n	8002b0e <HAL_TIM_ConfigClockSource+0x7a>
 8002b0c:	e07e      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b0e:	2b70      	cmp	r3, #112	@ 0x70
 8002b10:	d018      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0xb0>
 8002b12:	d900      	bls.n	8002b16 <HAL_TIM_ConfigClockSource+0x82>
 8002b14:	e07a      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b16:	2b60      	cmp	r3, #96	@ 0x60
 8002b18:	d04f      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0x126>
 8002b1a:	d900      	bls.n	8002b1e <HAL_TIM_ConfigClockSource+0x8a>
 8002b1c:	e076      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b1e:	2b50      	cmp	r3, #80	@ 0x50
 8002b20:	d03b      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0x106>
 8002b22:	d900      	bls.n	8002b26 <HAL_TIM_ConfigClockSource+0x92>
 8002b24:	e072      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b26:	2b40      	cmp	r3, #64	@ 0x40
 8002b28:	d057      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x146>
 8002b2a:	d900      	bls.n	8002b2e <HAL_TIM_ConfigClockSource+0x9a>
 8002b2c:	e06e      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b2e:	2b30      	cmp	r3, #48	@ 0x30
 8002b30:	d063      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x166>
 8002b32:	d86b      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d060      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x166>
 8002b38:	d868      	bhi.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d05d      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x166>
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d05b      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x166>
 8002b42:	e063      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b54:	f000 f99a 	bl	8002e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2277      	movs	r2, #119	@ 0x77
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
      break;
 8002b70:	e052      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b82:	f000 f983 	bl	8002e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2180      	movs	r1, #128	@ 0x80
 8002b92:	01c9      	lsls	r1, r1, #7
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
      break;
 8002b98:	e03e      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	f000 f8f6 	bl	8002d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2150      	movs	r1, #80	@ 0x50
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f950 	bl	8002e58 <TIM_ITRx_SetConfig>
      break;
 8002bb8:	e02e      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	f000 f914 	bl	8002df4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2160      	movs	r1, #96	@ 0x60
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 f940 	bl	8002e58 <TIM_ITRx_SetConfig>
      break;
 8002bd8:	e01e      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be6:	001a      	movs	r2, r3
 8002be8:	f000 f8d6 	bl	8002d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2140      	movs	r1, #64	@ 0x40
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 f930 	bl	8002e58 <TIM_ITRx_SetConfig>
      break;
 8002bf8:	e00e      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0019      	movs	r1, r3
 8002c04:	0010      	movs	r0, r2
 8002c06:	f000 f927 	bl	8002e58 <TIM_ITRx_SetConfig>
      break;
 8002c0a:	e005      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c16:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	223d      	movs	r2, #61	@ 0x3d
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	223c      	movs	r2, #60	@ 0x3c
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

  return status;
 8002c28:	230f      	movs	r3, #15
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b004      	add	sp, #16
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	ffff00ff 	.word	0xffff00ff

08002c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a3b      	ldr	r2, [pc, #236]	@ (8002d7c <TIM_Base_SetConfig+0x100>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d008      	beq.n	8002ca6 <TIM_Base_SetConfig+0x2a>
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	05db      	lsls	r3, r3, #23
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d003      	beq.n	8002ca6 <TIM_Base_SetConfig+0x2a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a37      	ldr	r2, [pc, #220]	@ (8002d80 <TIM_Base_SetConfig+0x104>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d108      	bne.n	8002cb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2270      	movs	r2, #112	@ 0x70
 8002caa:	4393      	bics	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a30      	ldr	r2, [pc, #192]	@ (8002d7c <TIM_Base_SetConfig+0x100>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d018      	beq.n	8002cf2 <TIM_Base_SetConfig+0x76>
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	05db      	lsls	r3, r3, #23
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d013      	beq.n	8002cf2 <TIM_Base_SetConfig+0x76>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8002d80 <TIM_Base_SetConfig+0x104>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00f      	beq.n	8002cf2 <TIM_Base_SetConfig+0x76>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d84 <TIM_Base_SetConfig+0x108>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0x76>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d88 <TIM_Base_SetConfig+0x10c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0x76>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a29      	ldr	r2, [pc, #164]	@ (8002d8c <TIM_Base_SetConfig+0x110>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0x76>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a28      	ldr	r2, [pc, #160]	@ (8002d90 <TIM_Base_SetConfig+0x114>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a27      	ldr	r2, [pc, #156]	@ (8002d94 <TIM_Base_SetConfig+0x118>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2280      	movs	r2, #128	@ 0x80
 8002d08:	4393      	bics	r3, r2
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	@ (8002d7c <TIM_Base_SetConfig+0x100>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00b      	beq.n	8002d4a <TIM_Base_SetConfig+0xce>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <TIM_Base_SetConfig+0x10c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d007      	beq.n	8002d4a <TIM_Base_SetConfig+0xce>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <TIM_Base_SetConfig+0x110>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <TIM_Base_SetConfig+0xce>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a12      	ldr	r2, [pc, #72]	@ (8002d90 <TIM_Base_SetConfig+0x114>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d103      	bne.n	8002d52 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d106      	bne.n	8002d72 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	611a      	str	r2, [r3, #16]
  }
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40002000 	.word	0x40002000
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800
 8002d94:	fffffcff 	.word	0xfffffcff

08002d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	2201      	movs	r2, #1
 8002db0:	4393      	bics	r3, r2
 8002db2:	001a      	movs	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	22f0      	movs	r2, #240	@ 0xf0
 8002dc2:	4393      	bics	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	220a      	movs	r2, #10
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	621a      	str	r2, [r3, #32]
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b006      	add	sp, #24
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	001a      	movs	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <TIM_TI2_ConfigInputStage+0x60>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	031b      	lsls	r3, r3, #12
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	22a0      	movs	r2, #160	@ 0xa0
 8002e30:	4393      	bics	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b006      	add	sp, #24
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	ffff0fff 	.word	0xffff0fff

08002e58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2270      	movs	r2, #112	@ 0x70
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	2207      	movs	r2, #7
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	609a      	str	r2, [r3, #8]
}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b004      	add	sp, #16
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <TIM_ETR_SetConfig+0x3c>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	021a      	lsls	r2, r3, #8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b006      	add	sp, #24
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	ffff00ff 	.word	0xffff00ff

08002ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	223c      	movs	r2, #60	@ 0x3c
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e047      	b.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	223c      	movs	r2, #60	@ 0x3c
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	223d      	movs	r2, #61	@ 0x3d
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2270      	movs	r2, #112	@ 0x70
 8002f08:	4393      	bics	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00f      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	@ 0x80
 8002f2e:	05db      	lsls	r3, r3, #23
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d009      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a11      	ldr	r2, [pc, #68]	@ (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a10      	ldr	r2, [pc, #64]	@ (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10c      	bne.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2280      	movs	r2, #128	@ 0x80
 8002f4c:	4393      	bics	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	223d      	movs	r2, #61	@ 0x3d
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223c      	movs	r2, #60	@ 0x3c
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40014000 	.word	0x40014000

08002f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b002      	add	sp, #8
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa0:	46c0      	nop			@ (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e044      	b.n	8003044 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2278      	movs	r2, #120	@ 0x78
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7fd ffd5 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2224      	movs	r2, #36	@ 0x24
 8002fd6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	438a      	bics	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 fd66 	bl	8003ac4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fc22 	bl	8003844 <UART_SetConfig>
 8003000:	0003      	movs	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e01c      	b.n	8003044 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	490d      	ldr	r1, [pc, #52]	@ (800304c <HAL_UART_Init+0xa4>)
 8003016:	400a      	ands	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	212a      	movs	r1, #42	@ 0x2a
 8003026:	438a      	bics	r2, r1
 8003028:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f000 fdf5 	bl	8003c2c <UART_CheckIdleState>
 8003042:	0003      	movs	r3, r0
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}
 800304c:	ffffb7ff 	.word	0xffffb7ff

08003050 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	@ 0x28
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	1dbb      	adds	r3, r7, #6
 800305e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003064:	2b20      	cmp	r3, #32
 8003066:	d000      	beq.n	800306a <HAL_UART_Transmit+0x1a>
 8003068:	e08c      	b.n	8003184 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_UART_Transmit+0x28>
 8003070:	1dbb      	adds	r3, r7, #6
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e084      	b.n	8003186 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	2380      	movs	r3, #128	@ 0x80
 8003082:	015b      	lsls	r3, r3, #5
 8003084:	429a      	cmp	r2, r3
 8003086:	d109      	bne.n	800309c <HAL_UART_Transmit+0x4c>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	d001      	beq.n	800309c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e074      	b.n	8003186 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2284      	movs	r2, #132	@ 0x84
 80030a0:	2100      	movs	r1, #0
 80030a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2221      	movs	r2, #33	@ 0x21
 80030a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030aa:	f7fe f96d 	bl	8001388 <HAL_GetTick>
 80030ae:	0003      	movs	r3, r0
 80030b0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1dba      	adds	r2, r7, #6
 80030b6:	2150      	movs	r1, #80	@ 0x50
 80030b8:	8812      	ldrh	r2, [r2, #0]
 80030ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1dba      	adds	r2, r7, #6
 80030c0:	2152      	movs	r1, #82	@ 0x52
 80030c2:	8812      	ldrh	r2, [r2, #0]
 80030c4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	015b      	lsls	r3, r3, #5
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d108      	bne.n	80030e4 <HAL_UART_Transmit+0x94>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e003      	b.n	80030ec <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030ec:	e02f      	b.n	800314e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	0013      	movs	r3, r2
 80030f8:	2200      	movs	r2, #0
 80030fa:	2180      	movs	r1, #128	@ 0x80
 80030fc:	f000 fe3e 	bl	8003d7c <UART_WaitOnFlagUntilTimeout>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d004      	beq.n	800310e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e03b      	b.n	8003186 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	881a      	ldrh	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	05d2      	lsls	r2, r2, #23
 800311e:	0dd2      	lsrs	r2, r2, #23
 8003120:	b292      	uxth	r2, r2
 8003122:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	3302      	adds	r3, #2
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	e007      	b.n	800313c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3301      	adds	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2252      	movs	r2, #82	@ 0x52
 8003140:	5a9b      	ldrh	r3, [r3, r2]
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b299      	uxth	r1, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2252      	movs	r2, #82	@ 0x52
 800314c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2252      	movs	r2, #82	@ 0x52
 8003152:	5a9b      	ldrh	r3, [r3, r2]
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1c9      	bne.n	80030ee <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	0013      	movs	r3, r2
 8003164:	2200      	movs	r2, #0
 8003166:	2140      	movs	r1, #64	@ 0x40
 8003168:	f000 fe08 	bl	8003d7c <UART_WaitOnFlagUntilTimeout>
 800316c:	1e03      	subs	r3, r0, #0
 800316e:	d004      	beq.n	800317a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e005      	b.n	8003186 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b008      	add	sp, #32
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b088      	sub	sp, #32
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	1dbb      	adds	r3, r7, #6
 800319a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2280      	movs	r2, #128	@ 0x80
 80031a0:	589b      	ldr	r3, [r3, r2]
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d145      	bne.n	8003232 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_UART_Receive_DMA+0x26>
 80031ac:	1dbb      	adds	r3, r7, #6
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e03d      	b.n	8003234 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	015b      	lsls	r3, r3, #5
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d109      	bne.n	80031d8 <HAL_UART_Receive_DMA+0x4a>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2201      	movs	r2, #1
 80031d0:	4013      	ands	r3, r2
 80031d2:	d001      	beq.n	80031d8 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e02d      	b.n	8003234 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	4013      	ands	r3, r2
 80031ea:	d019      	beq.n	8003220 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	613b      	str	r3, [r7, #16]
  return(result);
 80031f2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	2301      	movs	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2180      	movs	r1, #128	@ 0x80
 800320e:	04c9      	lsls	r1, r1, #19
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f383 8810 	msr	PRIMASK, r3
}
 800321e:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003220:	1dbb      	adds	r3, r7, #6
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	0018      	movs	r0, r3
 800322a:	f000 fe17 	bl	8003e5c <UART_Start_Receive_DMA>
 800322e:	0003      	movs	r3, r0
 8003230:	e000      	b.n	8003234 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b008      	add	sp, #32
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b0ab      	sub	sp, #172	@ 0xac
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	22a4      	movs	r2, #164	@ 0xa4
 800324c:	18b9      	adds	r1, r7, r2
 800324e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	20a0      	movs	r0, #160	@ 0xa0
 8003258:	1839      	adds	r1, r7, r0
 800325a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	219c      	movs	r1, #156	@ 0x9c
 8003264:	1879      	adds	r1, r7, r1
 8003266:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003268:	0011      	movs	r1, r2
 800326a:	18bb      	adds	r3, r7, r2
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a99      	ldr	r2, [pc, #612]	@ (80034d4 <HAL_UART_IRQHandler+0x298>)
 8003270:	4013      	ands	r3, r2
 8003272:	2298      	movs	r2, #152	@ 0x98
 8003274:	18bc      	adds	r4, r7, r2
 8003276:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003278:	18bb      	adds	r3, r7, r2
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d114      	bne.n	80032aa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003280:	187b      	adds	r3, r7, r1
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2220      	movs	r2, #32
 8003286:	4013      	ands	r3, r2
 8003288:	d00f      	beq.n	80032aa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800328a:	183b      	adds	r3, r7, r0
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2220      	movs	r2, #32
 8003290:	4013      	ands	r3, r2
 8003292:	d00a      	beq.n	80032aa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003298:	2b00      	cmp	r3, #0
 800329a:	d100      	bne.n	800329e <HAL_UART_IRQHandler+0x62>
 800329c:	e29e      	b.n	80037dc <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	0010      	movs	r0, r2
 80032a6:	4798      	blx	r3
      }
      return;
 80032a8:	e298      	b.n	80037dc <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032aa:	2398      	movs	r3, #152	@ 0x98
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d100      	bne.n	80032b6 <HAL_UART_IRQHandler+0x7a>
 80032b4:	e114      	b.n	80034e0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032b6:	239c      	movs	r3, #156	@ 0x9c
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2201      	movs	r2, #1
 80032be:	4013      	ands	r3, r2
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032c2:	23a0      	movs	r3, #160	@ 0xa0
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a83      	ldr	r2, [pc, #524]	@ (80034d8 <HAL_UART_IRQHandler+0x29c>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	d100      	bne.n	80032d0 <HAL_UART_IRQHandler+0x94>
 80032ce:	e107      	b.n	80034e0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032d0:	23a4      	movs	r3, #164	@ 0xa4
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	4013      	ands	r3, r2
 80032da:	d012      	beq.n	8003302 <HAL_UART_IRQHandler+0xc6>
 80032dc:	23a0      	movs	r3, #160	@ 0xa0
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4013      	ands	r3, r2
 80032e8:	d00b      	beq.n	8003302 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2284      	movs	r2, #132	@ 0x84
 80032f6:	589b      	ldr	r3, [r3, r2]
 80032f8:	2201      	movs	r2, #1
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2184      	movs	r1, #132	@ 0x84
 8003300:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003302:	23a4      	movs	r3, #164	@ 0xa4
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2202      	movs	r2, #2
 800330a:	4013      	ands	r3, r2
 800330c:	d011      	beq.n	8003332 <HAL_UART_IRQHandler+0xf6>
 800330e:	239c      	movs	r3, #156	@ 0x9c
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2201      	movs	r2, #1
 8003316:	4013      	ands	r3, r2
 8003318:	d00b      	beq.n	8003332 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2202      	movs	r2, #2
 8003320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2284      	movs	r2, #132	@ 0x84
 8003326:	589b      	ldr	r3, [r3, r2]
 8003328:	2204      	movs	r2, #4
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2184      	movs	r1, #132	@ 0x84
 8003330:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003332:	23a4      	movs	r3, #164	@ 0xa4
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2204      	movs	r2, #4
 800333a:	4013      	ands	r3, r2
 800333c:	d011      	beq.n	8003362 <HAL_UART_IRQHandler+0x126>
 800333e:	239c      	movs	r3, #156	@ 0x9c
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2201      	movs	r2, #1
 8003346:	4013      	ands	r3, r2
 8003348:	d00b      	beq.n	8003362 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2204      	movs	r2, #4
 8003350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2284      	movs	r2, #132	@ 0x84
 8003356:	589b      	ldr	r3, [r3, r2]
 8003358:	2202      	movs	r2, #2
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2184      	movs	r1, #132	@ 0x84
 8003360:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003362:	23a4      	movs	r3, #164	@ 0xa4
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2208      	movs	r2, #8
 800336a:	4013      	ands	r3, r2
 800336c:	d017      	beq.n	800339e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800336e:	23a0      	movs	r3, #160	@ 0xa0
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2220      	movs	r2, #32
 8003376:	4013      	ands	r3, r2
 8003378:	d105      	bne.n	8003386 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800337a:	239c      	movs	r3, #156	@ 0x9c
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003384:	d00b      	beq.n	800339e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2208      	movs	r2, #8
 800338c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2284      	movs	r2, #132	@ 0x84
 8003392:	589b      	ldr	r3, [r3, r2]
 8003394:	2208      	movs	r2, #8
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2184      	movs	r1, #132	@ 0x84
 800339c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800339e:	23a4      	movs	r3, #164	@ 0xa4
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	4013      	ands	r3, r2
 80033aa:	d013      	beq.n	80033d4 <HAL_UART_IRQHandler+0x198>
 80033ac:	23a0      	movs	r3, #160	@ 0xa0
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	2380      	movs	r3, #128	@ 0x80
 80033b4:	04db      	lsls	r3, r3, #19
 80033b6:	4013      	ands	r3, r2
 80033b8:	d00c      	beq.n	80033d4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2280      	movs	r2, #128	@ 0x80
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2284      	movs	r2, #132	@ 0x84
 80033c8:	589b      	ldr	r3, [r3, r2]
 80033ca:	2220      	movs	r2, #32
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2184      	movs	r1, #132	@ 0x84
 80033d2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2284      	movs	r2, #132	@ 0x84
 80033d8:	589b      	ldr	r3, [r3, r2]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d100      	bne.n	80033e0 <HAL_UART_IRQHandler+0x1a4>
 80033de:	e1ff      	b.n	80037e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033e0:	23a4      	movs	r3, #164	@ 0xa4
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2220      	movs	r2, #32
 80033e8:	4013      	ands	r3, r2
 80033ea:	d00e      	beq.n	800340a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033ec:	23a0      	movs	r3, #160	@ 0xa0
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2220      	movs	r2, #32
 80033f4:	4013      	ands	r3, r2
 80033f6:	d008      	beq.n	800340a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	0010      	movs	r0, r2
 8003408:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2284      	movs	r2, #132	@ 0x84
 800340e:	589b      	ldr	r3, [r3, r2]
 8003410:	2194      	movs	r1, #148	@ 0x94
 8003412:	187a      	adds	r2, r7, r1
 8003414:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2240      	movs	r2, #64	@ 0x40
 800341e:	4013      	ands	r3, r2
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d004      	beq.n	800342e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003424:	187b      	adds	r3, r7, r1
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2228      	movs	r2, #40	@ 0x28
 800342a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800342c:	d047      	beq.n	80034be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 fdd7 	bl	8003fe4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2240      	movs	r2, #64	@ 0x40
 800343e:	4013      	ands	r3, r2
 8003440:	2b40      	cmp	r3, #64	@ 0x40
 8003442:	d137      	bne.n	80034b4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003444:	f3ef 8310 	mrs	r3, PRIMASK
 8003448:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800344a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800344c:	2090      	movs	r0, #144	@ 0x90
 800344e:	183a      	adds	r2, r7, r0
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	2301      	movs	r3, #1
 8003454:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003458:	f383 8810 	msr	PRIMASK, r3
}
 800345c:	46c0      	nop			@ (mov r8, r8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2140      	movs	r1, #64	@ 0x40
 800346a:	438a      	bics	r2, r1
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	183b      	adds	r3, r7, r0
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003488:	4a14      	ldr	r2, [pc, #80]	@ (80034dc <HAL_UART_IRQHandler+0x2a0>)
 800348a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003490:	0018      	movs	r0, r3
 8003492:	f7fe f947 	bl	8001724 <HAL_DMA_Abort_IT>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d01a      	beq.n	80034d0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a4:	0018      	movs	r0, r3
 80034a6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	e012      	b.n	80034d0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f000 f9b5 	bl	800381c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b2:	e00d      	b.n	80034d0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f9b0 	bl	800381c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	e008      	b.n	80034d0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f9ab 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2284      	movs	r2, #132	@ 0x84
 80034ca:	2100      	movs	r1, #0
 80034cc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80034ce:	e187      	b.n	80037e0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d0:	46c0      	nop			@ (mov r8, r8)
    return;
 80034d2:	e185      	b.n	80037e0 <HAL_UART_IRQHandler+0x5a4>
 80034d4:	0000080f 	.word	0x0000080f
 80034d8:	04000120 	.word	0x04000120
 80034dc:	0800429f 	.word	0x0800429f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d000      	beq.n	80034ea <HAL_UART_IRQHandler+0x2ae>
 80034e8:	e139      	b.n	800375e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034ea:	23a4      	movs	r3, #164	@ 0xa4
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2210      	movs	r2, #16
 80034f2:	4013      	ands	r3, r2
 80034f4:	d100      	bne.n	80034f8 <HAL_UART_IRQHandler+0x2bc>
 80034f6:	e132      	b.n	800375e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034f8:	23a0      	movs	r3, #160	@ 0xa0
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2210      	movs	r2, #16
 8003500:	4013      	ands	r3, r2
 8003502:	d100      	bne.n	8003506 <HAL_UART_IRQHandler+0x2ca>
 8003504:	e12b      	b.n	800375e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2210      	movs	r2, #16
 800350c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2240      	movs	r2, #64	@ 0x40
 8003516:	4013      	ands	r3, r2
 8003518:	2b40      	cmp	r3, #64	@ 0x40
 800351a:	d000      	beq.n	800351e <HAL_UART_IRQHandler+0x2e2>
 800351c:	e09f      	b.n	800365e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	217e      	movs	r1, #126	@ 0x7e
 8003528:	187b      	adds	r3, r7, r1
 800352a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800352c:	187b      	adds	r3, r7, r1
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d100      	bne.n	8003536 <HAL_UART_IRQHandler+0x2fa>
 8003534:	e156      	b.n	80037e4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2258      	movs	r2, #88	@ 0x58
 800353a:	5a9b      	ldrh	r3, [r3, r2]
 800353c:	187a      	adds	r2, r7, r1
 800353e:	8812      	ldrh	r2, [r2, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d300      	bcc.n	8003546 <HAL_UART_IRQHandler+0x30a>
 8003544:	e14e      	b.n	80037e4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	187a      	adds	r2, r7, r1
 800354a:	215a      	movs	r1, #90	@ 0x5a
 800354c:	8812      	ldrh	r2, [r2, #0]
 800354e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b20      	cmp	r3, #32
 8003558:	d06f      	beq.n	800363a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355a:	f3ef 8310 	mrs	r3, PRIMASK
 800355e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003562:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003564:	2301      	movs	r3, #1
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	499e      	ldr	r1, [pc, #632]	@ (80037f4 <HAL_UART_IRQHandler+0x5b8>)
 800357c:	400a      	ands	r2, r1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003586:	f383 8810 	msr	PRIMASK, r3
}
 800358a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800358c:	f3ef 8310 	mrs	r3, PRIMASK
 8003590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003594:	677b      	str	r3, [r7, #116]	@ 0x74
 8003596:	2301      	movs	r3, #1
 8003598:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800359c:	f383 8810 	msr	PRIMASK, r3
}
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	438a      	bics	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b8:	f383 8810 	msr	PRIMASK, r3
}
 80035bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035be:	f3ef 8310 	mrs	r3, PRIMASK
 80035c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80035c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80035c8:	2301      	movs	r3, #1
 80035ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ce:	f383 8810 	msr	PRIMASK, r3
}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2140      	movs	r1, #64	@ 0x40
 80035e0:	438a      	bics	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035e6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ea:	f383 8810 	msr	PRIMASK, r3
}
 80035ee:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2280      	movs	r2, #128	@ 0x80
 80035f4:	2120      	movs	r1, #32
 80035f6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003606:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003608:	2301      	movs	r3, #1
 800360a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2110      	movs	r1, #16
 8003620:	438a      	bics	r2, r1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003626:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003634:	0018      	movs	r0, r3
 8003636:	f7fe f83d 	bl	80016b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2258      	movs	r2, #88	@ 0x58
 8003644:	5a9a      	ldrh	r2, [r3, r2]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	215a      	movs	r1, #90	@ 0x5a
 800364a:	5a5b      	ldrh	r3, [r3, r1]
 800364c:	b29b      	uxth	r3, r3
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0011      	movs	r1, r2
 8003656:	0018      	movs	r0, r3
 8003658:	f000 f8e8 	bl	800382c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800365c:	e0c2      	b.n	80037e4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2258      	movs	r2, #88	@ 0x58
 8003662:	5a99      	ldrh	r1, [r3, r2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	225a      	movs	r2, #90	@ 0x5a
 8003668:	5a9b      	ldrh	r3, [r3, r2]
 800366a:	b29a      	uxth	r2, r3
 800366c:	208e      	movs	r0, #142	@ 0x8e
 800366e:	183b      	adds	r3, r7, r0
 8003670:	1a8a      	subs	r2, r1, r2
 8003672:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	225a      	movs	r2, #90	@ 0x5a
 8003678:	5a9b      	ldrh	r3, [r3, r2]
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d100      	bne.n	8003682 <HAL_UART_IRQHandler+0x446>
 8003680:	e0b2      	b.n	80037e8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003682:	183b      	adds	r3, r7, r0
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d100      	bne.n	800368c <HAL_UART_IRQHandler+0x450>
 800368a:	e0ad      	b.n	80037e8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800368c:	f3ef 8310 	mrs	r3, PRIMASK
 8003690:	60fb      	str	r3, [r7, #12]
  return(result);
 8003692:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003694:	2488      	movs	r4, #136	@ 0x88
 8003696:	193a      	adds	r2, r7, r4
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	2301      	movs	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4951      	ldr	r1, [pc, #324]	@ (80037f8 <HAL_UART_IRQHandler+0x5bc>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f383 8810 	msr	PRIMASK, r3
}
 80036c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c4:	f3ef 8310 	mrs	r3, PRIMASK
 80036c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80036ca:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	2484      	movs	r4, #132	@ 0x84
 80036ce:	193a      	adds	r2, r7, r4
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	2301      	movs	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f383 8810 	msr	PRIMASK, r3
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	438a      	bics	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	193b      	adds	r3, r7, r4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f383 8810 	msr	PRIMASK, r3
}
 80036fa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2280      	movs	r2, #128	@ 0x80
 8003700:	2120      	movs	r1, #32
 8003702:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003710:	f3ef 8310 	mrs	r3, PRIMASK
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	2480      	movs	r4, #128	@ 0x80
 800371a:	193a      	adds	r2, r7, r4
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	2301      	movs	r3, #1
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003724:	f383 8810 	msr	PRIMASK, r3
}
 8003728:	46c0      	nop			@ (mov r8, r8)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2110      	movs	r1, #16
 8003736:	438a      	bics	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	193b      	adds	r3, r7, r4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800374e:	183b      	adds	r3, r7, r0
 8003750:	881a      	ldrh	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0011      	movs	r1, r2
 8003756:	0018      	movs	r0, r3
 8003758:	f000 f868 	bl	800382c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800375c:	e044      	b.n	80037e8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800375e:	23a4      	movs	r3, #164	@ 0xa4
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2380      	movs	r3, #128	@ 0x80
 8003766:	035b      	lsls	r3, r3, #13
 8003768:	4013      	ands	r3, r2
 800376a:	d010      	beq.n	800378e <HAL_UART_IRQHandler+0x552>
 800376c:	239c      	movs	r3, #156	@ 0x9c
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	03db      	lsls	r3, r3, #15
 8003776:	4013      	ands	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2280      	movs	r2, #128	@ 0x80
 8003780:	0352      	lsls	r2, r2, #13
 8003782:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	0018      	movs	r0, r3
 8003788:	f000 fdcb 	bl	8004322 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800378c:	e02f      	b.n	80037ee <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800378e:	23a4      	movs	r3, #164	@ 0xa4
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2280      	movs	r2, #128	@ 0x80
 8003796:	4013      	ands	r3, r2
 8003798:	d00f      	beq.n	80037ba <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800379a:	23a0      	movs	r3, #160	@ 0xa0
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2280      	movs	r2, #128	@ 0x80
 80037a2:	4013      	ands	r3, r2
 80037a4:	d009      	beq.n	80037ba <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01e      	beq.n	80037ec <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	0010      	movs	r0, r2
 80037b6:	4798      	blx	r3
    }
    return;
 80037b8:	e018      	b.n	80037ec <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037ba:	23a4      	movs	r3, #164	@ 0xa4
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2240      	movs	r2, #64	@ 0x40
 80037c2:	4013      	ands	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_UART_IRQHandler+0x5b2>
 80037c6:	23a0      	movs	r3, #160	@ 0xa0
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2240      	movs	r2, #64	@ 0x40
 80037ce:	4013      	ands	r3, r2
 80037d0:	d00d      	beq.n	80037ee <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 fd79 	bl	80042cc <UART_EndTransmit_IT>
    return;
 80037da:	e008      	b.n	80037ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80037dc:	46c0      	nop			@ (mov r8, r8)
 80037de:	e006      	b.n	80037ee <HAL_UART_IRQHandler+0x5b2>
    return;
 80037e0:	46c0      	nop			@ (mov r8, r8)
 80037e2:	e004      	b.n	80037ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80037e4:	46c0      	nop			@ (mov r8, r8)
 80037e6:	e002      	b.n	80037ee <HAL_UART_IRQHandler+0x5b2>
      return;
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	e000      	b.n	80037ee <HAL_UART_IRQHandler+0x5b2>
    return;
 80037ec:	46c0      	nop			@ (mov r8, r8)
  }

}
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b02b      	add	sp, #172	@ 0xac
 80037f2:	bd90      	pop	{r4, r7, pc}
 80037f4:	fffffeff 	.word	0xfffffeff
 80037f8:	fffffedf 	.word	0xfffffedf

080037fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003814:	46c0      	nop			@ (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	000a      	movs	r2, r1
 8003836:	1cbb      	adds	r3, r7, #2
 8003838:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b002      	add	sp, #8
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800384c:	231e      	movs	r3, #30
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a8d      	ldr	r2, [pc, #564]	@ (8003aa8 <UART_SetConfig+0x264>)
 8003874:	4013      	ands	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a88      	ldr	r2, [pc, #544]	@ (8003aac <UART_SetConfig+0x268>)
 800388a:	4013      	ands	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab0 <UART_SetConfig+0x26c>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a7b      	ldr	r2, [pc, #492]	@ (8003ab4 <UART_SetConfig+0x270>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d127      	bne.n	800391a <UART_SetConfig+0xd6>
 80038ca:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab8 <UART_SetConfig+0x274>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	2203      	movs	r2, #3
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d00d      	beq.n	80038f2 <UART_SetConfig+0xae>
 80038d6:	d81b      	bhi.n	8003910 <UART_SetConfig+0xcc>
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d014      	beq.n	8003906 <UART_SetConfig+0xc2>
 80038dc:	d818      	bhi.n	8003910 <UART_SetConfig+0xcc>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <UART_SetConfig+0xa4>
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d00a      	beq.n	80038fc <UART_SetConfig+0xb8>
 80038e6:	e013      	b.n	8003910 <UART_SetConfig+0xcc>
 80038e8:	231f      	movs	r3, #31
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e021      	b.n	8003936 <UART_SetConfig+0xf2>
 80038f2:	231f      	movs	r3, #31
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2202      	movs	r2, #2
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e01c      	b.n	8003936 <UART_SetConfig+0xf2>
 80038fc:	231f      	movs	r3, #31
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	2204      	movs	r2, #4
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e017      	b.n	8003936 <UART_SetConfig+0xf2>
 8003906:	231f      	movs	r3, #31
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2208      	movs	r2, #8
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e012      	b.n	8003936 <UART_SetConfig+0xf2>
 8003910:	231f      	movs	r3, #31
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2210      	movs	r2, #16
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e00d      	b.n	8003936 <UART_SetConfig+0xf2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a67      	ldr	r2, [pc, #412]	@ (8003abc <UART_SetConfig+0x278>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d104      	bne.n	800392e <UART_SetConfig+0xea>
 8003924:	231f      	movs	r3, #31
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e003      	b.n	8003936 <UART_SetConfig+0xf2>
 800392e:	231f      	movs	r3, #31
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2210      	movs	r2, #16
 8003934:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	2380      	movs	r3, #128	@ 0x80
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	429a      	cmp	r2, r3
 8003940:	d15c      	bne.n	80039fc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003942:	231f      	movs	r3, #31
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d015      	beq.n	8003978 <UART_SetConfig+0x134>
 800394c:	dc18      	bgt.n	8003980 <UART_SetConfig+0x13c>
 800394e:	2b04      	cmp	r3, #4
 8003950:	d00d      	beq.n	800396e <UART_SetConfig+0x12a>
 8003952:	dc15      	bgt.n	8003980 <UART_SetConfig+0x13c>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <UART_SetConfig+0x11a>
 8003958:	2b02      	cmp	r3, #2
 800395a:	d005      	beq.n	8003968 <UART_SetConfig+0x124>
 800395c:	e010      	b.n	8003980 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800395e:	f7fe fde7 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8003962:	0003      	movs	r3, r0
 8003964:	61bb      	str	r3, [r7, #24]
        break;
 8003966:	e012      	b.n	800398e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003968:	4b55      	ldr	r3, [pc, #340]	@ (8003ac0 <UART_SetConfig+0x27c>)
 800396a:	61bb      	str	r3, [r7, #24]
        break;
 800396c:	e00f      	b.n	800398e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396e:	f7fe fd7f 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8003972:	0003      	movs	r3, r0
 8003974:	61bb      	str	r3, [r7, #24]
        break;
 8003976:	e00a      	b.n	800398e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	61bb      	str	r3, [r7, #24]
        break;
 800397e:	e006      	b.n	800398e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003984:	231e      	movs	r3, #30
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
        break;
 800398c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d100      	bne.n	8003996 <UART_SetConfig+0x152>
 8003994:	e07a      	b.n	8003a8c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	005a      	lsls	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	18d2      	adds	r2, r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0019      	movs	r1, r3
 80039a8:	0010      	movs	r0, r2
 80039aa:	f7fc fbb7 	bl	800011c <__udivsi3>
 80039ae:	0003      	movs	r3, r0
 80039b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d91c      	bls.n	80039f2 <UART_SetConfig+0x1ae>
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	2380      	movs	r3, #128	@ 0x80
 80039bc:	025b      	lsls	r3, r3, #9
 80039be:	429a      	cmp	r2, r3
 80039c0:	d217      	bcs.n	80039f2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	200e      	movs	r0, #14
 80039c8:	183b      	adds	r3, r7, r0
 80039ca:	210f      	movs	r1, #15
 80039cc:	438a      	bics	r2, r1
 80039ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2207      	movs	r2, #7
 80039d8:	4013      	ands	r3, r2
 80039da:	b299      	uxth	r1, r3
 80039dc:	183b      	adds	r3, r7, r0
 80039de:	183a      	adds	r2, r7, r0
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	183a      	adds	r2, r7, r0
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	e04c      	b.n	8003a8c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80039f2:	231e      	movs	r3, #30
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e047      	b.n	8003a8c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039fc:	231f      	movs	r3, #31
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d015      	beq.n	8003a32 <UART_SetConfig+0x1ee>
 8003a06:	dc18      	bgt.n	8003a3a <UART_SetConfig+0x1f6>
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d00d      	beq.n	8003a28 <UART_SetConfig+0x1e4>
 8003a0c:	dc15      	bgt.n	8003a3a <UART_SetConfig+0x1f6>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <UART_SetConfig+0x1d4>
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d005      	beq.n	8003a22 <UART_SetConfig+0x1de>
 8003a16:	e010      	b.n	8003a3a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a18:	f7fe fd8a 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	61bb      	str	r3, [r7, #24]
        break;
 8003a20:	e012      	b.n	8003a48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a22:	4b27      	ldr	r3, [pc, #156]	@ (8003ac0 <UART_SetConfig+0x27c>)
 8003a24:	61bb      	str	r3, [r7, #24]
        break;
 8003a26:	e00f      	b.n	8003a48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a28:	f7fe fd22 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e00a      	b.n	8003a48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	61bb      	str	r3, [r7, #24]
        break;
 8003a38:	e006      	b.n	8003a48 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a3e:	231e      	movs	r3, #30
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
        break;
 8003a46:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01e      	beq.n	8003a8c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	085a      	lsrs	r2, r3, #1
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	18d2      	adds	r2, r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	0010      	movs	r0, r2
 8003a60:	f7fc fb5c 	bl	800011c <__udivsi3>
 8003a64:	0003      	movs	r3, r0
 8003a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d90a      	bls.n	8003a84 <UART_SetConfig+0x240>
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d205      	bcs.n	8003a84 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	e003      	b.n	8003a8c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003a84:	231e      	movs	r3, #30
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a98:	231e      	movs	r3, #30
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	781b      	ldrb	r3, [r3, #0]
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b008      	add	sp, #32
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	ffff69f3 	.word	0xffff69f3
 8003aac:	ffffcfff 	.word	0xffffcfff
 8003ab0:	fffff4ff 	.word	0xfffff4ff
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40004400 	.word	0x40004400
 8003ac0:	007a1200 	.word	0x007a1200

08003ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d00b      	beq.n	8003aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a4a      	ldr	r2, [pc, #296]	@ (8003c08 <UART_AdvFeatureConfig+0x144>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	2201      	movs	r2, #1
 8003af4:	4013      	ands	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a43      	ldr	r2, [pc, #268]	@ (8003c0c <UART_AdvFeatureConfig+0x148>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	2202      	movs	r2, #2
 8003b16:	4013      	ands	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a3b      	ldr	r2, [pc, #236]	@ (8003c10 <UART_AdvFeatureConfig+0x14c>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	2204      	movs	r2, #4
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a34      	ldr	r2, [pc, #208]	@ (8003c14 <UART_AdvFeatureConfig+0x150>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	2210      	movs	r2, #16
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <UART_AdvFeatureConfig+0x154>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	0019      	movs	r1, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4a25      	ldr	r2, [pc, #148]	@ (8003c1c <UART_AdvFeatureConfig+0x158>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	2240      	movs	r2, #64	@ 0x40
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d01d      	beq.n	8003bde <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c20 <UART_AdvFeatureConfig+0x15c>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	0019      	movs	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	035b      	lsls	r3, r3, #13
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d10b      	bne.n	8003bde <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	@ (8003c24 <UART_AdvFeatureConfig+0x160>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	2280      	movs	r2, #128	@ 0x80
 8003be4:	4013      	ands	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4a0e      	ldr	r2, [pc, #56]	@ (8003c28 <UART_AdvFeatureConfig+0x164>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }
}
 8003c00:	46c0      	nop			@ (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b002      	add	sp, #8
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	ffff7fff 	.word	0xffff7fff
 8003c0c:	fffdffff 	.word	0xfffdffff
 8003c10:	fffeffff 	.word	0xfffeffff
 8003c14:	fffbffff 	.word	0xfffbffff
 8003c18:	ffffefff 	.word	0xffffefff
 8003c1c:	ffffdfff 	.word	0xffffdfff
 8003c20:	ffefffff 	.word	0xffefffff
 8003c24:	ff9fffff 	.word	0xff9fffff
 8003c28:	fff7ffff 	.word	0xfff7ffff

08003c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b092      	sub	sp, #72	@ 0x48
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2284      	movs	r2, #132	@ 0x84
 8003c38:	2100      	movs	r1, #0
 8003c3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c3c:	f7fd fba4 	bl	8001388 <HAL_GetTick>
 8003c40:	0003      	movs	r3, r0
 8003c42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d12c      	bne.n	8003cac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c54:	2280      	movs	r2, #128	@ 0x80
 8003c56:	0391      	lsls	r1, r2, #14
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4a46      	ldr	r2, [pc, #280]	@ (8003d74 <UART_CheckIdleState+0x148>)
 8003c5c:	9200      	str	r2, [sp, #0]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f000 f88c 	bl	8003d7c <UART_WaitOnFlagUntilTimeout>
 8003c64:	1e03      	subs	r3, r0, #0
 8003c66:	d021      	beq.n	8003cac <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c68:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c72:	2301      	movs	r3, #1
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2180      	movs	r1, #128	@ 0x80
 8003c8a:	438a      	bics	r2, r1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c94:	f383 8810 	msr	PRIMASK, r3
}
 8003c98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2278      	movs	r2, #120	@ 0x78
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e05f      	b.n	8003d6c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d146      	bne.n	8003d48 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cbc:	2280      	movs	r2, #128	@ 0x80
 8003cbe:	03d1      	lsls	r1, r2, #15
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d74 <UART_CheckIdleState+0x148>)
 8003cc4:	9200      	str	r2, [sp, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f000 f858 	bl	8003d7c <UART_WaitOnFlagUntilTimeout>
 8003ccc:	1e03      	subs	r3, r0, #0
 8003cce:	d03b      	beq.n	8003d48 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cda:	2301      	movs	r3, #1
 8003cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f383 8810 	msr	PRIMASK, r3
}
 8003ce4:	46c0      	nop			@ (mov r8, r8)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4921      	ldr	r1, [pc, #132]	@ (8003d78 <UART_CheckIdleState+0x14c>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d02:	f3ef 8310 	mrs	r3, PRIMASK
 8003d06:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d08:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f383 8810 	msr	PRIMASK, r3
}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2101      	movs	r1, #1
 8003d24:	438a      	bics	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2280      	movs	r2, #128	@ 0x80
 8003d38:	2120      	movs	r1, #32
 8003d3a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2278      	movs	r2, #120	@ 0x78
 8003d40:	2100      	movs	r1, #0
 8003d42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e011      	b.n	8003d6c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2280      	movs	r2, #128	@ 0x80
 8003d52:	2120      	movs	r1, #32
 8003d54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2278      	movs	r2, #120	@ 0x78
 8003d66:	2100      	movs	r1, #0
 8003d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b010      	add	sp, #64	@ 0x40
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	01ffffff 	.word	0x01ffffff
 8003d78:	fffffedf 	.word	0xfffffedf

08003d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8c:	e051      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3301      	adds	r3, #1
 8003d92:	d04e      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d94:	f7fd faf8 	bl	8001388 <HAL_GetTick>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e051      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2204      	movs	r2, #4
 8003db6:	4013      	ands	r3, r2
 8003db8:	d03b      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b80      	cmp	r3, #128	@ 0x80
 8003dbe:	d038      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b40      	cmp	r3, #64	@ 0x40
 8003dc4:	d035      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d111      	bne.n	8003df8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 f900 	bl	8003fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2284      	movs	r2, #132	@ 0x84
 8003de8:	2108      	movs	r1, #8
 8003dea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2278      	movs	r2, #120	@ 0x78
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e02c      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	401a      	ands	r2, r3
 8003e04:	2380      	movs	r3, #128	@ 0x80
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d112      	bne.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	0112      	lsls	r2, r2, #4
 8003e14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 f8e3 	bl	8003fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2284      	movs	r2, #132	@ 0x84
 8003e22:	2120      	movs	r1, #32
 8003e24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2278      	movs	r2, #120	@ 0x78
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e00f      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	425a      	negs	r2, r3
 8003e42:	4153      	adcs	r3, r2
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	001a      	movs	r2, r3
 8003e48:	1dfb      	adds	r3, r7, #7
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d09e      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	0018      	movs	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b004      	add	sp, #16
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b090      	sub	sp, #64	@ 0x40
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	1dbb      	adds	r3, r7, #6
 8003e68:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1dba      	adds	r2, r7, #6
 8003e74:	2158      	movs	r1, #88	@ 0x58
 8003e76:	8812      	ldrh	r2, [r2, #0]
 8003e78:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2284      	movs	r2, #132	@ 0x84
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2280      	movs	r2, #128	@ 0x80
 8003e86:	2122      	movs	r1, #34	@ 0x22
 8003e88:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d028      	beq.n	8003ee4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e96:	4a3e      	ldr	r2, [pc, #248]	@ (8003f90 <UART_Start_Receive_DMA+0x134>)
 8003e98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f94 <UART_Start_Receive_DMA+0x138>)
 8003ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea6:	4a3c      	ldr	r2, [pc, #240]	@ (8003f98 <UART_Start_Receive_DMA+0x13c>)
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eae:	2200      	movs	r2, #0
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3324      	adds	r3, #36	@ 0x24
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	1dbb      	adds	r3, r7, #6
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	f7fd fb8e 	bl	80015e8 <HAL_DMA_Start_IT>
 8003ecc:	1e03      	subs	r3, r0, #0
 8003ece:	d009      	beq.n	8003ee4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2284      	movs	r2, #132	@ 0x84
 8003ed4:	2110      	movs	r1, #16
 8003ed6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2280      	movs	r2, #128	@ 0x80
 8003edc:	2120      	movs	r1, #32
 8003ede:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e050      	b.n	8003f86 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d019      	beq.n	8003f20 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	46c0      	nop			@ (mov r8, r8)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2180      	movs	r1, #128	@ 0x80
 8003f0e:	0049      	lsls	r1, r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1a:	f383 8810 	msr	PRIMASK, r3
}
 8003f1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f20:	f3ef 8310 	mrs	r3, PRIMASK
 8003f24:	613b      	str	r3, [r7, #16]
  return(result);
 8003f26:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f383 8810 	msr	PRIMASK, r3
}
 8003f34:	46c0      	nop			@ (mov r8, r8)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f52:	f3ef 8310 	mrs	r3, PRIMASK
 8003f56:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f58:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f383 8810 	msr	PRIMASK, r3
}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2140      	movs	r1, #64	@ 0x40
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b010      	add	sp, #64	@ 0x40
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	080040ad 	.word	0x080040ad
 8003f94:	080041d9 	.word	0x080041d9
 8003f98:	0800421b 	.word	0x0800421b

08003f9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003faa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	2301      	movs	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	21c0      	movs	r1, #192	@ 0xc0
 8003fc6:	438a      	bics	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f383 8810 	msr	PRIMASK, r3
}
 8003fd4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b006      	add	sp, #24
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08e      	sub	sp, #56	@ 0x38
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ff2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f383 8810 	msr	PRIMASK, r3
}
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4926      	ldr	r1, [pc, #152]	@ (80040a8 <UART_EndRxTransfer+0xc4>)
 800400e:	400a      	ands	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f383 8810 	msr	PRIMASK, r3
}
 800401c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800401e:	f3ef 8310 	mrs	r3, PRIMASK
 8004022:	623b      	str	r3, [r7, #32]
  return(result);
 8004024:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
 8004028:	2301      	movs	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	f383 8810 	msr	PRIMASK, r3
}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2101      	movs	r1, #1
 8004040:	438a      	bics	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	f383 8810 	msr	PRIMASK, r3
}
 800404e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004054:	2b01      	cmp	r3, #1
 8004056:	d118      	bne.n	800408a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004058:	f3ef 8310 	mrs	r3, PRIMASK
 800405c:	60bb      	str	r3, [r7, #8]
  return(result);
 800405e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004062:	2301      	movs	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2110      	movs	r1, #16
 800407a:	438a      	bics	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f383 8810 	msr	PRIMASK, r3
}
 8004088:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2280      	movs	r2, #128	@ 0x80
 800408e:	2120      	movs	r1, #32
 8004090:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b00e      	add	sp, #56	@ 0x38
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	fffffedf 	.word	0xfffffedf

080040ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b094      	sub	sp, #80	@ 0x50
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d06f      	beq.n	80041a2 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80040c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c4:	225a      	movs	r2, #90	@ 0x5a
 80040c6:	2100      	movs	r1, #0
 80040c8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ca:	f3ef 8310 	mrs	r3, PRIMASK
 80040ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80040d0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d4:	2301      	movs	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	493a      	ldr	r1, [pc, #232]	@ (80041d4 <UART_DMAReceiveCplt+0x128>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f383 8810 	msr	PRIMASK, r3
}
 80040fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004104:	647b      	str	r3, [r7, #68]	@ 0x44
 8004106:	2301      	movs	r3, #1
 8004108:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	46c0      	nop			@ (mov r8, r8)
 8004112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2101      	movs	r1, #1
 800411e:	438a      	bics	r2, r1
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004128:	f383 8810 	msr	PRIMASK, r3
}
 800412c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	643b      	str	r3, [r7, #64]	@ 0x40
 8004138:	2301      	movs	r3, #1
 800413a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2140      	movs	r1, #64	@ 0x40
 8004150:	438a      	bics	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004156:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004162:	2280      	movs	r2, #128	@ 0x80
 8004164:	2120      	movs	r1, #32
 8004166:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416c:	2b01      	cmp	r3, #1
 800416e:	d118      	bne.n	80041a2 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004170:	f3ef 8310 	mrs	r3, PRIMASK
 8004174:	60fb      	str	r3, [r7, #12]
  return(result);
 8004176:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800417a:	2301      	movs	r3, #1
 800417c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f383 8810 	msr	PRIMASK, r3
}
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2110      	movs	r1, #16
 8004192:	438a      	bics	r2, r1
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004198:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f383 8810 	msr	PRIMASK, r3
}
 80041a0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041a4:	2200      	movs	r2, #0
 80041a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d108      	bne.n	80041c2 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b2:	2258      	movs	r2, #88	@ 0x58
 80041b4:	5a9a      	ldrh	r2, [r3, r2]
 80041b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b8:	0011      	movs	r1, r2
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7ff fb36 	bl	800382c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041c0:	e003      	b.n	80041ca <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80041c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7fc fb93 	bl	80008f0 <HAL_UART_RxCpltCallback>
}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b014      	add	sp, #80	@ 0x50
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	fffffeff 	.word	0xfffffeff

080041d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d10a      	bne.n	800420a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2258      	movs	r2, #88	@ 0x58
 80041f8:	5a9b      	ldrh	r3, [r3, r2]
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f7ff fb12 	bl	800382c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004208:	e003      	b.n	8004212 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0018      	movs	r0, r3
 800420e:	f7ff fafd 	bl	800380c <HAL_UART_RxHalfCpltCallback>
}
 8004212:	46c0      	nop			@ (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b004      	add	sp, #16
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800422c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2280      	movs	r2, #128	@ 0x80
 8004232:	589b      	ldr	r3, [r3, r2]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2280      	movs	r2, #128	@ 0x80
 800423e:	4013      	ands	r3, r2
 8004240:	2b80      	cmp	r3, #128	@ 0x80
 8004242:	d10a      	bne.n	800425a <UART_DMAError+0x40>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b21      	cmp	r3, #33	@ 0x21
 8004248:	d107      	bne.n	800425a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2252      	movs	r2, #82	@ 0x52
 800424e:	2100      	movs	r1, #0
 8004250:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff fea1 	bl	8003f9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2240      	movs	r2, #64	@ 0x40
 8004262:	4013      	ands	r3, r2
 8004264:	2b40      	cmp	r3, #64	@ 0x40
 8004266:	d10a      	bne.n	800427e <UART_DMAError+0x64>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b22      	cmp	r3, #34	@ 0x22
 800426c:	d107      	bne.n	800427e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	225a      	movs	r2, #90	@ 0x5a
 8004272:	2100      	movs	r1, #0
 8004274:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff feb3 	bl	8003fe4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2284      	movs	r2, #132	@ 0x84
 8004282:	589b      	ldr	r3, [r3, r2]
 8004284:	2210      	movs	r2, #16
 8004286:	431a      	orrs	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2184      	movs	r1, #132	@ 0x84
 800428c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	0018      	movs	r0, r3
 8004292:	f7ff fac3 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	b006      	add	sp, #24
 800429c:	bd80      	pop	{r7, pc}

0800429e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	225a      	movs	r2, #90	@ 0x5a
 80042b0:	2100      	movs	r1, #0
 80042b2:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2252      	movs	r2, #82	@ 0x52
 80042b8:	2100      	movs	r1, #0
 80042ba:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	0018      	movs	r0, r3
 80042c0:	f7ff faac 	bl	800381c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c4:	46c0      	nop			@ (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b004      	add	sp, #16
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80042da:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	2301      	movs	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	46c0      	nop			@ (mov r8, r8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2140      	movs	r1, #64	@ 0x40
 80042f6:	438a      	bics	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	0018      	movs	r0, r3
 8004316:	f7ff fa71 	bl	80037fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	b006      	add	sp, #24
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <rand>:
 8004334:	4b16      	ldr	r3, [pc, #88]	@ (8004390 <rand+0x5c>)
 8004336:	b510      	push	{r4, lr}
 8004338:	681c      	ldr	r4, [r3, #0]
 800433a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800433c:	2b00      	cmp	r3, #0
 800433e:	d116      	bne.n	800436e <rand+0x3a>
 8004340:	2018      	movs	r0, #24
 8004342:	f000 fa31 	bl	80047a8 <malloc>
 8004346:	1e02      	subs	r2, r0, #0
 8004348:	6320      	str	r0, [r4, #48]	@ 0x30
 800434a:	d104      	bne.n	8004356 <rand+0x22>
 800434c:	2152      	movs	r1, #82	@ 0x52
 800434e:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <rand+0x60>)
 8004350:	4811      	ldr	r0, [pc, #68]	@ (8004398 <rand+0x64>)
 8004352:	f000 f9c1 	bl	80046d8 <__assert_func>
 8004356:	4b11      	ldr	r3, [pc, #68]	@ (800439c <rand+0x68>)
 8004358:	2100      	movs	r1, #0
 800435a:	6003      	str	r3, [r0, #0]
 800435c:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <rand+0x6c>)
 800435e:	6043      	str	r3, [r0, #4]
 8004360:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <rand+0x70>)
 8004362:	6083      	str	r3, [r0, #8]
 8004364:	230b      	movs	r3, #11
 8004366:	8183      	strh	r3, [r0, #12]
 8004368:	2001      	movs	r0, #1
 800436a:	6110      	str	r0, [r2, #16]
 800436c:	6151      	str	r1, [r2, #20]
 800436e:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8004370:	4a0d      	ldr	r2, [pc, #52]	@ (80043a8 <rand+0x74>)
 8004372:	6920      	ldr	r0, [r4, #16]
 8004374:	6961      	ldr	r1, [r4, #20]
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <rand+0x78>)
 8004378:	f7fb ff5c 	bl	8000234 <__aeabi_lmul>
 800437c:	2201      	movs	r2, #1
 800437e:	2300      	movs	r3, #0
 8004380:	1880      	adds	r0, r0, r2
 8004382:	4159      	adcs	r1, r3
 8004384:	6120      	str	r0, [r4, #16]
 8004386:	6161      	str	r1, [r4, #20]
 8004388:	0048      	lsls	r0, r1, #1
 800438a:	0840      	lsrs	r0, r0, #1
 800438c:	bd10      	pop	{r4, pc}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	20000120 	.word	0x20000120
 8004394:	080053c4 	.word	0x080053c4
 8004398:	080053db 	.word	0x080053db
 800439c:	abcd330e 	.word	0xabcd330e
 80043a0:	e66d1234 	.word	0xe66d1234
 80043a4:	0005deec 	.word	0x0005deec
 80043a8:	4c957f2d 	.word	0x4c957f2d
 80043ac:	5851f42d 	.word	0x5851f42d

080043b0 <std>:
 80043b0:	2300      	movs	r3, #0
 80043b2:	b510      	push	{r4, lr}
 80043b4:	0004      	movs	r4, r0
 80043b6:	6003      	str	r3, [r0, #0]
 80043b8:	6043      	str	r3, [r0, #4]
 80043ba:	6083      	str	r3, [r0, #8]
 80043bc:	8181      	strh	r1, [r0, #12]
 80043be:	6643      	str	r3, [r0, #100]	@ 0x64
 80043c0:	81c2      	strh	r2, [r0, #14]
 80043c2:	6103      	str	r3, [r0, #16]
 80043c4:	6143      	str	r3, [r0, #20]
 80043c6:	6183      	str	r3, [r0, #24]
 80043c8:	0019      	movs	r1, r3
 80043ca:	2208      	movs	r2, #8
 80043cc:	305c      	adds	r0, #92	@ 0x5c
 80043ce:	f000 f8ff 	bl	80045d0 <memset>
 80043d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <std+0x50>)
 80043d4:	6224      	str	r4, [r4, #32]
 80043d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80043d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <std+0x54>)
 80043da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <std+0x58>)
 80043de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043e0:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <std+0x5c>)
 80043e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80043e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004410 <std+0x60>)
 80043e6:	429c      	cmp	r4, r3
 80043e8:	d005      	beq.n	80043f6 <std+0x46>
 80043ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <std+0x64>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	d002      	beq.n	80043f6 <std+0x46>
 80043f0:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <std+0x68>)
 80043f2:	429c      	cmp	r4, r3
 80043f4:	d103      	bne.n	80043fe <std+0x4e>
 80043f6:	0020      	movs	r0, r4
 80043f8:	3058      	adds	r0, #88	@ 0x58
 80043fa:	f000 f969 	bl	80046d0 <__retarget_lock_init_recursive>
 80043fe:	bd10      	pop	{r4, pc}
 8004400:	08004539 	.word	0x08004539
 8004404:	08004561 	.word	0x08004561
 8004408:	08004599 	.word	0x08004599
 800440c:	080045c5 	.word	0x080045c5
 8004410:	200004bc 	.word	0x200004bc
 8004414:	20000524 	.word	0x20000524
 8004418:	2000058c 	.word	0x2000058c

0800441c <stdio_exit_handler>:
 800441c:	b510      	push	{r4, lr}
 800441e:	4a03      	ldr	r2, [pc, #12]	@ (800442c <stdio_exit_handler+0x10>)
 8004420:	4903      	ldr	r1, [pc, #12]	@ (8004430 <stdio_exit_handler+0x14>)
 8004422:	4804      	ldr	r0, [pc, #16]	@ (8004434 <stdio_exit_handler+0x18>)
 8004424:	f000 f86c 	bl	8004500 <_fwalk_sglue>
 8004428:	bd10      	pop	{r4, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	20000114 	.word	0x20000114
 8004430:	08004a2d 	.word	0x08004a2d
 8004434:	20000124 	.word	0x20000124

08004438 <cleanup_stdio>:
 8004438:	6841      	ldr	r1, [r0, #4]
 800443a:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <cleanup_stdio+0x30>)
 800443c:	b510      	push	{r4, lr}
 800443e:	0004      	movs	r4, r0
 8004440:	4299      	cmp	r1, r3
 8004442:	d001      	beq.n	8004448 <cleanup_stdio+0x10>
 8004444:	f000 faf2 	bl	8004a2c <_fflush_r>
 8004448:	68a1      	ldr	r1, [r4, #8]
 800444a:	4b08      	ldr	r3, [pc, #32]	@ (800446c <cleanup_stdio+0x34>)
 800444c:	4299      	cmp	r1, r3
 800444e:	d002      	beq.n	8004456 <cleanup_stdio+0x1e>
 8004450:	0020      	movs	r0, r4
 8004452:	f000 faeb 	bl	8004a2c <_fflush_r>
 8004456:	68e1      	ldr	r1, [r4, #12]
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <cleanup_stdio+0x38>)
 800445a:	4299      	cmp	r1, r3
 800445c:	d002      	beq.n	8004464 <cleanup_stdio+0x2c>
 800445e:	0020      	movs	r0, r4
 8004460:	f000 fae4 	bl	8004a2c <_fflush_r>
 8004464:	bd10      	pop	{r4, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	200004bc 	.word	0x200004bc
 800446c:	20000524 	.word	0x20000524
 8004470:	2000058c 	.word	0x2000058c

08004474 <global_stdio_init.part.0>:
 8004474:	b510      	push	{r4, lr}
 8004476:	4b09      	ldr	r3, [pc, #36]	@ (800449c <global_stdio_init.part.0+0x28>)
 8004478:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <global_stdio_init.part.0+0x2c>)
 800447a:	2104      	movs	r1, #4
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	4809      	ldr	r0, [pc, #36]	@ (80044a4 <global_stdio_init.part.0+0x30>)
 8004480:	2200      	movs	r2, #0
 8004482:	f7ff ff95 	bl	80043b0 <std>
 8004486:	2201      	movs	r2, #1
 8004488:	2109      	movs	r1, #9
 800448a:	4807      	ldr	r0, [pc, #28]	@ (80044a8 <global_stdio_init.part.0+0x34>)
 800448c:	f7ff ff90 	bl	80043b0 <std>
 8004490:	2202      	movs	r2, #2
 8004492:	2112      	movs	r1, #18
 8004494:	4805      	ldr	r0, [pc, #20]	@ (80044ac <global_stdio_init.part.0+0x38>)
 8004496:	f7ff ff8b 	bl	80043b0 <std>
 800449a:	bd10      	pop	{r4, pc}
 800449c:	200005f4 	.word	0x200005f4
 80044a0:	0800441d 	.word	0x0800441d
 80044a4:	200004bc 	.word	0x200004bc
 80044a8:	20000524 	.word	0x20000524
 80044ac:	2000058c 	.word	0x2000058c

080044b0 <__sfp_lock_acquire>:
 80044b0:	b510      	push	{r4, lr}
 80044b2:	4802      	ldr	r0, [pc, #8]	@ (80044bc <__sfp_lock_acquire+0xc>)
 80044b4:	f000 f90d 	bl	80046d2 <__retarget_lock_acquire_recursive>
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	200005fd 	.word	0x200005fd

080044c0 <__sfp_lock_release>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	4802      	ldr	r0, [pc, #8]	@ (80044cc <__sfp_lock_release+0xc>)
 80044c4:	f000 f906 	bl	80046d4 <__retarget_lock_release_recursive>
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	200005fd 	.word	0x200005fd

080044d0 <__sinit>:
 80044d0:	b510      	push	{r4, lr}
 80044d2:	0004      	movs	r4, r0
 80044d4:	f7ff ffec 	bl	80044b0 <__sfp_lock_acquire>
 80044d8:	6a23      	ldr	r3, [r4, #32]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <__sinit+0x14>
 80044de:	f7ff ffef 	bl	80044c0 <__sfp_lock_release>
 80044e2:	bd10      	pop	{r4, pc}
 80044e4:	4b04      	ldr	r3, [pc, #16]	@ (80044f8 <__sinit+0x28>)
 80044e6:	6223      	str	r3, [r4, #32]
 80044e8:	4b04      	ldr	r3, [pc, #16]	@ (80044fc <__sinit+0x2c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f6      	bne.n	80044de <__sinit+0xe>
 80044f0:	f7ff ffc0 	bl	8004474 <global_stdio_init.part.0>
 80044f4:	e7f3      	b.n	80044de <__sinit+0xe>
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	08004439 	.word	0x08004439
 80044fc:	200005f4 	.word	0x200005f4

08004500 <_fwalk_sglue>:
 8004500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004502:	0014      	movs	r4, r2
 8004504:	2600      	movs	r6, #0
 8004506:	9000      	str	r0, [sp, #0]
 8004508:	9101      	str	r1, [sp, #4]
 800450a:	68a5      	ldr	r5, [r4, #8]
 800450c:	6867      	ldr	r7, [r4, #4]
 800450e:	3f01      	subs	r7, #1
 8004510:	d504      	bpl.n	800451c <_fwalk_sglue+0x1c>
 8004512:	6824      	ldr	r4, [r4, #0]
 8004514:	2c00      	cmp	r4, #0
 8004516:	d1f8      	bne.n	800450a <_fwalk_sglue+0xa>
 8004518:	0030      	movs	r0, r6
 800451a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800451c:	89ab      	ldrh	r3, [r5, #12]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d908      	bls.n	8004534 <_fwalk_sglue+0x34>
 8004522:	220e      	movs	r2, #14
 8004524:	5eab      	ldrsh	r3, [r5, r2]
 8004526:	3301      	adds	r3, #1
 8004528:	d004      	beq.n	8004534 <_fwalk_sglue+0x34>
 800452a:	0029      	movs	r1, r5
 800452c:	9800      	ldr	r0, [sp, #0]
 800452e:	9b01      	ldr	r3, [sp, #4]
 8004530:	4798      	blx	r3
 8004532:	4306      	orrs	r6, r0
 8004534:	3568      	adds	r5, #104	@ 0x68
 8004536:	e7ea      	b.n	800450e <_fwalk_sglue+0xe>

08004538 <__sread>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	000c      	movs	r4, r1
 800453c:	250e      	movs	r5, #14
 800453e:	5f49      	ldrsh	r1, [r1, r5]
 8004540:	f000 f874 	bl	800462c <_read_r>
 8004544:	2800      	cmp	r0, #0
 8004546:	db03      	blt.n	8004550 <__sread+0x18>
 8004548:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800454a:	181b      	adds	r3, r3, r0
 800454c:	6563      	str	r3, [r4, #84]	@ 0x54
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	4a02      	ldr	r2, [pc, #8]	@ (800455c <__sread+0x24>)
 8004554:	4013      	ands	r3, r2
 8004556:	81a3      	strh	r3, [r4, #12]
 8004558:	e7f9      	b.n	800454e <__sread+0x16>
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	ffffefff 	.word	0xffffefff

08004560 <__swrite>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	001f      	movs	r7, r3
 8004564:	898b      	ldrh	r3, [r1, #12]
 8004566:	0005      	movs	r5, r0
 8004568:	000c      	movs	r4, r1
 800456a:	0016      	movs	r6, r2
 800456c:	05db      	lsls	r3, r3, #23
 800456e:	d505      	bpl.n	800457c <__swrite+0x1c>
 8004570:	230e      	movs	r3, #14
 8004572:	5ec9      	ldrsh	r1, [r1, r3]
 8004574:	2200      	movs	r2, #0
 8004576:	2302      	movs	r3, #2
 8004578:	f000 f844 	bl	8004604 <_lseek_r>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <__swrite+0x34>)
 8004580:	0028      	movs	r0, r5
 8004582:	4013      	ands	r3, r2
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	0032      	movs	r2, r6
 8004588:	230e      	movs	r3, #14
 800458a:	5ee1      	ldrsh	r1, [r4, r3]
 800458c:	003b      	movs	r3, r7
 800458e:	f000 f861 	bl	8004654 <_write_r>
 8004592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004594:	ffffefff 	.word	0xffffefff

08004598 <__sseek>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	000c      	movs	r4, r1
 800459c:	250e      	movs	r5, #14
 800459e:	5f49      	ldrsh	r1, [r1, r5]
 80045a0:	f000 f830 	bl	8004604 <_lseek_r>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	1c42      	adds	r2, r0, #1
 80045a8:	d103      	bne.n	80045b2 <__sseek+0x1a>
 80045aa:	4a05      	ldr	r2, [pc, #20]	@ (80045c0 <__sseek+0x28>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
 80045b2:	2280      	movs	r2, #128	@ 0x80
 80045b4:	0152      	lsls	r2, r2, #5
 80045b6:	4313      	orrs	r3, r2
 80045b8:	81a3      	strh	r3, [r4, #12]
 80045ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80045bc:	e7f8      	b.n	80045b0 <__sseek+0x18>
 80045be:	46c0      	nop			@ (mov r8, r8)
 80045c0:	ffffefff 	.word	0xffffefff

080045c4 <__sclose>:
 80045c4:	b510      	push	{r4, lr}
 80045c6:	230e      	movs	r3, #14
 80045c8:	5ec9      	ldrsh	r1, [r1, r3]
 80045ca:	f000 f809 	bl	80045e0 <_close_r>
 80045ce:	bd10      	pop	{r4, pc}

080045d0 <memset>:
 80045d0:	0003      	movs	r3, r0
 80045d2:	1882      	adds	r2, r0, r2
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d100      	bne.n	80045da <memset+0xa>
 80045d8:	4770      	bx	lr
 80045da:	7019      	strb	r1, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	e7f9      	b.n	80045d4 <memset+0x4>

080045e0 <_close_r>:
 80045e0:	2300      	movs	r3, #0
 80045e2:	b570      	push	{r4, r5, r6, lr}
 80045e4:	4d06      	ldr	r5, [pc, #24]	@ (8004600 <_close_r+0x20>)
 80045e6:	0004      	movs	r4, r0
 80045e8:	0008      	movs	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fc fde0 	bl	80011b0 <_close>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d103      	bne.n	80045fc <_close_r+0x1c>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d000      	beq.n	80045fc <_close_r+0x1c>
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	200005f8 	.word	0x200005f8

08004604 <_lseek_r>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	0004      	movs	r4, r0
 8004608:	0008      	movs	r0, r1
 800460a:	0011      	movs	r1, r2
 800460c:	001a      	movs	r2, r3
 800460e:	2300      	movs	r3, #0
 8004610:	4d05      	ldr	r5, [pc, #20]	@ (8004628 <_lseek_r+0x24>)
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fc fded 	bl	80011f2 <_lseek>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d103      	bne.n	8004624 <_lseek_r+0x20>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d000      	beq.n	8004624 <_lseek_r+0x20>
 8004622:	6023      	str	r3, [r4, #0]
 8004624:	bd70      	pop	{r4, r5, r6, pc}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	200005f8 	.word	0x200005f8

0800462c <_read_r>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	0004      	movs	r4, r0
 8004630:	0008      	movs	r0, r1
 8004632:	0011      	movs	r1, r2
 8004634:	001a      	movs	r2, r3
 8004636:	2300      	movs	r3, #0
 8004638:	4d05      	ldr	r5, [pc, #20]	@ (8004650 <_read_r+0x24>)
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	f7fc fd7f 	bl	800113e <_read>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d103      	bne.n	800464c <_read_r+0x20>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d000      	beq.n	800464c <_read_r+0x20>
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	bd70      	pop	{r4, r5, r6, pc}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	200005f8 	.word	0x200005f8

08004654 <_write_r>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	0004      	movs	r4, r0
 8004658:	0008      	movs	r0, r1
 800465a:	0011      	movs	r1, r2
 800465c:	001a      	movs	r2, r3
 800465e:	2300      	movs	r3, #0
 8004660:	4d05      	ldr	r5, [pc, #20]	@ (8004678 <_write_r+0x24>)
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	f7fc fd88 	bl	8001178 <_write>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d103      	bne.n	8004674 <_write_r+0x20>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d000      	beq.n	8004674 <_write_r+0x20>
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	200005f8 	.word	0x200005f8

0800467c <__errno>:
 800467c:	4b01      	ldr	r3, [pc, #4]	@ (8004684 <__errno+0x8>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	4770      	bx	lr
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	20000120 	.word	0x20000120

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	2600      	movs	r6, #0
 800468c:	4c0c      	ldr	r4, [pc, #48]	@ (80046c0 <__libc_init_array+0x38>)
 800468e:	4d0d      	ldr	r5, [pc, #52]	@ (80046c4 <__libc_init_array+0x3c>)
 8004690:	1b64      	subs	r4, r4, r5
 8004692:	10a4      	asrs	r4, r4, #2
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	2600      	movs	r6, #0
 800469a:	f000 fe63 	bl	8005364 <_init>
 800469e:	4c0a      	ldr	r4, [pc, #40]	@ (80046c8 <__libc_init_array+0x40>)
 80046a0:	4d0a      	ldr	r5, [pc, #40]	@ (80046cc <__libc_init_array+0x44>)
 80046a2:	1b64      	subs	r4, r4, r5
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	00b3      	lsls	r3, r6, #2
 80046ae:	58eb      	ldr	r3, [r5, r3]
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	00b3      	lsls	r3, r6, #2
 80046b8:	58eb      	ldr	r3, [r5, r3]
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	080054a4 	.word	0x080054a4
 80046c4:	080054a4 	.word	0x080054a4
 80046c8:	080054a8 	.word	0x080054a8
 80046cc:	080054a4 	.word	0x080054a4

080046d0 <__retarget_lock_init_recursive>:
 80046d0:	4770      	bx	lr

080046d2 <__retarget_lock_acquire_recursive>:
 80046d2:	4770      	bx	lr

080046d4 <__retarget_lock_release_recursive>:
 80046d4:	4770      	bx	lr
	...

080046d8 <__assert_func>:
 80046d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80046da:	0014      	movs	r4, r2
 80046dc:	001a      	movs	r2, r3
 80046de:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <__assert_func+0x2c>)
 80046e0:	0005      	movs	r5, r0
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	000e      	movs	r6, r1
 80046e6:	68d8      	ldr	r0, [r3, #12]
 80046e8:	4b07      	ldr	r3, [pc, #28]	@ (8004708 <__assert_func+0x30>)
 80046ea:	2c00      	cmp	r4, #0
 80046ec:	d101      	bne.n	80046f2 <__assert_func+0x1a>
 80046ee:	4b07      	ldr	r3, [pc, #28]	@ (800470c <__assert_func+0x34>)
 80046f0:	001c      	movs	r4, r3
 80046f2:	4907      	ldr	r1, [pc, #28]	@ (8004710 <__assert_func+0x38>)
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	9402      	str	r4, [sp, #8]
 80046f8:	002b      	movs	r3, r5
 80046fa:	9600      	str	r6, [sp, #0]
 80046fc:	f000 f9c2 	bl	8004a84 <fiprintf>
 8004700:	f000 f9e2 	bl	8004ac8 <abort>
 8004704:	20000120 	.word	0x20000120
 8004708:	08005433 	.word	0x08005433
 800470c:	0800546e 	.word	0x0800546e
 8004710:	08005440 	.word	0x08005440

08004714 <_free_r>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	0005      	movs	r5, r0
 8004718:	1e0c      	subs	r4, r1, #0
 800471a:	d010      	beq.n	800473e <_free_r+0x2a>
 800471c:	3c04      	subs	r4, #4
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	da00      	bge.n	8004726 <_free_r+0x12>
 8004724:	18e4      	adds	r4, r4, r3
 8004726:	0028      	movs	r0, r5
 8004728:	f000 f8ea 	bl	8004900 <__malloc_lock>
 800472c:	4a1d      	ldr	r2, [pc, #116]	@ (80047a4 <_free_r+0x90>)
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d105      	bne.n	8004740 <_free_r+0x2c>
 8004734:	6063      	str	r3, [r4, #4]
 8004736:	6014      	str	r4, [r2, #0]
 8004738:	0028      	movs	r0, r5
 800473a:	f000 f8e9 	bl	8004910 <__malloc_unlock>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	42a3      	cmp	r3, r4
 8004742:	d908      	bls.n	8004756 <_free_r+0x42>
 8004744:	6820      	ldr	r0, [r4, #0]
 8004746:	1821      	adds	r1, r4, r0
 8004748:	428b      	cmp	r3, r1
 800474a:	d1f3      	bne.n	8004734 <_free_r+0x20>
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	1809      	adds	r1, r1, r0
 8004752:	6021      	str	r1, [r4, #0]
 8004754:	e7ee      	b.n	8004734 <_free_r+0x20>
 8004756:	001a      	movs	r2, r3
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <_free_r+0x4e>
 800475e:	42a3      	cmp	r3, r4
 8004760:	d9f9      	bls.n	8004756 <_free_r+0x42>
 8004762:	6811      	ldr	r1, [r2, #0]
 8004764:	1850      	adds	r0, r2, r1
 8004766:	42a0      	cmp	r0, r4
 8004768:	d10b      	bne.n	8004782 <_free_r+0x6e>
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	1809      	adds	r1, r1, r0
 800476e:	1850      	adds	r0, r2, r1
 8004770:	6011      	str	r1, [r2, #0]
 8004772:	4283      	cmp	r3, r0
 8004774:	d1e0      	bne.n	8004738 <_free_r+0x24>
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	1841      	adds	r1, r0, r1
 800477c:	6011      	str	r1, [r2, #0]
 800477e:	6053      	str	r3, [r2, #4]
 8004780:	e7da      	b.n	8004738 <_free_r+0x24>
 8004782:	42a0      	cmp	r0, r4
 8004784:	d902      	bls.n	800478c <_free_r+0x78>
 8004786:	230c      	movs	r3, #12
 8004788:	602b      	str	r3, [r5, #0]
 800478a:	e7d5      	b.n	8004738 <_free_r+0x24>
 800478c:	6820      	ldr	r0, [r4, #0]
 800478e:	1821      	adds	r1, r4, r0
 8004790:	428b      	cmp	r3, r1
 8004792:	d103      	bne.n	800479c <_free_r+0x88>
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	1809      	adds	r1, r1, r0
 800479a:	6021      	str	r1, [r4, #0]
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	6054      	str	r4, [r2, #4]
 80047a0:	e7ca      	b.n	8004738 <_free_r+0x24>
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	20000604 	.word	0x20000604

080047a8 <malloc>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	4b03      	ldr	r3, [pc, #12]	@ (80047b8 <malloc+0x10>)
 80047ac:	0001      	movs	r1, r0
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	f000 f826 	bl	8004800 <_malloc_r>
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	20000120 	.word	0x20000120

080047bc <sbrk_aligned>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4e0f      	ldr	r6, [pc, #60]	@ (80047fc <sbrk_aligned+0x40>)
 80047c0:	000d      	movs	r5, r1
 80047c2:	6831      	ldr	r1, [r6, #0]
 80047c4:	0004      	movs	r4, r0
 80047c6:	2900      	cmp	r1, #0
 80047c8:	d102      	bne.n	80047d0 <sbrk_aligned+0x14>
 80047ca:	f000 f96b 	bl	8004aa4 <_sbrk_r>
 80047ce:	6030      	str	r0, [r6, #0]
 80047d0:	0029      	movs	r1, r5
 80047d2:	0020      	movs	r0, r4
 80047d4:	f000 f966 	bl	8004aa4 <_sbrk_r>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d103      	bne.n	80047e4 <sbrk_aligned+0x28>
 80047dc:	2501      	movs	r5, #1
 80047de:	426d      	negs	r5, r5
 80047e0:	0028      	movs	r0, r5
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	2303      	movs	r3, #3
 80047e6:	1cc5      	adds	r5, r0, #3
 80047e8:	439d      	bics	r5, r3
 80047ea:	42a8      	cmp	r0, r5
 80047ec:	d0f8      	beq.n	80047e0 <sbrk_aligned+0x24>
 80047ee:	1a29      	subs	r1, r5, r0
 80047f0:	0020      	movs	r0, r4
 80047f2:	f000 f957 	bl	8004aa4 <_sbrk_r>
 80047f6:	3001      	adds	r0, #1
 80047f8:	d1f2      	bne.n	80047e0 <sbrk_aligned+0x24>
 80047fa:	e7ef      	b.n	80047dc <sbrk_aligned+0x20>
 80047fc:	20000600 	.word	0x20000600

08004800 <_malloc_r>:
 8004800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004802:	2203      	movs	r2, #3
 8004804:	1ccb      	adds	r3, r1, #3
 8004806:	4393      	bics	r3, r2
 8004808:	3308      	adds	r3, #8
 800480a:	0005      	movs	r5, r0
 800480c:	001f      	movs	r7, r3
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d234      	bcs.n	800487c <_malloc_r+0x7c>
 8004812:	270c      	movs	r7, #12
 8004814:	42b9      	cmp	r1, r7
 8004816:	d833      	bhi.n	8004880 <_malloc_r+0x80>
 8004818:	0028      	movs	r0, r5
 800481a:	f000 f871 	bl	8004900 <__malloc_lock>
 800481e:	4e37      	ldr	r6, [pc, #220]	@ (80048fc <_malloc_r+0xfc>)
 8004820:	6833      	ldr	r3, [r6, #0]
 8004822:	001c      	movs	r4, r3
 8004824:	2c00      	cmp	r4, #0
 8004826:	d12f      	bne.n	8004888 <_malloc_r+0x88>
 8004828:	0039      	movs	r1, r7
 800482a:	0028      	movs	r0, r5
 800482c:	f7ff ffc6 	bl	80047bc <sbrk_aligned>
 8004830:	0004      	movs	r4, r0
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	d15f      	bne.n	80048f6 <_malloc_r+0xf6>
 8004836:	6834      	ldr	r4, [r6, #0]
 8004838:	9400      	str	r4, [sp, #0]
 800483a:	9b00      	ldr	r3, [sp, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d14a      	bne.n	80048d6 <_malloc_r+0xd6>
 8004840:	2c00      	cmp	r4, #0
 8004842:	d052      	beq.n	80048ea <_malloc_r+0xea>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	0028      	movs	r0, r5
 8004848:	18e3      	adds	r3, r4, r3
 800484a:	9900      	ldr	r1, [sp, #0]
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	f000 f929 	bl	8004aa4 <_sbrk_r>
 8004852:	9b01      	ldr	r3, [sp, #4]
 8004854:	4283      	cmp	r3, r0
 8004856:	d148      	bne.n	80048ea <_malloc_r+0xea>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	0028      	movs	r0, r5
 800485c:	1aff      	subs	r7, r7, r3
 800485e:	0039      	movs	r1, r7
 8004860:	f7ff ffac 	bl	80047bc <sbrk_aligned>
 8004864:	3001      	adds	r0, #1
 8004866:	d040      	beq.n	80048ea <_malloc_r+0xea>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	19db      	adds	r3, r3, r7
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	6833      	ldr	r3, [r6, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	2a00      	cmp	r2, #0
 8004874:	d133      	bne.n	80048de <_malloc_r+0xde>
 8004876:	9b00      	ldr	r3, [sp, #0]
 8004878:	6033      	str	r3, [r6, #0]
 800487a:	e019      	b.n	80048b0 <_malloc_r+0xb0>
 800487c:	2b00      	cmp	r3, #0
 800487e:	dac9      	bge.n	8004814 <_malloc_r+0x14>
 8004880:	230c      	movs	r3, #12
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	2000      	movs	r0, #0
 8004886:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004888:	6821      	ldr	r1, [r4, #0]
 800488a:	1bc9      	subs	r1, r1, r7
 800488c:	d420      	bmi.n	80048d0 <_malloc_r+0xd0>
 800488e:	290b      	cmp	r1, #11
 8004890:	d90a      	bls.n	80048a8 <_malloc_r+0xa8>
 8004892:	19e2      	adds	r2, r4, r7
 8004894:	6027      	str	r7, [r4, #0]
 8004896:	42a3      	cmp	r3, r4
 8004898:	d104      	bne.n	80048a4 <_malloc_r+0xa4>
 800489a:	6032      	str	r2, [r6, #0]
 800489c:	6863      	ldr	r3, [r4, #4]
 800489e:	6011      	str	r1, [r2, #0]
 80048a0:	6053      	str	r3, [r2, #4]
 80048a2:	e005      	b.n	80048b0 <_malloc_r+0xb0>
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	e7f9      	b.n	800489c <_malloc_r+0x9c>
 80048a8:	6862      	ldr	r2, [r4, #4]
 80048aa:	42a3      	cmp	r3, r4
 80048ac:	d10e      	bne.n	80048cc <_malloc_r+0xcc>
 80048ae:	6032      	str	r2, [r6, #0]
 80048b0:	0028      	movs	r0, r5
 80048b2:	f000 f82d 	bl	8004910 <__malloc_unlock>
 80048b6:	0020      	movs	r0, r4
 80048b8:	2207      	movs	r2, #7
 80048ba:	300b      	adds	r0, #11
 80048bc:	1d23      	adds	r3, r4, #4
 80048be:	4390      	bics	r0, r2
 80048c0:	1ac2      	subs	r2, r0, r3
 80048c2:	4298      	cmp	r0, r3
 80048c4:	d0df      	beq.n	8004886 <_malloc_r+0x86>
 80048c6:	1a1b      	subs	r3, r3, r0
 80048c8:	50a3      	str	r3, [r4, r2]
 80048ca:	e7dc      	b.n	8004886 <_malloc_r+0x86>
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	e7ef      	b.n	80048b0 <_malloc_r+0xb0>
 80048d0:	0023      	movs	r3, r4
 80048d2:	6864      	ldr	r4, [r4, #4]
 80048d4:	e7a6      	b.n	8004824 <_malloc_r+0x24>
 80048d6:	9c00      	ldr	r4, [sp, #0]
 80048d8:	6863      	ldr	r3, [r4, #4]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	e7ad      	b.n	800483a <_malloc_r+0x3a>
 80048de:	001a      	movs	r2, r3
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	d1fb      	bne.n	80048de <_malloc_r+0xde>
 80048e6:	2300      	movs	r3, #0
 80048e8:	e7da      	b.n	80048a0 <_malloc_r+0xa0>
 80048ea:	230c      	movs	r3, #12
 80048ec:	0028      	movs	r0, r5
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f000 f80e 	bl	8004910 <__malloc_unlock>
 80048f4:	e7c6      	b.n	8004884 <_malloc_r+0x84>
 80048f6:	6007      	str	r7, [r0, #0]
 80048f8:	e7da      	b.n	80048b0 <_malloc_r+0xb0>
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	20000604 	.word	0x20000604

08004900 <__malloc_lock>:
 8004900:	b510      	push	{r4, lr}
 8004902:	4802      	ldr	r0, [pc, #8]	@ (800490c <__malloc_lock+0xc>)
 8004904:	f7ff fee5 	bl	80046d2 <__retarget_lock_acquire_recursive>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	200005fc 	.word	0x200005fc

08004910 <__malloc_unlock>:
 8004910:	b510      	push	{r4, lr}
 8004912:	4802      	ldr	r0, [pc, #8]	@ (800491c <__malloc_unlock+0xc>)
 8004914:	f7ff fede 	bl	80046d4 <__retarget_lock_release_recursive>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	200005fc 	.word	0x200005fc

08004920 <__sflush_r>:
 8004920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004922:	220c      	movs	r2, #12
 8004924:	5e8b      	ldrsh	r3, [r1, r2]
 8004926:	0005      	movs	r5, r0
 8004928:	000c      	movs	r4, r1
 800492a:	071a      	lsls	r2, r3, #28
 800492c:	d456      	bmi.n	80049dc <__sflush_r+0xbc>
 800492e:	684a      	ldr	r2, [r1, #4]
 8004930:	2a00      	cmp	r2, #0
 8004932:	dc02      	bgt.n	800493a <__sflush_r+0x1a>
 8004934:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004936:	2a00      	cmp	r2, #0
 8004938:	dd4e      	ble.n	80049d8 <__sflush_r+0xb8>
 800493a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800493c:	2f00      	cmp	r7, #0
 800493e:	d04b      	beq.n	80049d8 <__sflush_r+0xb8>
 8004940:	2200      	movs	r2, #0
 8004942:	2080      	movs	r0, #128	@ 0x80
 8004944:	682e      	ldr	r6, [r5, #0]
 8004946:	602a      	str	r2, [r5, #0]
 8004948:	001a      	movs	r2, r3
 800494a:	0140      	lsls	r0, r0, #5
 800494c:	6a21      	ldr	r1, [r4, #32]
 800494e:	4002      	ands	r2, r0
 8004950:	4203      	tst	r3, r0
 8004952:	d033      	beq.n	80049bc <__sflush_r+0x9c>
 8004954:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	075b      	lsls	r3, r3, #29
 800495a:	d506      	bpl.n	800496a <__sflush_r+0x4a>
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	1ad2      	subs	r2, r2, r3
 8004960:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <__sflush_r+0x4a>
 8004966:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004968:	1ad2      	subs	r2, r2, r3
 800496a:	2300      	movs	r3, #0
 800496c:	0028      	movs	r0, r5
 800496e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004970:	6a21      	ldr	r1, [r4, #32]
 8004972:	47b8      	blx	r7
 8004974:	89a2      	ldrh	r2, [r4, #12]
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	d106      	bne.n	8004988 <__sflush_r+0x68>
 800497a:	6829      	ldr	r1, [r5, #0]
 800497c:	291d      	cmp	r1, #29
 800497e:	d846      	bhi.n	8004a0e <__sflush_r+0xee>
 8004980:	4b29      	ldr	r3, [pc, #164]	@ (8004a28 <__sflush_r+0x108>)
 8004982:	410b      	asrs	r3, r1
 8004984:	07db      	lsls	r3, r3, #31
 8004986:	d442      	bmi.n	8004a0e <__sflush_r+0xee>
 8004988:	2300      	movs	r3, #0
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	04d2      	lsls	r2, r2, #19
 8004992:	d505      	bpl.n	80049a0 <__sflush_r+0x80>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <__sflush_r+0x7e>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d100      	bne.n	80049a0 <__sflush_r+0x80>
 800499e:	6560      	str	r0, [r4, #84]	@ 0x54
 80049a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049a2:	602e      	str	r6, [r5, #0]
 80049a4:	2900      	cmp	r1, #0
 80049a6:	d017      	beq.n	80049d8 <__sflush_r+0xb8>
 80049a8:	0023      	movs	r3, r4
 80049aa:	3344      	adds	r3, #68	@ 0x44
 80049ac:	4299      	cmp	r1, r3
 80049ae:	d002      	beq.n	80049b6 <__sflush_r+0x96>
 80049b0:	0028      	movs	r0, r5
 80049b2:	f7ff feaf 	bl	8004714 <_free_r>
 80049b6:	2300      	movs	r3, #0
 80049b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80049ba:	e00d      	b.n	80049d8 <__sflush_r+0xb8>
 80049bc:	2301      	movs	r3, #1
 80049be:	0028      	movs	r0, r5
 80049c0:	47b8      	blx	r7
 80049c2:	0002      	movs	r2, r0
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d1c6      	bne.n	8004956 <__sflush_r+0x36>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0c3      	beq.n	8004956 <__sflush_r+0x36>
 80049ce:	2b1d      	cmp	r3, #29
 80049d0:	d001      	beq.n	80049d6 <__sflush_r+0xb6>
 80049d2:	2b16      	cmp	r3, #22
 80049d4:	d11a      	bne.n	8004a0c <__sflush_r+0xec>
 80049d6:	602e      	str	r6, [r5, #0]
 80049d8:	2000      	movs	r0, #0
 80049da:	e01e      	b.n	8004a1a <__sflush_r+0xfa>
 80049dc:	690e      	ldr	r6, [r1, #16]
 80049de:	2e00      	cmp	r6, #0
 80049e0:	d0fa      	beq.n	80049d8 <__sflush_r+0xb8>
 80049e2:	680f      	ldr	r7, [r1, #0]
 80049e4:	600e      	str	r6, [r1, #0]
 80049e6:	1bba      	subs	r2, r7, r6
 80049e8:	9201      	str	r2, [sp, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	079b      	lsls	r3, r3, #30
 80049ee:	d100      	bne.n	80049f2 <__sflush_r+0xd2>
 80049f0:	694a      	ldr	r2, [r1, #20]
 80049f2:	60a2      	str	r2, [r4, #8]
 80049f4:	9b01      	ldr	r3, [sp, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	ddee      	ble.n	80049d8 <__sflush_r+0xb8>
 80049fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80049fc:	0032      	movs	r2, r6
 80049fe:	001f      	movs	r7, r3
 8004a00:	0028      	movs	r0, r5
 8004a02:	9b01      	ldr	r3, [sp, #4]
 8004a04:	6a21      	ldr	r1, [r4, #32]
 8004a06:	47b8      	blx	r7
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	dc07      	bgt.n	8004a1c <__sflush_r+0xfc>
 8004a0c:	89a2      	ldrh	r2, [r4, #12]
 8004a0e:	2340      	movs	r3, #64	@ 0x40
 8004a10:	2001      	movs	r0, #1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b21b      	sxth	r3, r3
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	4240      	negs	r0, r0
 8004a1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a1c:	9b01      	ldr	r3, [sp, #4]
 8004a1e:	1836      	adds	r6, r6, r0
 8004a20:	1a1b      	subs	r3, r3, r0
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	e7e6      	b.n	80049f4 <__sflush_r+0xd4>
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	dfbffffe 	.word	0xdfbffffe

08004a2c <_fflush_r>:
 8004a2c:	690b      	ldr	r3, [r1, #16]
 8004a2e:	b570      	push	{r4, r5, r6, lr}
 8004a30:	0005      	movs	r5, r0
 8004a32:	000c      	movs	r4, r1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <_fflush_r+0x12>
 8004a38:	2500      	movs	r5, #0
 8004a3a:	0028      	movs	r0, r5
 8004a3c:	bd70      	pop	{r4, r5, r6, pc}
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d004      	beq.n	8004a4c <_fflush_r+0x20>
 8004a42:	6a03      	ldr	r3, [r0, #32]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <_fflush_r+0x20>
 8004a48:	f7ff fd42 	bl	80044d0 <__sinit>
 8004a4c:	220c      	movs	r2, #12
 8004a4e:	5ea3      	ldrsh	r3, [r4, r2]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f1      	beq.n	8004a38 <_fflush_r+0xc>
 8004a54:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a56:	07d2      	lsls	r2, r2, #31
 8004a58:	d404      	bmi.n	8004a64 <_fflush_r+0x38>
 8004a5a:	059b      	lsls	r3, r3, #22
 8004a5c:	d402      	bmi.n	8004a64 <_fflush_r+0x38>
 8004a5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a60:	f7ff fe37 	bl	80046d2 <__retarget_lock_acquire_recursive>
 8004a64:	0028      	movs	r0, r5
 8004a66:	0021      	movs	r1, r4
 8004a68:	f7ff ff5a 	bl	8004920 <__sflush_r>
 8004a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a6e:	0005      	movs	r5, r0
 8004a70:	07db      	lsls	r3, r3, #31
 8004a72:	d4e2      	bmi.n	8004a3a <_fflush_r+0xe>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	059b      	lsls	r3, r3, #22
 8004a78:	d4df      	bmi.n	8004a3a <_fflush_r+0xe>
 8004a7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7c:	f7ff fe2a 	bl	80046d4 <__retarget_lock_release_recursive>
 8004a80:	e7db      	b.n	8004a3a <_fflush_r+0xe>
	...

08004a84 <fiprintf>:
 8004a84:	b40e      	push	{r1, r2, r3}
 8004a86:	b517      	push	{r0, r1, r2, r4, lr}
 8004a88:	4c05      	ldr	r4, [pc, #20]	@ (8004aa0 <fiprintf+0x1c>)
 8004a8a:	ab05      	add	r3, sp, #20
 8004a8c:	cb04      	ldmia	r3!, {r2}
 8004a8e:	0001      	movs	r1, r0
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	f000 f846 	bl	8004b24 <_vfiprintf_r>
 8004a98:	bc1e      	pop	{r1, r2, r3, r4}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	b003      	add	sp, #12
 8004a9e:	4718      	bx	r3
 8004aa0:	20000120 	.word	0x20000120

08004aa4 <_sbrk_r>:
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	b570      	push	{r4, r5, r6, lr}
 8004aa8:	4d06      	ldr	r5, [pc, #24]	@ (8004ac4 <_sbrk_r+0x20>)
 8004aaa:	0004      	movs	r4, r0
 8004aac:	0008      	movs	r0, r1
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	f7fc fbaa 	bl	8001208 <_sbrk>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d103      	bne.n	8004ac0 <_sbrk_r+0x1c>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d000      	beq.n	8004ac0 <_sbrk_r+0x1c>
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	200005f8 	.word	0x200005f8

08004ac8 <abort>:
 8004ac8:	2006      	movs	r0, #6
 8004aca:	b510      	push	{r4, lr}
 8004acc:	f000 fb8e 	bl	80051ec <raise>
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	f7fc fb27 	bl	8001124 <_exit>

08004ad6 <__sfputc_r>:
 8004ad6:	6893      	ldr	r3, [r2, #8]
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	3b01      	subs	r3, #1
 8004adc:	6093      	str	r3, [r2, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da04      	bge.n	8004aec <__sfputc_r+0x16>
 8004ae2:	6994      	ldr	r4, [r2, #24]
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	db07      	blt.n	8004af8 <__sfputc_r+0x22>
 8004ae8:	290a      	cmp	r1, #10
 8004aea:	d005      	beq.n	8004af8 <__sfputc_r+0x22>
 8004aec:	6813      	ldr	r3, [r2, #0]
 8004aee:	1c58      	adds	r0, r3, #1
 8004af0:	6010      	str	r0, [r2, #0]
 8004af2:	7019      	strb	r1, [r3, #0]
 8004af4:	0008      	movs	r0, r1
 8004af6:	bd10      	pop	{r4, pc}
 8004af8:	f000 faae 	bl	8005058 <__swbuf_r>
 8004afc:	0001      	movs	r1, r0
 8004afe:	e7f9      	b.n	8004af4 <__sfputc_r+0x1e>

08004b00 <__sfputs_r>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	0006      	movs	r6, r0
 8004b04:	000f      	movs	r7, r1
 8004b06:	0014      	movs	r4, r2
 8004b08:	18d5      	adds	r5, r2, r3
 8004b0a:	42ac      	cmp	r4, r5
 8004b0c:	d101      	bne.n	8004b12 <__sfputs_r+0x12>
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e007      	b.n	8004b22 <__sfputs_r+0x22>
 8004b12:	7821      	ldrb	r1, [r4, #0]
 8004b14:	003a      	movs	r2, r7
 8004b16:	0030      	movs	r0, r6
 8004b18:	f7ff ffdd 	bl	8004ad6 <__sfputc_r>
 8004b1c:	3401      	adds	r4, #1
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	d1f3      	bne.n	8004b0a <__sfputs_r+0xa>
 8004b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b24 <_vfiprintf_r>:
 8004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b26:	b0a1      	sub	sp, #132	@ 0x84
 8004b28:	000f      	movs	r7, r1
 8004b2a:	0015      	movs	r5, r2
 8004b2c:	001e      	movs	r6, r3
 8004b2e:	9003      	str	r0, [sp, #12]
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d004      	beq.n	8004b3e <_vfiprintf_r+0x1a>
 8004b34:	6a03      	ldr	r3, [r0, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <_vfiprintf_r+0x1a>
 8004b3a:	f7ff fcc9 	bl	80044d0 <__sinit>
 8004b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b40:	07db      	lsls	r3, r3, #31
 8004b42:	d405      	bmi.n	8004b50 <_vfiprintf_r+0x2c>
 8004b44:	89bb      	ldrh	r3, [r7, #12]
 8004b46:	059b      	lsls	r3, r3, #22
 8004b48:	d402      	bmi.n	8004b50 <_vfiprintf_r+0x2c>
 8004b4a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b4c:	f7ff fdc1 	bl	80046d2 <__retarget_lock_acquire_recursive>
 8004b50:	89bb      	ldrh	r3, [r7, #12]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	d502      	bpl.n	8004b5c <_vfiprintf_r+0x38>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d113      	bne.n	8004b84 <_vfiprintf_r+0x60>
 8004b5c:	0039      	movs	r1, r7
 8004b5e:	9803      	ldr	r0, [sp, #12]
 8004b60:	f000 fabc 	bl	80050dc <__swsetup_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d00d      	beq.n	8004b84 <_vfiprintf_r+0x60>
 8004b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b6a:	07db      	lsls	r3, r3, #31
 8004b6c:	d503      	bpl.n	8004b76 <_vfiprintf_r+0x52>
 8004b6e:	2001      	movs	r0, #1
 8004b70:	4240      	negs	r0, r0
 8004b72:	b021      	add	sp, #132	@ 0x84
 8004b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b76:	89bb      	ldrh	r3, [r7, #12]
 8004b78:	059b      	lsls	r3, r3, #22
 8004b7a:	d4f8      	bmi.n	8004b6e <_vfiprintf_r+0x4a>
 8004b7c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b7e:	f7ff fda9 	bl	80046d4 <__retarget_lock_release_recursive>
 8004b82:	e7f4      	b.n	8004b6e <_vfiprintf_r+0x4a>
 8004b84:	2300      	movs	r3, #0
 8004b86:	ac08      	add	r4, sp, #32
 8004b88:	6163      	str	r3, [r4, #20]
 8004b8a:	3320      	adds	r3, #32
 8004b8c:	7663      	strb	r3, [r4, #25]
 8004b8e:	3310      	adds	r3, #16
 8004b90:	76a3      	strb	r3, [r4, #26]
 8004b92:	9607      	str	r6, [sp, #28]
 8004b94:	002e      	movs	r6, r5
 8004b96:	7833      	ldrb	r3, [r6, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <_vfiprintf_r+0x7c>
 8004b9c:	2b25      	cmp	r3, #37	@ 0x25
 8004b9e:	d148      	bne.n	8004c32 <_vfiprintf_r+0x10e>
 8004ba0:	1b73      	subs	r3, r6, r5
 8004ba2:	9305      	str	r3, [sp, #20]
 8004ba4:	42ae      	cmp	r6, r5
 8004ba6:	d00b      	beq.n	8004bc0 <_vfiprintf_r+0x9c>
 8004ba8:	002a      	movs	r2, r5
 8004baa:	0039      	movs	r1, r7
 8004bac:	9803      	ldr	r0, [sp, #12]
 8004bae:	f7ff ffa7 	bl	8004b00 <__sfputs_r>
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d100      	bne.n	8004bb8 <_vfiprintf_r+0x94>
 8004bb6:	e0ae      	b.n	8004d16 <_vfiprintf_r+0x1f2>
 8004bb8:	6963      	ldr	r3, [r4, #20]
 8004bba:	9a05      	ldr	r2, [sp, #20]
 8004bbc:	189b      	adds	r3, r3, r2
 8004bbe:	6163      	str	r3, [r4, #20]
 8004bc0:	7833      	ldrb	r3, [r6, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d100      	bne.n	8004bc8 <_vfiprintf_r+0xa4>
 8004bc6:	e0a6      	b.n	8004d16 <_vfiprintf_r+0x1f2>
 8004bc8:	2201      	movs	r2, #1
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4252      	negs	r2, r2
 8004bce:	6062      	str	r2, [r4, #4]
 8004bd0:	a904      	add	r1, sp, #16
 8004bd2:	3254      	adds	r2, #84	@ 0x54
 8004bd4:	1852      	adds	r2, r2, r1
 8004bd6:	1c75      	adds	r5, r6, #1
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	60e3      	str	r3, [r4, #12]
 8004bdc:	60a3      	str	r3, [r4, #8]
 8004bde:	7013      	strb	r3, [r2, #0]
 8004be0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004be2:	4b59      	ldr	r3, [pc, #356]	@ (8004d48 <_vfiprintf_r+0x224>)
 8004be4:	2205      	movs	r2, #5
 8004be6:	0018      	movs	r0, r3
 8004be8:	7829      	ldrb	r1, [r5, #0]
 8004bea:	9305      	str	r3, [sp, #20]
 8004bec:	f000 fb1e 	bl	800522c <memchr>
 8004bf0:	1c6e      	adds	r6, r5, #1
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d11f      	bne.n	8004c36 <_vfiprintf_r+0x112>
 8004bf6:	6822      	ldr	r2, [r4, #0]
 8004bf8:	06d3      	lsls	r3, r2, #27
 8004bfa:	d504      	bpl.n	8004c06 <_vfiprintf_r+0xe2>
 8004bfc:	2353      	movs	r3, #83	@ 0x53
 8004bfe:	a904      	add	r1, sp, #16
 8004c00:	185b      	adds	r3, r3, r1
 8004c02:	2120      	movs	r1, #32
 8004c04:	7019      	strb	r1, [r3, #0]
 8004c06:	0713      	lsls	r3, r2, #28
 8004c08:	d504      	bpl.n	8004c14 <_vfiprintf_r+0xf0>
 8004c0a:	2353      	movs	r3, #83	@ 0x53
 8004c0c:	a904      	add	r1, sp, #16
 8004c0e:	185b      	adds	r3, r3, r1
 8004c10:	212b      	movs	r1, #43	@ 0x2b
 8004c12:	7019      	strb	r1, [r3, #0]
 8004c14:	782b      	ldrb	r3, [r5, #0]
 8004c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c18:	d016      	beq.n	8004c48 <_vfiprintf_r+0x124>
 8004c1a:	002e      	movs	r6, r5
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	200a      	movs	r0, #10
 8004c20:	68e3      	ldr	r3, [r4, #12]
 8004c22:	7832      	ldrb	r2, [r6, #0]
 8004c24:	1c75      	adds	r5, r6, #1
 8004c26:	3a30      	subs	r2, #48	@ 0x30
 8004c28:	2a09      	cmp	r2, #9
 8004c2a:	d950      	bls.n	8004cce <_vfiprintf_r+0x1aa>
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d111      	bne.n	8004c54 <_vfiprintf_r+0x130>
 8004c30:	e017      	b.n	8004c62 <_vfiprintf_r+0x13e>
 8004c32:	3601      	adds	r6, #1
 8004c34:	e7af      	b.n	8004b96 <_vfiprintf_r+0x72>
 8004c36:	9b05      	ldr	r3, [sp, #20]
 8004c38:	6822      	ldr	r2, [r4, #0]
 8004c3a:	1ac0      	subs	r0, r0, r3
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4083      	lsls	r3, r0
 8004c40:	4313      	orrs	r3, r2
 8004c42:	0035      	movs	r5, r6
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	e7cc      	b.n	8004be2 <_vfiprintf_r+0xbe>
 8004c48:	9b07      	ldr	r3, [sp, #28]
 8004c4a:	1d19      	adds	r1, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	9107      	str	r1, [sp, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db01      	blt.n	8004c58 <_vfiprintf_r+0x134>
 8004c54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c56:	e004      	b.n	8004c62 <_vfiprintf_r+0x13e>
 8004c58:	425b      	negs	r3, r3
 8004c5a:	60e3      	str	r3, [r4, #12]
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	7833      	ldrb	r3, [r6, #0]
 8004c64:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c66:	d10c      	bne.n	8004c82 <_vfiprintf_r+0x15e>
 8004c68:	7873      	ldrb	r3, [r6, #1]
 8004c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c6c:	d134      	bne.n	8004cd8 <_vfiprintf_r+0x1b4>
 8004c6e:	9b07      	ldr	r3, [sp, #28]
 8004c70:	3602      	adds	r6, #2
 8004c72:	1d1a      	adds	r2, r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	9207      	str	r2, [sp, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da01      	bge.n	8004c80 <_vfiprintf_r+0x15c>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	425b      	negs	r3, r3
 8004c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c82:	4d32      	ldr	r5, [pc, #200]	@ (8004d4c <_vfiprintf_r+0x228>)
 8004c84:	2203      	movs	r2, #3
 8004c86:	0028      	movs	r0, r5
 8004c88:	7831      	ldrb	r1, [r6, #0]
 8004c8a:	f000 facf 	bl	800522c <memchr>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d006      	beq.n	8004ca0 <_vfiprintf_r+0x17c>
 8004c92:	2340      	movs	r3, #64	@ 0x40
 8004c94:	1b40      	subs	r0, r0, r5
 8004c96:	4083      	lsls	r3, r0
 8004c98:	6822      	ldr	r2, [r4, #0]
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	7831      	ldrb	r1, [r6, #0]
 8004ca2:	2206      	movs	r2, #6
 8004ca4:	482a      	ldr	r0, [pc, #168]	@ (8004d50 <_vfiprintf_r+0x22c>)
 8004ca6:	1c75      	adds	r5, r6, #1
 8004ca8:	7621      	strb	r1, [r4, #24]
 8004caa:	f000 fabf 	bl	800522c <memchr>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d040      	beq.n	8004d34 <_vfiprintf_r+0x210>
 8004cb2:	4b28      	ldr	r3, [pc, #160]	@ (8004d54 <_vfiprintf_r+0x230>)
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d122      	bne.n	8004cfe <_vfiprintf_r+0x1da>
 8004cb8:	2207      	movs	r2, #7
 8004cba:	9b07      	ldr	r3, [sp, #28]
 8004cbc:	3307      	adds	r3, #7
 8004cbe:	4393      	bics	r3, r2
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	9307      	str	r3, [sp, #28]
 8004cc4:	6963      	ldr	r3, [r4, #20]
 8004cc6:	9a04      	ldr	r2, [sp, #16]
 8004cc8:	189b      	adds	r3, r3, r2
 8004cca:	6163      	str	r3, [r4, #20]
 8004ccc:	e762      	b.n	8004b94 <_vfiprintf_r+0x70>
 8004cce:	4343      	muls	r3, r0
 8004cd0:	002e      	movs	r6, r5
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	189b      	adds	r3, r3, r2
 8004cd6:	e7a4      	b.n	8004c22 <_vfiprintf_r+0xfe>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	200a      	movs	r0, #10
 8004cdc:	0019      	movs	r1, r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	6063      	str	r3, [r4, #4]
 8004ce2:	7832      	ldrb	r2, [r6, #0]
 8004ce4:	1c75      	adds	r5, r6, #1
 8004ce6:	3a30      	subs	r2, #48	@ 0x30
 8004ce8:	2a09      	cmp	r2, #9
 8004cea:	d903      	bls.n	8004cf4 <_vfiprintf_r+0x1d0>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0c8      	beq.n	8004c82 <_vfiprintf_r+0x15e>
 8004cf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004cf2:	e7c6      	b.n	8004c82 <_vfiprintf_r+0x15e>
 8004cf4:	4341      	muls	r1, r0
 8004cf6:	002e      	movs	r6, r5
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	1889      	adds	r1, r1, r2
 8004cfc:	e7f1      	b.n	8004ce2 <_vfiprintf_r+0x1be>
 8004cfe:	aa07      	add	r2, sp, #28
 8004d00:	9200      	str	r2, [sp, #0]
 8004d02:	0021      	movs	r1, r4
 8004d04:	003a      	movs	r2, r7
 8004d06:	4b14      	ldr	r3, [pc, #80]	@ (8004d58 <_vfiprintf_r+0x234>)
 8004d08:	9803      	ldr	r0, [sp, #12]
 8004d0a:	e000      	b.n	8004d0e <_vfiprintf_r+0x1ea>
 8004d0c:	bf00      	nop
 8004d0e:	9004      	str	r0, [sp, #16]
 8004d10:	9b04      	ldr	r3, [sp, #16]
 8004d12:	3301      	adds	r3, #1
 8004d14:	d1d6      	bne.n	8004cc4 <_vfiprintf_r+0x1a0>
 8004d16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d18:	07db      	lsls	r3, r3, #31
 8004d1a:	d405      	bmi.n	8004d28 <_vfiprintf_r+0x204>
 8004d1c:	89bb      	ldrh	r3, [r7, #12]
 8004d1e:	059b      	lsls	r3, r3, #22
 8004d20:	d402      	bmi.n	8004d28 <_vfiprintf_r+0x204>
 8004d22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004d24:	f7ff fcd6 	bl	80046d4 <__retarget_lock_release_recursive>
 8004d28:	89bb      	ldrh	r3, [r7, #12]
 8004d2a:	065b      	lsls	r3, r3, #25
 8004d2c:	d500      	bpl.n	8004d30 <_vfiprintf_r+0x20c>
 8004d2e:	e71e      	b.n	8004b6e <_vfiprintf_r+0x4a>
 8004d30:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004d32:	e71e      	b.n	8004b72 <_vfiprintf_r+0x4e>
 8004d34:	aa07      	add	r2, sp, #28
 8004d36:	9200      	str	r2, [sp, #0]
 8004d38:	0021      	movs	r1, r4
 8004d3a:	003a      	movs	r2, r7
 8004d3c:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <_vfiprintf_r+0x234>)
 8004d3e:	9803      	ldr	r0, [sp, #12]
 8004d40:	f000 f87c 	bl	8004e3c <_printf_i>
 8004d44:	e7e3      	b.n	8004d0e <_vfiprintf_r+0x1ea>
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	0800546f 	.word	0x0800546f
 8004d4c:	08005475 	.word	0x08005475
 8004d50:	08005479 	.word	0x08005479
 8004d54:	00000000 	.word	0x00000000
 8004d58:	08004b01 	.word	0x08004b01

08004d5c <_printf_common>:
 8004d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d5e:	0016      	movs	r6, r2
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	688a      	ldr	r2, [r1, #8]
 8004d64:	690b      	ldr	r3, [r1, #16]
 8004d66:	000c      	movs	r4, r1
 8004d68:	9000      	str	r0, [sp, #0]
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	da00      	bge.n	8004d70 <_printf_common+0x14>
 8004d6e:	0013      	movs	r3, r2
 8004d70:	0022      	movs	r2, r4
 8004d72:	6033      	str	r3, [r6, #0]
 8004d74:	3243      	adds	r2, #67	@ 0x43
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	d001      	beq.n	8004d80 <_printf_common+0x24>
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	069b      	lsls	r3, r3, #26
 8004d84:	d502      	bpl.n	8004d8c <_printf_common+0x30>
 8004d86:	6833      	ldr	r3, [r6, #0]
 8004d88:	3302      	adds	r3, #2
 8004d8a:	6033      	str	r3, [r6, #0]
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	2306      	movs	r3, #6
 8004d90:	0015      	movs	r5, r2
 8004d92:	401d      	ands	r5, r3
 8004d94:	421a      	tst	r2, r3
 8004d96:	d027      	beq.n	8004de8 <_printf_common+0x8c>
 8004d98:	0023      	movs	r3, r4
 8004d9a:	3343      	adds	r3, #67	@ 0x43
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	1e5a      	subs	r2, r3, #1
 8004da0:	4193      	sbcs	r3, r2
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	0692      	lsls	r2, r2, #26
 8004da6:	d430      	bmi.n	8004e0a <_printf_common+0xae>
 8004da8:	0022      	movs	r2, r4
 8004daa:	9901      	ldr	r1, [sp, #4]
 8004dac:	9800      	ldr	r0, [sp, #0]
 8004dae:	9d08      	ldr	r5, [sp, #32]
 8004db0:	3243      	adds	r2, #67	@ 0x43
 8004db2:	47a8      	blx	r5
 8004db4:	3001      	adds	r0, #1
 8004db6:	d025      	beq.n	8004e04 <_printf_common+0xa8>
 8004db8:	2206      	movs	r2, #6
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	2500      	movs	r5, #0
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d105      	bne.n	8004dd0 <_printf_common+0x74>
 8004dc4:	6833      	ldr	r3, [r6, #0]
 8004dc6:	68e5      	ldr	r5, [r4, #12]
 8004dc8:	1aed      	subs	r5, r5, r3
 8004dca:	43eb      	mvns	r3, r5
 8004dcc:	17db      	asrs	r3, r3, #31
 8004dce:	401d      	ands	r5, r3
 8004dd0:	68a3      	ldr	r3, [r4, #8]
 8004dd2:	6922      	ldr	r2, [r4, #16]
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	dd01      	ble.n	8004ddc <_printf_common+0x80>
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	18ed      	adds	r5, r5, r3
 8004ddc:	2600      	movs	r6, #0
 8004dde:	42b5      	cmp	r5, r6
 8004de0:	d120      	bne.n	8004e24 <_printf_common+0xc8>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e010      	b.n	8004e08 <_printf_common+0xac>
 8004de6:	3501      	adds	r5, #1
 8004de8:	68e3      	ldr	r3, [r4, #12]
 8004dea:	6832      	ldr	r2, [r6, #0]
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	42ab      	cmp	r3, r5
 8004df0:	ddd2      	ble.n	8004d98 <_printf_common+0x3c>
 8004df2:	0022      	movs	r2, r4
 8004df4:	2301      	movs	r3, #1
 8004df6:	9901      	ldr	r1, [sp, #4]
 8004df8:	9800      	ldr	r0, [sp, #0]
 8004dfa:	9f08      	ldr	r7, [sp, #32]
 8004dfc:	3219      	adds	r2, #25
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	d1f0      	bne.n	8004de6 <_printf_common+0x8a>
 8004e04:	2001      	movs	r0, #1
 8004e06:	4240      	negs	r0, r0
 8004e08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e0a:	2030      	movs	r0, #48	@ 0x30
 8004e0c:	18e1      	adds	r1, r4, r3
 8004e0e:	3143      	adds	r1, #67	@ 0x43
 8004e10:	7008      	strb	r0, [r1, #0]
 8004e12:	0021      	movs	r1, r4
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	3145      	adds	r1, #69	@ 0x45
 8004e18:	7809      	ldrb	r1, [r1, #0]
 8004e1a:	18a2      	adds	r2, r4, r2
 8004e1c:	3243      	adds	r2, #67	@ 0x43
 8004e1e:	3302      	adds	r3, #2
 8004e20:	7011      	strb	r1, [r2, #0]
 8004e22:	e7c1      	b.n	8004da8 <_printf_common+0x4c>
 8004e24:	0022      	movs	r2, r4
 8004e26:	2301      	movs	r3, #1
 8004e28:	9901      	ldr	r1, [sp, #4]
 8004e2a:	9800      	ldr	r0, [sp, #0]
 8004e2c:	9f08      	ldr	r7, [sp, #32]
 8004e2e:	321a      	adds	r2, #26
 8004e30:	47b8      	blx	r7
 8004e32:	3001      	adds	r0, #1
 8004e34:	d0e6      	beq.n	8004e04 <_printf_common+0xa8>
 8004e36:	3601      	adds	r6, #1
 8004e38:	e7d1      	b.n	8004dde <_printf_common+0x82>
	...

08004e3c <_printf_i>:
 8004e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e3e:	b08b      	sub	sp, #44	@ 0x2c
 8004e40:	9206      	str	r2, [sp, #24]
 8004e42:	000a      	movs	r2, r1
 8004e44:	3243      	adds	r2, #67	@ 0x43
 8004e46:	9307      	str	r3, [sp, #28]
 8004e48:	9005      	str	r0, [sp, #20]
 8004e4a:	9203      	str	r2, [sp, #12]
 8004e4c:	7e0a      	ldrb	r2, [r1, #24]
 8004e4e:	000c      	movs	r4, r1
 8004e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e52:	2a78      	cmp	r2, #120	@ 0x78
 8004e54:	d809      	bhi.n	8004e6a <_printf_i+0x2e>
 8004e56:	2a62      	cmp	r2, #98	@ 0x62
 8004e58:	d80b      	bhi.n	8004e72 <_printf_i+0x36>
 8004e5a:	2a00      	cmp	r2, #0
 8004e5c:	d100      	bne.n	8004e60 <_printf_i+0x24>
 8004e5e:	e0bc      	b.n	8004fda <_printf_i+0x19e>
 8004e60:	497b      	ldr	r1, [pc, #492]	@ (8005050 <_printf_i+0x214>)
 8004e62:	9104      	str	r1, [sp, #16]
 8004e64:	2a58      	cmp	r2, #88	@ 0x58
 8004e66:	d100      	bne.n	8004e6a <_printf_i+0x2e>
 8004e68:	e090      	b.n	8004f8c <_printf_i+0x150>
 8004e6a:	0025      	movs	r5, r4
 8004e6c:	3542      	adds	r5, #66	@ 0x42
 8004e6e:	702a      	strb	r2, [r5, #0]
 8004e70:	e022      	b.n	8004eb8 <_printf_i+0x7c>
 8004e72:	0010      	movs	r0, r2
 8004e74:	3863      	subs	r0, #99	@ 0x63
 8004e76:	2815      	cmp	r0, #21
 8004e78:	d8f7      	bhi.n	8004e6a <_printf_i+0x2e>
 8004e7a:	f7fb f945 	bl	8000108 <__gnu_thumb1_case_shi>
 8004e7e:	0016      	.short	0x0016
 8004e80:	fff6001f 	.word	0xfff6001f
 8004e84:	fff6fff6 	.word	0xfff6fff6
 8004e88:	001ffff6 	.word	0x001ffff6
 8004e8c:	fff6fff6 	.word	0xfff6fff6
 8004e90:	fff6fff6 	.word	0xfff6fff6
 8004e94:	003600a1 	.word	0x003600a1
 8004e98:	fff60080 	.word	0xfff60080
 8004e9c:	00b2fff6 	.word	0x00b2fff6
 8004ea0:	0036fff6 	.word	0x0036fff6
 8004ea4:	fff6fff6 	.word	0xfff6fff6
 8004ea8:	0084      	.short	0x0084
 8004eaa:	0025      	movs	r5, r4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	3542      	adds	r5, #66	@ 0x42
 8004eb0:	1d11      	adds	r1, r2, #4
 8004eb2:	6019      	str	r1, [r3, #0]
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	702b      	strb	r3, [r5, #0]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0a0      	b.n	8004ffe <_printf_i+0x1c2>
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	6809      	ldr	r1, [r1, #0]
 8004ec0:	1d02      	adds	r2, r0, #4
 8004ec2:	060d      	lsls	r5, r1, #24
 8004ec4:	d50b      	bpl.n	8004ede <_printf_i+0xa2>
 8004ec6:	6806      	ldr	r6, [r0, #0]
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	2e00      	cmp	r6, #0
 8004ecc:	da03      	bge.n	8004ed6 <_printf_i+0x9a>
 8004ece:	232d      	movs	r3, #45	@ 0x2d
 8004ed0:	9a03      	ldr	r2, [sp, #12]
 8004ed2:	4276      	negs	r6, r6
 8004ed4:	7013      	strb	r3, [r2, #0]
 8004ed6:	4b5e      	ldr	r3, [pc, #376]	@ (8005050 <_printf_i+0x214>)
 8004ed8:	270a      	movs	r7, #10
 8004eda:	9304      	str	r3, [sp, #16]
 8004edc:	e018      	b.n	8004f10 <_printf_i+0xd4>
 8004ede:	6806      	ldr	r6, [r0, #0]
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	0649      	lsls	r1, r1, #25
 8004ee4:	d5f1      	bpl.n	8004eca <_printf_i+0x8e>
 8004ee6:	b236      	sxth	r6, r6
 8004ee8:	e7ef      	b.n	8004eca <_printf_i+0x8e>
 8004eea:	6808      	ldr	r0, [r1, #0]
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	c940      	ldmia	r1!, {r6}
 8004ef0:	0605      	lsls	r5, r0, #24
 8004ef2:	d402      	bmi.n	8004efa <_printf_i+0xbe>
 8004ef4:	0640      	lsls	r0, r0, #25
 8004ef6:	d500      	bpl.n	8004efa <_printf_i+0xbe>
 8004ef8:	b2b6      	uxth	r6, r6
 8004efa:	6019      	str	r1, [r3, #0]
 8004efc:	4b54      	ldr	r3, [pc, #336]	@ (8005050 <_printf_i+0x214>)
 8004efe:	270a      	movs	r7, #10
 8004f00:	9304      	str	r3, [sp, #16]
 8004f02:	2a6f      	cmp	r2, #111	@ 0x6f
 8004f04:	d100      	bne.n	8004f08 <_printf_i+0xcc>
 8004f06:	3f02      	subs	r7, #2
 8004f08:	0023      	movs	r3, r4
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	3343      	adds	r3, #67	@ 0x43
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	6863      	ldr	r3, [r4, #4]
 8004f12:	60a3      	str	r3, [r4, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	db03      	blt.n	8004f20 <_printf_i+0xe4>
 8004f18:	2104      	movs	r1, #4
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	438a      	bics	r2, r1
 8004f1e:	6022      	str	r2, [r4, #0]
 8004f20:	2e00      	cmp	r6, #0
 8004f22:	d102      	bne.n	8004f2a <_printf_i+0xee>
 8004f24:	9d03      	ldr	r5, [sp, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00c      	beq.n	8004f44 <_printf_i+0x108>
 8004f2a:	9d03      	ldr	r5, [sp, #12]
 8004f2c:	0030      	movs	r0, r6
 8004f2e:	0039      	movs	r1, r7
 8004f30:	f7fb f97a 	bl	8000228 <__aeabi_uidivmod>
 8004f34:	9b04      	ldr	r3, [sp, #16]
 8004f36:	3d01      	subs	r5, #1
 8004f38:	5c5b      	ldrb	r3, [r3, r1]
 8004f3a:	702b      	strb	r3, [r5, #0]
 8004f3c:	0033      	movs	r3, r6
 8004f3e:	0006      	movs	r6, r0
 8004f40:	429f      	cmp	r7, r3
 8004f42:	d9f3      	bls.n	8004f2c <_printf_i+0xf0>
 8004f44:	2f08      	cmp	r7, #8
 8004f46:	d109      	bne.n	8004f5c <_printf_i+0x120>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	07db      	lsls	r3, r3, #31
 8004f4c:	d506      	bpl.n	8004f5c <_printf_i+0x120>
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	dc02      	bgt.n	8004f5c <_printf_i+0x120>
 8004f56:	2330      	movs	r3, #48	@ 0x30
 8004f58:	3d01      	subs	r5, #1
 8004f5a:	702b      	strb	r3, [r5, #0]
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	1b5b      	subs	r3, r3, r5
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	9b07      	ldr	r3, [sp, #28]
 8004f64:	0021      	movs	r1, r4
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	9805      	ldr	r0, [sp, #20]
 8004f6a:	9b06      	ldr	r3, [sp, #24]
 8004f6c:	aa09      	add	r2, sp, #36	@ 0x24
 8004f6e:	f7ff fef5 	bl	8004d5c <_printf_common>
 8004f72:	3001      	adds	r0, #1
 8004f74:	d148      	bne.n	8005008 <_printf_i+0x1cc>
 8004f76:	2001      	movs	r0, #1
 8004f78:	4240      	negs	r0, r0
 8004f7a:	b00b      	add	sp, #44	@ 0x2c
 8004f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7e:	2220      	movs	r2, #32
 8004f80:	6809      	ldr	r1, [r1, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	6022      	str	r2, [r4, #0]
 8004f86:	2278      	movs	r2, #120	@ 0x78
 8004f88:	4932      	ldr	r1, [pc, #200]	@ (8005054 <_printf_i+0x218>)
 8004f8a:	9104      	str	r1, [sp, #16]
 8004f8c:	0021      	movs	r1, r4
 8004f8e:	3145      	adds	r1, #69	@ 0x45
 8004f90:	700a      	strb	r2, [r1, #0]
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	c940      	ldmia	r1!, {r6}
 8004f98:	0610      	lsls	r0, r2, #24
 8004f9a:	d402      	bmi.n	8004fa2 <_printf_i+0x166>
 8004f9c:	0650      	lsls	r0, r2, #25
 8004f9e:	d500      	bpl.n	8004fa2 <_printf_i+0x166>
 8004fa0:	b2b6      	uxth	r6, r6
 8004fa2:	6019      	str	r1, [r3, #0]
 8004fa4:	07d3      	lsls	r3, r2, #31
 8004fa6:	d502      	bpl.n	8004fae <_printf_i+0x172>
 8004fa8:	2320      	movs	r3, #32
 8004faa:	4313      	orrs	r3, r2
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d001      	beq.n	8004fb6 <_printf_i+0x17a>
 8004fb2:	2710      	movs	r7, #16
 8004fb4:	e7a8      	b.n	8004f08 <_printf_i+0xcc>
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	4393      	bics	r3, r2
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	e7f8      	b.n	8004fb2 <_printf_i+0x176>
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	680d      	ldr	r5, [r1, #0]
 8004fc4:	1d10      	adds	r0, r2, #4
 8004fc6:	6949      	ldr	r1, [r1, #20]
 8004fc8:	6018      	str	r0, [r3, #0]
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	062e      	lsls	r6, r5, #24
 8004fce:	d501      	bpl.n	8004fd4 <_printf_i+0x198>
 8004fd0:	6019      	str	r1, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <_printf_i+0x19e>
 8004fd4:	066d      	lsls	r5, r5, #25
 8004fd6:	d5fb      	bpl.n	8004fd0 <_printf_i+0x194>
 8004fd8:	8019      	strh	r1, [r3, #0]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9d03      	ldr	r5, [sp, #12]
 8004fde:	6123      	str	r3, [r4, #16]
 8004fe0:	e7bf      	b.n	8004f62 <_printf_i+0x126>
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	1d11      	adds	r1, r2, #4
 8004fe6:	6019      	str	r1, [r3, #0]
 8004fe8:	6815      	ldr	r5, [r2, #0]
 8004fea:	2100      	movs	r1, #0
 8004fec:	0028      	movs	r0, r5
 8004fee:	6862      	ldr	r2, [r4, #4]
 8004ff0:	f000 f91c 	bl	800522c <memchr>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d001      	beq.n	8004ffc <_printf_i+0x1c0>
 8004ff8:	1b40      	subs	r0, r0, r5
 8004ffa:	6060      	str	r0, [r4, #4]
 8004ffc:	6863      	ldr	r3, [r4, #4]
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	2300      	movs	r3, #0
 8005002:	9a03      	ldr	r2, [sp, #12]
 8005004:	7013      	strb	r3, [r2, #0]
 8005006:	e7ac      	b.n	8004f62 <_printf_i+0x126>
 8005008:	002a      	movs	r2, r5
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	9906      	ldr	r1, [sp, #24]
 800500e:	9805      	ldr	r0, [sp, #20]
 8005010:	9d07      	ldr	r5, [sp, #28]
 8005012:	47a8      	blx	r5
 8005014:	3001      	adds	r0, #1
 8005016:	d0ae      	beq.n	8004f76 <_printf_i+0x13a>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	079b      	lsls	r3, r3, #30
 800501c:	d415      	bmi.n	800504a <_printf_i+0x20e>
 800501e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005020:	68e0      	ldr	r0, [r4, #12]
 8005022:	4298      	cmp	r0, r3
 8005024:	daa9      	bge.n	8004f7a <_printf_i+0x13e>
 8005026:	0018      	movs	r0, r3
 8005028:	e7a7      	b.n	8004f7a <_printf_i+0x13e>
 800502a:	0022      	movs	r2, r4
 800502c:	2301      	movs	r3, #1
 800502e:	9906      	ldr	r1, [sp, #24]
 8005030:	9805      	ldr	r0, [sp, #20]
 8005032:	9e07      	ldr	r6, [sp, #28]
 8005034:	3219      	adds	r2, #25
 8005036:	47b0      	blx	r6
 8005038:	3001      	adds	r0, #1
 800503a:	d09c      	beq.n	8004f76 <_printf_i+0x13a>
 800503c:	3501      	adds	r5, #1
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	42ab      	cmp	r3, r5
 8005046:	dcf0      	bgt.n	800502a <_printf_i+0x1ee>
 8005048:	e7e9      	b.n	800501e <_printf_i+0x1e2>
 800504a:	2500      	movs	r5, #0
 800504c:	e7f7      	b.n	800503e <_printf_i+0x202>
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	08005480 	.word	0x08005480
 8005054:	08005491 	.word	0x08005491

08005058 <__swbuf_r>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	0006      	movs	r6, r0
 800505c:	000d      	movs	r5, r1
 800505e:	0014      	movs	r4, r2
 8005060:	2800      	cmp	r0, #0
 8005062:	d004      	beq.n	800506e <__swbuf_r+0x16>
 8005064:	6a03      	ldr	r3, [r0, #32]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <__swbuf_r+0x16>
 800506a:	f7ff fa31 	bl	80044d0 <__sinit>
 800506e:	69a3      	ldr	r3, [r4, #24]
 8005070:	60a3      	str	r3, [r4, #8]
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	071b      	lsls	r3, r3, #28
 8005076:	d502      	bpl.n	800507e <__swbuf_r+0x26>
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <__swbuf_r+0x3a>
 800507e:	0021      	movs	r1, r4
 8005080:	0030      	movs	r0, r6
 8005082:	f000 f82b 	bl	80050dc <__swsetup_r>
 8005086:	2800      	cmp	r0, #0
 8005088:	d003      	beq.n	8005092 <__swbuf_r+0x3a>
 800508a:	2501      	movs	r5, #1
 800508c:	426d      	negs	r5, r5
 800508e:	0028      	movs	r0, r5
 8005090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005092:	6923      	ldr	r3, [r4, #16]
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	b2ef      	uxtb	r7, r5
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	6963      	ldr	r3, [r4, #20]
 800509c:	b2ed      	uxtb	r5, r5
 800509e:	4283      	cmp	r3, r0
 80050a0:	dc05      	bgt.n	80050ae <__swbuf_r+0x56>
 80050a2:	0021      	movs	r1, r4
 80050a4:	0030      	movs	r0, r6
 80050a6:	f7ff fcc1 	bl	8004a2c <_fflush_r>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d1ed      	bne.n	800508a <__swbuf_r+0x32>
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	3001      	adds	r0, #1
 80050b2:	3b01      	subs	r3, #1
 80050b4:	60a3      	str	r3, [r4, #8]
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	6022      	str	r2, [r4, #0]
 80050bc:	701f      	strb	r7, [r3, #0]
 80050be:	6963      	ldr	r3, [r4, #20]
 80050c0:	4283      	cmp	r3, r0
 80050c2:	d004      	beq.n	80050ce <__swbuf_r+0x76>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	07db      	lsls	r3, r3, #31
 80050c8:	d5e1      	bpl.n	800508e <__swbuf_r+0x36>
 80050ca:	2d0a      	cmp	r5, #10
 80050cc:	d1df      	bne.n	800508e <__swbuf_r+0x36>
 80050ce:	0021      	movs	r1, r4
 80050d0:	0030      	movs	r0, r6
 80050d2:	f7ff fcab 	bl	8004a2c <_fflush_r>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d0d9      	beq.n	800508e <__swbuf_r+0x36>
 80050da:	e7d6      	b.n	800508a <__swbuf_r+0x32>

080050dc <__swsetup_r>:
 80050dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005194 <__swsetup_r+0xb8>)
 80050de:	b570      	push	{r4, r5, r6, lr}
 80050e0:	0005      	movs	r5, r0
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	000c      	movs	r4, r1
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d004      	beq.n	80050f4 <__swsetup_r+0x18>
 80050ea:	6a03      	ldr	r3, [r0, #32]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <__swsetup_r+0x18>
 80050f0:	f7ff f9ee 	bl	80044d0 <__sinit>
 80050f4:	230c      	movs	r3, #12
 80050f6:	5ee2      	ldrsh	r2, [r4, r3]
 80050f8:	0713      	lsls	r3, r2, #28
 80050fa:	d423      	bmi.n	8005144 <__swsetup_r+0x68>
 80050fc:	06d3      	lsls	r3, r2, #27
 80050fe:	d407      	bmi.n	8005110 <__swsetup_r+0x34>
 8005100:	2309      	movs	r3, #9
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	2340      	movs	r3, #64	@ 0x40
 8005106:	2001      	movs	r0, #1
 8005108:	4313      	orrs	r3, r2
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	4240      	negs	r0, r0
 800510e:	e03a      	b.n	8005186 <__swsetup_r+0xaa>
 8005110:	0752      	lsls	r2, r2, #29
 8005112:	d513      	bpl.n	800513c <__swsetup_r+0x60>
 8005114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005116:	2900      	cmp	r1, #0
 8005118:	d008      	beq.n	800512c <__swsetup_r+0x50>
 800511a:	0023      	movs	r3, r4
 800511c:	3344      	adds	r3, #68	@ 0x44
 800511e:	4299      	cmp	r1, r3
 8005120:	d002      	beq.n	8005128 <__swsetup_r+0x4c>
 8005122:	0028      	movs	r0, r5
 8005124:	f7ff faf6 	bl	8004714 <_free_r>
 8005128:	2300      	movs	r3, #0
 800512a:	6363      	str	r3, [r4, #52]	@ 0x34
 800512c:	2224      	movs	r2, #36	@ 0x24
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	4393      	bics	r3, r2
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	2300      	movs	r3, #0
 8005136:	6063      	str	r3, [r4, #4]
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	2308      	movs	r3, #8
 800513e:	89a2      	ldrh	r2, [r4, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10b      	bne.n	8005162 <__swsetup_r+0x86>
 800514a:	21a0      	movs	r1, #160	@ 0xa0
 800514c:	2280      	movs	r2, #128	@ 0x80
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	0089      	lsls	r1, r1, #2
 8005152:	0092      	lsls	r2, r2, #2
 8005154:	400b      	ands	r3, r1
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <__swsetup_r+0x86>
 800515a:	0021      	movs	r1, r4
 800515c:	0028      	movs	r0, r5
 800515e:	f000 f89b 	bl	8005298 <__smakebuf_r>
 8005162:	230c      	movs	r3, #12
 8005164:	5ee2      	ldrsh	r2, [r4, r3]
 8005166:	2101      	movs	r1, #1
 8005168:	0013      	movs	r3, r2
 800516a:	400b      	ands	r3, r1
 800516c:	420a      	tst	r2, r1
 800516e:	d00b      	beq.n	8005188 <__swsetup_r+0xac>
 8005170:	2300      	movs	r3, #0
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	6963      	ldr	r3, [r4, #20]
 8005176:	425b      	negs	r3, r3
 8005178:	61a3      	str	r3, [r4, #24]
 800517a:	2000      	movs	r0, #0
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	4283      	cmp	r3, r0
 8005180:	d101      	bne.n	8005186 <__swsetup_r+0xaa>
 8005182:	0613      	lsls	r3, r2, #24
 8005184:	d4be      	bmi.n	8005104 <__swsetup_r+0x28>
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	0791      	lsls	r1, r2, #30
 800518a:	d400      	bmi.n	800518e <__swsetup_r+0xb2>
 800518c:	6963      	ldr	r3, [r4, #20]
 800518e:	60a3      	str	r3, [r4, #8]
 8005190:	e7f3      	b.n	800517a <__swsetup_r+0x9e>
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	20000120 	.word	0x20000120

08005198 <_raise_r>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	0004      	movs	r4, r0
 800519c:	000d      	movs	r5, r1
 800519e:	291f      	cmp	r1, #31
 80051a0:	d904      	bls.n	80051ac <_raise_r+0x14>
 80051a2:	2316      	movs	r3, #22
 80051a4:	6003      	str	r3, [r0, #0]
 80051a6:	2001      	movs	r0, #1
 80051a8:	4240      	negs	r0, r0
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <_raise_r+0x24>
 80051b2:	008a      	lsls	r2, r1, #2
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d108      	bne.n	80051ce <_raise_r+0x36>
 80051bc:	0020      	movs	r0, r4
 80051be:	f000 f831 	bl	8005224 <_getpid_r>
 80051c2:	002a      	movs	r2, r5
 80051c4:	0001      	movs	r1, r0
 80051c6:	0020      	movs	r0, r4
 80051c8:	f000 f81a 	bl	8005200 <_kill_r>
 80051cc:	e7ed      	b.n	80051aa <_raise_r+0x12>
 80051ce:	2a01      	cmp	r2, #1
 80051d0:	d009      	beq.n	80051e6 <_raise_r+0x4e>
 80051d2:	1c51      	adds	r1, r2, #1
 80051d4:	d103      	bne.n	80051de <_raise_r+0x46>
 80051d6:	2316      	movs	r3, #22
 80051d8:	6003      	str	r3, [r0, #0]
 80051da:	2001      	movs	r0, #1
 80051dc:	e7e5      	b.n	80051aa <_raise_r+0x12>
 80051de:	2100      	movs	r1, #0
 80051e0:	0028      	movs	r0, r5
 80051e2:	6019      	str	r1, [r3, #0]
 80051e4:	4790      	blx	r2
 80051e6:	2000      	movs	r0, #0
 80051e8:	e7df      	b.n	80051aa <_raise_r+0x12>
	...

080051ec <raise>:
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4b03      	ldr	r3, [pc, #12]	@ (80051fc <raise+0x10>)
 80051f0:	0001      	movs	r1, r0
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	f7ff ffd0 	bl	8005198 <_raise_r>
 80051f8:	bd10      	pop	{r4, pc}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	20000120 	.word	0x20000120

08005200 <_kill_r>:
 8005200:	2300      	movs	r3, #0
 8005202:	b570      	push	{r4, r5, r6, lr}
 8005204:	4d06      	ldr	r5, [pc, #24]	@ (8005220 <_kill_r+0x20>)
 8005206:	0004      	movs	r4, r0
 8005208:	0008      	movs	r0, r1
 800520a:	0011      	movs	r1, r2
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	f7fb ff79 	bl	8001104 <_kill>
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	d103      	bne.n	800521e <_kill_r+0x1e>
 8005216:	682b      	ldr	r3, [r5, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d000      	beq.n	800521e <_kill_r+0x1e>
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	200005f8 	.word	0x200005f8

08005224 <_getpid_r>:
 8005224:	b510      	push	{r4, lr}
 8005226:	f7fb ff67 	bl	80010f8 <_getpid>
 800522a:	bd10      	pop	{r4, pc}

0800522c <memchr>:
 800522c:	b2c9      	uxtb	r1, r1
 800522e:	1882      	adds	r2, r0, r2
 8005230:	4290      	cmp	r0, r2
 8005232:	d101      	bne.n	8005238 <memchr+0xc>
 8005234:	2000      	movs	r0, #0
 8005236:	4770      	bx	lr
 8005238:	7803      	ldrb	r3, [r0, #0]
 800523a:	428b      	cmp	r3, r1
 800523c:	d0fb      	beq.n	8005236 <memchr+0xa>
 800523e:	3001      	adds	r0, #1
 8005240:	e7f6      	b.n	8005230 <memchr+0x4>
	...

08005244 <__swhatbuf_r>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	000e      	movs	r6, r1
 8005248:	001d      	movs	r5, r3
 800524a:	230e      	movs	r3, #14
 800524c:	5ec9      	ldrsh	r1, [r1, r3]
 800524e:	0014      	movs	r4, r2
 8005250:	b096      	sub	sp, #88	@ 0x58
 8005252:	2900      	cmp	r1, #0
 8005254:	da0c      	bge.n	8005270 <__swhatbuf_r+0x2c>
 8005256:	89b2      	ldrh	r2, [r6, #12]
 8005258:	2380      	movs	r3, #128	@ 0x80
 800525a:	0011      	movs	r1, r2
 800525c:	4019      	ands	r1, r3
 800525e:	421a      	tst	r2, r3
 8005260:	d114      	bne.n	800528c <__swhatbuf_r+0x48>
 8005262:	2380      	movs	r3, #128	@ 0x80
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	2000      	movs	r0, #0
 8005268:	6029      	str	r1, [r5, #0]
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	b016      	add	sp, #88	@ 0x58
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	466a      	mov	r2, sp
 8005272:	f000 f853 	bl	800531c <_fstat_r>
 8005276:	2800      	cmp	r0, #0
 8005278:	dbed      	blt.n	8005256 <__swhatbuf_r+0x12>
 800527a:	23f0      	movs	r3, #240	@ 0xf0
 800527c:	9901      	ldr	r1, [sp, #4]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	4019      	ands	r1, r3
 8005282:	4b04      	ldr	r3, [pc, #16]	@ (8005294 <__swhatbuf_r+0x50>)
 8005284:	18c9      	adds	r1, r1, r3
 8005286:	424b      	negs	r3, r1
 8005288:	4159      	adcs	r1, r3
 800528a:	e7ea      	b.n	8005262 <__swhatbuf_r+0x1e>
 800528c:	2100      	movs	r1, #0
 800528e:	2340      	movs	r3, #64	@ 0x40
 8005290:	e7e9      	b.n	8005266 <__swhatbuf_r+0x22>
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	ffffe000 	.word	0xffffe000

08005298 <__smakebuf_r>:
 8005298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529a:	2602      	movs	r6, #2
 800529c:	898b      	ldrh	r3, [r1, #12]
 800529e:	0005      	movs	r5, r0
 80052a0:	000c      	movs	r4, r1
 80052a2:	b085      	sub	sp, #20
 80052a4:	4233      	tst	r3, r6
 80052a6:	d007      	beq.n	80052b8 <__smakebuf_r+0x20>
 80052a8:	0023      	movs	r3, r4
 80052aa:	3347      	adds	r3, #71	@ 0x47
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	2301      	movs	r3, #1
 80052b2:	6163      	str	r3, [r4, #20]
 80052b4:	b005      	add	sp, #20
 80052b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b8:	ab03      	add	r3, sp, #12
 80052ba:	aa02      	add	r2, sp, #8
 80052bc:	f7ff ffc2 	bl	8005244 <__swhatbuf_r>
 80052c0:	9f02      	ldr	r7, [sp, #8]
 80052c2:	9001      	str	r0, [sp, #4]
 80052c4:	0039      	movs	r1, r7
 80052c6:	0028      	movs	r0, r5
 80052c8:	f7ff fa9a 	bl	8004800 <_malloc_r>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d108      	bne.n	80052e2 <__smakebuf_r+0x4a>
 80052d0:	220c      	movs	r2, #12
 80052d2:	5ea3      	ldrsh	r3, [r4, r2]
 80052d4:	059a      	lsls	r2, r3, #22
 80052d6:	d4ed      	bmi.n	80052b4 <__smakebuf_r+0x1c>
 80052d8:	2203      	movs	r2, #3
 80052da:	4393      	bics	r3, r2
 80052dc:	431e      	orrs	r6, r3
 80052de:	81a6      	strh	r6, [r4, #12]
 80052e0:	e7e2      	b.n	80052a8 <__smakebuf_r+0x10>
 80052e2:	2380      	movs	r3, #128	@ 0x80
 80052e4:	89a2      	ldrh	r2, [r4, #12]
 80052e6:	6020      	str	r0, [r4, #0]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	6120      	str	r0, [r4, #16]
 80052f0:	6167      	str	r7, [r4, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00c      	beq.n	8005310 <__smakebuf_r+0x78>
 80052f6:	0028      	movs	r0, r5
 80052f8:	230e      	movs	r3, #14
 80052fa:	5ee1      	ldrsh	r1, [r4, r3]
 80052fc:	f000 f820 	bl	8005340 <_isatty_r>
 8005300:	2800      	cmp	r0, #0
 8005302:	d005      	beq.n	8005310 <__smakebuf_r+0x78>
 8005304:	2303      	movs	r3, #3
 8005306:	89a2      	ldrh	r2, [r4, #12]
 8005308:	439a      	bics	r2, r3
 800530a:	3b02      	subs	r3, #2
 800530c:	4313      	orrs	r3, r2
 800530e:	81a3      	strh	r3, [r4, #12]
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	9a01      	ldr	r2, [sp, #4]
 8005314:	4313      	orrs	r3, r2
 8005316:	81a3      	strh	r3, [r4, #12]
 8005318:	e7cc      	b.n	80052b4 <__smakebuf_r+0x1c>
	...

0800531c <_fstat_r>:
 800531c:	2300      	movs	r3, #0
 800531e:	b570      	push	{r4, r5, r6, lr}
 8005320:	4d06      	ldr	r5, [pc, #24]	@ (800533c <_fstat_r+0x20>)
 8005322:	0004      	movs	r4, r0
 8005324:	0008      	movs	r0, r1
 8005326:	0011      	movs	r1, r2
 8005328:	602b      	str	r3, [r5, #0]
 800532a:	f7fb ff4b 	bl	80011c4 <_fstat>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	d103      	bne.n	800533a <_fstat_r+0x1e>
 8005332:	682b      	ldr	r3, [r5, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d000      	beq.n	800533a <_fstat_r+0x1e>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	200005f8 	.word	0x200005f8

08005340 <_isatty_r>:
 8005340:	2300      	movs	r3, #0
 8005342:	b570      	push	{r4, r5, r6, lr}
 8005344:	4d06      	ldr	r5, [pc, #24]	@ (8005360 <_isatty_r+0x20>)
 8005346:	0004      	movs	r4, r0
 8005348:	0008      	movs	r0, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	f7fb ff48 	bl	80011e0 <_isatty>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d103      	bne.n	800535c <_isatty_r+0x1c>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d000      	beq.n	800535c <_isatty_r+0x1c>
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	bd70      	pop	{r4, r5, r6, pc}
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	200005f8 	.word	0x200005f8

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
