import serial
import serial.tools.list_ports
import time

def create_dict_for_available_ports():

    ports = serial.tools.list_ports.comports()

    ports_dict = {}

    for port in ports:
        try:
            port_number = int(port.device.replace("COM", ""))
            ports_dict[port_number] = port.device
        except ValueError:
            pass
    return ports_dict


def get_port_for_connecting():

    available_ports = create_dict_for_available_ports()

    print("–î–æ—Å—Ç—É–ø–Ω—ñ COM-–ø–æ—Ä—Ç–∏:")
    for index, device in sorted(available_ports.items()):
        print(f"{index}: {device}")
    try:
        port = available_ports[int(input("üëâ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç—É: "))]
        return port
    except:
        print("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Ä—Ç—É")
        pass




def connecting_stm( message="Hello \n"):

    port = get_port_for_connecting()

    UART_PORT = port
    BAUDRATE = 9600
    TIMEOUT = 1

    try:
        ser = serial.Serial(UART_PORT, BAUDRATE, timeout=TIMEOUT)
        print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ {UART_PORT} –Ω–∞ {BAUDRATE} –±–æ–¥")

        if ser.is_open:
            try:
                message = message.encode()
                print(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞: {message}")

                ser.write(message)

                start_time = time.time()

                while True:
                    response = ser.readline()
                    if response:
                        print(f"–û—Ç—Ä–∏–º–∞–Ω–æ: {response.decode(errors='ignore').strip()}", ser.is_open)
                        break

                    if time.time() - start_time > 2:
                        print(f"–ü–æ—Ä—Ç {UART_PORT} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—ñ—Å–ª—è 2 —Å–µ–∫—É–Ω–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.")
                        ser.close()
                        break
            except:
                print(f"–ü–æ—Ä—Ç {UART_PORT} –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
                ser.close()
                pass

    except :
        print(f"–ü–æ—Ä—Ç {UART_PORT} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        pass

connecting_stm()
