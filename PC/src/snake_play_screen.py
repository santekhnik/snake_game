import pygame
import sys
import threading
import time
from frame_codec import STMProtocol
from settings import WIDTH, HEIGHT, CELL_SIZE, GRID_WIDTH, GRID_HEIGHT, FIELD_OFFSET_X, FIELD_OFFSET_Y
from button import back_button
from notification_manager import NotificationManager

protocol = STMProtocol()

class SnakePlayScreen:

    GRAY = (50, 50, 50)  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∏–π —Ñ–æ–Ω
    WHITE = (255, 255, 255)  # –ë—ñ–ª–∏–π –∫–æ–ª—ñ—Ä
    RED = (255, 0, 0)  # –ß–µ—Ä–≤–æ–Ω–∏–π (–∑–º—ñ–π–∫–∞)

    KEY_MAP = {
        pygame.K_w: 1,  # W -> –í–≤–µ—Ä—Ö
        pygame.K_s: 2,  # S -> –í–Ω–∏–∑
        pygame.K_a: 3,  # A -> –í–ª—ñ–≤–æ
        pygame.K_d: 4,  # D -> –í–ø—Ä–∞–≤–æ
        pygame.K_UP: 1,  # –°—Ç—Ä—ñ–ª–∫–∞ –≤–≤–µ—Ä—Ö
        pygame.K_DOWN: 2,  # –°—Ç—Ä—ñ–ª–∫–∞ –≤–Ω–∏–∑
        pygame.K_LEFT: 3,  # –°—Ç—Ä—ñ–ª–∫–∞ –≤–ª—ñ–≤–æ
        pygame.K_RIGHT: 4,  # –°—Ç—Ä—ñ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
        pygame.K_SPACE: 5  # –ü—Ä–æ–±—ñ–ª (–ø–∞—É–∑–∞)
    }

    def __init__(self, uart_conn):
        """–û—Ç—Ä–∏–º—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è UART –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.uart_conn = uart_conn
        self.protocol = STMProtocol()
        self.screen = pygame.display.set_mode((WIDTH, HEIGHT))
        self.running = True
        self.clock = pygame.time.Clock()

        self.notification_manager = NotificationManager()

        self.snake_positions = []  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–º—ñ–π–∫–∏
        self.frog_position = (0, 0)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∂–∞–±–∫–∏

        self.frog_image = pygame.image.load("assets/images/apple.png").convert_alpha() #–î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –∂–∞–±–æ–∫
        self.frog_image = pygame.transform.scale(self.frog_image, (1.1 * CELL_SIZE, 1.1 * CELL_SIZE))


        self.back_button = back_button

        # **–°—Ç–∞—Ä—Ç—É—î–º–æ –ø–æ—Ç—ñ–∫ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è UART**
        self.uart_thread = threading.Thread(target=self.read_uart_data, daemon=True)
        self.uart_thread.start()
        self.uart_conn.uart.write(protocol.encode_frame(3, 0))
        time.sleep(0.1)
        self.uart_conn.uart.write(protocol.encode_frame(3, 1))
        time.sleep(0.1)


    def read_uart_data(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑ UART, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –≥—Ä—É"""

        while self.running:

            data = self.uart_conn.read_packet()
            if data["status"] == "success":
                parsed_data = data["data"]
                self.snake_positions = parsed_data["payload"]
                self.frog_position = parsed_data["frog"]
                print(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ: {parsed_data}")

            time.sleep(0.1)  # –ú–∞–ª–µ–Ω—å–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

    def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –≥—Ä–∏"""
        while self.running:
            self.handle_events()
            self.draw()
            self.clock.tick(10)  # FPS

    def handle_events(self):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π"""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.quit_game()

    def draw(self):
        """–ú–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∏"""
        self.screen.fill(self.GRAY)  # –ß–æ—Ä–Ω–∏–π —Ñ–æ–Ω
        self.draw_grid()
        self.draw_snake()
        self.draw_frog()
        self.back_button.draw(self.screen) # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ —É main menu
        pygame.display.flip()

    def draw_grid(self):
        """–ú–∞–ª—é—î–º–æ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ —ñ –±—ñ–ª—É –æ–±–≤–æ–¥–∫—É"""
        dark_green = (50, 50, 20)

        # –ú–∞–ª—é—î–º–æ —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–µ –ø–æ–ª–µ
        field_rect = pygame.Rect(
            FIELD_OFFSET_X,
            FIELD_OFFSET_Y,
            GRID_WIDTH * CELL_SIZE,
            GRID_HEIGHT * CELL_SIZE
        )
        pygame.draw.rect(self.screen, dark_green, field_rect)

        # –ú–∞–ª—é—î–º–æ –±—ñ–ª—É –æ–±–≤–æ–¥–∫—É (—Ä–∞–º–∫—É) –Ω–∞–≤–∫–æ–ª–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        border_thickness = 3  # –¢–æ–≤—â–∏–Ω–∞ —Ä–∞–º–∫–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
        pygame.draw.rect(self.screen, self.WHITE, field_rect, border_thickness)

    def draw_snake(self):
        """–ú–∞–ª—é—î–º–æ –∑–º—ñ–π–∫—É –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º —ñ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–º–∏ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞–º–∏"""
        total_segments = len(self.snake_positions)
        for idx, segment in enumerate(self.snake_positions):
            x, y = segment
            x = x - 1
            y = y - 1

            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            rect = pygame.Rect(
                FIELD_OFFSET_X + x * CELL_SIZE,
                FIELD_OFFSET_Y + y * CELL_SIZE,
                CELL_SIZE, CELL_SIZE
            )

            # –ì—Ä–∞–¥—ñ—î–Ω—Ç –∫–æ–ª—å–æ—Ä—É (—á–µ—Ä–≤–æ–Ω–∏–π ‚Üí –∂–æ–≤—Ç–∏–π)
            if total_segments == 1:
                green_value = 0
            else:
                halfway = (total_segments - 1) / 2
                if idx <= halfway:
                    green_value = int(165 * idx / halfway)
                else:
                    green_value = int(165 + 90 * (idx - halfway) / halfway)

            green_value = max(0, min(255, green_value))
            color = (255, green_value, 0)

            # –ú–∞–ª—é—î–º–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ –∑ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–∏–º–∏ –∫—É—Ç–∞–º–∏
            pygame.draw.rect(self.screen, color, rect, border_radius=10)

    def draw_frog(self):
        """–ú–∞–ª—é—î–º–æ –∂–∞–±–∫—É-–∫–∞—Ä—Ç–∏–Ω–∫—É"""
        x, y = self.frog_position
        x = x - 1
        y = y - 1
        position = (
            FIELD_OFFSET_X + x * CELL_SIZE,
            FIELD_OFFSET_Y + y * CELL_SIZE
        )
        self.screen.blit(self.frog_image, position)

    def handle_events(self):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–º—ñ–π–∫–æ—é"""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.quit_game()

            if event.type == pygame.MOUSEBUTTONDOWN:
                if self.back_button.rect.collidepoint(event.pos):
                    self.back_to_menu()

            if event.type == pygame.KEYDOWN:
                if event.key in self.KEY_MAP:
                    command = self.KEY_MAP[event.key]
                    self.send_command_to_stm(command)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.quit_game()

            self.back_button.handle_event(event)

            if event.type == pygame.USEREVENT:
                if event.button == self.back_button:
                    self.back_to_menu()

            if event.type == pygame.KEYDOWN:
                if event.key in self.KEY_MAP:
                    command = self.KEY_MAP[event.key]
                    self.send_command_to_stm(command)

    def back_to_menu(self):
        self.running = False
        from main import MainMenu
        menu = MainMenu(existing_uart=self.uart_conn, existing_notif_manager=self.notification_manager)
        menu.run()

    def send_command_to_stm(self, command):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ STM"""
        if self.uart_conn and self.uart_conn.uart:
            self.uart_conn.uart.write(self.protocol.encode_frame(3, command))
            print(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥—É: {command}")

    def quit_game(self):
        """–í–∏—Ö—ñ–¥ –∑ –≥—Ä–∏"""
        self.running = False
        pygame.quit()
        sys.exit()
